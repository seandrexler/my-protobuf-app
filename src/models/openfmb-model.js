/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/minimal");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.reclosermodule = (function() {

    /**
     * Namespace reclosermodule.
     * @exports reclosermodule
     * @namespace
     */
    var reclosermodule = {};

    reclosermodule.RecloserControlFSCC = (function() {

        /**
         * Properties of a RecloserControlFSCC.
         * @memberof reclosermodule
         * @interface IRecloserControlFSCC
         * @property {commonmodule.ILogicalNodeForControl|null} [logicalNodeForControl] RecloserControlFSCC logicalNodeForControl
         * @property {commonmodule.ISwitchControlScheduleFSCH|null} [switchControlScheduleFSCH] RecloserControlFSCC switchControlScheduleFSCH
         */

        /**
         * Constructs a new RecloserControlFSCC.
         * @memberof reclosermodule
         * @classdesc Represents a RecloserControlFSCC.
         * @implements IRecloserControlFSCC
         * @constructor
         * @param {reclosermodule.IRecloserControlFSCC=} [properties] Properties to set
         */
        function RecloserControlFSCC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RecloserControlFSCC logicalNodeForControl.
         * @member {commonmodule.ILogicalNodeForControl|null|undefined} logicalNodeForControl
         * @memberof reclosermodule.RecloserControlFSCC
         * @instance
         */
        RecloserControlFSCC.prototype.logicalNodeForControl = null;

        /**
         * RecloserControlFSCC switchControlScheduleFSCH.
         * @member {commonmodule.ISwitchControlScheduleFSCH|null|undefined} switchControlScheduleFSCH
         * @memberof reclosermodule.RecloserControlFSCC
         * @instance
         */
        RecloserControlFSCC.prototype.switchControlScheduleFSCH = null;

        /**
         * Creates a new RecloserControlFSCC instance using the specified properties.
         * @function create
         * @memberof reclosermodule.RecloserControlFSCC
         * @static
         * @param {reclosermodule.IRecloserControlFSCC=} [properties] Properties to set
         * @returns {reclosermodule.RecloserControlFSCC} RecloserControlFSCC instance
         */
        RecloserControlFSCC.create = function create(properties) {
            return new RecloserControlFSCC(properties);
        };

        /**
         * Encodes the specified RecloserControlFSCC message. Does not implicitly {@link reclosermodule.RecloserControlFSCC.verify|verify} messages.
         * @function encode
         * @memberof reclosermodule.RecloserControlFSCC
         * @static
         * @param {reclosermodule.IRecloserControlFSCC} message RecloserControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserControlFSCC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForControl != null && Object.hasOwnProperty.call(message, "logicalNodeForControl"))
                $root.commonmodule.LogicalNodeForControl.encode(message.logicalNodeForControl, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.switchControlScheduleFSCH != null && Object.hasOwnProperty.call(message, "switchControlScheduleFSCH"))
                $root.commonmodule.SwitchControlScheduleFSCH.encode(message.switchControlScheduleFSCH, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RecloserControlFSCC message, length delimited. Does not implicitly {@link reclosermodule.RecloserControlFSCC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof reclosermodule.RecloserControlFSCC
         * @static
         * @param {reclosermodule.IRecloserControlFSCC} message RecloserControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserControlFSCC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RecloserControlFSCC message from the specified reader or buffer.
         * @function decode
         * @memberof reclosermodule.RecloserControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {reclosermodule.RecloserControlFSCC} RecloserControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserControlFSCC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.reclosermodule.RecloserControlFSCC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.switchControlScheduleFSCH = $root.commonmodule.SwitchControlScheduleFSCH.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RecloserControlFSCC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof reclosermodule.RecloserControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {reclosermodule.RecloserControlFSCC} RecloserControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserControlFSCC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RecloserControlFSCC message.
         * @function verify
         * @memberof reclosermodule.RecloserControlFSCC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RecloserControlFSCC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl")) {
                var error = $root.commonmodule.LogicalNodeForControl.verify(message.logicalNodeForControl);
                if (error)
                    return "logicalNodeForControl." + error;
            }
            if (message.switchControlScheduleFSCH != null && message.hasOwnProperty("switchControlScheduleFSCH")) {
                var error = $root.commonmodule.SwitchControlScheduleFSCH.verify(message.switchControlScheduleFSCH);
                if (error)
                    return "switchControlScheduleFSCH." + error;
            }
            return null;
        };

        /**
         * Creates a RecloserControlFSCC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof reclosermodule.RecloserControlFSCC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {reclosermodule.RecloserControlFSCC} RecloserControlFSCC
         */
        RecloserControlFSCC.fromObject = function fromObject(object) {
            if (object instanceof $root.reclosermodule.RecloserControlFSCC)
                return object;
            var message = new $root.reclosermodule.RecloserControlFSCC();
            if (object.logicalNodeForControl != null) {
                if (typeof object.logicalNodeForControl !== "object")
                    throw TypeError(".reclosermodule.RecloserControlFSCC.logicalNodeForControl: object expected");
                message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.fromObject(object.logicalNodeForControl);
            }
            if (object.switchControlScheduleFSCH != null) {
                if (typeof object.switchControlScheduleFSCH !== "object")
                    throw TypeError(".reclosermodule.RecloserControlFSCC.switchControlScheduleFSCH: object expected");
                message.switchControlScheduleFSCH = $root.commonmodule.SwitchControlScheduleFSCH.fromObject(object.switchControlScheduleFSCH);
            }
            return message;
        };

        /**
         * Creates a plain object from a RecloserControlFSCC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof reclosermodule.RecloserControlFSCC
         * @static
         * @param {reclosermodule.RecloserControlFSCC} message RecloserControlFSCC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RecloserControlFSCC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForControl = null;
                object.switchControlScheduleFSCH = null;
            }
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl"))
                object.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.toObject(message.logicalNodeForControl, options);
            if (message.switchControlScheduleFSCH != null && message.hasOwnProperty("switchControlScheduleFSCH"))
                object.switchControlScheduleFSCH = $root.commonmodule.SwitchControlScheduleFSCH.toObject(message.switchControlScheduleFSCH, options);
            return object;
        };

        /**
         * Converts this RecloserControlFSCC to JSON.
         * @function toJSON
         * @memberof reclosermodule.RecloserControlFSCC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RecloserControlFSCC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RecloserControlFSCC;
    })();

    reclosermodule.RecloserControl = (function() {

        /**
         * Properties of a RecloserControl.
         * @memberof reclosermodule
         * @interface IRecloserControl
         * @property {commonmodule.IControlValue|null} [controlValue] RecloserControl controlValue
         * @property {commonmodule.ICheckConditions|null} [check] RecloserControl check
         * @property {reclosermodule.IRecloserControlFSCC|null} [recloserControlFSCC] RecloserControl recloserControlFSCC
         */

        /**
         * Constructs a new RecloserControl.
         * @memberof reclosermodule
         * @classdesc Represents a RecloserControl.
         * @implements IRecloserControl
         * @constructor
         * @param {reclosermodule.IRecloserControl=} [properties] Properties to set
         */
        function RecloserControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RecloserControl controlValue.
         * @member {commonmodule.IControlValue|null|undefined} controlValue
         * @memberof reclosermodule.RecloserControl
         * @instance
         */
        RecloserControl.prototype.controlValue = null;

        /**
         * RecloserControl check.
         * @member {commonmodule.ICheckConditions|null|undefined} check
         * @memberof reclosermodule.RecloserControl
         * @instance
         */
        RecloserControl.prototype.check = null;

        /**
         * RecloserControl recloserControlFSCC.
         * @member {reclosermodule.IRecloserControlFSCC|null|undefined} recloserControlFSCC
         * @memberof reclosermodule.RecloserControl
         * @instance
         */
        RecloserControl.prototype.recloserControlFSCC = null;

        /**
         * Creates a new RecloserControl instance using the specified properties.
         * @function create
         * @memberof reclosermodule.RecloserControl
         * @static
         * @param {reclosermodule.IRecloserControl=} [properties] Properties to set
         * @returns {reclosermodule.RecloserControl} RecloserControl instance
         */
        RecloserControl.create = function create(properties) {
            return new RecloserControl(properties);
        };

        /**
         * Encodes the specified RecloserControl message. Does not implicitly {@link reclosermodule.RecloserControl.verify|verify} messages.
         * @function encode
         * @memberof reclosermodule.RecloserControl
         * @static
         * @param {reclosermodule.IRecloserControl} message RecloserControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlValue != null && Object.hasOwnProperty.call(message, "controlValue"))
                $root.commonmodule.ControlValue.encode(message.controlValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.check != null && Object.hasOwnProperty.call(message, "check"))
                $root.commonmodule.CheckConditions.encode(message.check, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.recloserControlFSCC != null && Object.hasOwnProperty.call(message, "recloserControlFSCC"))
                $root.reclosermodule.RecloserControlFSCC.encode(message.recloserControlFSCC, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RecloserControl message, length delimited. Does not implicitly {@link reclosermodule.RecloserControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof reclosermodule.RecloserControl
         * @static
         * @param {reclosermodule.IRecloserControl} message RecloserControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RecloserControl message from the specified reader or buffer.
         * @function decode
         * @memberof reclosermodule.RecloserControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {reclosermodule.RecloserControl} RecloserControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.reclosermodule.RecloserControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlValue = $root.commonmodule.ControlValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.check = $root.commonmodule.CheckConditions.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.recloserControlFSCC = $root.reclosermodule.RecloserControlFSCC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RecloserControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof reclosermodule.RecloserControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {reclosermodule.RecloserControl} RecloserControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RecloserControl message.
         * @function verify
         * @memberof reclosermodule.RecloserControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RecloserControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlValue != null && message.hasOwnProperty("controlValue")) {
                var error = $root.commonmodule.ControlValue.verify(message.controlValue);
                if (error)
                    return "controlValue." + error;
            }
            if (message.check != null && message.hasOwnProperty("check")) {
                var error = $root.commonmodule.CheckConditions.verify(message.check);
                if (error)
                    return "check." + error;
            }
            if (message.recloserControlFSCC != null && message.hasOwnProperty("recloserControlFSCC")) {
                var error = $root.reclosermodule.RecloserControlFSCC.verify(message.recloserControlFSCC);
                if (error)
                    return "recloserControlFSCC." + error;
            }
            return null;
        };

        /**
         * Creates a RecloserControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof reclosermodule.RecloserControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {reclosermodule.RecloserControl} RecloserControl
         */
        RecloserControl.fromObject = function fromObject(object) {
            if (object instanceof $root.reclosermodule.RecloserControl)
                return object;
            var message = new $root.reclosermodule.RecloserControl();
            if (object.controlValue != null) {
                if (typeof object.controlValue !== "object")
                    throw TypeError(".reclosermodule.RecloserControl.controlValue: object expected");
                message.controlValue = $root.commonmodule.ControlValue.fromObject(object.controlValue);
            }
            if (object.check != null) {
                if (typeof object.check !== "object")
                    throw TypeError(".reclosermodule.RecloserControl.check: object expected");
                message.check = $root.commonmodule.CheckConditions.fromObject(object.check);
            }
            if (object.recloserControlFSCC != null) {
                if (typeof object.recloserControlFSCC !== "object")
                    throw TypeError(".reclosermodule.RecloserControl.recloserControlFSCC: object expected");
                message.recloserControlFSCC = $root.reclosermodule.RecloserControlFSCC.fromObject(object.recloserControlFSCC);
            }
            return message;
        };

        /**
         * Creates a plain object from a RecloserControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof reclosermodule.RecloserControl
         * @static
         * @param {reclosermodule.RecloserControl} message RecloserControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RecloserControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlValue = null;
                object.check = null;
                object.recloserControlFSCC = null;
            }
            if (message.controlValue != null && message.hasOwnProperty("controlValue"))
                object.controlValue = $root.commonmodule.ControlValue.toObject(message.controlValue, options);
            if (message.check != null && message.hasOwnProperty("check"))
                object.check = $root.commonmodule.CheckConditions.toObject(message.check, options);
            if (message.recloserControlFSCC != null && message.hasOwnProperty("recloserControlFSCC"))
                object.recloserControlFSCC = $root.reclosermodule.RecloserControlFSCC.toObject(message.recloserControlFSCC, options);
            return object;
        };

        /**
         * Converts this RecloserControl to JSON.
         * @function toJSON
         * @memberof reclosermodule.RecloserControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RecloserControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RecloserControl;
    })();

    reclosermodule.Recloser = (function() {

        /**
         * Properties of a Recloser.
         * @memberof reclosermodule
         * @interface IRecloser
         * @property {commonmodule.IConductingEquipment|null} [conductingEquipment] Recloser conductingEquipment
         * @property {google.protobuf.IBoolValue|null} [normalOpen] Recloser normalOpen
         */

        /**
         * Constructs a new Recloser.
         * @memberof reclosermodule
         * @classdesc Represents a Recloser.
         * @implements IRecloser
         * @constructor
         * @param {reclosermodule.IRecloser=} [properties] Properties to set
         */
        function Recloser(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Recloser conductingEquipment.
         * @member {commonmodule.IConductingEquipment|null|undefined} conductingEquipment
         * @memberof reclosermodule.Recloser
         * @instance
         */
        Recloser.prototype.conductingEquipment = null;

        /**
         * Recloser normalOpen.
         * @member {google.protobuf.IBoolValue|null|undefined} normalOpen
         * @memberof reclosermodule.Recloser
         * @instance
         */
        Recloser.prototype.normalOpen = null;

        /**
         * Creates a new Recloser instance using the specified properties.
         * @function create
         * @memberof reclosermodule.Recloser
         * @static
         * @param {reclosermodule.IRecloser=} [properties] Properties to set
         * @returns {reclosermodule.Recloser} Recloser instance
         */
        Recloser.create = function create(properties) {
            return new Recloser(properties);
        };

        /**
         * Encodes the specified Recloser message. Does not implicitly {@link reclosermodule.Recloser.verify|verify} messages.
         * @function encode
         * @memberof reclosermodule.Recloser
         * @static
         * @param {reclosermodule.IRecloser} message Recloser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Recloser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipment != null && Object.hasOwnProperty.call(message, "conductingEquipment"))
                $root.commonmodule.ConductingEquipment.encode(message.conductingEquipment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.normalOpen != null && Object.hasOwnProperty.call(message, "normalOpen"))
                $root.google.protobuf.BoolValue.encode(message.normalOpen, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Recloser message, length delimited. Does not implicitly {@link reclosermodule.Recloser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof reclosermodule.Recloser
         * @static
         * @param {reclosermodule.IRecloser} message Recloser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Recloser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Recloser message from the specified reader or buffer.
         * @function decode
         * @memberof reclosermodule.Recloser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {reclosermodule.Recloser} Recloser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Recloser.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.reclosermodule.Recloser();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipment = $root.commonmodule.ConductingEquipment.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.normalOpen = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Recloser message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof reclosermodule.Recloser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {reclosermodule.Recloser} Recloser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Recloser.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Recloser message.
         * @function verify
         * @memberof reclosermodule.Recloser
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Recloser.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment")) {
                var error = $root.commonmodule.ConductingEquipment.verify(message.conductingEquipment);
                if (error)
                    return "conductingEquipment." + error;
            }
            if (message.normalOpen != null && message.hasOwnProperty("normalOpen")) {
                var error = $root.google.protobuf.BoolValue.verify(message.normalOpen);
                if (error)
                    return "normalOpen." + error;
            }
            return null;
        };

        /**
         * Creates a Recloser message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof reclosermodule.Recloser
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {reclosermodule.Recloser} Recloser
         */
        Recloser.fromObject = function fromObject(object) {
            if (object instanceof $root.reclosermodule.Recloser)
                return object;
            var message = new $root.reclosermodule.Recloser();
            if (object.conductingEquipment != null) {
                if (typeof object.conductingEquipment !== "object")
                    throw TypeError(".reclosermodule.Recloser.conductingEquipment: object expected");
                message.conductingEquipment = $root.commonmodule.ConductingEquipment.fromObject(object.conductingEquipment);
            }
            if (object.normalOpen != null) {
                if (typeof object.normalOpen !== "object")
                    throw TypeError(".reclosermodule.Recloser.normalOpen: object expected");
                message.normalOpen = $root.google.protobuf.BoolValue.fromObject(object.normalOpen);
            }
            return message;
        };

        /**
         * Creates a plain object from a Recloser message. Also converts values to other types if specified.
         * @function toObject
         * @memberof reclosermodule.Recloser
         * @static
         * @param {reclosermodule.Recloser} message Recloser
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Recloser.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conductingEquipment = null;
                object.normalOpen = null;
            }
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment"))
                object.conductingEquipment = $root.commonmodule.ConductingEquipment.toObject(message.conductingEquipment, options);
            if (message.normalOpen != null && message.hasOwnProperty("normalOpen"))
                object.normalOpen = $root.google.protobuf.BoolValue.toObject(message.normalOpen, options);
            return object;
        };

        /**
         * Converts this Recloser to JSON.
         * @function toJSON
         * @memberof reclosermodule.Recloser
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Recloser.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Recloser;
    })();

    reclosermodule.RecloserControlProfile = (function() {

        /**
         * Properties of a RecloserControlProfile.
         * @memberof reclosermodule
         * @interface IRecloserControlProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] RecloserControlProfile controlMessageInfo
         * @property {commonmodule.IIED|null} [ied] RecloserControlProfile ied
         * @property {reclosermodule.IRecloser|null} [recloser] RecloserControlProfile recloser
         * @property {reclosermodule.IRecloserControl|null} [recloserControl] RecloserControlProfile recloserControl
         */

        /**
         * Constructs a new RecloserControlProfile.
         * @memberof reclosermodule
         * @classdesc Represents a RecloserControlProfile.
         * @implements IRecloserControlProfile
         * @constructor
         * @param {reclosermodule.IRecloserControlProfile=} [properties] Properties to set
         */
        function RecloserControlProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RecloserControlProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof reclosermodule.RecloserControlProfile
         * @instance
         */
        RecloserControlProfile.prototype.controlMessageInfo = null;

        /**
         * RecloserControlProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof reclosermodule.RecloserControlProfile
         * @instance
         */
        RecloserControlProfile.prototype.ied = null;

        /**
         * RecloserControlProfile recloser.
         * @member {reclosermodule.IRecloser|null|undefined} recloser
         * @memberof reclosermodule.RecloserControlProfile
         * @instance
         */
        RecloserControlProfile.prototype.recloser = null;

        /**
         * RecloserControlProfile recloserControl.
         * @member {reclosermodule.IRecloserControl|null|undefined} recloserControl
         * @memberof reclosermodule.RecloserControlProfile
         * @instance
         */
        RecloserControlProfile.prototype.recloserControl = null;

        /**
         * Creates a new RecloserControlProfile instance using the specified properties.
         * @function create
         * @memberof reclosermodule.RecloserControlProfile
         * @static
         * @param {reclosermodule.IRecloserControlProfile=} [properties] Properties to set
         * @returns {reclosermodule.RecloserControlProfile} RecloserControlProfile instance
         */
        RecloserControlProfile.create = function create(properties) {
            return new RecloserControlProfile(properties);
        };

        /**
         * Encodes the specified RecloserControlProfile message. Does not implicitly {@link reclosermodule.RecloserControlProfile.verify|verify} messages.
         * @function encode
         * @memberof reclosermodule.RecloserControlProfile
         * @static
         * @param {reclosermodule.IRecloserControlProfile} message RecloserControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserControlProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.recloser != null && Object.hasOwnProperty.call(message, "recloser"))
                $root.reclosermodule.Recloser.encode(message.recloser, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.recloserControl != null && Object.hasOwnProperty.call(message, "recloserControl"))
                $root.reclosermodule.RecloserControl.encode(message.recloserControl, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RecloserControlProfile message, length delimited. Does not implicitly {@link reclosermodule.RecloserControlProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof reclosermodule.RecloserControlProfile
         * @static
         * @param {reclosermodule.IRecloserControlProfile} message RecloserControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserControlProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RecloserControlProfile message from the specified reader or buffer.
         * @function decode
         * @memberof reclosermodule.RecloserControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {reclosermodule.RecloserControlProfile} RecloserControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserControlProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.reclosermodule.RecloserControlProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.recloser = $root.reclosermodule.Recloser.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.recloserControl = $root.reclosermodule.RecloserControl.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RecloserControlProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof reclosermodule.RecloserControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {reclosermodule.RecloserControlProfile} RecloserControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserControlProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RecloserControlProfile message.
         * @function verify
         * @memberof reclosermodule.RecloserControlProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RecloserControlProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.recloser != null && message.hasOwnProperty("recloser")) {
                var error = $root.reclosermodule.Recloser.verify(message.recloser);
                if (error)
                    return "recloser." + error;
            }
            if (message.recloserControl != null && message.hasOwnProperty("recloserControl")) {
                var error = $root.reclosermodule.RecloserControl.verify(message.recloserControl);
                if (error)
                    return "recloserControl." + error;
            }
            return null;
        };

        /**
         * Creates a RecloserControlProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof reclosermodule.RecloserControlProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {reclosermodule.RecloserControlProfile} RecloserControlProfile
         */
        RecloserControlProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.reclosermodule.RecloserControlProfile)
                return object;
            var message = new $root.reclosermodule.RecloserControlProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".reclosermodule.RecloserControlProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".reclosermodule.RecloserControlProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.recloser != null) {
                if (typeof object.recloser !== "object")
                    throw TypeError(".reclosermodule.RecloserControlProfile.recloser: object expected");
                message.recloser = $root.reclosermodule.Recloser.fromObject(object.recloser);
            }
            if (object.recloserControl != null) {
                if (typeof object.recloserControl !== "object")
                    throw TypeError(".reclosermodule.RecloserControlProfile.recloserControl: object expected");
                message.recloserControl = $root.reclosermodule.RecloserControl.fromObject(object.recloserControl);
            }
            return message;
        };

        /**
         * Creates a plain object from a RecloserControlProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof reclosermodule.RecloserControlProfile
         * @static
         * @param {reclosermodule.RecloserControlProfile} message RecloserControlProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RecloserControlProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.ied = null;
                object.recloser = null;
                object.recloserControl = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.recloser != null && message.hasOwnProperty("recloser"))
                object.recloser = $root.reclosermodule.Recloser.toObject(message.recloser, options);
            if (message.recloserControl != null && message.hasOwnProperty("recloserControl"))
                object.recloserControl = $root.reclosermodule.RecloserControl.toObject(message.recloserControl, options);
            return object;
        };

        /**
         * Converts this RecloserControlProfile to JSON.
         * @function toJSON
         * @memberof reclosermodule.RecloserControlProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RecloserControlProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RecloserControlProfile;
    })();

    reclosermodule.RecloserDiscreteControlXCBR = (function() {

        /**
         * Properties of a RecloserDiscreteControlXCBR.
         * @memberof reclosermodule
         * @interface IRecloserDiscreteControlXCBR
         * @property {commonmodule.ILogicalNodeForControl|null} [logicalNodeForControl] RecloserDiscreteControlXCBR logicalNodeForControl
         * @property {commonmodule.IControlDPC|null} [Pos] RecloserDiscreteControlXCBR Pos
         */

        /**
         * Constructs a new RecloserDiscreteControlXCBR.
         * @memberof reclosermodule
         * @classdesc Represents a RecloserDiscreteControlXCBR.
         * @implements IRecloserDiscreteControlXCBR
         * @constructor
         * @param {reclosermodule.IRecloserDiscreteControlXCBR=} [properties] Properties to set
         */
        function RecloserDiscreteControlXCBR(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RecloserDiscreteControlXCBR logicalNodeForControl.
         * @member {commonmodule.ILogicalNodeForControl|null|undefined} logicalNodeForControl
         * @memberof reclosermodule.RecloserDiscreteControlXCBR
         * @instance
         */
        RecloserDiscreteControlXCBR.prototype.logicalNodeForControl = null;

        /**
         * RecloserDiscreteControlXCBR Pos.
         * @member {commonmodule.IControlDPC|null|undefined} Pos
         * @memberof reclosermodule.RecloserDiscreteControlXCBR
         * @instance
         */
        RecloserDiscreteControlXCBR.prototype.Pos = null;

        /**
         * Creates a new RecloserDiscreteControlXCBR instance using the specified properties.
         * @function create
         * @memberof reclosermodule.RecloserDiscreteControlXCBR
         * @static
         * @param {reclosermodule.IRecloserDiscreteControlXCBR=} [properties] Properties to set
         * @returns {reclosermodule.RecloserDiscreteControlXCBR} RecloserDiscreteControlXCBR instance
         */
        RecloserDiscreteControlXCBR.create = function create(properties) {
            return new RecloserDiscreteControlXCBR(properties);
        };

        /**
         * Encodes the specified RecloserDiscreteControlXCBR message. Does not implicitly {@link reclosermodule.RecloserDiscreteControlXCBR.verify|verify} messages.
         * @function encode
         * @memberof reclosermodule.RecloserDiscreteControlXCBR
         * @static
         * @param {reclosermodule.IRecloserDiscreteControlXCBR} message RecloserDiscreteControlXCBR message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserDiscreteControlXCBR.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForControl != null && Object.hasOwnProperty.call(message, "logicalNodeForControl"))
                $root.commonmodule.LogicalNodeForControl.encode(message.logicalNodeForControl, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.Pos != null && Object.hasOwnProperty.call(message, "Pos"))
                $root.commonmodule.ControlDPC.encode(message.Pos, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RecloserDiscreteControlXCBR message, length delimited. Does not implicitly {@link reclosermodule.RecloserDiscreteControlXCBR.verify|verify} messages.
         * @function encodeDelimited
         * @memberof reclosermodule.RecloserDiscreteControlXCBR
         * @static
         * @param {reclosermodule.IRecloserDiscreteControlXCBR} message RecloserDiscreteControlXCBR message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserDiscreteControlXCBR.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RecloserDiscreteControlXCBR message from the specified reader or buffer.
         * @function decode
         * @memberof reclosermodule.RecloserDiscreteControlXCBR
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {reclosermodule.RecloserDiscreteControlXCBR} RecloserDiscreteControlXCBR
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserDiscreteControlXCBR.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.reclosermodule.RecloserDiscreteControlXCBR();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.Pos = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RecloserDiscreteControlXCBR message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof reclosermodule.RecloserDiscreteControlXCBR
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {reclosermodule.RecloserDiscreteControlXCBR} RecloserDiscreteControlXCBR
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserDiscreteControlXCBR.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RecloserDiscreteControlXCBR message.
         * @function verify
         * @memberof reclosermodule.RecloserDiscreteControlXCBR
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RecloserDiscreteControlXCBR.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl")) {
                var error = $root.commonmodule.LogicalNodeForControl.verify(message.logicalNodeForControl);
                if (error)
                    return "logicalNodeForControl." + error;
            }
            if (message.Pos != null && message.hasOwnProperty("Pos")) {
                var error = $root.commonmodule.ControlDPC.verify(message.Pos);
                if (error)
                    return "Pos." + error;
            }
            return null;
        };

        /**
         * Creates a RecloserDiscreteControlXCBR message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof reclosermodule.RecloserDiscreteControlXCBR
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {reclosermodule.RecloserDiscreteControlXCBR} RecloserDiscreteControlXCBR
         */
        RecloserDiscreteControlXCBR.fromObject = function fromObject(object) {
            if (object instanceof $root.reclosermodule.RecloserDiscreteControlXCBR)
                return object;
            var message = new $root.reclosermodule.RecloserDiscreteControlXCBR();
            if (object.logicalNodeForControl != null) {
                if (typeof object.logicalNodeForControl !== "object")
                    throw TypeError(".reclosermodule.RecloserDiscreteControlXCBR.logicalNodeForControl: object expected");
                message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.fromObject(object.logicalNodeForControl);
            }
            if (object.Pos != null) {
                if (typeof object.Pos !== "object")
                    throw TypeError(".reclosermodule.RecloserDiscreteControlXCBR.Pos: object expected");
                message.Pos = $root.commonmodule.ControlDPC.fromObject(object.Pos);
            }
            return message;
        };

        /**
         * Creates a plain object from a RecloserDiscreteControlXCBR message. Also converts values to other types if specified.
         * @function toObject
         * @memberof reclosermodule.RecloserDiscreteControlXCBR
         * @static
         * @param {reclosermodule.RecloserDiscreteControlXCBR} message RecloserDiscreteControlXCBR
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RecloserDiscreteControlXCBR.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForControl = null;
                object.Pos = null;
            }
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl"))
                object.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.toObject(message.logicalNodeForControl, options);
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                object.Pos = $root.commonmodule.ControlDPC.toObject(message.Pos, options);
            return object;
        };

        /**
         * Converts this RecloserDiscreteControlXCBR to JSON.
         * @function toJSON
         * @memberof reclosermodule.RecloserDiscreteControlXCBR
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RecloserDiscreteControlXCBR.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RecloserDiscreteControlXCBR;
    })();

    reclosermodule.RecloserDiscreteControl = (function() {

        /**
         * Properties of a RecloserDiscreteControl.
         * @memberof reclosermodule
         * @interface IRecloserDiscreteControl
         * @property {commonmodule.IControlValue|null} [controlValue] RecloserDiscreteControl controlValue
         * @property {commonmodule.ICheckConditions|null} [check] RecloserDiscreteControl check
         * @property {reclosermodule.IRecloserDiscreteControlXCBR|null} [recloserDiscreteControlXCBR] RecloserDiscreteControl recloserDiscreteControlXCBR
         * @property {commonmodule.IDeviceControl|null} [deviceControl] RecloserDiscreteControl deviceControl
         */

        /**
         * Constructs a new RecloserDiscreteControl.
         * @memberof reclosermodule
         * @classdesc Represents a RecloserDiscreteControl.
         * @implements IRecloserDiscreteControl
         * @constructor
         * @param {reclosermodule.IRecloserDiscreteControl=} [properties] Properties to set
         */
        function RecloserDiscreteControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RecloserDiscreteControl controlValue.
         * @member {commonmodule.IControlValue|null|undefined} controlValue
         * @memberof reclosermodule.RecloserDiscreteControl
         * @instance
         */
        RecloserDiscreteControl.prototype.controlValue = null;

        /**
         * RecloserDiscreteControl check.
         * @member {commonmodule.ICheckConditions|null|undefined} check
         * @memberof reclosermodule.RecloserDiscreteControl
         * @instance
         */
        RecloserDiscreteControl.prototype.check = null;

        /**
         * RecloserDiscreteControl recloserDiscreteControlXCBR.
         * @member {reclosermodule.IRecloserDiscreteControlXCBR|null|undefined} recloserDiscreteControlXCBR
         * @memberof reclosermodule.RecloserDiscreteControl
         * @instance
         */
        RecloserDiscreteControl.prototype.recloserDiscreteControlXCBR = null;

        /**
         * RecloserDiscreteControl deviceControl.
         * @member {commonmodule.IDeviceControl|null|undefined} deviceControl
         * @memberof reclosermodule.RecloserDiscreteControl
         * @instance
         */
        RecloserDiscreteControl.prototype.deviceControl = null;

        /**
         * Creates a new RecloserDiscreteControl instance using the specified properties.
         * @function create
         * @memberof reclosermodule.RecloserDiscreteControl
         * @static
         * @param {reclosermodule.IRecloserDiscreteControl=} [properties] Properties to set
         * @returns {reclosermodule.RecloserDiscreteControl} RecloserDiscreteControl instance
         */
        RecloserDiscreteControl.create = function create(properties) {
            return new RecloserDiscreteControl(properties);
        };

        /**
         * Encodes the specified RecloserDiscreteControl message. Does not implicitly {@link reclosermodule.RecloserDiscreteControl.verify|verify} messages.
         * @function encode
         * @memberof reclosermodule.RecloserDiscreteControl
         * @static
         * @param {reclosermodule.IRecloserDiscreteControl} message RecloserDiscreteControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserDiscreteControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlValue != null && Object.hasOwnProperty.call(message, "controlValue"))
                $root.commonmodule.ControlValue.encode(message.controlValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.check != null && Object.hasOwnProperty.call(message, "check"))
                $root.commonmodule.CheckConditions.encode(message.check, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.recloserDiscreteControlXCBR != null && Object.hasOwnProperty.call(message, "recloserDiscreteControlXCBR"))
                $root.reclosermodule.RecloserDiscreteControlXCBR.encode(message.recloserDiscreteControlXCBR, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.deviceControl != null && Object.hasOwnProperty.call(message, "deviceControl"))
                $root.commonmodule.DeviceControl.encode(message.deviceControl, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RecloserDiscreteControl message, length delimited. Does not implicitly {@link reclosermodule.RecloserDiscreteControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof reclosermodule.RecloserDiscreteControl
         * @static
         * @param {reclosermodule.IRecloserDiscreteControl} message RecloserDiscreteControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserDiscreteControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RecloserDiscreteControl message from the specified reader or buffer.
         * @function decode
         * @memberof reclosermodule.RecloserDiscreteControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {reclosermodule.RecloserDiscreteControl} RecloserDiscreteControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserDiscreteControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.reclosermodule.RecloserDiscreteControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlValue = $root.commonmodule.ControlValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.check = $root.commonmodule.CheckConditions.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.recloserDiscreteControlXCBR = $root.reclosermodule.RecloserDiscreteControlXCBR.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.deviceControl = $root.commonmodule.DeviceControl.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RecloserDiscreteControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof reclosermodule.RecloserDiscreteControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {reclosermodule.RecloserDiscreteControl} RecloserDiscreteControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserDiscreteControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RecloserDiscreteControl message.
         * @function verify
         * @memberof reclosermodule.RecloserDiscreteControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RecloserDiscreteControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlValue != null && message.hasOwnProperty("controlValue")) {
                var error = $root.commonmodule.ControlValue.verify(message.controlValue);
                if (error)
                    return "controlValue." + error;
            }
            if (message.check != null && message.hasOwnProperty("check")) {
                var error = $root.commonmodule.CheckConditions.verify(message.check);
                if (error)
                    return "check." + error;
            }
            if (message.recloserDiscreteControlXCBR != null && message.hasOwnProperty("recloserDiscreteControlXCBR")) {
                var error = $root.reclosermodule.RecloserDiscreteControlXCBR.verify(message.recloserDiscreteControlXCBR);
                if (error)
                    return "recloserDiscreteControlXCBR." + error;
            }
            if (message.deviceControl != null && message.hasOwnProperty("deviceControl")) {
                var error = $root.commonmodule.DeviceControl.verify(message.deviceControl);
                if (error)
                    return "deviceControl." + error;
            }
            return null;
        };

        /**
         * Creates a RecloserDiscreteControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof reclosermodule.RecloserDiscreteControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {reclosermodule.RecloserDiscreteControl} RecloserDiscreteControl
         */
        RecloserDiscreteControl.fromObject = function fromObject(object) {
            if (object instanceof $root.reclosermodule.RecloserDiscreteControl)
                return object;
            var message = new $root.reclosermodule.RecloserDiscreteControl();
            if (object.controlValue != null) {
                if (typeof object.controlValue !== "object")
                    throw TypeError(".reclosermodule.RecloserDiscreteControl.controlValue: object expected");
                message.controlValue = $root.commonmodule.ControlValue.fromObject(object.controlValue);
            }
            if (object.check != null) {
                if (typeof object.check !== "object")
                    throw TypeError(".reclosermodule.RecloserDiscreteControl.check: object expected");
                message.check = $root.commonmodule.CheckConditions.fromObject(object.check);
            }
            if (object.recloserDiscreteControlXCBR != null) {
                if (typeof object.recloserDiscreteControlXCBR !== "object")
                    throw TypeError(".reclosermodule.RecloserDiscreteControl.recloserDiscreteControlXCBR: object expected");
                message.recloserDiscreteControlXCBR = $root.reclosermodule.RecloserDiscreteControlXCBR.fromObject(object.recloserDiscreteControlXCBR);
            }
            if (object.deviceControl != null) {
                if (typeof object.deviceControl !== "object")
                    throw TypeError(".reclosermodule.RecloserDiscreteControl.deviceControl: object expected");
                message.deviceControl = $root.commonmodule.DeviceControl.fromObject(object.deviceControl);
            }
            return message;
        };

        /**
         * Creates a plain object from a RecloserDiscreteControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof reclosermodule.RecloserDiscreteControl
         * @static
         * @param {reclosermodule.RecloserDiscreteControl} message RecloserDiscreteControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RecloserDiscreteControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlValue = null;
                object.check = null;
                object.recloserDiscreteControlXCBR = null;
                object.deviceControl = null;
            }
            if (message.controlValue != null && message.hasOwnProperty("controlValue"))
                object.controlValue = $root.commonmodule.ControlValue.toObject(message.controlValue, options);
            if (message.check != null && message.hasOwnProperty("check"))
                object.check = $root.commonmodule.CheckConditions.toObject(message.check, options);
            if (message.recloserDiscreteControlXCBR != null && message.hasOwnProperty("recloserDiscreteControlXCBR"))
                object.recloserDiscreteControlXCBR = $root.reclosermodule.RecloserDiscreteControlXCBR.toObject(message.recloserDiscreteControlXCBR, options);
            if (message.deviceControl != null && message.hasOwnProperty("deviceControl"))
                object.deviceControl = $root.commonmodule.DeviceControl.toObject(message.deviceControl, options);
            return object;
        };

        /**
         * Converts this RecloserDiscreteControl to JSON.
         * @function toJSON
         * @memberof reclosermodule.RecloserDiscreteControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RecloserDiscreteControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RecloserDiscreteControl;
    })();

    reclosermodule.RecloserDiscreteControlProfile = (function() {

        /**
         * Properties of a RecloserDiscreteControlProfile.
         * @memberof reclosermodule
         * @interface IRecloserDiscreteControlProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] RecloserDiscreteControlProfile controlMessageInfo
         * @property {commonmodule.IIED|null} [ied] RecloserDiscreteControlProfile ied
         * @property {reclosermodule.IRecloser|null} [recloser] RecloserDiscreteControlProfile recloser
         * @property {reclosermodule.IRecloserDiscreteControl|null} [recloserDiscreteControl] RecloserDiscreteControlProfile recloserDiscreteControl
         */

        /**
         * Constructs a new RecloserDiscreteControlProfile.
         * @memberof reclosermodule
         * @classdesc Represents a RecloserDiscreteControlProfile.
         * @implements IRecloserDiscreteControlProfile
         * @constructor
         * @param {reclosermodule.IRecloserDiscreteControlProfile=} [properties] Properties to set
         */
        function RecloserDiscreteControlProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RecloserDiscreteControlProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof reclosermodule.RecloserDiscreteControlProfile
         * @instance
         */
        RecloserDiscreteControlProfile.prototype.controlMessageInfo = null;

        /**
         * RecloserDiscreteControlProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof reclosermodule.RecloserDiscreteControlProfile
         * @instance
         */
        RecloserDiscreteControlProfile.prototype.ied = null;

        /**
         * RecloserDiscreteControlProfile recloser.
         * @member {reclosermodule.IRecloser|null|undefined} recloser
         * @memberof reclosermodule.RecloserDiscreteControlProfile
         * @instance
         */
        RecloserDiscreteControlProfile.prototype.recloser = null;

        /**
         * RecloserDiscreteControlProfile recloserDiscreteControl.
         * @member {reclosermodule.IRecloserDiscreteControl|null|undefined} recloserDiscreteControl
         * @memberof reclosermodule.RecloserDiscreteControlProfile
         * @instance
         */
        RecloserDiscreteControlProfile.prototype.recloserDiscreteControl = null;

        /**
         * Creates a new RecloserDiscreteControlProfile instance using the specified properties.
         * @function create
         * @memberof reclosermodule.RecloserDiscreteControlProfile
         * @static
         * @param {reclosermodule.IRecloserDiscreteControlProfile=} [properties] Properties to set
         * @returns {reclosermodule.RecloserDiscreteControlProfile} RecloserDiscreteControlProfile instance
         */
        RecloserDiscreteControlProfile.create = function create(properties) {
            return new RecloserDiscreteControlProfile(properties);
        };

        /**
         * Encodes the specified RecloserDiscreteControlProfile message. Does not implicitly {@link reclosermodule.RecloserDiscreteControlProfile.verify|verify} messages.
         * @function encode
         * @memberof reclosermodule.RecloserDiscreteControlProfile
         * @static
         * @param {reclosermodule.IRecloserDiscreteControlProfile} message RecloserDiscreteControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserDiscreteControlProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.recloser != null && Object.hasOwnProperty.call(message, "recloser"))
                $root.reclosermodule.Recloser.encode(message.recloser, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.recloserDiscreteControl != null && Object.hasOwnProperty.call(message, "recloserDiscreteControl"))
                $root.reclosermodule.RecloserDiscreteControl.encode(message.recloserDiscreteControl, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RecloserDiscreteControlProfile message, length delimited. Does not implicitly {@link reclosermodule.RecloserDiscreteControlProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof reclosermodule.RecloserDiscreteControlProfile
         * @static
         * @param {reclosermodule.IRecloserDiscreteControlProfile} message RecloserDiscreteControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserDiscreteControlProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RecloserDiscreteControlProfile message from the specified reader or buffer.
         * @function decode
         * @memberof reclosermodule.RecloserDiscreteControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {reclosermodule.RecloserDiscreteControlProfile} RecloserDiscreteControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserDiscreteControlProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.reclosermodule.RecloserDiscreteControlProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.recloser = $root.reclosermodule.Recloser.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.recloserDiscreteControl = $root.reclosermodule.RecloserDiscreteControl.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RecloserDiscreteControlProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof reclosermodule.RecloserDiscreteControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {reclosermodule.RecloserDiscreteControlProfile} RecloserDiscreteControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserDiscreteControlProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RecloserDiscreteControlProfile message.
         * @function verify
         * @memberof reclosermodule.RecloserDiscreteControlProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RecloserDiscreteControlProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.recloser != null && message.hasOwnProperty("recloser")) {
                var error = $root.reclosermodule.Recloser.verify(message.recloser);
                if (error)
                    return "recloser." + error;
            }
            if (message.recloserDiscreteControl != null && message.hasOwnProperty("recloserDiscreteControl")) {
                var error = $root.reclosermodule.RecloserDiscreteControl.verify(message.recloserDiscreteControl);
                if (error)
                    return "recloserDiscreteControl." + error;
            }
            return null;
        };

        /**
         * Creates a RecloserDiscreteControlProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof reclosermodule.RecloserDiscreteControlProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {reclosermodule.RecloserDiscreteControlProfile} RecloserDiscreteControlProfile
         */
        RecloserDiscreteControlProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.reclosermodule.RecloserDiscreteControlProfile)
                return object;
            var message = new $root.reclosermodule.RecloserDiscreteControlProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".reclosermodule.RecloserDiscreteControlProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".reclosermodule.RecloserDiscreteControlProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.recloser != null) {
                if (typeof object.recloser !== "object")
                    throw TypeError(".reclosermodule.RecloserDiscreteControlProfile.recloser: object expected");
                message.recloser = $root.reclosermodule.Recloser.fromObject(object.recloser);
            }
            if (object.recloserDiscreteControl != null) {
                if (typeof object.recloserDiscreteControl !== "object")
                    throw TypeError(".reclosermodule.RecloserDiscreteControlProfile.recloserDiscreteControl: object expected");
                message.recloserDiscreteControl = $root.reclosermodule.RecloserDiscreteControl.fromObject(object.recloserDiscreteControl);
            }
            return message;
        };

        /**
         * Creates a plain object from a RecloserDiscreteControlProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof reclosermodule.RecloserDiscreteControlProfile
         * @static
         * @param {reclosermodule.RecloserDiscreteControlProfile} message RecloserDiscreteControlProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RecloserDiscreteControlProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.ied = null;
                object.recloser = null;
                object.recloserDiscreteControl = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.recloser != null && message.hasOwnProperty("recloser"))
                object.recloser = $root.reclosermodule.Recloser.toObject(message.recloser, options);
            if (message.recloserDiscreteControl != null && message.hasOwnProperty("recloserDiscreteControl"))
                object.recloserDiscreteControl = $root.reclosermodule.RecloserDiscreteControl.toObject(message.recloserDiscreteControl, options);
            return object;
        };

        /**
         * Converts this RecloserDiscreteControlProfile to JSON.
         * @function toJSON
         * @memberof reclosermodule.RecloserDiscreteControlProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RecloserDiscreteControlProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RecloserDiscreteControlProfile;
    })();

    reclosermodule.RecloserEvent = (function() {

        /**
         * Properties of a RecloserEvent.
         * @memberof reclosermodule
         * @interface IRecloserEvent
         * @property {commonmodule.IEventValue|null} [eventValue] RecloserEvent eventValue
         * @property {commonmodule.IStatusAndEventXCBR|null} [statusAndEventXCBR] RecloserEvent statusAndEventXCBR
         */

        /**
         * Constructs a new RecloserEvent.
         * @memberof reclosermodule
         * @classdesc Represents a RecloserEvent.
         * @implements IRecloserEvent
         * @constructor
         * @param {reclosermodule.IRecloserEvent=} [properties] Properties to set
         */
        function RecloserEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RecloserEvent eventValue.
         * @member {commonmodule.IEventValue|null|undefined} eventValue
         * @memberof reclosermodule.RecloserEvent
         * @instance
         */
        RecloserEvent.prototype.eventValue = null;

        /**
         * RecloserEvent statusAndEventXCBR.
         * @member {commonmodule.IStatusAndEventXCBR|null|undefined} statusAndEventXCBR
         * @memberof reclosermodule.RecloserEvent
         * @instance
         */
        RecloserEvent.prototype.statusAndEventXCBR = null;

        /**
         * Creates a new RecloserEvent instance using the specified properties.
         * @function create
         * @memberof reclosermodule.RecloserEvent
         * @static
         * @param {reclosermodule.IRecloserEvent=} [properties] Properties to set
         * @returns {reclosermodule.RecloserEvent} RecloserEvent instance
         */
        RecloserEvent.create = function create(properties) {
            return new RecloserEvent(properties);
        };

        /**
         * Encodes the specified RecloserEvent message. Does not implicitly {@link reclosermodule.RecloserEvent.verify|verify} messages.
         * @function encode
         * @memberof reclosermodule.RecloserEvent
         * @static
         * @param {reclosermodule.IRecloserEvent} message RecloserEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventValue != null && Object.hasOwnProperty.call(message, "eventValue"))
                $root.commonmodule.EventValue.encode(message.eventValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.statusAndEventXCBR != null && Object.hasOwnProperty.call(message, "statusAndEventXCBR"))
                $root.commonmodule.StatusAndEventXCBR.encode(message.statusAndEventXCBR, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RecloserEvent message, length delimited. Does not implicitly {@link reclosermodule.RecloserEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof reclosermodule.RecloserEvent
         * @static
         * @param {reclosermodule.IRecloserEvent} message RecloserEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RecloserEvent message from the specified reader or buffer.
         * @function decode
         * @memberof reclosermodule.RecloserEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {reclosermodule.RecloserEvent} RecloserEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.reclosermodule.RecloserEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventValue = $root.commonmodule.EventValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.statusAndEventXCBR = $root.commonmodule.StatusAndEventXCBR.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RecloserEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof reclosermodule.RecloserEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {reclosermodule.RecloserEvent} RecloserEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RecloserEvent message.
         * @function verify
         * @memberof reclosermodule.RecloserEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RecloserEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventValue != null && message.hasOwnProperty("eventValue")) {
                var error = $root.commonmodule.EventValue.verify(message.eventValue);
                if (error)
                    return "eventValue." + error;
            }
            if (message.statusAndEventXCBR != null && message.hasOwnProperty("statusAndEventXCBR")) {
                var error = $root.commonmodule.StatusAndEventXCBR.verify(message.statusAndEventXCBR);
                if (error)
                    return "statusAndEventXCBR." + error;
            }
            return null;
        };

        /**
         * Creates a RecloserEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof reclosermodule.RecloserEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {reclosermodule.RecloserEvent} RecloserEvent
         */
        RecloserEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.reclosermodule.RecloserEvent)
                return object;
            var message = new $root.reclosermodule.RecloserEvent();
            if (object.eventValue != null) {
                if (typeof object.eventValue !== "object")
                    throw TypeError(".reclosermodule.RecloserEvent.eventValue: object expected");
                message.eventValue = $root.commonmodule.EventValue.fromObject(object.eventValue);
            }
            if (object.statusAndEventXCBR != null) {
                if (typeof object.statusAndEventXCBR !== "object")
                    throw TypeError(".reclosermodule.RecloserEvent.statusAndEventXCBR: object expected");
                message.statusAndEventXCBR = $root.commonmodule.StatusAndEventXCBR.fromObject(object.statusAndEventXCBR);
            }
            return message;
        };

        /**
         * Creates a plain object from a RecloserEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof reclosermodule.RecloserEvent
         * @static
         * @param {reclosermodule.RecloserEvent} message RecloserEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RecloserEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventValue = null;
                object.statusAndEventXCBR = null;
            }
            if (message.eventValue != null && message.hasOwnProperty("eventValue"))
                object.eventValue = $root.commonmodule.EventValue.toObject(message.eventValue, options);
            if (message.statusAndEventXCBR != null && message.hasOwnProperty("statusAndEventXCBR"))
                object.statusAndEventXCBR = $root.commonmodule.StatusAndEventXCBR.toObject(message.statusAndEventXCBR, options);
            return object;
        };

        /**
         * Converts this RecloserEvent to JSON.
         * @function toJSON
         * @memberof reclosermodule.RecloserEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RecloserEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RecloserEvent;
    })();

    reclosermodule.RecloserEventProfile = (function() {

        /**
         * Properties of a RecloserEventProfile.
         * @memberof reclosermodule
         * @interface IRecloserEventProfile
         * @property {commonmodule.IEventMessageInfo|null} [eventMessageInfo] RecloserEventProfile eventMessageInfo
         * @property {commonmodule.IIED|null} [ied] RecloserEventProfile ied
         * @property {reclosermodule.IRecloser|null} [recloser] RecloserEventProfile recloser
         * @property {reclosermodule.IRecloserEvent|null} [recloserEvent] RecloserEventProfile recloserEvent
         */

        /**
         * Constructs a new RecloserEventProfile.
         * @memberof reclosermodule
         * @classdesc Represents a RecloserEventProfile.
         * @implements IRecloserEventProfile
         * @constructor
         * @param {reclosermodule.IRecloserEventProfile=} [properties] Properties to set
         */
        function RecloserEventProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RecloserEventProfile eventMessageInfo.
         * @member {commonmodule.IEventMessageInfo|null|undefined} eventMessageInfo
         * @memberof reclosermodule.RecloserEventProfile
         * @instance
         */
        RecloserEventProfile.prototype.eventMessageInfo = null;

        /**
         * RecloserEventProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof reclosermodule.RecloserEventProfile
         * @instance
         */
        RecloserEventProfile.prototype.ied = null;

        /**
         * RecloserEventProfile recloser.
         * @member {reclosermodule.IRecloser|null|undefined} recloser
         * @memberof reclosermodule.RecloserEventProfile
         * @instance
         */
        RecloserEventProfile.prototype.recloser = null;

        /**
         * RecloserEventProfile recloserEvent.
         * @member {reclosermodule.IRecloserEvent|null|undefined} recloserEvent
         * @memberof reclosermodule.RecloserEventProfile
         * @instance
         */
        RecloserEventProfile.prototype.recloserEvent = null;

        /**
         * Creates a new RecloserEventProfile instance using the specified properties.
         * @function create
         * @memberof reclosermodule.RecloserEventProfile
         * @static
         * @param {reclosermodule.IRecloserEventProfile=} [properties] Properties to set
         * @returns {reclosermodule.RecloserEventProfile} RecloserEventProfile instance
         */
        RecloserEventProfile.create = function create(properties) {
            return new RecloserEventProfile(properties);
        };

        /**
         * Encodes the specified RecloserEventProfile message. Does not implicitly {@link reclosermodule.RecloserEventProfile.verify|verify} messages.
         * @function encode
         * @memberof reclosermodule.RecloserEventProfile
         * @static
         * @param {reclosermodule.IRecloserEventProfile} message RecloserEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserEventProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventMessageInfo != null && Object.hasOwnProperty.call(message, "eventMessageInfo"))
                $root.commonmodule.EventMessageInfo.encode(message.eventMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.recloser != null && Object.hasOwnProperty.call(message, "recloser"))
                $root.reclosermodule.Recloser.encode(message.recloser, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.recloserEvent != null && Object.hasOwnProperty.call(message, "recloserEvent"))
                $root.reclosermodule.RecloserEvent.encode(message.recloserEvent, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RecloserEventProfile message, length delimited. Does not implicitly {@link reclosermodule.RecloserEventProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof reclosermodule.RecloserEventProfile
         * @static
         * @param {reclosermodule.IRecloserEventProfile} message RecloserEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserEventProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RecloserEventProfile message from the specified reader or buffer.
         * @function decode
         * @memberof reclosermodule.RecloserEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {reclosermodule.RecloserEventProfile} RecloserEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserEventProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.reclosermodule.RecloserEventProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventMessageInfo = $root.commonmodule.EventMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.recloser = $root.reclosermodule.Recloser.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.recloserEvent = $root.reclosermodule.RecloserEvent.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RecloserEventProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof reclosermodule.RecloserEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {reclosermodule.RecloserEventProfile} RecloserEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserEventProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RecloserEventProfile message.
         * @function verify
         * @memberof reclosermodule.RecloserEventProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RecloserEventProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo")) {
                var error = $root.commonmodule.EventMessageInfo.verify(message.eventMessageInfo);
                if (error)
                    return "eventMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.recloser != null && message.hasOwnProperty("recloser")) {
                var error = $root.reclosermodule.Recloser.verify(message.recloser);
                if (error)
                    return "recloser." + error;
            }
            if (message.recloserEvent != null && message.hasOwnProperty("recloserEvent")) {
                var error = $root.reclosermodule.RecloserEvent.verify(message.recloserEvent);
                if (error)
                    return "recloserEvent." + error;
            }
            return null;
        };

        /**
         * Creates a RecloserEventProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof reclosermodule.RecloserEventProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {reclosermodule.RecloserEventProfile} RecloserEventProfile
         */
        RecloserEventProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.reclosermodule.RecloserEventProfile)
                return object;
            var message = new $root.reclosermodule.RecloserEventProfile();
            if (object.eventMessageInfo != null) {
                if (typeof object.eventMessageInfo !== "object")
                    throw TypeError(".reclosermodule.RecloserEventProfile.eventMessageInfo: object expected");
                message.eventMessageInfo = $root.commonmodule.EventMessageInfo.fromObject(object.eventMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".reclosermodule.RecloserEventProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.recloser != null) {
                if (typeof object.recloser !== "object")
                    throw TypeError(".reclosermodule.RecloserEventProfile.recloser: object expected");
                message.recloser = $root.reclosermodule.Recloser.fromObject(object.recloser);
            }
            if (object.recloserEvent != null) {
                if (typeof object.recloserEvent !== "object")
                    throw TypeError(".reclosermodule.RecloserEventProfile.recloserEvent: object expected");
                message.recloserEvent = $root.reclosermodule.RecloserEvent.fromObject(object.recloserEvent);
            }
            return message;
        };

        /**
         * Creates a plain object from a RecloserEventProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof reclosermodule.RecloserEventProfile
         * @static
         * @param {reclosermodule.RecloserEventProfile} message RecloserEventProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RecloserEventProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventMessageInfo = null;
                object.ied = null;
                object.recloser = null;
                object.recloserEvent = null;
            }
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo"))
                object.eventMessageInfo = $root.commonmodule.EventMessageInfo.toObject(message.eventMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.recloser != null && message.hasOwnProperty("recloser"))
                object.recloser = $root.reclosermodule.Recloser.toObject(message.recloser, options);
            if (message.recloserEvent != null && message.hasOwnProperty("recloserEvent"))
                object.recloserEvent = $root.reclosermodule.RecloserEvent.toObject(message.recloserEvent, options);
            return object;
        };

        /**
         * Converts this RecloserEventProfile to JSON.
         * @function toJSON
         * @memberof reclosermodule.RecloserEventProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RecloserEventProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RecloserEventProfile;
    })();

    reclosermodule.RecloserReading = (function() {

        /**
         * Properties of a RecloserReading.
         * @memberof reclosermodule
         * @interface IRecloserReading
         * @property {commonmodule.IConductingEquipmentTerminalReading|null} [conductingEquipmentTerminalReading] RecloserReading conductingEquipmentTerminalReading
         * @property {commonmodule.IReadingMMXU|null} [diffReadingMMXU] RecloserReading diffReadingMMXU
         * @property {commonmodule.IPhaseMMTN|null} [phaseMMTN] RecloserReading phaseMMTN
         * @property {commonmodule.IReadingMMTR|null} [readingMMTR] RecloserReading readingMMTR
         * @property {commonmodule.IReadingMMXU|null} [readingMMXU] RecloserReading readingMMXU
         */

        /**
         * Constructs a new RecloserReading.
         * @memberof reclosermodule
         * @classdesc Represents a RecloserReading.
         * @implements IRecloserReading
         * @constructor
         * @param {reclosermodule.IRecloserReading=} [properties] Properties to set
         */
        function RecloserReading(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RecloserReading conductingEquipmentTerminalReading.
         * @member {commonmodule.IConductingEquipmentTerminalReading|null|undefined} conductingEquipmentTerminalReading
         * @memberof reclosermodule.RecloserReading
         * @instance
         */
        RecloserReading.prototype.conductingEquipmentTerminalReading = null;

        /**
         * RecloserReading diffReadingMMXU.
         * @member {commonmodule.IReadingMMXU|null|undefined} diffReadingMMXU
         * @memberof reclosermodule.RecloserReading
         * @instance
         */
        RecloserReading.prototype.diffReadingMMXU = null;

        /**
         * RecloserReading phaseMMTN.
         * @member {commonmodule.IPhaseMMTN|null|undefined} phaseMMTN
         * @memberof reclosermodule.RecloserReading
         * @instance
         */
        RecloserReading.prototype.phaseMMTN = null;

        /**
         * RecloserReading readingMMTR.
         * @member {commonmodule.IReadingMMTR|null|undefined} readingMMTR
         * @memberof reclosermodule.RecloserReading
         * @instance
         */
        RecloserReading.prototype.readingMMTR = null;

        /**
         * RecloserReading readingMMXU.
         * @member {commonmodule.IReadingMMXU|null|undefined} readingMMXU
         * @memberof reclosermodule.RecloserReading
         * @instance
         */
        RecloserReading.prototype.readingMMXU = null;

        /**
         * Creates a new RecloserReading instance using the specified properties.
         * @function create
         * @memberof reclosermodule.RecloserReading
         * @static
         * @param {reclosermodule.IRecloserReading=} [properties] Properties to set
         * @returns {reclosermodule.RecloserReading} RecloserReading instance
         */
        RecloserReading.create = function create(properties) {
            return new RecloserReading(properties);
        };

        /**
         * Encodes the specified RecloserReading message. Does not implicitly {@link reclosermodule.RecloserReading.verify|verify} messages.
         * @function encode
         * @memberof reclosermodule.RecloserReading
         * @static
         * @param {reclosermodule.IRecloserReading} message RecloserReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserReading.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipmentTerminalReading != null && Object.hasOwnProperty.call(message, "conductingEquipmentTerminalReading"))
                $root.commonmodule.ConductingEquipmentTerminalReading.encode(message.conductingEquipmentTerminalReading, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.diffReadingMMXU != null && Object.hasOwnProperty.call(message, "diffReadingMMXU"))
                $root.commonmodule.ReadingMMXU.encode(message.diffReadingMMXU, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.phaseMMTN != null && Object.hasOwnProperty.call(message, "phaseMMTN"))
                $root.commonmodule.PhaseMMTN.encode(message.phaseMMTN, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.readingMMTR != null && Object.hasOwnProperty.call(message, "readingMMTR"))
                $root.commonmodule.ReadingMMTR.encode(message.readingMMTR, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.readingMMXU != null && Object.hasOwnProperty.call(message, "readingMMXU"))
                $root.commonmodule.ReadingMMXU.encode(message.readingMMXU, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RecloserReading message, length delimited. Does not implicitly {@link reclosermodule.RecloserReading.verify|verify} messages.
         * @function encodeDelimited
         * @memberof reclosermodule.RecloserReading
         * @static
         * @param {reclosermodule.IRecloserReading} message RecloserReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserReading.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RecloserReading message from the specified reader or buffer.
         * @function decode
         * @memberof reclosermodule.RecloserReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {reclosermodule.RecloserReading} RecloserReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserReading.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.reclosermodule.RecloserReading();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.diffReadingMMXU = $root.commonmodule.ReadingMMXU.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.phaseMMTN = $root.commonmodule.PhaseMMTN.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.readingMMTR = $root.commonmodule.ReadingMMTR.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.readingMMXU = $root.commonmodule.ReadingMMXU.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RecloserReading message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof reclosermodule.RecloserReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {reclosermodule.RecloserReading} RecloserReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserReading.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RecloserReading message.
         * @function verify
         * @memberof reclosermodule.RecloserReading
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RecloserReading.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading")) {
                var error = $root.commonmodule.ConductingEquipmentTerminalReading.verify(message.conductingEquipmentTerminalReading);
                if (error)
                    return "conductingEquipmentTerminalReading." + error;
            }
            if (message.diffReadingMMXU != null && message.hasOwnProperty("diffReadingMMXU")) {
                var error = $root.commonmodule.ReadingMMXU.verify(message.diffReadingMMXU);
                if (error)
                    return "diffReadingMMXU." + error;
            }
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN")) {
                var error = $root.commonmodule.PhaseMMTN.verify(message.phaseMMTN);
                if (error)
                    return "phaseMMTN." + error;
            }
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR")) {
                var error = $root.commonmodule.ReadingMMTR.verify(message.readingMMTR);
                if (error)
                    return "readingMMTR." + error;
            }
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU")) {
                var error = $root.commonmodule.ReadingMMXU.verify(message.readingMMXU);
                if (error)
                    return "readingMMXU." + error;
            }
            return null;
        };

        /**
         * Creates a RecloserReading message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof reclosermodule.RecloserReading
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {reclosermodule.RecloserReading} RecloserReading
         */
        RecloserReading.fromObject = function fromObject(object) {
            if (object instanceof $root.reclosermodule.RecloserReading)
                return object;
            var message = new $root.reclosermodule.RecloserReading();
            if (object.conductingEquipmentTerminalReading != null) {
                if (typeof object.conductingEquipmentTerminalReading !== "object")
                    throw TypeError(".reclosermodule.RecloserReading.conductingEquipmentTerminalReading: object expected");
                message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.fromObject(object.conductingEquipmentTerminalReading);
            }
            if (object.diffReadingMMXU != null) {
                if (typeof object.diffReadingMMXU !== "object")
                    throw TypeError(".reclosermodule.RecloserReading.diffReadingMMXU: object expected");
                message.diffReadingMMXU = $root.commonmodule.ReadingMMXU.fromObject(object.diffReadingMMXU);
            }
            if (object.phaseMMTN != null) {
                if (typeof object.phaseMMTN !== "object")
                    throw TypeError(".reclosermodule.RecloserReading.phaseMMTN: object expected");
                message.phaseMMTN = $root.commonmodule.PhaseMMTN.fromObject(object.phaseMMTN);
            }
            if (object.readingMMTR != null) {
                if (typeof object.readingMMTR !== "object")
                    throw TypeError(".reclosermodule.RecloserReading.readingMMTR: object expected");
                message.readingMMTR = $root.commonmodule.ReadingMMTR.fromObject(object.readingMMTR);
            }
            if (object.readingMMXU != null) {
                if (typeof object.readingMMXU !== "object")
                    throw TypeError(".reclosermodule.RecloserReading.readingMMXU: object expected");
                message.readingMMXU = $root.commonmodule.ReadingMMXU.fromObject(object.readingMMXU);
            }
            return message;
        };

        /**
         * Creates a plain object from a RecloserReading message. Also converts values to other types if specified.
         * @function toObject
         * @memberof reclosermodule.RecloserReading
         * @static
         * @param {reclosermodule.RecloserReading} message RecloserReading
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RecloserReading.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conductingEquipmentTerminalReading = null;
                object.diffReadingMMXU = null;
                object.phaseMMTN = null;
                object.readingMMTR = null;
                object.readingMMXU = null;
            }
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading"))
                object.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.toObject(message.conductingEquipmentTerminalReading, options);
            if (message.diffReadingMMXU != null && message.hasOwnProperty("diffReadingMMXU"))
                object.diffReadingMMXU = $root.commonmodule.ReadingMMXU.toObject(message.diffReadingMMXU, options);
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN"))
                object.phaseMMTN = $root.commonmodule.PhaseMMTN.toObject(message.phaseMMTN, options);
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR"))
                object.readingMMTR = $root.commonmodule.ReadingMMTR.toObject(message.readingMMTR, options);
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU"))
                object.readingMMXU = $root.commonmodule.ReadingMMXU.toObject(message.readingMMXU, options);
            return object;
        };

        /**
         * Converts this RecloserReading to JSON.
         * @function toJSON
         * @memberof reclosermodule.RecloserReading
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RecloserReading.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RecloserReading;
    })();

    reclosermodule.RecloserReadingProfile = (function() {

        /**
         * Properties of a RecloserReadingProfile.
         * @memberof reclosermodule
         * @interface IRecloserReadingProfile
         * @property {commonmodule.IReadingMessageInfo|null} [readingMessageInfo] RecloserReadingProfile readingMessageInfo
         * @property {commonmodule.IIED|null} [ied] RecloserReadingProfile ied
         * @property {reclosermodule.IRecloser|null} [recloser] RecloserReadingProfile recloser
         * @property {Array.<reclosermodule.IRecloserReading>|null} [recloserReading] RecloserReadingProfile recloserReading
         */

        /**
         * Constructs a new RecloserReadingProfile.
         * @memberof reclosermodule
         * @classdesc Represents a RecloserReadingProfile.
         * @implements IRecloserReadingProfile
         * @constructor
         * @param {reclosermodule.IRecloserReadingProfile=} [properties] Properties to set
         */
        function RecloserReadingProfile(properties) {
            this.recloserReading = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RecloserReadingProfile readingMessageInfo.
         * @member {commonmodule.IReadingMessageInfo|null|undefined} readingMessageInfo
         * @memberof reclosermodule.RecloserReadingProfile
         * @instance
         */
        RecloserReadingProfile.prototype.readingMessageInfo = null;

        /**
         * RecloserReadingProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof reclosermodule.RecloserReadingProfile
         * @instance
         */
        RecloserReadingProfile.prototype.ied = null;

        /**
         * RecloserReadingProfile recloser.
         * @member {reclosermodule.IRecloser|null|undefined} recloser
         * @memberof reclosermodule.RecloserReadingProfile
         * @instance
         */
        RecloserReadingProfile.prototype.recloser = null;

        /**
         * RecloserReadingProfile recloserReading.
         * @member {Array.<reclosermodule.IRecloserReading>} recloserReading
         * @memberof reclosermodule.RecloserReadingProfile
         * @instance
         */
        RecloserReadingProfile.prototype.recloserReading = $util.emptyArray;

        /**
         * Creates a new RecloserReadingProfile instance using the specified properties.
         * @function create
         * @memberof reclosermodule.RecloserReadingProfile
         * @static
         * @param {reclosermodule.IRecloserReadingProfile=} [properties] Properties to set
         * @returns {reclosermodule.RecloserReadingProfile} RecloserReadingProfile instance
         */
        RecloserReadingProfile.create = function create(properties) {
            return new RecloserReadingProfile(properties);
        };

        /**
         * Encodes the specified RecloserReadingProfile message. Does not implicitly {@link reclosermodule.RecloserReadingProfile.verify|verify} messages.
         * @function encode
         * @memberof reclosermodule.RecloserReadingProfile
         * @static
         * @param {reclosermodule.IRecloserReadingProfile} message RecloserReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserReadingProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.readingMessageInfo != null && Object.hasOwnProperty.call(message, "readingMessageInfo"))
                $root.commonmodule.ReadingMessageInfo.encode(message.readingMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.recloser != null && Object.hasOwnProperty.call(message, "recloser"))
                $root.reclosermodule.Recloser.encode(message.recloser, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.recloserReading != null && message.recloserReading.length)
                for (var i = 0; i < message.recloserReading.length; ++i)
                    $root.reclosermodule.RecloserReading.encode(message.recloserReading[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RecloserReadingProfile message, length delimited. Does not implicitly {@link reclosermodule.RecloserReadingProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof reclosermodule.RecloserReadingProfile
         * @static
         * @param {reclosermodule.IRecloserReadingProfile} message RecloserReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserReadingProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RecloserReadingProfile message from the specified reader or buffer.
         * @function decode
         * @memberof reclosermodule.RecloserReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {reclosermodule.RecloserReadingProfile} RecloserReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserReadingProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.reclosermodule.RecloserReadingProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.recloser = $root.reclosermodule.Recloser.decode(reader, reader.uint32());
                    break;
                case 4:
                    if (!(message.recloserReading && message.recloserReading.length))
                        message.recloserReading = [];
                    message.recloserReading.push($root.reclosermodule.RecloserReading.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RecloserReadingProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof reclosermodule.RecloserReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {reclosermodule.RecloserReadingProfile} RecloserReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserReadingProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RecloserReadingProfile message.
         * @function verify
         * @memberof reclosermodule.RecloserReadingProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RecloserReadingProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo")) {
                var error = $root.commonmodule.ReadingMessageInfo.verify(message.readingMessageInfo);
                if (error)
                    return "readingMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.recloser != null && message.hasOwnProperty("recloser")) {
                var error = $root.reclosermodule.Recloser.verify(message.recloser);
                if (error)
                    return "recloser." + error;
            }
            if (message.recloserReading != null && message.hasOwnProperty("recloserReading")) {
                if (!Array.isArray(message.recloserReading))
                    return "recloserReading: array expected";
                for (var i = 0; i < message.recloserReading.length; ++i) {
                    var error = $root.reclosermodule.RecloserReading.verify(message.recloserReading[i]);
                    if (error)
                        return "recloserReading." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RecloserReadingProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof reclosermodule.RecloserReadingProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {reclosermodule.RecloserReadingProfile} RecloserReadingProfile
         */
        RecloserReadingProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.reclosermodule.RecloserReadingProfile)
                return object;
            var message = new $root.reclosermodule.RecloserReadingProfile();
            if (object.readingMessageInfo != null) {
                if (typeof object.readingMessageInfo !== "object")
                    throw TypeError(".reclosermodule.RecloserReadingProfile.readingMessageInfo: object expected");
                message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.fromObject(object.readingMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".reclosermodule.RecloserReadingProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.recloser != null) {
                if (typeof object.recloser !== "object")
                    throw TypeError(".reclosermodule.RecloserReadingProfile.recloser: object expected");
                message.recloser = $root.reclosermodule.Recloser.fromObject(object.recloser);
            }
            if (object.recloserReading) {
                if (!Array.isArray(object.recloserReading))
                    throw TypeError(".reclosermodule.RecloserReadingProfile.recloserReading: array expected");
                message.recloserReading = [];
                for (var i = 0; i < object.recloserReading.length; ++i) {
                    if (typeof object.recloserReading[i] !== "object")
                        throw TypeError(".reclosermodule.RecloserReadingProfile.recloserReading: object expected");
                    message.recloserReading[i] = $root.reclosermodule.RecloserReading.fromObject(object.recloserReading[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RecloserReadingProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof reclosermodule.RecloserReadingProfile
         * @static
         * @param {reclosermodule.RecloserReadingProfile} message RecloserReadingProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RecloserReadingProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.recloserReading = [];
            if (options.defaults) {
                object.readingMessageInfo = null;
                object.ied = null;
                object.recloser = null;
            }
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo"))
                object.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.toObject(message.readingMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.recloser != null && message.hasOwnProperty("recloser"))
                object.recloser = $root.reclosermodule.Recloser.toObject(message.recloser, options);
            if (message.recloserReading && message.recloserReading.length) {
                object.recloserReading = [];
                for (var j = 0; j < message.recloserReading.length; ++j)
                    object.recloserReading[j] = $root.reclosermodule.RecloserReading.toObject(message.recloserReading[j], options);
            }
            return object;
        };

        /**
         * Converts this RecloserReadingProfile to JSON.
         * @function toJSON
         * @memberof reclosermodule.RecloserReadingProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RecloserReadingProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RecloserReadingProfile;
    })();

    reclosermodule.RecloserStatus = (function() {

        /**
         * Properties of a RecloserStatus.
         * @memberof reclosermodule
         * @interface IRecloserStatus
         * @property {commonmodule.IStatusValue|null} [statusValue] RecloserStatus statusValue
         * @property {commonmodule.IStatusAndEventXCBR|null} [statusAndEventXCBR] RecloserStatus statusAndEventXCBR
         * @property {commonmodule.IDeviceStatus|null} [deviceStatus] RecloserStatus deviceStatus
         */

        /**
         * Constructs a new RecloserStatus.
         * @memberof reclosermodule
         * @classdesc Represents a RecloserStatus.
         * @implements IRecloserStatus
         * @constructor
         * @param {reclosermodule.IRecloserStatus=} [properties] Properties to set
         */
        function RecloserStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RecloserStatus statusValue.
         * @member {commonmodule.IStatusValue|null|undefined} statusValue
         * @memberof reclosermodule.RecloserStatus
         * @instance
         */
        RecloserStatus.prototype.statusValue = null;

        /**
         * RecloserStatus statusAndEventXCBR.
         * @member {commonmodule.IStatusAndEventXCBR|null|undefined} statusAndEventXCBR
         * @memberof reclosermodule.RecloserStatus
         * @instance
         */
        RecloserStatus.prototype.statusAndEventXCBR = null;

        /**
         * RecloserStatus deviceStatus.
         * @member {commonmodule.IDeviceStatus|null|undefined} deviceStatus
         * @memberof reclosermodule.RecloserStatus
         * @instance
         */
        RecloserStatus.prototype.deviceStatus = null;

        /**
         * Creates a new RecloserStatus instance using the specified properties.
         * @function create
         * @memberof reclosermodule.RecloserStatus
         * @static
         * @param {reclosermodule.IRecloserStatus=} [properties] Properties to set
         * @returns {reclosermodule.RecloserStatus} RecloserStatus instance
         */
        RecloserStatus.create = function create(properties) {
            return new RecloserStatus(properties);
        };

        /**
         * Encodes the specified RecloserStatus message. Does not implicitly {@link reclosermodule.RecloserStatus.verify|verify} messages.
         * @function encode
         * @memberof reclosermodule.RecloserStatus
         * @static
         * @param {reclosermodule.IRecloserStatus} message RecloserStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusValue != null && Object.hasOwnProperty.call(message, "statusValue"))
                $root.commonmodule.StatusValue.encode(message.statusValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.statusAndEventXCBR != null && Object.hasOwnProperty.call(message, "statusAndEventXCBR"))
                $root.commonmodule.StatusAndEventXCBR.encode(message.statusAndEventXCBR, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.deviceStatus != null && Object.hasOwnProperty.call(message, "deviceStatus"))
                $root.commonmodule.DeviceStatus.encode(message.deviceStatus, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RecloserStatus message, length delimited. Does not implicitly {@link reclosermodule.RecloserStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof reclosermodule.RecloserStatus
         * @static
         * @param {reclosermodule.IRecloserStatus} message RecloserStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RecloserStatus message from the specified reader or buffer.
         * @function decode
         * @memberof reclosermodule.RecloserStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {reclosermodule.RecloserStatus} RecloserStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.reclosermodule.RecloserStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusValue = $root.commonmodule.StatusValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.statusAndEventXCBR = $root.commonmodule.StatusAndEventXCBR.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.deviceStatus = $root.commonmodule.DeviceStatus.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RecloserStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof reclosermodule.RecloserStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {reclosermodule.RecloserStatus} RecloserStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RecloserStatus message.
         * @function verify
         * @memberof reclosermodule.RecloserStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RecloserStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusValue != null && message.hasOwnProperty("statusValue")) {
                var error = $root.commonmodule.StatusValue.verify(message.statusValue);
                if (error)
                    return "statusValue." + error;
            }
            if (message.statusAndEventXCBR != null && message.hasOwnProperty("statusAndEventXCBR")) {
                var error = $root.commonmodule.StatusAndEventXCBR.verify(message.statusAndEventXCBR);
                if (error)
                    return "statusAndEventXCBR." + error;
            }
            if (message.deviceStatus != null && message.hasOwnProperty("deviceStatus")) {
                var error = $root.commonmodule.DeviceStatus.verify(message.deviceStatus);
                if (error)
                    return "deviceStatus." + error;
            }
            return null;
        };

        /**
         * Creates a RecloserStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof reclosermodule.RecloserStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {reclosermodule.RecloserStatus} RecloserStatus
         */
        RecloserStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.reclosermodule.RecloserStatus)
                return object;
            var message = new $root.reclosermodule.RecloserStatus();
            if (object.statusValue != null) {
                if (typeof object.statusValue !== "object")
                    throw TypeError(".reclosermodule.RecloserStatus.statusValue: object expected");
                message.statusValue = $root.commonmodule.StatusValue.fromObject(object.statusValue);
            }
            if (object.statusAndEventXCBR != null) {
                if (typeof object.statusAndEventXCBR !== "object")
                    throw TypeError(".reclosermodule.RecloserStatus.statusAndEventXCBR: object expected");
                message.statusAndEventXCBR = $root.commonmodule.StatusAndEventXCBR.fromObject(object.statusAndEventXCBR);
            }
            if (object.deviceStatus != null) {
                if (typeof object.deviceStatus !== "object")
                    throw TypeError(".reclosermodule.RecloserStatus.deviceStatus: object expected");
                message.deviceStatus = $root.commonmodule.DeviceStatus.fromObject(object.deviceStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a RecloserStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof reclosermodule.RecloserStatus
         * @static
         * @param {reclosermodule.RecloserStatus} message RecloserStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RecloserStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusValue = null;
                object.statusAndEventXCBR = null;
                object.deviceStatus = null;
            }
            if (message.statusValue != null && message.hasOwnProperty("statusValue"))
                object.statusValue = $root.commonmodule.StatusValue.toObject(message.statusValue, options);
            if (message.statusAndEventXCBR != null && message.hasOwnProperty("statusAndEventXCBR"))
                object.statusAndEventXCBR = $root.commonmodule.StatusAndEventXCBR.toObject(message.statusAndEventXCBR, options);
            if (message.deviceStatus != null && message.hasOwnProperty("deviceStatus"))
                object.deviceStatus = $root.commonmodule.DeviceStatus.toObject(message.deviceStatus, options);
            return object;
        };

        /**
         * Converts this RecloserStatus to JSON.
         * @function toJSON
         * @memberof reclosermodule.RecloserStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RecloserStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RecloserStatus;
    })();

    reclosermodule.RecloserStatusProfile = (function() {

        /**
         * Properties of a RecloserStatusProfile.
         * @memberof reclosermodule
         * @interface IRecloserStatusProfile
         * @property {commonmodule.IStatusMessageInfo|null} [statusMessageInfo] RecloserStatusProfile statusMessageInfo
         * @property {commonmodule.IIED|null} [ied] RecloserStatusProfile ied
         * @property {reclosermodule.IRecloser|null} [recloser] RecloserStatusProfile recloser
         * @property {reclosermodule.IRecloserStatus|null} [recloserStatus] RecloserStatusProfile recloserStatus
         */

        /**
         * Constructs a new RecloserStatusProfile.
         * @memberof reclosermodule
         * @classdesc Represents a RecloserStatusProfile.
         * @implements IRecloserStatusProfile
         * @constructor
         * @param {reclosermodule.IRecloserStatusProfile=} [properties] Properties to set
         */
        function RecloserStatusProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RecloserStatusProfile statusMessageInfo.
         * @member {commonmodule.IStatusMessageInfo|null|undefined} statusMessageInfo
         * @memberof reclosermodule.RecloserStatusProfile
         * @instance
         */
        RecloserStatusProfile.prototype.statusMessageInfo = null;

        /**
         * RecloserStatusProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof reclosermodule.RecloserStatusProfile
         * @instance
         */
        RecloserStatusProfile.prototype.ied = null;

        /**
         * RecloserStatusProfile recloser.
         * @member {reclosermodule.IRecloser|null|undefined} recloser
         * @memberof reclosermodule.RecloserStatusProfile
         * @instance
         */
        RecloserStatusProfile.prototype.recloser = null;

        /**
         * RecloserStatusProfile recloserStatus.
         * @member {reclosermodule.IRecloserStatus|null|undefined} recloserStatus
         * @memberof reclosermodule.RecloserStatusProfile
         * @instance
         */
        RecloserStatusProfile.prototype.recloserStatus = null;

        /**
         * Creates a new RecloserStatusProfile instance using the specified properties.
         * @function create
         * @memberof reclosermodule.RecloserStatusProfile
         * @static
         * @param {reclosermodule.IRecloserStatusProfile=} [properties] Properties to set
         * @returns {reclosermodule.RecloserStatusProfile} RecloserStatusProfile instance
         */
        RecloserStatusProfile.create = function create(properties) {
            return new RecloserStatusProfile(properties);
        };

        /**
         * Encodes the specified RecloserStatusProfile message. Does not implicitly {@link reclosermodule.RecloserStatusProfile.verify|verify} messages.
         * @function encode
         * @memberof reclosermodule.RecloserStatusProfile
         * @static
         * @param {reclosermodule.IRecloserStatusProfile} message RecloserStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserStatusProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusMessageInfo != null && Object.hasOwnProperty.call(message, "statusMessageInfo"))
                $root.commonmodule.StatusMessageInfo.encode(message.statusMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.recloser != null && Object.hasOwnProperty.call(message, "recloser"))
                $root.reclosermodule.Recloser.encode(message.recloser, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.recloserStatus != null && Object.hasOwnProperty.call(message, "recloserStatus"))
                $root.reclosermodule.RecloserStatus.encode(message.recloserStatus, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RecloserStatusProfile message, length delimited. Does not implicitly {@link reclosermodule.RecloserStatusProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof reclosermodule.RecloserStatusProfile
         * @static
         * @param {reclosermodule.IRecloserStatusProfile} message RecloserStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RecloserStatusProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RecloserStatusProfile message from the specified reader or buffer.
         * @function decode
         * @memberof reclosermodule.RecloserStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {reclosermodule.RecloserStatusProfile} RecloserStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserStatusProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.reclosermodule.RecloserStatusProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.recloser = $root.reclosermodule.Recloser.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.recloserStatus = $root.reclosermodule.RecloserStatus.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RecloserStatusProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof reclosermodule.RecloserStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {reclosermodule.RecloserStatusProfile} RecloserStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RecloserStatusProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RecloserStatusProfile message.
         * @function verify
         * @memberof reclosermodule.RecloserStatusProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RecloserStatusProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo")) {
                var error = $root.commonmodule.StatusMessageInfo.verify(message.statusMessageInfo);
                if (error)
                    return "statusMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.recloser != null && message.hasOwnProperty("recloser")) {
                var error = $root.reclosermodule.Recloser.verify(message.recloser);
                if (error)
                    return "recloser." + error;
            }
            if (message.recloserStatus != null && message.hasOwnProperty("recloserStatus")) {
                var error = $root.reclosermodule.RecloserStatus.verify(message.recloserStatus);
                if (error)
                    return "recloserStatus." + error;
            }
            return null;
        };

        /**
         * Creates a RecloserStatusProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof reclosermodule.RecloserStatusProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {reclosermodule.RecloserStatusProfile} RecloserStatusProfile
         */
        RecloserStatusProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.reclosermodule.RecloserStatusProfile)
                return object;
            var message = new $root.reclosermodule.RecloserStatusProfile();
            if (object.statusMessageInfo != null) {
                if (typeof object.statusMessageInfo !== "object")
                    throw TypeError(".reclosermodule.RecloserStatusProfile.statusMessageInfo: object expected");
                message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.fromObject(object.statusMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".reclosermodule.RecloserStatusProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.recloser != null) {
                if (typeof object.recloser !== "object")
                    throw TypeError(".reclosermodule.RecloserStatusProfile.recloser: object expected");
                message.recloser = $root.reclosermodule.Recloser.fromObject(object.recloser);
            }
            if (object.recloserStatus != null) {
                if (typeof object.recloserStatus !== "object")
                    throw TypeError(".reclosermodule.RecloserStatusProfile.recloserStatus: object expected");
                message.recloserStatus = $root.reclosermodule.RecloserStatus.fromObject(object.recloserStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a RecloserStatusProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof reclosermodule.RecloserStatusProfile
         * @static
         * @param {reclosermodule.RecloserStatusProfile} message RecloserStatusProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RecloserStatusProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusMessageInfo = null;
                object.ied = null;
                object.recloser = null;
                object.recloserStatus = null;
            }
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo"))
                object.statusMessageInfo = $root.commonmodule.StatusMessageInfo.toObject(message.statusMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.recloser != null && message.hasOwnProperty("recloser"))
                object.recloser = $root.reclosermodule.Recloser.toObject(message.recloser, options);
            if (message.recloserStatus != null && message.hasOwnProperty("recloserStatus"))
                object.recloserStatus = $root.reclosermodule.RecloserStatus.toObject(message.recloserStatus, options);
            return object;
        };

        /**
         * Converts this RecloserStatusProfile to JSON.
         * @function toJSON
         * @memberof reclosermodule.RecloserStatusProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RecloserStatusProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RecloserStatusProfile;
    })();

    return reclosermodule;
})();

$root.shuntmodule = (function() {

    /**
     * Namespace shuntmodule.
     * @exports shuntmodule
     * @namespace
     */
    var shuntmodule = {};

    shuntmodule.ShuntSystem = (function() {

        /**
         * Properties of a ShuntSystem.
         * @memberof shuntmodule
         * @interface IShuntSystem
         * @property {commonmodule.IConductingEquipment|null} [conductingEquipment] ShuntSystem conductingEquipment
         */

        /**
         * Constructs a new ShuntSystem.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntSystem.
         * @implements IShuntSystem
         * @constructor
         * @param {shuntmodule.IShuntSystem=} [properties] Properties to set
         */
        function ShuntSystem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntSystem conductingEquipment.
         * @member {commonmodule.IConductingEquipment|null|undefined} conductingEquipment
         * @memberof shuntmodule.ShuntSystem
         * @instance
         */
        ShuntSystem.prototype.conductingEquipment = null;

        /**
         * Creates a new ShuntSystem instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntSystem
         * @static
         * @param {shuntmodule.IShuntSystem=} [properties] Properties to set
         * @returns {shuntmodule.ShuntSystem} ShuntSystem instance
         */
        ShuntSystem.create = function create(properties) {
            return new ShuntSystem(properties);
        };

        /**
         * Encodes the specified ShuntSystem message. Does not implicitly {@link shuntmodule.ShuntSystem.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntSystem
         * @static
         * @param {shuntmodule.IShuntSystem} message ShuntSystem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntSystem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipment != null && Object.hasOwnProperty.call(message, "conductingEquipment"))
                $root.commonmodule.ConductingEquipment.encode(message.conductingEquipment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntSystem message, length delimited. Does not implicitly {@link shuntmodule.ShuntSystem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntSystem
         * @static
         * @param {shuntmodule.IShuntSystem} message ShuntSystem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntSystem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntSystem message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntSystem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntSystem} ShuntSystem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntSystem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntSystem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipment = $root.commonmodule.ConductingEquipment.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntSystem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntSystem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntSystem} ShuntSystem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntSystem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntSystem message.
         * @function verify
         * @memberof shuntmodule.ShuntSystem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntSystem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment")) {
                var error = $root.commonmodule.ConductingEquipment.verify(message.conductingEquipment);
                if (error)
                    return "conductingEquipment." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntSystem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntSystem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntSystem} ShuntSystem
         */
        ShuntSystem.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntSystem)
                return object;
            var message = new $root.shuntmodule.ShuntSystem();
            if (object.conductingEquipment != null) {
                if (typeof object.conductingEquipment !== "object")
                    throw TypeError(".shuntmodule.ShuntSystem.conductingEquipment: object expected");
                message.conductingEquipment = $root.commonmodule.ConductingEquipment.fromObject(object.conductingEquipment);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntSystem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntSystem
         * @static
         * @param {shuntmodule.ShuntSystem} message ShuntSystem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntSystem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.conductingEquipment = null;
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment"))
                object.conductingEquipment = $root.commonmodule.ConductingEquipment.toObject(message.conductingEquipment, options);
            return object;
        };

        /**
         * Converts this ShuntSystem to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntSystem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntSystem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntSystem;
    })();

    /**
     * SwitchingCapabilityKind enum.
     * @name shuntmodule.SwitchingCapabilityKind
     * @enum {number}
     * @property {number} SwitchingCapabilityKind_none=0 SwitchingCapabilityKind_none value
     * @property {number} SwitchingCapabilityKind_open=1 SwitchingCapabilityKind_open value
     * @property {number} SwitchingCapabilityKind_close=2 SwitchingCapabilityKind_close value
     * @property {number} SwitchingCapabilityKind_open_and_close=3 SwitchingCapabilityKind_open_and_close value
     */
    shuntmodule.SwitchingCapabilityKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "SwitchingCapabilityKind_none"] = 0;
        values[valuesById[1] = "SwitchingCapabilityKind_open"] = 1;
        values[valuesById[2] = "SwitchingCapabilityKind_close"] = 2;
        values[valuesById[3] = "SwitchingCapabilityKind_open_and_close"] = 3;
        return values;
    })();

    shuntmodule.Optional_SwitchingCapabilityKind = (function() {

        /**
         * Properties of an Optional_SwitchingCapabilityKind.
         * @memberof shuntmodule
         * @interface IOptional_SwitchingCapabilityKind
         * @property {shuntmodule.SwitchingCapabilityKind|null} [value] Optional_SwitchingCapabilityKind value
         */

        /**
         * Constructs a new Optional_SwitchingCapabilityKind.
         * @memberof shuntmodule
         * @classdesc Represents an Optional_SwitchingCapabilityKind.
         * @implements IOptional_SwitchingCapabilityKind
         * @constructor
         * @param {shuntmodule.IOptional_SwitchingCapabilityKind=} [properties] Properties to set
         */
        function Optional_SwitchingCapabilityKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_SwitchingCapabilityKind value.
         * @member {shuntmodule.SwitchingCapabilityKind} value
         * @memberof shuntmodule.Optional_SwitchingCapabilityKind
         * @instance
         */
        Optional_SwitchingCapabilityKind.prototype.value = 0;

        /**
         * Creates a new Optional_SwitchingCapabilityKind instance using the specified properties.
         * @function create
         * @memberof shuntmodule.Optional_SwitchingCapabilityKind
         * @static
         * @param {shuntmodule.IOptional_SwitchingCapabilityKind=} [properties] Properties to set
         * @returns {shuntmodule.Optional_SwitchingCapabilityKind} Optional_SwitchingCapabilityKind instance
         */
        Optional_SwitchingCapabilityKind.create = function create(properties) {
            return new Optional_SwitchingCapabilityKind(properties);
        };

        /**
         * Encodes the specified Optional_SwitchingCapabilityKind message. Does not implicitly {@link shuntmodule.Optional_SwitchingCapabilityKind.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.Optional_SwitchingCapabilityKind
         * @static
         * @param {shuntmodule.IOptional_SwitchingCapabilityKind} message Optional_SwitchingCapabilityKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_SwitchingCapabilityKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_SwitchingCapabilityKind message, length delimited. Does not implicitly {@link shuntmodule.Optional_SwitchingCapabilityKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.Optional_SwitchingCapabilityKind
         * @static
         * @param {shuntmodule.IOptional_SwitchingCapabilityKind} message Optional_SwitchingCapabilityKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_SwitchingCapabilityKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_SwitchingCapabilityKind message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.Optional_SwitchingCapabilityKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.Optional_SwitchingCapabilityKind} Optional_SwitchingCapabilityKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_SwitchingCapabilityKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.Optional_SwitchingCapabilityKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_SwitchingCapabilityKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.Optional_SwitchingCapabilityKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.Optional_SwitchingCapabilityKind} Optional_SwitchingCapabilityKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_SwitchingCapabilityKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_SwitchingCapabilityKind message.
         * @function verify
         * @memberof shuntmodule.Optional_SwitchingCapabilityKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_SwitchingCapabilityKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_SwitchingCapabilityKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.Optional_SwitchingCapabilityKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.Optional_SwitchingCapabilityKind} Optional_SwitchingCapabilityKind
         */
        Optional_SwitchingCapabilityKind.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.Optional_SwitchingCapabilityKind)
                return object;
            var message = new $root.shuntmodule.Optional_SwitchingCapabilityKind();
            switch (object.value) {
            case "SwitchingCapabilityKind_none":
            case 0:
                message.value = 0;
                break;
            case "SwitchingCapabilityKind_open":
            case 1:
                message.value = 1;
                break;
            case "SwitchingCapabilityKind_close":
            case 2:
                message.value = 2;
                break;
            case "SwitchingCapabilityKind_open_and_close":
            case 3:
                message.value = 3;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_SwitchingCapabilityKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.Optional_SwitchingCapabilityKind
         * @static
         * @param {shuntmodule.Optional_SwitchingCapabilityKind} message Optional_SwitchingCapabilityKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_SwitchingCapabilityKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "SwitchingCapabilityKind_none" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.shuntmodule.SwitchingCapabilityKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_SwitchingCapabilityKind to JSON.
         * @function toJSON
         * @memberof shuntmodule.Optional_SwitchingCapabilityKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_SwitchingCapabilityKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_SwitchingCapabilityKind;
    })();

    shuntmodule.ENS_SwitchingCapabilityKind = (function() {

        /**
         * Properties of a ENS_SwitchingCapabilityKind.
         * @memberof shuntmodule
         * @interface IENS_SwitchingCapabilityKind
         * @property {google.protobuf.IBoolValue|null} [blkEna] ENS_SwitchingCapabilityKind blkEna
         * @property {commonmodule.IQuality|null} [q] ENS_SwitchingCapabilityKind q
         * @property {shuntmodule.SwitchingCapabilityKind|null} [stVal] ENS_SwitchingCapabilityKind stVal
         * @property {commonmodule.ITimestamp|null} [t] ENS_SwitchingCapabilityKind t
         */

        /**
         * Constructs a new ENS_SwitchingCapabilityKind.
         * @memberof shuntmodule
         * @classdesc Represents a ENS_SwitchingCapabilityKind.
         * @implements IENS_SwitchingCapabilityKind
         * @constructor
         * @param {shuntmodule.IENS_SwitchingCapabilityKind=} [properties] Properties to set
         */
        function ENS_SwitchingCapabilityKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ENS_SwitchingCapabilityKind blkEna.
         * @member {google.protobuf.IBoolValue|null|undefined} blkEna
         * @memberof shuntmodule.ENS_SwitchingCapabilityKind
         * @instance
         */
        ENS_SwitchingCapabilityKind.prototype.blkEna = null;

        /**
         * ENS_SwitchingCapabilityKind q.
         * @member {commonmodule.IQuality|null|undefined} q
         * @memberof shuntmodule.ENS_SwitchingCapabilityKind
         * @instance
         */
        ENS_SwitchingCapabilityKind.prototype.q = null;

        /**
         * ENS_SwitchingCapabilityKind stVal.
         * @member {shuntmodule.SwitchingCapabilityKind} stVal
         * @memberof shuntmodule.ENS_SwitchingCapabilityKind
         * @instance
         */
        ENS_SwitchingCapabilityKind.prototype.stVal = 0;

        /**
         * ENS_SwitchingCapabilityKind t.
         * @member {commonmodule.ITimestamp|null|undefined} t
         * @memberof shuntmodule.ENS_SwitchingCapabilityKind
         * @instance
         */
        ENS_SwitchingCapabilityKind.prototype.t = null;

        /**
         * Creates a new ENS_SwitchingCapabilityKind instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ENS_SwitchingCapabilityKind
         * @static
         * @param {shuntmodule.IENS_SwitchingCapabilityKind=} [properties] Properties to set
         * @returns {shuntmodule.ENS_SwitchingCapabilityKind} ENS_SwitchingCapabilityKind instance
         */
        ENS_SwitchingCapabilityKind.create = function create(properties) {
            return new ENS_SwitchingCapabilityKind(properties);
        };

        /**
         * Encodes the specified ENS_SwitchingCapabilityKind message. Does not implicitly {@link shuntmodule.ENS_SwitchingCapabilityKind.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ENS_SwitchingCapabilityKind
         * @static
         * @param {shuntmodule.IENS_SwitchingCapabilityKind} message ENS_SwitchingCapabilityKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENS_SwitchingCapabilityKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.blkEna != null && Object.hasOwnProperty.call(message, "blkEna"))
                $root.google.protobuf.BoolValue.encode(message.blkEna, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.q != null && Object.hasOwnProperty.call(message, "q"))
                $root.commonmodule.Quality.encode(message.q, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.stVal != null && Object.hasOwnProperty.call(message, "stVal"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.stVal);
            if (message.t != null && Object.hasOwnProperty.call(message, "t"))
                $root.commonmodule.Timestamp.encode(message.t, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ENS_SwitchingCapabilityKind message, length delimited. Does not implicitly {@link shuntmodule.ENS_SwitchingCapabilityKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ENS_SwitchingCapabilityKind
         * @static
         * @param {shuntmodule.IENS_SwitchingCapabilityKind} message ENS_SwitchingCapabilityKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENS_SwitchingCapabilityKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ENS_SwitchingCapabilityKind message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ENS_SwitchingCapabilityKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ENS_SwitchingCapabilityKind} ENS_SwitchingCapabilityKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENS_SwitchingCapabilityKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ENS_SwitchingCapabilityKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.blkEna = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.q = $root.commonmodule.Quality.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.stVal = reader.int32();
                    break;
                case 4:
                    message.t = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ENS_SwitchingCapabilityKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ENS_SwitchingCapabilityKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ENS_SwitchingCapabilityKind} ENS_SwitchingCapabilityKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENS_SwitchingCapabilityKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ENS_SwitchingCapabilityKind message.
         * @function verify
         * @memberof shuntmodule.ENS_SwitchingCapabilityKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENS_SwitchingCapabilityKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.blkEna != null && message.hasOwnProperty("blkEna")) {
                var error = $root.google.protobuf.BoolValue.verify(message.blkEna);
                if (error)
                    return "blkEna." + error;
            }
            if (message.q != null && message.hasOwnProperty("q")) {
                var error = $root.commonmodule.Quality.verify(message.q);
                if (error)
                    return "q." + error;
            }
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                switch (message.stVal) {
                default:
                    return "stVal: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.t != null && message.hasOwnProperty("t")) {
                var error = $root.commonmodule.Timestamp.verify(message.t);
                if (error)
                    return "t." + error;
            }
            return null;
        };

        /**
         * Creates a ENS_SwitchingCapabilityKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ENS_SwitchingCapabilityKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ENS_SwitchingCapabilityKind} ENS_SwitchingCapabilityKind
         */
        ENS_SwitchingCapabilityKind.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ENS_SwitchingCapabilityKind)
                return object;
            var message = new $root.shuntmodule.ENS_SwitchingCapabilityKind();
            if (object.blkEna != null) {
                if (typeof object.blkEna !== "object")
                    throw TypeError(".shuntmodule.ENS_SwitchingCapabilityKind.blkEna: object expected");
                message.blkEna = $root.google.protobuf.BoolValue.fromObject(object.blkEna);
            }
            if (object.q != null) {
                if (typeof object.q !== "object")
                    throw TypeError(".shuntmodule.ENS_SwitchingCapabilityKind.q: object expected");
                message.q = $root.commonmodule.Quality.fromObject(object.q);
            }
            switch (object.stVal) {
            case "SwitchingCapabilityKind_none":
            case 0:
                message.stVal = 0;
                break;
            case "SwitchingCapabilityKind_open":
            case 1:
                message.stVal = 1;
                break;
            case "SwitchingCapabilityKind_close":
            case 2:
                message.stVal = 2;
                break;
            case "SwitchingCapabilityKind_open_and_close":
            case 3:
                message.stVal = 3;
                break;
            }
            if (object.t != null) {
                if (typeof object.t !== "object")
                    throw TypeError(".shuntmodule.ENS_SwitchingCapabilityKind.t: object expected");
                message.t = $root.commonmodule.Timestamp.fromObject(object.t);
            }
            return message;
        };

        /**
         * Creates a plain object from a ENS_SwitchingCapabilityKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ENS_SwitchingCapabilityKind
         * @static
         * @param {shuntmodule.ENS_SwitchingCapabilityKind} message ENS_SwitchingCapabilityKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENS_SwitchingCapabilityKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.blkEna = null;
                object.q = null;
                object.stVal = options.enums === String ? "SwitchingCapabilityKind_none" : 0;
                object.t = null;
            }
            if (message.blkEna != null && message.hasOwnProperty("blkEna"))
                object.blkEna = $root.google.protobuf.BoolValue.toObject(message.blkEna, options);
            if (message.q != null && message.hasOwnProperty("q"))
                object.q = $root.commonmodule.Quality.toObject(message.q, options);
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                object.stVal = options.enums === String ? $root.shuntmodule.SwitchingCapabilityKind[message.stVal] : message.stVal;
            if (message.t != null && message.hasOwnProperty("t"))
                object.t = $root.commonmodule.Timestamp.toObject(message.t, options);
            return object;
        };

        /**
         * Converts this ENS_SwitchingCapabilityKind to JSON.
         * @function toJSON
         * @memberof shuntmodule.ENS_SwitchingCapabilityKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENS_SwitchingCapabilityKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ENS_SwitchingCapabilityKind;
    })();

    shuntmodule.ShuntEventAndStatusYPSH = (function() {

        /**
         * Properties of a ShuntEventAndStatusYPSH.
         * @memberof shuntmodule
         * @interface IShuntEventAndStatusYPSH
         * @property {commonmodule.IControlSPC|null} [BlkCls] ShuntEventAndStatusYPSH BlkCls
         * @property {commonmodule.IControlSPC|null} [BlkOpn] ShuntEventAndStatusYPSH BlkOpn
         * @property {commonmodule.IControlDPC|null} [Pos] ShuntEventAndStatusYPSH Pos
         * @property {shuntmodule.IENS_SwitchingCapabilityKind|null} [ShOpCap] ShuntEventAndStatusYPSH ShOpCap
         */

        /**
         * Constructs a new ShuntEventAndStatusYPSH.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntEventAndStatusYPSH.
         * @implements IShuntEventAndStatusYPSH
         * @constructor
         * @param {shuntmodule.IShuntEventAndStatusYPSH=} [properties] Properties to set
         */
        function ShuntEventAndStatusYPSH(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntEventAndStatusYPSH BlkCls.
         * @member {commonmodule.IControlSPC|null|undefined} BlkCls
         * @memberof shuntmodule.ShuntEventAndStatusYPSH
         * @instance
         */
        ShuntEventAndStatusYPSH.prototype.BlkCls = null;

        /**
         * ShuntEventAndStatusYPSH BlkOpn.
         * @member {commonmodule.IControlSPC|null|undefined} BlkOpn
         * @memberof shuntmodule.ShuntEventAndStatusYPSH
         * @instance
         */
        ShuntEventAndStatusYPSH.prototype.BlkOpn = null;

        /**
         * ShuntEventAndStatusYPSH Pos.
         * @member {commonmodule.IControlDPC|null|undefined} Pos
         * @memberof shuntmodule.ShuntEventAndStatusYPSH
         * @instance
         */
        ShuntEventAndStatusYPSH.prototype.Pos = null;

        /**
         * ShuntEventAndStatusYPSH ShOpCap.
         * @member {shuntmodule.IENS_SwitchingCapabilityKind|null|undefined} ShOpCap
         * @memberof shuntmodule.ShuntEventAndStatusYPSH
         * @instance
         */
        ShuntEventAndStatusYPSH.prototype.ShOpCap = null;

        /**
         * Creates a new ShuntEventAndStatusYPSH instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntEventAndStatusYPSH
         * @static
         * @param {shuntmodule.IShuntEventAndStatusYPSH=} [properties] Properties to set
         * @returns {shuntmodule.ShuntEventAndStatusYPSH} ShuntEventAndStatusYPSH instance
         */
        ShuntEventAndStatusYPSH.create = function create(properties) {
            return new ShuntEventAndStatusYPSH(properties);
        };

        /**
         * Encodes the specified ShuntEventAndStatusYPSH message. Does not implicitly {@link shuntmodule.ShuntEventAndStatusYPSH.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntEventAndStatusYPSH
         * @static
         * @param {shuntmodule.IShuntEventAndStatusYPSH} message ShuntEventAndStatusYPSH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntEventAndStatusYPSH.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.BlkCls != null && Object.hasOwnProperty.call(message, "BlkCls"))
                $root.commonmodule.ControlSPC.encode(message.BlkCls, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.BlkOpn != null && Object.hasOwnProperty.call(message, "BlkOpn"))
                $root.commonmodule.ControlSPC.encode(message.BlkOpn, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.Pos != null && Object.hasOwnProperty.call(message, "Pos"))
                $root.commonmodule.ControlDPC.encode(message.Pos, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.ShOpCap != null && Object.hasOwnProperty.call(message, "ShOpCap"))
                $root.shuntmodule.ENS_SwitchingCapabilityKind.encode(message.ShOpCap, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntEventAndStatusYPSH message, length delimited. Does not implicitly {@link shuntmodule.ShuntEventAndStatusYPSH.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntEventAndStatusYPSH
         * @static
         * @param {shuntmodule.IShuntEventAndStatusYPSH} message ShuntEventAndStatusYPSH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntEventAndStatusYPSH.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntEventAndStatusYPSH message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntEventAndStatusYPSH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntEventAndStatusYPSH} ShuntEventAndStatusYPSH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntEventAndStatusYPSH.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntEventAndStatusYPSH();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.BlkCls = $root.commonmodule.ControlSPC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.BlkOpn = $root.commonmodule.ControlSPC.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.Pos = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ShOpCap = $root.shuntmodule.ENS_SwitchingCapabilityKind.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntEventAndStatusYPSH message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntEventAndStatusYPSH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntEventAndStatusYPSH} ShuntEventAndStatusYPSH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntEventAndStatusYPSH.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntEventAndStatusYPSH message.
         * @function verify
         * @memberof shuntmodule.ShuntEventAndStatusYPSH
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntEventAndStatusYPSH.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.BlkCls != null && message.hasOwnProperty("BlkCls")) {
                var error = $root.commonmodule.ControlSPC.verify(message.BlkCls);
                if (error)
                    return "BlkCls." + error;
            }
            if (message.BlkOpn != null && message.hasOwnProperty("BlkOpn")) {
                var error = $root.commonmodule.ControlSPC.verify(message.BlkOpn);
                if (error)
                    return "BlkOpn." + error;
            }
            if (message.Pos != null && message.hasOwnProperty("Pos")) {
                var error = $root.commonmodule.ControlDPC.verify(message.Pos);
                if (error)
                    return "Pos." + error;
            }
            if (message.ShOpCap != null && message.hasOwnProperty("ShOpCap")) {
                var error = $root.shuntmodule.ENS_SwitchingCapabilityKind.verify(message.ShOpCap);
                if (error)
                    return "ShOpCap." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntEventAndStatusYPSH message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntEventAndStatusYPSH
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntEventAndStatusYPSH} ShuntEventAndStatusYPSH
         */
        ShuntEventAndStatusYPSH.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntEventAndStatusYPSH)
                return object;
            var message = new $root.shuntmodule.ShuntEventAndStatusYPSH();
            if (object.BlkCls != null) {
                if (typeof object.BlkCls !== "object")
                    throw TypeError(".shuntmodule.ShuntEventAndStatusYPSH.BlkCls: object expected");
                message.BlkCls = $root.commonmodule.ControlSPC.fromObject(object.BlkCls);
            }
            if (object.BlkOpn != null) {
                if (typeof object.BlkOpn !== "object")
                    throw TypeError(".shuntmodule.ShuntEventAndStatusYPSH.BlkOpn: object expected");
                message.BlkOpn = $root.commonmodule.ControlSPC.fromObject(object.BlkOpn);
            }
            if (object.Pos != null) {
                if (typeof object.Pos !== "object")
                    throw TypeError(".shuntmodule.ShuntEventAndStatusYPSH.Pos: object expected");
                message.Pos = $root.commonmodule.ControlDPC.fromObject(object.Pos);
            }
            if (object.ShOpCap != null) {
                if (typeof object.ShOpCap !== "object")
                    throw TypeError(".shuntmodule.ShuntEventAndStatusYPSH.ShOpCap: object expected");
                message.ShOpCap = $root.shuntmodule.ENS_SwitchingCapabilityKind.fromObject(object.ShOpCap);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntEventAndStatusYPSH message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntEventAndStatusYPSH
         * @static
         * @param {shuntmodule.ShuntEventAndStatusYPSH} message ShuntEventAndStatusYPSH
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntEventAndStatusYPSH.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.BlkCls = null;
                object.BlkOpn = null;
                object.Pos = null;
                object.ShOpCap = null;
            }
            if (message.BlkCls != null && message.hasOwnProperty("BlkCls"))
                object.BlkCls = $root.commonmodule.ControlSPC.toObject(message.BlkCls, options);
            if (message.BlkOpn != null && message.hasOwnProperty("BlkOpn"))
                object.BlkOpn = $root.commonmodule.ControlSPC.toObject(message.BlkOpn, options);
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                object.Pos = $root.commonmodule.ControlDPC.toObject(message.Pos, options);
            if (message.ShOpCap != null && message.hasOwnProperty("ShOpCap"))
                object.ShOpCap = $root.shuntmodule.ENS_SwitchingCapabilityKind.toObject(message.ShOpCap, options);
            return object;
        };

        /**
         * Converts this ShuntEventAndStatusYPSH to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntEventAndStatusYPSH
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntEventAndStatusYPSH.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntEventAndStatusYPSH;
    })();

    shuntmodule.ShuntPoint = (function() {

        /**
         * Properties of a ShuntPoint.
         * @memberof shuntmodule
         * @interface IShuntPoint
         * @property {shuntmodule.IShuntEventAndStatusYPSH|null} [control] ShuntPoint control
         * @property {commonmodule.ITimestamp|null} [startTime] ShuntPoint startTime
         */

        /**
         * Constructs a new ShuntPoint.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntPoint.
         * @implements IShuntPoint
         * @constructor
         * @param {shuntmodule.IShuntPoint=} [properties] Properties to set
         */
        function ShuntPoint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntPoint control.
         * @member {shuntmodule.IShuntEventAndStatusYPSH|null|undefined} control
         * @memberof shuntmodule.ShuntPoint
         * @instance
         */
        ShuntPoint.prototype.control = null;

        /**
         * ShuntPoint startTime.
         * @member {commonmodule.ITimestamp|null|undefined} startTime
         * @memberof shuntmodule.ShuntPoint
         * @instance
         */
        ShuntPoint.prototype.startTime = null;

        /**
         * Creates a new ShuntPoint instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntPoint
         * @static
         * @param {shuntmodule.IShuntPoint=} [properties] Properties to set
         * @returns {shuntmodule.ShuntPoint} ShuntPoint instance
         */
        ShuntPoint.create = function create(properties) {
            return new ShuntPoint(properties);
        };

        /**
         * Encodes the specified ShuntPoint message. Does not implicitly {@link shuntmodule.ShuntPoint.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntPoint
         * @static
         * @param {shuntmodule.IShuntPoint} message ShuntPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntPoint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.control != null && Object.hasOwnProperty.call(message, "control"))
                $root.shuntmodule.ShuntEventAndStatusYPSH.encode(message.control, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                $root.commonmodule.Timestamp.encode(message.startTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntPoint message, length delimited. Does not implicitly {@link shuntmodule.ShuntPoint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntPoint
         * @static
         * @param {shuntmodule.IShuntPoint} message ShuntPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntPoint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntPoint message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntPoint} ShuntPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntPoint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntPoint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.control = $root.shuntmodule.ShuntEventAndStatusYPSH.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.startTime = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntPoint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntPoint} ShuntPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntPoint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntPoint message.
         * @function verify
         * @memberof shuntmodule.ShuntPoint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntPoint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.control != null && message.hasOwnProperty("control")) {
                var error = $root.shuntmodule.ShuntEventAndStatusYPSH.verify(message.control);
                if (error)
                    return "control." + error;
            }
            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                var error = $root.commonmodule.Timestamp.verify(message.startTime);
                if (error)
                    return "startTime." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntPoint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntPoint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntPoint} ShuntPoint
         */
        ShuntPoint.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntPoint)
                return object;
            var message = new $root.shuntmodule.ShuntPoint();
            if (object.control != null) {
                if (typeof object.control !== "object")
                    throw TypeError(".shuntmodule.ShuntPoint.control: object expected");
                message.control = $root.shuntmodule.ShuntEventAndStatusYPSH.fromObject(object.control);
            }
            if (object.startTime != null) {
                if (typeof object.startTime !== "object")
                    throw TypeError(".shuntmodule.ShuntPoint.startTime: object expected");
                message.startTime = $root.commonmodule.Timestamp.fromObject(object.startTime);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntPoint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntPoint
         * @static
         * @param {shuntmodule.ShuntPoint} message ShuntPoint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntPoint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.control = null;
                object.startTime = null;
            }
            if (message.control != null && message.hasOwnProperty("control"))
                object.control = $root.shuntmodule.ShuntEventAndStatusYPSH.toObject(message.control, options);
            if (message.startTime != null && message.hasOwnProperty("startTime"))
                object.startTime = $root.commonmodule.Timestamp.toObject(message.startTime, options);
            return object;
        };

        /**
         * Converts this ShuntPoint to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntPoint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntPoint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntPoint;
    })();

    shuntmodule.ShuntCSG = (function() {

        /**
         * Properties of a ShuntCSG.
         * @memberof shuntmodule
         * @interface IShuntCSG
         * @property {Array.<shuntmodule.IShuntPoint>|null} [crvPts] ShuntCSG crvPts
         */

        /**
         * Constructs a new ShuntCSG.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntCSG.
         * @implements IShuntCSG
         * @constructor
         * @param {shuntmodule.IShuntCSG=} [properties] Properties to set
         */
        function ShuntCSG(properties) {
            this.crvPts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntCSG crvPts.
         * @member {Array.<shuntmodule.IShuntPoint>} crvPts
         * @memberof shuntmodule.ShuntCSG
         * @instance
         */
        ShuntCSG.prototype.crvPts = $util.emptyArray;

        /**
         * Creates a new ShuntCSG instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntCSG
         * @static
         * @param {shuntmodule.IShuntCSG=} [properties] Properties to set
         * @returns {shuntmodule.ShuntCSG} ShuntCSG instance
         */
        ShuntCSG.create = function create(properties) {
            return new ShuntCSG(properties);
        };

        /**
         * Encodes the specified ShuntCSG message. Does not implicitly {@link shuntmodule.ShuntCSG.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntCSG
         * @static
         * @param {shuntmodule.IShuntCSG} message ShuntCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntCSG.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.crvPts != null && message.crvPts.length)
                for (var i = 0; i < message.crvPts.length; ++i)
                    $root.shuntmodule.ShuntPoint.encode(message.crvPts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntCSG message, length delimited. Does not implicitly {@link shuntmodule.ShuntCSG.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntCSG
         * @static
         * @param {shuntmodule.IShuntCSG} message ShuntCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntCSG.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntCSG message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntCSG} ShuntCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntCSG.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntCSG();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.crvPts && message.crvPts.length))
                        message.crvPts = [];
                    message.crvPts.push($root.shuntmodule.ShuntPoint.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntCSG message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntCSG} ShuntCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntCSG.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntCSG message.
         * @function verify
         * @memberof shuntmodule.ShuntCSG
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntCSG.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.crvPts != null && message.hasOwnProperty("crvPts")) {
                if (!Array.isArray(message.crvPts))
                    return "crvPts: array expected";
                for (var i = 0; i < message.crvPts.length; ++i) {
                    var error = $root.shuntmodule.ShuntPoint.verify(message.crvPts[i]);
                    if (error)
                        return "crvPts." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ShuntCSG message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntCSG
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntCSG} ShuntCSG
         */
        ShuntCSG.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntCSG)
                return object;
            var message = new $root.shuntmodule.ShuntCSG();
            if (object.crvPts) {
                if (!Array.isArray(object.crvPts))
                    throw TypeError(".shuntmodule.ShuntCSG.crvPts: array expected");
                message.crvPts = [];
                for (var i = 0; i < object.crvPts.length; ++i) {
                    if (typeof object.crvPts[i] !== "object")
                        throw TypeError(".shuntmodule.ShuntCSG.crvPts: object expected");
                    message.crvPts[i] = $root.shuntmodule.ShuntPoint.fromObject(object.crvPts[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntCSG message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntCSG
         * @static
         * @param {shuntmodule.ShuntCSG} message ShuntCSG
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntCSG.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.crvPts = [];
            if (message.crvPts && message.crvPts.length) {
                object.crvPts = [];
                for (var j = 0; j < message.crvPts.length; ++j)
                    object.crvPts[j] = $root.shuntmodule.ShuntPoint.toObject(message.crvPts[j], options);
            }
            return object;
        };

        /**
         * Converts this ShuntCSG to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntCSG
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntCSG.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntCSG;
    })();

    shuntmodule.ShuntControlScheduleFSCH = (function() {

        /**
         * Properties of a ShuntControlScheduleFSCH.
         * @memberof shuntmodule
         * @interface IShuntControlScheduleFSCH
         * @property {shuntmodule.IShuntCSG|null} [ValCSG] ShuntControlScheduleFSCH ValCSG
         */

        /**
         * Constructs a new ShuntControlScheduleFSCH.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntControlScheduleFSCH.
         * @implements IShuntControlScheduleFSCH
         * @constructor
         * @param {shuntmodule.IShuntControlScheduleFSCH=} [properties] Properties to set
         */
        function ShuntControlScheduleFSCH(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntControlScheduleFSCH ValCSG.
         * @member {shuntmodule.IShuntCSG|null|undefined} ValCSG
         * @memberof shuntmodule.ShuntControlScheduleFSCH
         * @instance
         */
        ShuntControlScheduleFSCH.prototype.ValCSG = null;

        /**
         * Creates a new ShuntControlScheduleFSCH instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntControlScheduleFSCH
         * @static
         * @param {shuntmodule.IShuntControlScheduleFSCH=} [properties] Properties to set
         * @returns {shuntmodule.ShuntControlScheduleFSCH} ShuntControlScheduleFSCH instance
         */
        ShuntControlScheduleFSCH.create = function create(properties) {
            return new ShuntControlScheduleFSCH(properties);
        };

        /**
         * Encodes the specified ShuntControlScheduleFSCH message. Does not implicitly {@link shuntmodule.ShuntControlScheduleFSCH.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntControlScheduleFSCH
         * @static
         * @param {shuntmodule.IShuntControlScheduleFSCH} message ShuntControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntControlScheduleFSCH.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ValCSG != null && Object.hasOwnProperty.call(message, "ValCSG"))
                $root.shuntmodule.ShuntCSG.encode(message.ValCSG, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntControlScheduleFSCH message, length delimited. Does not implicitly {@link shuntmodule.ShuntControlScheduleFSCH.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntControlScheduleFSCH
         * @static
         * @param {shuntmodule.IShuntControlScheduleFSCH} message ShuntControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntControlScheduleFSCH.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntControlScheduleFSCH message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntControlScheduleFSCH} ShuntControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntControlScheduleFSCH.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntControlScheduleFSCH();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ValCSG = $root.shuntmodule.ShuntCSG.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntControlScheduleFSCH message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntControlScheduleFSCH} ShuntControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntControlScheduleFSCH.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntControlScheduleFSCH message.
         * @function verify
         * @memberof shuntmodule.ShuntControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntControlScheduleFSCH.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ValCSG != null && message.hasOwnProperty("ValCSG")) {
                var error = $root.shuntmodule.ShuntCSG.verify(message.ValCSG);
                if (error)
                    return "ValCSG." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntControlScheduleFSCH message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntControlScheduleFSCH} ShuntControlScheduleFSCH
         */
        ShuntControlScheduleFSCH.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntControlScheduleFSCH)
                return object;
            var message = new $root.shuntmodule.ShuntControlScheduleFSCH();
            if (object.ValCSG != null) {
                if (typeof object.ValCSG !== "object")
                    throw TypeError(".shuntmodule.ShuntControlScheduleFSCH.ValCSG: object expected");
                message.ValCSG = $root.shuntmodule.ShuntCSG.fromObject(object.ValCSG);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntControlScheduleFSCH message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntControlScheduleFSCH
         * @static
         * @param {shuntmodule.ShuntControlScheduleFSCH} message ShuntControlScheduleFSCH
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntControlScheduleFSCH.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ValCSG = null;
            if (message.ValCSG != null && message.hasOwnProperty("ValCSG"))
                object.ValCSG = $root.shuntmodule.ShuntCSG.toObject(message.ValCSG, options);
            return object;
        };

        /**
         * Converts this ShuntControlScheduleFSCH to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntControlScheduleFSCH
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntControlScheduleFSCH.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntControlScheduleFSCH;
    })();

    shuntmodule.ShuntControlFSCC = (function() {

        /**
         * Properties of a ShuntControlFSCC.
         * @memberof shuntmodule
         * @interface IShuntControlFSCC
         * @property {commonmodule.IControlFSCC|null} [controlFSCC] ShuntControlFSCC controlFSCC
         * @property {shuntmodule.IShuntControlScheduleFSCH|null} [shuntControlScheduleFSCH] ShuntControlFSCC shuntControlScheduleFSCH
         */

        /**
         * Constructs a new ShuntControlFSCC.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntControlFSCC.
         * @implements IShuntControlFSCC
         * @constructor
         * @param {shuntmodule.IShuntControlFSCC=} [properties] Properties to set
         */
        function ShuntControlFSCC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntControlFSCC controlFSCC.
         * @member {commonmodule.IControlFSCC|null|undefined} controlFSCC
         * @memberof shuntmodule.ShuntControlFSCC
         * @instance
         */
        ShuntControlFSCC.prototype.controlFSCC = null;

        /**
         * ShuntControlFSCC shuntControlScheduleFSCH.
         * @member {shuntmodule.IShuntControlScheduleFSCH|null|undefined} shuntControlScheduleFSCH
         * @memberof shuntmodule.ShuntControlFSCC
         * @instance
         */
        ShuntControlFSCC.prototype.shuntControlScheduleFSCH = null;

        /**
         * Creates a new ShuntControlFSCC instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntControlFSCC
         * @static
         * @param {shuntmodule.IShuntControlFSCC=} [properties] Properties to set
         * @returns {shuntmodule.ShuntControlFSCC} ShuntControlFSCC instance
         */
        ShuntControlFSCC.create = function create(properties) {
            return new ShuntControlFSCC(properties);
        };

        /**
         * Encodes the specified ShuntControlFSCC message. Does not implicitly {@link shuntmodule.ShuntControlFSCC.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntControlFSCC
         * @static
         * @param {shuntmodule.IShuntControlFSCC} message ShuntControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntControlFSCC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlFSCC != null && Object.hasOwnProperty.call(message, "controlFSCC"))
                $root.commonmodule.ControlFSCC.encode(message.controlFSCC, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.shuntControlScheduleFSCH != null && Object.hasOwnProperty.call(message, "shuntControlScheduleFSCH"))
                $root.shuntmodule.ShuntControlScheduleFSCH.encode(message.shuntControlScheduleFSCH, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntControlFSCC message, length delimited. Does not implicitly {@link shuntmodule.ShuntControlFSCC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntControlFSCC
         * @static
         * @param {shuntmodule.IShuntControlFSCC} message ShuntControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntControlFSCC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntControlFSCC message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntControlFSCC} ShuntControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntControlFSCC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntControlFSCC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlFSCC = $root.commonmodule.ControlFSCC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.shuntControlScheduleFSCH = $root.shuntmodule.ShuntControlScheduleFSCH.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntControlFSCC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntControlFSCC} ShuntControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntControlFSCC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntControlFSCC message.
         * @function verify
         * @memberof shuntmodule.ShuntControlFSCC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntControlFSCC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlFSCC != null && message.hasOwnProperty("controlFSCC")) {
                var error = $root.commonmodule.ControlFSCC.verify(message.controlFSCC);
                if (error)
                    return "controlFSCC." + error;
            }
            if (message.shuntControlScheduleFSCH != null && message.hasOwnProperty("shuntControlScheduleFSCH")) {
                var error = $root.shuntmodule.ShuntControlScheduleFSCH.verify(message.shuntControlScheduleFSCH);
                if (error)
                    return "shuntControlScheduleFSCH." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntControlFSCC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntControlFSCC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntControlFSCC} ShuntControlFSCC
         */
        ShuntControlFSCC.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntControlFSCC)
                return object;
            var message = new $root.shuntmodule.ShuntControlFSCC();
            if (object.controlFSCC != null) {
                if (typeof object.controlFSCC !== "object")
                    throw TypeError(".shuntmodule.ShuntControlFSCC.controlFSCC: object expected");
                message.controlFSCC = $root.commonmodule.ControlFSCC.fromObject(object.controlFSCC);
            }
            if (object.shuntControlScheduleFSCH != null) {
                if (typeof object.shuntControlScheduleFSCH !== "object")
                    throw TypeError(".shuntmodule.ShuntControlFSCC.shuntControlScheduleFSCH: object expected");
                message.shuntControlScheduleFSCH = $root.shuntmodule.ShuntControlScheduleFSCH.fromObject(object.shuntControlScheduleFSCH);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntControlFSCC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntControlFSCC
         * @static
         * @param {shuntmodule.ShuntControlFSCC} message ShuntControlFSCC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntControlFSCC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlFSCC = null;
                object.shuntControlScheduleFSCH = null;
            }
            if (message.controlFSCC != null && message.hasOwnProperty("controlFSCC"))
                object.controlFSCC = $root.commonmodule.ControlFSCC.toObject(message.controlFSCC, options);
            if (message.shuntControlScheduleFSCH != null && message.hasOwnProperty("shuntControlScheduleFSCH"))
                object.shuntControlScheduleFSCH = $root.shuntmodule.ShuntControlScheduleFSCH.toObject(message.shuntControlScheduleFSCH, options);
            return object;
        };

        /**
         * Converts this ShuntControlFSCC to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntControlFSCC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntControlFSCC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntControlFSCC;
    })();

    shuntmodule.ShuntControl = (function() {

        /**
         * Properties of a ShuntControl.
         * @memberof shuntmodule
         * @interface IShuntControl
         * @property {commonmodule.IControlValue|null} [controlValue] ShuntControl controlValue
         * @property {commonmodule.ICheckConditions|null} [check] ShuntControl check
         * @property {shuntmodule.IShuntControlFSCC|null} [shuntControlFSCC] ShuntControl shuntControlFSCC
         */

        /**
         * Constructs a new ShuntControl.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntControl.
         * @implements IShuntControl
         * @constructor
         * @param {shuntmodule.IShuntControl=} [properties] Properties to set
         */
        function ShuntControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntControl controlValue.
         * @member {commonmodule.IControlValue|null|undefined} controlValue
         * @memberof shuntmodule.ShuntControl
         * @instance
         */
        ShuntControl.prototype.controlValue = null;

        /**
         * ShuntControl check.
         * @member {commonmodule.ICheckConditions|null|undefined} check
         * @memberof shuntmodule.ShuntControl
         * @instance
         */
        ShuntControl.prototype.check = null;

        /**
         * ShuntControl shuntControlFSCC.
         * @member {shuntmodule.IShuntControlFSCC|null|undefined} shuntControlFSCC
         * @memberof shuntmodule.ShuntControl
         * @instance
         */
        ShuntControl.prototype.shuntControlFSCC = null;

        /**
         * Creates a new ShuntControl instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntControl
         * @static
         * @param {shuntmodule.IShuntControl=} [properties] Properties to set
         * @returns {shuntmodule.ShuntControl} ShuntControl instance
         */
        ShuntControl.create = function create(properties) {
            return new ShuntControl(properties);
        };

        /**
         * Encodes the specified ShuntControl message. Does not implicitly {@link shuntmodule.ShuntControl.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntControl
         * @static
         * @param {shuntmodule.IShuntControl} message ShuntControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlValue != null && Object.hasOwnProperty.call(message, "controlValue"))
                $root.commonmodule.ControlValue.encode(message.controlValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.check != null && Object.hasOwnProperty.call(message, "check"))
                $root.commonmodule.CheckConditions.encode(message.check, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.shuntControlFSCC != null && Object.hasOwnProperty.call(message, "shuntControlFSCC"))
                $root.shuntmodule.ShuntControlFSCC.encode(message.shuntControlFSCC, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntControl message, length delimited. Does not implicitly {@link shuntmodule.ShuntControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntControl
         * @static
         * @param {shuntmodule.IShuntControl} message ShuntControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntControl message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntControl} ShuntControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlValue = $root.commonmodule.ControlValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.check = $root.commonmodule.CheckConditions.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.shuntControlFSCC = $root.shuntmodule.ShuntControlFSCC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntControl} ShuntControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntControl message.
         * @function verify
         * @memberof shuntmodule.ShuntControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlValue != null && message.hasOwnProperty("controlValue")) {
                var error = $root.commonmodule.ControlValue.verify(message.controlValue);
                if (error)
                    return "controlValue." + error;
            }
            if (message.check != null && message.hasOwnProperty("check")) {
                var error = $root.commonmodule.CheckConditions.verify(message.check);
                if (error)
                    return "check." + error;
            }
            if (message.shuntControlFSCC != null && message.hasOwnProperty("shuntControlFSCC")) {
                var error = $root.shuntmodule.ShuntControlFSCC.verify(message.shuntControlFSCC);
                if (error)
                    return "shuntControlFSCC." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntControl} ShuntControl
         */
        ShuntControl.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntControl)
                return object;
            var message = new $root.shuntmodule.ShuntControl();
            if (object.controlValue != null) {
                if (typeof object.controlValue !== "object")
                    throw TypeError(".shuntmodule.ShuntControl.controlValue: object expected");
                message.controlValue = $root.commonmodule.ControlValue.fromObject(object.controlValue);
            }
            if (object.check != null) {
                if (typeof object.check !== "object")
                    throw TypeError(".shuntmodule.ShuntControl.check: object expected");
                message.check = $root.commonmodule.CheckConditions.fromObject(object.check);
            }
            if (object.shuntControlFSCC != null) {
                if (typeof object.shuntControlFSCC !== "object")
                    throw TypeError(".shuntmodule.ShuntControl.shuntControlFSCC: object expected");
                message.shuntControlFSCC = $root.shuntmodule.ShuntControlFSCC.fromObject(object.shuntControlFSCC);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntControl
         * @static
         * @param {shuntmodule.ShuntControl} message ShuntControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlValue = null;
                object.check = null;
                object.shuntControlFSCC = null;
            }
            if (message.controlValue != null && message.hasOwnProperty("controlValue"))
                object.controlValue = $root.commonmodule.ControlValue.toObject(message.controlValue, options);
            if (message.check != null && message.hasOwnProperty("check"))
                object.check = $root.commonmodule.CheckConditions.toObject(message.check, options);
            if (message.shuntControlFSCC != null && message.hasOwnProperty("shuntControlFSCC"))
                object.shuntControlFSCC = $root.shuntmodule.ShuntControlFSCC.toObject(message.shuntControlFSCC, options);
            return object;
        };

        /**
         * Converts this ShuntControl to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntControl;
    })();

    shuntmodule.ShuntControlProfile = (function() {

        /**
         * Properties of a ShuntControlProfile.
         * @memberof shuntmodule
         * @interface IShuntControlProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] ShuntControlProfile controlMessageInfo
         * @property {commonmodule.IIED|null} [ied] ShuntControlProfile ied
         * @property {shuntmodule.IShuntControl|null} [shuntControl] ShuntControlProfile shuntControl
         * @property {shuntmodule.IShuntSystem|null} [shuntSystem] ShuntControlProfile shuntSystem
         */

        /**
         * Constructs a new ShuntControlProfile.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntControlProfile.
         * @implements IShuntControlProfile
         * @constructor
         * @param {shuntmodule.IShuntControlProfile=} [properties] Properties to set
         */
        function ShuntControlProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntControlProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof shuntmodule.ShuntControlProfile
         * @instance
         */
        ShuntControlProfile.prototype.controlMessageInfo = null;

        /**
         * ShuntControlProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof shuntmodule.ShuntControlProfile
         * @instance
         */
        ShuntControlProfile.prototype.ied = null;

        /**
         * ShuntControlProfile shuntControl.
         * @member {shuntmodule.IShuntControl|null|undefined} shuntControl
         * @memberof shuntmodule.ShuntControlProfile
         * @instance
         */
        ShuntControlProfile.prototype.shuntControl = null;

        /**
         * ShuntControlProfile shuntSystem.
         * @member {shuntmodule.IShuntSystem|null|undefined} shuntSystem
         * @memberof shuntmodule.ShuntControlProfile
         * @instance
         */
        ShuntControlProfile.prototype.shuntSystem = null;

        /**
         * Creates a new ShuntControlProfile instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntControlProfile
         * @static
         * @param {shuntmodule.IShuntControlProfile=} [properties] Properties to set
         * @returns {shuntmodule.ShuntControlProfile} ShuntControlProfile instance
         */
        ShuntControlProfile.create = function create(properties) {
            return new ShuntControlProfile(properties);
        };

        /**
         * Encodes the specified ShuntControlProfile message. Does not implicitly {@link shuntmodule.ShuntControlProfile.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntControlProfile
         * @static
         * @param {shuntmodule.IShuntControlProfile} message ShuntControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntControlProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.shuntControl != null && Object.hasOwnProperty.call(message, "shuntControl"))
                $root.shuntmodule.ShuntControl.encode(message.shuntControl, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.shuntSystem != null && Object.hasOwnProperty.call(message, "shuntSystem"))
                $root.shuntmodule.ShuntSystem.encode(message.shuntSystem, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntControlProfile message, length delimited. Does not implicitly {@link shuntmodule.ShuntControlProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntControlProfile
         * @static
         * @param {shuntmodule.IShuntControlProfile} message ShuntControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntControlProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntControlProfile message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntControlProfile} ShuntControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntControlProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntControlProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.shuntControl = $root.shuntmodule.ShuntControl.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.shuntSystem = $root.shuntmodule.ShuntSystem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntControlProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntControlProfile} ShuntControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntControlProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntControlProfile message.
         * @function verify
         * @memberof shuntmodule.ShuntControlProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntControlProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.shuntControl != null && message.hasOwnProperty("shuntControl")) {
                var error = $root.shuntmodule.ShuntControl.verify(message.shuntControl);
                if (error)
                    return "shuntControl." + error;
            }
            if (message.shuntSystem != null && message.hasOwnProperty("shuntSystem")) {
                var error = $root.shuntmodule.ShuntSystem.verify(message.shuntSystem);
                if (error)
                    return "shuntSystem." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntControlProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntControlProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntControlProfile} ShuntControlProfile
         */
        ShuntControlProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntControlProfile)
                return object;
            var message = new $root.shuntmodule.ShuntControlProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".shuntmodule.ShuntControlProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".shuntmodule.ShuntControlProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.shuntControl != null) {
                if (typeof object.shuntControl !== "object")
                    throw TypeError(".shuntmodule.ShuntControlProfile.shuntControl: object expected");
                message.shuntControl = $root.shuntmodule.ShuntControl.fromObject(object.shuntControl);
            }
            if (object.shuntSystem != null) {
                if (typeof object.shuntSystem !== "object")
                    throw TypeError(".shuntmodule.ShuntControlProfile.shuntSystem: object expected");
                message.shuntSystem = $root.shuntmodule.ShuntSystem.fromObject(object.shuntSystem);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntControlProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntControlProfile
         * @static
         * @param {shuntmodule.ShuntControlProfile} message ShuntControlProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntControlProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.ied = null;
                object.shuntControl = null;
                object.shuntSystem = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.shuntControl != null && message.hasOwnProperty("shuntControl"))
                object.shuntControl = $root.shuntmodule.ShuntControl.toObject(message.shuntControl, options);
            if (message.shuntSystem != null && message.hasOwnProperty("shuntSystem"))
                object.shuntSystem = $root.shuntmodule.ShuntSystem.toObject(message.shuntSystem, options);
            return object;
        };

        /**
         * Converts this ShuntControlProfile to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntControlProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntControlProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntControlProfile;
    })();

    shuntmodule.ShuntDiscreteControlZCAP = (function() {

        /**
         * Properties of a ShuntDiscreteControlZCAP.
         * @memberof shuntmodule
         * @interface IShuntDiscreteControlZCAP
         * @property {commonmodule.ILogicalNodeForControl|null} [logicalNodeForControl] ShuntDiscreteControlZCAP logicalNodeForControl
         * @property {commonmodule.IControlDPC|null} [Pos] ShuntDiscreteControlZCAP Pos
         */

        /**
         * Constructs a new ShuntDiscreteControlZCAP.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntDiscreteControlZCAP.
         * @implements IShuntDiscreteControlZCAP
         * @constructor
         * @param {shuntmodule.IShuntDiscreteControlZCAP=} [properties] Properties to set
         */
        function ShuntDiscreteControlZCAP(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntDiscreteControlZCAP logicalNodeForControl.
         * @member {commonmodule.ILogicalNodeForControl|null|undefined} logicalNodeForControl
         * @memberof shuntmodule.ShuntDiscreteControlZCAP
         * @instance
         */
        ShuntDiscreteControlZCAP.prototype.logicalNodeForControl = null;

        /**
         * ShuntDiscreteControlZCAP Pos.
         * @member {commonmodule.IControlDPC|null|undefined} Pos
         * @memberof shuntmodule.ShuntDiscreteControlZCAP
         * @instance
         */
        ShuntDiscreteControlZCAP.prototype.Pos = null;

        /**
         * Creates a new ShuntDiscreteControlZCAP instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntDiscreteControlZCAP
         * @static
         * @param {shuntmodule.IShuntDiscreteControlZCAP=} [properties] Properties to set
         * @returns {shuntmodule.ShuntDiscreteControlZCAP} ShuntDiscreteControlZCAP instance
         */
        ShuntDiscreteControlZCAP.create = function create(properties) {
            return new ShuntDiscreteControlZCAP(properties);
        };

        /**
         * Encodes the specified ShuntDiscreteControlZCAP message. Does not implicitly {@link shuntmodule.ShuntDiscreteControlZCAP.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntDiscreteControlZCAP
         * @static
         * @param {shuntmodule.IShuntDiscreteControlZCAP} message ShuntDiscreteControlZCAP message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntDiscreteControlZCAP.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForControl != null && Object.hasOwnProperty.call(message, "logicalNodeForControl"))
                $root.commonmodule.LogicalNodeForControl.encode(message.logicalNodeForControl, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.Pos != null && Object.hasOwnProperty.call(message, "Pos"))
                $root.commonmodule.ControlDPC.encode(message.Pos, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntDiscreteControlZCAP message, length delimited. Does not implicitly {@link shuntmodule.ShuntDiscreteControlZCAP.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntDiscreteControlZCAP
         * @static
         * @param {shuntmodule.IShuntDiscreteControlZCAP} message ShuntDiscreteControlZCAP message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntDiscreteControlZCAP.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntDiscreteControlZCAP message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntDiscreteControlZCAP
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntDiscreteControlZCAP} ShuntDiscreteControlZCAP
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntDiscreteControlZCAP.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntDiscreteControlZCAP();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.Pos = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntDiscreteControlZCAP message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntDiscreteControlZCAP
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntDiscreteControlZCAP} ShuntDiscreteControlZCAP
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntDiscreteControlZCAP.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntDiscreteControlZCAP message.
         * @function verify
         * @memberof shuntmodule.ShuntDiscreteControlZCAP
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntDiscreteControlZCAP.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl")) {
                var error = $root.commonmodule.LogicalNodeForControl.verify(message.logicalNodeForControl);
                if (error)
                    return "logicalNodeForControl." + error;
            }
            if (message.Pos != null && message.hasOwnProperty("Pos")) {
                var error = $root.commonmodule.ControlDPC.verify(message.Pos);
                if (error)
                    return "Pos." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntDiscreteControlZCAP message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntDiscreteControlZCAP
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntDiscreteControlZCAP} ShuntDiscreteControlZCAP
         */
        ShuntDiscreteControlZCAP.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntDiscreteControlZCAP)
                return object;
            var message = new $root.shuntmodule.ShuntDiscreteControlZCAP();
            if (object.logicalNodeForControl != null) {
                if (typeof object.logicalNodeForControl !== "object")
                    throw TypeError(".shuntmodule.ShuntDiscreteControlZCAP.logicalNodeForControl: object expected");
                message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.fromObject(object.logicalNodeForControl);
            }
            if (object.Pos != null) {
                if (typeof object.Pos !== "object")
                    throw TypeError(".shuntmodule.ShuntDiscreteControlZCAP.Pos: object expected");
                message.Pos = $root.commonmodule.ControlDPC.fromObject(object.Pos);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntDiscreteControlZCAP message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntDiscreteControlZCAP
         * @static
         * @param {shuntmodule.ShuntDiscreteControlZCAP} message ShuntDiscreteControlZCAP
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntDiscreteControlZCAP.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForControl = null;
                object.Pos = null;
            }
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl"))
                object.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.toObject(message.logicalNodeForControl, options);
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                object.Pos = $root.commonmodule.ControlDPC.toObject(message.Pos, options);
            return object;
        };

        /**
         * Converts this ShuntDiscreteControlZCAP to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntDiscreteControlZCAP
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntDiscreteControlZCAP.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntDiscreteControlZCAP;
    })();

    shuntmodule.ShuntDiscreteControl = (function() {

        /**
         * Properties of a ShuntDiscreteControl.
         * @memberof shuntmodule
         * @interface IShuntDiscreteControl
         * @property {commonmodule.IControlValue|null} [controlValue] ShuntDiscreteControl controlValue
         * @property {commonmodule.ICheckConditions|null} [check] ShuntDiscreteControl check
         * @property {shuntmodule.IShuntDiscreteControlZCAP|null} [shuntDiscreteControlZCAP] ShuntDiscreteControl shuntDiscreteControlZCAP
         */

        /**
         * Constructs a new ShuntDiscreteControl.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntDiscreteControl.
         * @implements IShuntDiscreteControl
         * @constructor
         * @param {shuntmodule.IShuntDiscreteControl=} [properties] Properties to set
         */
        function ShuntDiscreteControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntDiscreteControl controlValue.
         * @member {commonmodule.IControlValue|null|undefined} controlValue
         * @memberof shuntmodule.ShuntDiscreteControl
         * @instance
         */
        ShuntDiscreteControl.prototype.controlValue = null;

        /**
         * ShuntDiscreteControl check.
         * @member {commonmodule.ICheckConditions|null|undefined} check
         * @memberof shuntmodule.ShuntDiscreteControl
         * @instance
         */
        ShuntDiscreteControl.prototype.check = null;

        /**
         * ShuntDiscreteControl shuntDiscreteControlZCAP.
         * @member {shuntmodule.IShuntDiscreteControlZCAP|null|undefined} shuntDiscreteControlZCAP
         * @memberof shuntmodule.ShuntDiscreteControl
         * @instance
         */
        ShuntDiscreteControl.prototype.shuntDiscreteControlZCAP = null;

        /**
         * Creates a new ShuntDiscreteControl instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntDiscreteControl
         * @static
         * @param {shuntmodule.IShuntDiscreteControl=} [properties] Properties to set
         * @returns {shuntmodule.ShuntDiscreteControl} ShuntDiscreteControl instance
         */
        ShuntDiscreteControl.create = function create(properties) {
            return new ShuntDiscreteControl(properties);
        };

        /**
         * Encodes the specified ShuntDiscreteControl message. Does not implicitly {@link shuntmodule.ShuntDiscreteControl.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntDiscreteControl
         * @static
         * @param {shuntmodule.IShuntDiscreteControl} message ShuntDiscreteControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntDiscreteControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlValue != null && Object.hasOwnProperty.call(message, "controlValue"))
                $root.commonmodule.ControlValue.encode(message.controlValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.check != null && Object.hasOwnProperty.call(message, "check"))
                $root.commonmodule.CheckConditions.encode(message.check, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.shuntDiscreteControlZCAP != null && Object.hasOwnProperty.call(message, "shuntDiscreteControlZCAP"))
                $root.shuntmodule.ShuntDiscreteControlZCAP.encode(message.shuntDiscreteControlZCAP, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntDiscreteControl message, length delimited. Does not implicitly {@link shuntmodule.ShuntDiscreteControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntDiscreteControl
         * @static
         * @param {shuntmodule.IShuntDiscreteControl} message ShuntDiscreteControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntDiscreteControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntDiscreteControl message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntDiscreteControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntDiscreteControl} ShuntDiscreteControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntDiscreteControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntDiscreteControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlValue = $root.commonmodule.ControlValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.check = $root.commonmodule.CheckConditions.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.shuntDiscreteControlZCAP = $root.shuntmodule.ShuntDiscreteControlZCAP.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntDiscreteControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntDiscreteControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntDiscreteControl} ShuntDiscreteControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntDiscreteControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntDiscreteControl message.
         * @function verify
         * @memberof shuntmodule.ShuntDiscreteControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntDiscreteControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlValue != null && message.hasOwnProperty("controlValue")) {
                var error = $root.commonmodule.ControlValue.verify(message.controlValue);
                if (error)
                    return "controlValue." + error;
            }
            if (message.check != null && message.hasOwnProperty("check")) {
                var error = $root.commonmodule.CheckConditions.verify(message.check);
                if (error)
                    return "check." + error;
            }
            if (message.shuntDiscreteControlZCAP != null && message.hasOwnProperty("shuntDiscreteControlZCAP")) {
                var error = $root.shuntmodule.ShuntDiscreteControlZCAP.verify(message.shuntDiscreteControlZCAP);
                if (error)
                    return "shuntDiscreteControlZCAP." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntDiscreteControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntDiscreteControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntDiscreteControl} ShuntDiscreteControl
         */
        ShuntDiscreteControl.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntDiscreteControl)
                return object;
            var message = new $root.shuntmodule.ShuntDiscreteControl();
            if (object.controlValue != null) {
                if (typeof object.controlValue !== "object")
                    throw TypeError(".shuntmodule.ShuntDiscreteControl.controlValue: object expected");
                message.controlValue = $root.commonmodule.ControlValue.fromObject(object.controlValue);
            }
            if (object.check != null) {
                if (typeof object.check !== "object")
                    throw TypeError(".shuntmodule.ShuntDiscreteControl.check: object expected");
                message.check = $root.commonmodule.CheckConditions.fromObject(object.check);
            }
            if (object.shuntDiscreteControlZCAP != null) {
                if (typeof object.shuntDiscreteControlZCAP !== "object")
                    throw TypeError(".shuntmodule.ShuntDiscreteControl.shuntDiscreteControlZCAP: object expected");
                message.shuntDiscreteControlZCAP = $root.shuntmodule.ShuntDiscreteControlZCAP.fromObject(object.shuntDiscreteControlZCAP);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntDiscreteControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntDiscreteControl
         * @static
         * @param {shuntmodule.ShuntDiscreteControl} message ShuntDiscreteControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntDiscreteControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlValue = null;
                object.check = null;
                object.shuntDiscreteControlZCAP = null;
            }
            if (message.controlValue != null && message.hasOwnProperty("controlValue"))
                object.controlValue = $root.commonmodule.ControlValue.toObject(message.controlValue, options);
            if (message.check != null && message.hasOwnProperty("check"))
                object.check = $root.commonmodule.CheckConditions.toObject(message.check, options);
            if (message.shuntDiscreteControlZCAP != null && message.hasOwnProperty("shuntDiscreteControlZCAP"))
                object.shuntDiscreteControlZCAP = $root.shuntmodule.ShuntDiscreteControlZCAP.toObject(message.shuntDiscreteControlZCAP, options);
            return object;
        };

        /**
         * Converts this ShuntDiscreteControl to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntDiscreteControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntDiscreteControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntDiscreteControl;
    })();

    shuntmodule.ShuntDiscreteControlProfile = (function() {

        /**
         * Properties of a ShuntDiscreteControlProfile.
         * @memberof shuntmodule
         * @interface IShuntDiscreteControlProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] ShuntDiscreteControlProfile controlMessageInfo
         * @property {commonmodule.IIED|null} [ied] ShuntDiscreteControlProfile ied
         * @property {shuntmodule.IShuntDiscreteControl|null} [shuntControl] ShuntDiscreteControlProfile shuntControl
         * @property {shuntmodule.IShuntSystem|null} [shuntSystem] ShuntDiscreteControlProfile shuntSystem
         */

        /**
         * Constructs a new ShuntDiscreteControlProfile.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntDiscreteControlProfile.
         * @implements IShuntDiscreteControlProfile
         * @constructor
         * @param {shuntmodule.IShuntDiscreteControlProfile=} [properties] Properties to set
         */
        function ShuntDiscreteControlProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntDiscreteControlProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof shuntmodule.ShuntDiscreteControlProfile
         * @instance
         */
        ShuntDiscreteControlProfile.prototype.controlMessageInfo = null;

        /**
         * ShuntDiscreteControlProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof shuntmodule.ShuntDiscreteControlProfile
         * @instance
         */
        ShuntDiscreteControlProfile.prototype.ied = null;

        /**
         * ShuntDiscreteControlProfile shuntControl.
         * @member {shuntmodule.IShuntDiscreteControl|null|undefined} shuntControl
         * @memberof shuntmodule.ShuntDiscreteControlProfile
         * @instance
         */
        ShuntDiscreteControlProfile.prototype.shuntControl = null;

        /**
         * ShuntDiscreteControlProfile shuntSystem.
         * @member {shuntmodule.IShuntSystem|null|undefined} shuntSystem
         * @memberof shuntmodule.ShuntDiscreteControlProfile
         * @instance
         */
        ShuntDiscreteControlProfile.prototype.shuntSystem = null;

        /**
         * Creates a new ShuntDiscreteControlProfile instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntDiscreteControlProfile
         * @static
         * @param {shuntmodule.IShuntDiscreteControlProfile=} [properties] Properties to set
         * @returns {shuntmodule.ShuntDiscreteControlProfile} ShuntDiscreteControlProfile instance
         */
        ShuntDiscreteControlProfile.create = function create(properties) {
            return new ShuntDiscreteControlProfile(properties);
        };

        /**
         * Encodes the specified ShuntDiscreteControlProfile message. Does not implicitly {@link shuntmodule.ShuntDiscreteControlProfile.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntDiscreteControlProfile
         * @static
         * @param {shuntmodule.IShuntDiscreteControlProfile} message ShuntDiscreteControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntDiscreteControlProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.shuntControl != null && Object.hasOwnProperty.call(message, "shuntControl"))
                $root.shuntmodule.ShuntDiscreteControl.encode(message.shuntControl, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.shuntSystem != null && Object.hasOwnProperty.call(message, "shuntSystem"))
                $root.shuntmodule.ShuntSystem.encode(message.shuntSystem, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntDiscreteControlProfile message, length delimited. Does not implicitly {@link shuntmodule.ShuntDiscreteControlProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntDiscreteControlProfile
         * @static
         * @param {shuntmodule.IShuntDiscreteControlProfile} message ShuntDiscreteControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntDiscreteControlProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntDiscreteControlProfile message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntDiscreteControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntDiscreteControlProfile} ShuntDiscreteControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntDiscreteControlProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntDiscreteControlProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.shuntControl = $root.shuntmodule.ShuntDiscreteControl.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.shuntSystem = $root.shuntmodule.ShuntSystem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntDiscreteControlProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntDiscreteControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntDiscreteControlProfile} ShuntDiscreteControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntDiscreteControlProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntDiscreteControlProfile message.
         * @function verify
         * @memberof shuntmodule.ShuntDiscreteControlProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntDiscreteControlProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.shuntControl != null && message.hasOwnProperty("shuntControl")) {
                var error = $root.shuntmodule.ShuntDiscreteControl.verify(message.shuntControl);
                if (error)
                    return "shuntControl." + error;
            }
            if (message.shuntSystem != null && message.hasOwnProperty("shuntSystem")) {
                var error = $root.shuntmodule.ShuntSystem.verify(message.shuntSystem);
                if (error)
                    return "shuntSystem." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntDiscreteControlProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntDiscreteControlProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntDiscreteControlProfile} ShuntDiscreteControlProfile
         */
        ShuntDiscreteControlProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntDiscreteControlProfile)
                return object;
            var message = new $root.shuntmodule.ShuntDiscreteControlProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".shuntmodule.ShuntDiscreteControlProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".shuntmodule.ShuntDiscreteControlProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.shuntControl != null) {
                if (typeof object.shuntControl !== "object")
                    throw TypeError(".shuntmodule.ShuntDiscreteControlProfile.shuntControl: object expected");
                message.shuntControl = $root.shuntmodule.ShuntDiscreteControl.fromObject(object.shuntControl);
            }
            if (object.shuntSystem != null) {
                if (typeof object.shuntSystem !== "object")
                    throw TypeError(".shuntmodule.ShuntDiscreteControlProfile.shuntSystem: object expected");
                message.shuntSystem = $root.shuntmodule.ShuntSystem.fromObject(object.shuntSystem);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntDiscreteControlProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntDiscreteControlProfile
         * @static
         * @param {shuntmodule.ShuntDiscreteControlProfile} message ShuntDiscreteControlProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntDiscreteControlProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.ied = null;
                object.shuntControl = null;
                object.shuntSystem = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.shuntControl != null && message.hasOwnProperty("shuntControl"))
                object.shuntControl = $root.shuntmodule.ShuntDiscreteControl.toObject(message.shuntControl, options);
            if (message.shuntSystem != null && message.hasOwnProperty("shuntSystem"))
                object.shuntSystem = $root.shuntmodule.ShuntSystem.toObject(message.shuntSystem, options);
            return object;
        };

        /**
         * Converts this ShuntDiscreteControlProfile to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntDiscreteControlProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntDiscreteControlProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntDiscreteControlProfile;
    })();

    shuntmodule.ShuntEventAndStatusPoint = (function() {

        /**
         * Properties of a ShuntEventAndStatusPoint.
         * @memberof shuntmodule
         * @interface IShuntEventAndStatusPoint
         * @property {shuntmodule.IShuntEventAndStatusYPSH|null} [eventAndStatus] ShuntEventAndStatusPoint eventAndStatus
         */

        /**
         * Constructs a new ShuntEventAndStatusPoint.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntEventAndStatusPoint.
         * @implements IShuntEventAndStatusPoint
         * @constructor
         * @param {shuntmodule.IShuntEventAndStatusPoint=} [properties] Properties to set
         */
        function ShuntEventAndStatusPoint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntEventAndStatusPoint eventAndStatus.
         * @member {shuntmodule.IShuntEventAndStatusYPSH|null|undefined} eventAndStatus
         * @memberof shuntmodule.ShuntEventAndStatusPoint
         * @instance
         */
        ShuntEventAndStatusPoint.prototype.eventAndStatus = null;

        /**
         * Creates a new ShuntEventAndStatusPoint instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntEventAndStatusPoint
         * @static
         * @param {shuntmodule.IShuntEventAndStatusPoint=} [properties] Properties to set
         * @returns {shuntmodule.ShuntEventAndStatusPoint} ShuntEventAndStatusPoint instance
         */
        ShuntEventAndStatusPoint.create = function create(properties) {
            return new ShuntEventAndStatusPoint(properties);
        };

        /**
         * Encodes the specified ShuntEventAndStatusPoint message. Does not implicitly {@link shuntmodule.ShuntEventAndStatusPoint.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntEventAndStatusPoint
         * @static
         * @param {shuntmodule.IShuntEventAndStatusPoint} message ShuntEventAndStatusPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntEventAndStatusPoint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventAndStatus != null && Object.hasOwnProperty.call(message, "eventAndStatus"))
                $root.shuntmodule.ShuntEventAndStatusYPSH.encode(message.eventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntEventAndStatusPoint message, length delimited. Does not implicitly {@link shuntmodule.ShuntEventAndStatusPoint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntEventAndStatusPoint
         * @static
         * @param {shuntmodule.IShuntEventAndStatusPoint} message ShuntEventAndStatusPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntEventAndStatusPoint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntEventAndStatusPoint message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntEventAndStatusPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntEventAndStatusPoint} ShuntEventAndStatusPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntEventAndStatusPoint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntEventAndStatusPoint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventAndStatus = $root.shuntmodule.ShuntEventAndStatusYPSH.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntEventAndStatusPoint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntEventAndStatusPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntEventAndStatusPoint} ShuntEventAndStatusPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntEventAndStatusPoint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntEventAndStatusPoint message.
         * @function verify
         * @memberof shuntmodule.ShuntEventAndStatusPoint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntEventAndStatusPoint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventAndStatus != null && message.hasOwnProperty("eventAndStatus")) {
                var error = $root.shuntmodule.ShuntEventAndStatusYPSH.verify(message.eventAndStatus);
                if (error)
                    return "eventAndStatus." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntEventAndStatusPoint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntEventAndStatusPoint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntEventAndStatusPoint} ShuntEventAndStatusPoint
         */
        ShuntEventAndStatusPoint.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntEventAndStatusPoint)
                return object;
            var message = new $root.shuntmodule.ShuntEventAndStatusPoint();
            if (object.eventAndStatus != null) {
                if (typeof object.eventAndStatus !== "object")
                    throw TypeError(".shuntmodule.ShuntEventAndStatusPoint.eventAndStatus: object expected");
                message.eventAndStatus = $root.shuntmodule.ShuntEventAndStatusYPSH.fromObject(object.eventAndStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntEventAndStatusPoint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntEventAndStatusPoint
         * @static
         * @param {shuntmodule.ShuntEventAndStatusPoint} message ShuntEventAndStatusPoint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntEventAndStatusPoint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eventAndStatus = null;
            if (message.eventAndStatus != null && message.hasOwnProperty("eventAndStatus"))
                object.eventAndStatus = $root.shuntmodule.ShuntEventAndStatusYPSH.toObject(message.eventAndStatus, options);
            return object;
        };

        /**
         * Converts this ShuntEventAndStatusPoint to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntEventAndStatusPoint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntEventAndStatusPoint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntEventAndStatusPoint;
    })();

    shuntmodule.ShuntEventAndStatusZCAP = (function() {

        /**
         * Properties of a ShuntEventAndStatusZCAP.
         * @memberof shuntmodule
         * @interface IShuntEventAndStatusZCAP
         * @property {commonmodule.ILogicalNodeForEventAndStatus|null} [logicalNodeForEventAndStatus] ShuntEventAndStatusZCAP logicalNodeForEventAndStatus
         * @property {commonmodule.IENS_DynamicTestKind|null} [DynamicTest] ShuntEventAndStatusZCAP DynamicTest
         * @property {shuntmodule.IShuntEventAndStatusPoint|null} [PointStatus] ShuntEventAndStatusZCAP PointStatus
         */

        /**
         * Constructs a new ShuntEventAndStatusZCAP.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntEventAndStatusZCAP.
         * @implements IShuntEventAndStatusZCAP
         * @constructor
         * @param {shuntmodule.IShuntEventAndStatusZCAP=} [properties] Properties to set
         */
        function ShuntEventAndStatusZCAP(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntEventAndStatusZCAP logicalNodeForEventAndStatus.
         * @member {commonmodule.ILogicalNodeForEventAndStatus|null|undefined} logicalNodeForEventAndStatus
         * @memberof shuntmodule.ShuntEventAndStatusZCAP
         * @instance
         */
        ShuntEventAndStatusZCAP.prototype.logicalNodeForEventAndStatus = null;

        /**
         * ShuntEventAndStatusZCAP DynamicTest.
         * @member {commonmodule.IENS_DynamicTestKind|null|undefined} DynamicTest
         * @memberof shuntmodule.ShuntEventAndStatusZCAP
         * @instance
         */
        ShuntEventAndStatusZCAP.prototype.DynamicTest = null;

        /**
         * ShuntEventAndStatusZCAP PointStatus.
         * @member {shuntmodule.IShuntEventAndStatusPoint|null|undefined} PointStatus
         * @memberof shuntmodule.ShuntEventAndStatusZCAP
         * @instance
         */
        ShuntEventAndStatusZCAP.prototype.PointStatus = null;

        /**
         * Creates a new ShuntEventAndStatusZCAP instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntEventAndStatusZCAP
         * @static
         * @param {shuntmodule.IShuntEventAndStatusZCAP=} [properties] Properties to set
         * @returns {shuntmodule.ShuntEventAndStatusZCAP} ShuntEventAndStatusZCAP instance
         */
        ShuntEventAndStatusZCAP.create = function create(properties) {
            return new ShuntEventAndStatusZCAP(properties);
        };

        /**
         * Encodes the specified ShuntEventAndStatusZCAP message. Does not implicitly {@link shuntmodule.ShuntEventAndStatusZCAP.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntEventAndStatusZCAP
         * @static
         * @param {shuntmodule.IShuntEventAndStatusZCAP} message ShuntEventAndStatusZCAP message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntEventAndStatusZCAP.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForEventAndStatus != null && Object.hasOwnProperty.call(message, "logicalNodeForEventAndStatus"))
                $root.commonmodule.LogicalNodeForEventAndStatus.encode(message.logicalNodeForEventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.DynamicTest != null && Object.hasOwnProperty.call(message, "DynamicTest"))
                $root.commonmodule.ENS_DynamicTestKind.encode(message.DynamicTest, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.PointStatus != null && Object.hasOwnProperty.call(message, "PointStatus"))
                $root.shuntmodule.ShuntEventAndStatusPoint.encode(message.PointStatus, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntEventAndStatusZCAP message, length delimited. Does not implicitly {@link shuntmodule.ShuntEventAndStatusZCAP.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntEventAndStatusZCAP
         * @static
         * @param {shuntmodule.IShuntEventAndStatusZCAP} message ShuntEventAndStatusZCAP message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntEventAndStatusZCAP.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntEventAndStatusZCAP message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntEventAndStatusZCAP
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntEventAndStatusZCAP} ShuntEventAndStatusZCAP
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntEventAndStatusZCAP.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntEventAndStatusZCAP();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.PointStatus = $root.shuntmodule.ShuntEventAndStatusPoint.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntEventAndStatusZCAP message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntEventAndStatusZCAP
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntEventAndStatusZCAP} ShuntEventAndStatusZCAP
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntEventAndStatusZCAP.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntEventAndStatusZCAP message.
         * @function verify
         * @memberof shuntmodule.ShuntEventAndStatusZCAP
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntEventAndStatusZCAP.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus")) {
                var error = $root.commonmodule.LogicalNodeForEventAndStatus.verify(message.logicalNodeForEventAndStatus);
                if (error)
                    return "logicalNodeForEventAndStatus." + error;
            }
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest")) {
                var error = $root.commonmodule.ENS_DynamicTestKind.verify(message.DynamicTest);
                if (error)
                    return "DynamicTest." + error;
            }
            if (message.PointStatus != null && message.hasOwnProperty("PointStatus")) {
                var error = $root.shuntmodule.ShuntEventAndStatusPoint.verify(message.PointStatus);
                if (error)
                    return "PointStatus." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntEventAndStatusZCAP message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntEventAndStatusZCAP
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntEventAndStatusZCAP} ShuntEventAndStatusZCAP
         */
        ShuntEventAndStatusZCAP.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntEventAndStatusZCAP)
                return object;
            var message = new $root.shuntmodule.ShuntEventAndStatusZCAP();
            if (object.logicalNodeForEventAndStatus != null) {
                if (typeof object.logicalNodeForEventAndStatus !== "object")
                    throw TypeError(".shuntmodule.ShuntEventAndStatusZCAP.logicalNodeForEventAndStatus: object expected");
                message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.fromObject(object.logicalNodeForEventAndStatus);
            }
            if (object.DynamicTest != null) {
                if (typeof object.DynamicTest !== "object")
                    throw TypeError(".shuntmodule.ShuntEventAndStatusZCAP.DynamicTest: object expected");
                message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.fromObject(object.DynamicTest);
            }
            if (object.PointStatus != null) {
                if (typeof object.PointStatus !== "object")
                    throw TypeError(".shuntmodule.ShuntEventAndStatusZCAP.PointStatus: object expected");
                message.PointStatus = $root.shuntmodule.ShuntEventAndStatusPoint.fromObject(object.PointStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntEventAndStatusZCAP message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntEventAndStatusZCAP
         * @static
         * @param {shuntmodule.ShuntEventAndStatusZCAP} message ShuntEventAndStatusZCAP
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntEventAndStatusZCAP.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForEventAndStatus = null;
                object.DynamicTest = null;
                object.PointStatus = null;
            }
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus"))
                object.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.toObject(message.logicalNodeForEventAndStatus, options);
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest"))
                object.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.toObject(message.DynamicTest, options);
            if (message.PointStatus != null && message.hasOwnProperty("PointStatus"))
                object.PointStatus = $root.shuntmodule.ShuntEventAndStatusPoint.toObject(message.PointStatus, options);
            return object;
        };

        /**
         * Converts this ShuntEventAndStatusZCAP to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntEventAndStatusZCAP
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntEventAndStatusZCAP.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntEventAndStatusZCAP;
    })();

    shuntmodule.ShuntEvent = (function() {

        /**
         * Properties of a ShuntEvent.
         * @memberof shuntmodule
         * @interface IShuntEvent
         * @property {commonmodule.IEventValue|null} [eventValue] ShuntEvent eventValue
         * @property {shuntmodule.IShuntEventAndStatusZCAP|null} [shuntEventAndStatusZCAP] ShuntEvent shuntEventAndStatusZCAP
         */

        /**
         * Constructs a new ShuntEvent.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntEvent.
         * @implements IShuntEvent
         * @constructor
         * @param {shuntmodule.IShuntEvent=} [properties] Properties to set
         */
        function ShuntEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntEvent eventValue.
         * @member {commonmodule.IEventValue|null|undefined} eventValue
         * @memberof shuntmodule.ShuntEvent
         * @instance
         */
        ShuntEvent.prototype.eventValue = null;

        /**
         * ShuntEvent shuntEventAndStatusZCAP.
         * @member {shuntmodule.IShuntEventAndStatusZCAP|null|undefined} shuntEventAndStatusZCAP
         * @memberof shuntmodule.ShuntEvent
         * @instance
         */
        ShuntEvent.prototype.shuntEventAndStatusZCAP = null;

        /**
         * Creates a new ShuntEvent instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntEvent
         * @static
         * @param {shuntmodule.IShuntEvent=} [properties] Properties to set
         * @returns {shuntmodule.ShuntEvent} ShuntEvent instance
         */
        ShuntEvent.create = function create(properties) {
            return new ShuntEvent(properties);
        };

        /**
         * Encodes the specified ShuntEvent message. Does not implicitly {@link shuntmodule.ShuntEvent.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntEvent
         * @static
         * @param {shuntmodule.IShuntEvent} message ShuntEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventValue != null && Object.hasOwnProperty.call(message, "eventValue"))
                $root.commonmodule.EventValue.encode(message.eventValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.shuntEventAndStatusZCAP != null && Object.hasOwnProperty.call(message, "shuntEventAndStatusZCAP"))
                $root.shuntmodule.ShuntEventAndStatusZCAP.encode(message.shuntEventAndStatusZCAP, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntEvent message, length delimited. Does not implicitly {@link shuntmodule.ShuntEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntEvent
         * @static
         * @param {shuntmodule.IShuntEvent} message ShuntEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntEvent message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntEvent} ShuntEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventValue = $root.commonmodule.EventValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.shuntEventAndStatusZCAP = $root.shuntmodule.ShuntEventAndStatusZCAP.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntEvent} ShuntEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntEvent message.
         * @function verify
         * @memberof shuntmodule.ShuntEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventValue != null && message.hasOwnProperty("eventValue")) {
                var error = $root.commonmodule.EventValue.verify(message.eventValue);
                if (error)
                    return "eventValue." + error;
            }
            if (message.shuntEventAndStatusZCAP != null && message.hasOwnProperty("shuntEventAndStatusZCAP")) {
                var error = $root.shuntmodule.ShuntEventAndStatusZCAP.verify(message.shuntEventAndStatusZCAP);
                if (error)
                    return "shuntEventAndStatusZCAP." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntEvent} ShuntEvent
         */
        ShuntEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntEvent)
                return object;
            var message = new $root.shuntmodule.ShuntEvent();
            if (object.eventValue != null) {
                if (typeof object.eventValue !== "object")
                    throw TypeError(".shuntmodule.ShuntEvent.eventValue: object expected");
                message.eventValue = $root.commonmodule.EventValue.fromObject(object.eventValue);
            }
            if (object.shuntEventAndStatusZCAP != null) {
                if (typeof object.shuntEventAndStatusZCAP !== "object")
                    throw TypeError(".shuntmodule.ShuntEvent.shuntEventAndStatusZCAP: object expected");
                message.shuntEventAndStatusZCAP = $root.shuntmodule.ShuntEventAndStatusZCAP.fromObject(object.shuntEventAndStatusZCAP);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntEvent
         * @static
         * @param {shuntmodule.ShuntEvent} message ShuntEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventValue = null;
                object.shuntEventAndStatusZCAP = null;
            }
            if (message.eventValue != null && message.hasOwnProperty("eventValue"))
                object.eventValue = $root.commonmodule.EventValue.toObject(message.eventValue, options);
            if (message.shuntEventAndStatusZCAP != null && message.hasOwnProperty("shuntEventAndStatusZCAP"))
                object.shuntEventAndStatusZCAP = $root.shuntmodule.ShuntEventAndStatusZCAP.toObject(message.shuntEventAndStatusZCAP, options);
            return object;
        };

        /**
         * Converts this ShuntEvent to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntEvent;
    })();

    shuntmodule.ShuntEventProfile = (function() {

        /**
         * Properties of a ShuntEventProfile.
         * @memberof shuntmodule
         * @interface IShuntEventProfile
         * @property {commonmodule.IEventMessageInfo|null} [eventMessageInfo] ShuntEventProfile eventMessageInfo
         * @property {commonmodule.IIED|null} [ied] ShuntEventProfile ied
         * @property {shuntmodule.IShuntEvent|null} [shuntEvent] ShuntEventProfile shuntEvent
         * @property {shuntmodule.IShuntSystem|null} [shuntSystem] ShuntEventProfile shuntSystem
         */

        /**
         * Constructs a new ShuntEventProfile.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntEventProfile.
         * @implements IShuntEventProfile
         * @constructor
         * @param {shuntmodule.IShuntEventProfile=} [properties] Properties to set
         */
        function ShuntEventProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntEventProfile eventMessageInfo.
         * @member {commonmodule.IEventMessageInfo|null|undefined} eventMessageInfo
         * @memberof shuntmodule.ShuntEventProfile
         * @instance
         */
        ShuntEventProfile.prototype.eventMessageInfo = null;

        /**
         * ShuntEventProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof shuntmodule.ShuntEventProfile
         * @instance
         */
        ShuntEventProfile.prototype.ied = null;

        /**
         * ShuntEventProfile shuntEvent.
         * @member {shuntmodule.IShuntEvent|null|undefined} shuntEvent
         * @memberof shuntmodule.ShuntEventProfile
         * @instance
         */
        ShuntEventProfile.prototype.shuntEvent = null;

        /**
         * ShuntEventProfile shuntSystem.
         * @member {shuntmodule.IShuntSystem|null|undefined} shuntSystem
         * @memberof shuntmodule.ShuntEventProfile
         * @instance
         */
        ShuntEventProfile.prototype.shuntSystem = null;

        /**
         * Creates a new ShuntEventProfile instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntEventProfile
         * @static
         * @param {shuntmodule.IShuntEventProfile=} [properties] Properties to set
         * @returns {shuntmodule.ShuntEventProfile} ShuntEventProfile instance
         */
        ShuntEventProfile.create = function create(properties) {
            return new ShuntEventProfile(properties);
        };

        /**
         * Encodes the specified ShuntEventProfile message. Does not implicitly {@link shuntmodule.ShuntEventProfile.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntEventProfile
         * @static
         * @param {shuntmodule.IShuntEventProfile} message ShuntEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntEventProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventMessageInfo != null && Object.hasOwnProperty.call(message, "eventMessageInfo"))
                $root.commonmodule.EventMessageInfo.encode(message.eventMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.shuntEvent != null && Object.hasOwnProperty.call(message, "shuntEvent"))
                $root.shuntmodule.ShuntEvent.encode(message.shuntEvent, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.shuntSystem != null && Object.hasOwnProperty.call(message, "shuntSystem"))
                $root.shuntmodule.ShuntSystem.encode(message.shuntSystem, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntEventProfile message, length delimited. Does not implicitly {@link shuntmodule.ShuntEventProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntEventProfile
         * @static
         * @param {shuntmodule.IShuntEventProfile} message ShuntEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntEventProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntEventProfile message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntEventProfile} ShuntEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntEventProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntEventProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventMessageInfo = $root.commonmodule.EventMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.shuntEvent = $root.shuntmodule.ShuntEvent.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.shuntSystem = $root.shuntmodule.ShuntSystem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntEventProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntEventProfile} ShuntEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntEventProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntEventProfile message.
         * @function verify
         * @memberof shuntmodule.ShuntEventProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntEventProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo")) {
                var error = $root.commonmodule.EventMessageInfo.verify(message.eventMessageInfo);
                if (error)
                    return "eventMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.shuntEvent != null && message.hasOwnProperty("shuntEvent")) {
                var error = $root.shuntmodule.ShuntEvent.verify(message.shuntEvent);
                if (error)
                    return "shuntEvent." + error;
            }
            if (message.shuntSystem != null && message.hasOwnProperty("shuntSystem")) {
                var error = $root.shuntmodule.ShuntSystem.verify(message.shuntSystem);
                if (error)
                    return "shuntSystem." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntEventProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntEventProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntEventProfile} ShuntEventProfile
         */
        ShuntEventProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntEventProfile)
                return object;
            var message = new $root.shuntmodule.ShuntEventProfile();
            if (object.eventMessageInfo != null) {
                if (typeof object.eventMessageInfo !== "object")
                    throw TypeError(".shuntmodule.ShuntEventProfile.eventMessageInfo: object expected");
                message.eventMessageInfo = $root.commonmodule.EventMessageInfo.fromObject(object.eventMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".shuntmodule.ShuntEventProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.shuntEvent != null) {
                if (typeof object.shuntEvent !== "object")
                    throw TypeError(".shuntmodule.ShuntEventProfile.shuntEvent: object expected");
                message.shuntEvent = $root.shuntmodule.ShuntEvent.fromObject(object.shuntEvent);
            }
            if (object.shuntSystem != null) {
                if (typeof object.shuntSystem !== "object")
                    throw TypeError(".shuntmodule.ShuntEventProfile.shuntSystem: object expected");
                message.shuntSystem = $root.shuntmodule.ShuntSystem.fromObject(object.shuntSystem);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntEventProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntEventProfile
         * @static
         * @param {shuntmodule.ShuntEventProfile} message ShuntEventProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntEventProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventMessageInfo = null;
                object.ied = null;
                object.shuntEvent = null;
                object.shuntSystem = null;
            }
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo"))
                object.eventMessageInfo = $root.commonmodule.EventMessageInfo.toObject(message.eventMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.shuntEvent != null && message.hasOwnProperty("shuntEvent"))
                object.shuntEvent = $root.shuntmodule.ShuntEvent.toObject(message.shuntEvent, options);
            if (message.shuntSystem != null && message.hasOwnProperty("shuntSystem"))
                object.shuntSystem = $root.shuntmodule.ShuntSystem.toObject(message.shuntSystem, options);
            return object;
        };

        /**
         * Converts this ShuntEventProfile to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntEventProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntEventProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntEventProfile;
    })();

    shuntmodule.ShuntReading = (function() {

        /**
         * Properties of a ShuntReading.
         * @memberof shuntmodule
         * @interface IShuntReading
         * @property {commonmodule.IConductingEquipmentTerminalReading|null} [conductingEquipmentTerminalReading] ShuntReading conductingEquipmentTerminalReading
         * @property {commonmodule.IPhaseMMTN|null} [phaseMMTN] ShuntReading phaseMMTN
         * @property {commonmodule.IReadingMMTR|null} [readingMMTR] ShuntReading readingMMTR
         * @property {commonmodule.IReadingMMXU|null} [readingMMXU] ShuntReading readingMMXU
         */

        /**
         * Constructs a new ShuntReading.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntReading.
         * @implements IShuntReading
         * @constructor
         * @param {shuntmodule.IShuntReading=} [properties] Properties to set
         */
        function ShuntReading(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntReading conductingEquipmentTerminalReading.
         * @member {commonmodule.IConductingEquipmentTerminalReading|null|undefined} conductingEquipmentTerminalReading
         * @memberof shuntmodule.ShuntReading
         * @instance
         */
        ShuntReading.prototype.conductingEquipmentTerminalReading = null;

        /**
         * ShuntReading phaseMMTN.
         * @member {commonmodule.IPhaseMMTN|null|undefined} phaseMMTN
         * @memberof shuntmodule.ShuntReading
         * @instance
         */
        ShuntReading.prototype.phaseMMTN = null;

        /**
         * ShuntReading readingMMTR.
         * @member {commonmodule.IReadingMMTR|null|undefined} readingMMTR
         * @memberof shuntmodule.ShuntReading
         * @instance
         */
        ShuntReading.prototype.readingMMTR = null;

        /**
         * ShuntReading readingMMXU.
         * @member {commonmodule.IReadingMMXU|null|undefined} readingMMXU
         * @memberof shuntmodule.ShuntReading
         * @instance
         */
        ShuntReading.prototype.readingMMXU = null;

        /**
         * Creates a new ShuntReading instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntReading
         * @static
         * @param {shuntmodule.IShuntReading=} [properties] Properties to set
         * @returns {shuntmodule.ShuntReading} ShuntReading instance
         */
        ShuntReading.create = function create(properties) {
            return new ShuntReading(properties);
        };

        /**
         * Encodes the specified ShuntReading message. Does not implicitly {@link shuntmodule.ShuntReading.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntReading
         * @static
         * @param {shuntmodule.IShuntReading} message ShuntReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntReading.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipmentTerminalReading != null && Object.hasOwnProperty.call(message, "conductingEquipmentTerminalReading"))
                $root.commonmodule.ConductingEquipmentTerminalReading.encode(message.conductingEquipmentTerminalReading, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.phaseMMTN != null && Object.hasOwnProperty.call(message, "phaseMMTN"))
                $root.commonmodule.PhaseMMTN.encode(message.phaseMMTN, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.readingMMTR != null && Object.hasOwnProperty.call(message, "readingMMTR"))
                $root.commonmodule.ReadingMMTR.encode(message.readingMMTR, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.readingMMXU != null && Object.hasOwnProperty.call(message, "readingMMXU"))
                $root.commonmodule.ReadingMMXU.encode(message.readingMMXU, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntReading message, length delimited. Does not implicitly {@link shuntmodule.ShuntReading.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntReading
         * @static
         * @param {shuntmodule.IShuntReading} message ShuntReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntReading.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntReading message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntReading} ShuntReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntReading.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntReading();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.phaseMMTN = $root.commonmodule.PhaseMMTN.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.readingMMTR = $root.commonmodule.ReadingMMTR.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.readingMMXU = $root.commonmodule.ReadingMMXU.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntReading message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntReading} ShuntReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntReading.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntReading message.
         * @function verify
         * @memberof shuntmodule.ShuntReading
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntReading.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading")) {
                var error = $root.commonmodule.ConductingEquipmentTerminalReading.verify(message.conductingEquipmentTerminalReading);
                if (error)
                    return "conductingEquipmentTerminalReading." + error;
            }
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN")) {
                var error = $root.commonmodule.PhaseMMTN.verify(message.phaseMMTN);
                if (error)
                    return "phaseMMTN." + error;
            }
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR")) {
                var error = $root.commonmodule.ReadingMMTR.verify(message.readingMMTR);
                if (error)
                    return "readingMMTR." + error;
            }
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU")) {
                var error = $root.commonmodule.ReadingMMXU.verify(message.readingMMXU);
                if (error)
                    return "readingMMXU." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntReading message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntReading
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntReading} ShuntReading
         */
        ShuntReading.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntReading)
                return object;
            var message = new $root.shuntmodule.ShuntReading();
            if (object.conductingEquipmentTerminalReading != null) {
                if (typeof object.conductingEquipmentTerminalReading !== "object")
                    throw TypeError(".shuntmodule.ShuntReading.conductingEquipmentTerminalReading: object expected");
                message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.fromObject(object.conductingEquipmentTerminalReading);
            }
            if (object.phaseMMTN != null) {
                if (typeof object.phaseMMTN !== "object")
                    throw TypeError(".shuntmodule.ShuntReading.phaseMMTN: object expected");
                message.phaseMMTN = $root.commonmodule.PhaseMMTN.fromObject(object.phaseMMTN);
            }
            if (object.readingMMTR != null) {
                if (typeof object.readingMMTR !== "object")
                    throw TypeError(".shuntmodule.ShuntReading.readingMMTR: object expected");
                message.readingMMTR = $root.commonmodule.ReadingMMTR.fromObject(object.readingMMTR);
            }
            if (object.readingMMXU != null) {
                if (typeof object.readingMMXU !== "object")
                    throw TypeError(".shuntmodule.ShuntReading.readingMMXU: object expected");
                message.readingMMXU = $root.commonmodule.ReadingMMXU.fromObject(object.readingMMXU);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntReading message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntReading
         * @static
         * @param {shuntmodule.ShuntReading} message ShuntReading
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntReading.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conductingEquipmentTerminalReading = null;
                object.phaseMMTN = null;
                object.readingMMTR = null;
                object.readingMMXU = null;
            }
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading"))
                object.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.toObject(message.conductingEquipmentTerminalReading, options);
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN"))
                object.phaseMMTN = $root.commonmodule.PhaseMMTN.toObject(message.phaseMMTN, options);
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR"))
                object.readingMMTR = $root.commonmodule.ReadingMMTR.toObject(message.readingMMTR, options);
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU"))
                object.readingMMXU = $root.commonmodule.ReadingMMXU.toObject(message.readingMMXU, options);
            return object;
        };

        /**
         * Converts this ShuntReading to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntReading
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntReading.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntReading;
    })();

    shuntmodule.ShuntReadingProfile = (function() {

        /**
         * Properties of a ShuntReadingProfile.
         * @memberof shuntmodule
         * @interface IShuntReadingProfile
         * @property {commonmodule.IReadingMessageInfo|null} [readingMessageInfo] ShuntReadingProfile readingMessageInfo
         * @property {commonmodule.IIED|null} [ied] ShuntReadingProfile ied
         * @property {shuntmodule.IShuntReading|null} [shuntReading] ShuntReadingProfile shuntReading
         * @property {shuntmodule.IShuntSystem|null} [shuntSystem] ShuntReadingProfile shuntSystem
         */

        /**
         * Constructs a new ShuntReadingProfile.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntReadingProfile.
         * @implements IShuntReadingProfile
         * @constructor
         * @param {shuntmodule.IShuntReadingProfile=} [properties] Properties to set
         */
        function ShuntReadingProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntReadingProfile readingMessageInfo.
         * @member {commonmodule.IReadingMessageInfo|null|undefined} readingMessageInfo
         * @memberof shuntmodule.ShuntReadingProfile
         * @instance
         */
        ShuntReadingProfile.prototype.readingMessageInfo = null;

        /**
         * ShuntReadingProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof shuntmodule.ShuntReadingProfile
         * @instance
         */
        ShuntReadingProfile.prototype.ied = null;

        /**
         * ShuntReadingProfile shuntReading.
         * @member {shuntmodule.IShuntReading|null|undefined} shuntReading
         * @memberof shuntmodule.ShuntReadingProfile
         * @instance
         */
        ShuntReadingProfile.prototype.shuntReading = null;

        /**
         * ShuntReadingProfile shuntSystem.
         * @member {shuntmodule.IShuntSystem|null|undefined} shuntSystem
         * @memberof shuntmodule.ShuntReadingProfile
         * @instance
         */
        ShuntReadingProfile.prototype.shuntSystem = null;

        /**
         * Creates a new ShuntReadingProfile instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntReadingProfile
         * @static
         * @param {shuntmodule.IShuntReadingProfile=} [properties] Properties to set
         * @returns {shuntmodule.ShuntReadingProfile} ShuntReadingProfile instance
         */
        ShuntReadingProfile.create = function create(properties) {
            return new ShuntReadingProfile(properties);
        };

        /**
         * Encodes the specified ShuntReadingProfile message. Does not implicitly {@link shuntmodule.ShuntReadingProfile.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntReadingProfile
         * @static
         * @param {shuntmodule.IShuntReadingProfile} message ShuntReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntReadingProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.readingMessageInfo != null && Object.hasOwnProperty.call(message, "readingMessageInfo"))
                $root.commonmodule.ReadingMessageInfo.encode(message.readingMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.shuntReading != null && Object.hasOwnProperty.call(message, "shuntReading"))
                $root.shuntmodule.ShuntReading.encode(message.shuntReading, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.shuntSystem != null && Object.hasOwnProperty.call(message, "shuntSystem"))
                $root.shuntmodule.ShuntSystem.encode(message.shuntSystem, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntReadingProfile message, length delimited. Does not implicitly {@link shuntmodule.ShuntReadingProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntReadingProfile
         * @static
         * @param {shuntmodule.IShuntReadingProfile} message ShuntReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntReadingProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntReadingProfile message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntReadingProfile} ShuntReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntReadingProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntReadingProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.shuntReading = $root.shuntmodule.ShuntReading.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.shuntSystem = $root.shuntmodule.ShuntSystem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntReadingProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntReadingProfile} ShuntReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntReadingProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntReadingProfile message.
         * @function verify
         * @memberof shuntmodule.ShuntReadingProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntReadingProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo")) {
                var error = $root.commonmodule.ReadingMessageInfo.verify(message.readingMessageInfo);
                if (error)
                    return "readingMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.shuntReading != null && message.hasOwnProperty("shuntReading")) {
                var error = $root.shuntmodule.ShuntReading.verify(message.shuntReading);
                if (error)
                    return "shuntReading." + error;
            }
            if (message.shuntSystem != null && message.hasOwnProperty("shuntSystem")) {
                var error = $root.shuntmodule.ShuntSystem.verify(message.shuntSystem);
                if (error)
                    return "shuntSystem." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntReadingProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntReadingProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntReadingProfile} ShuntReadingProfile
         */
        ShuntReadingProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntReadingProfile)
                return object;
            var message = new $root.shuntmodule.ShuntReadingProfile();
            if (object.readingMessageInfo != null) {
                if (typeof object.readingMessageInfo !== "object")
                    throw TypeError(".shuntmodule.ShuntReadingProfile.readingMessageInfo: object expected");
                message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.fromObject(object.readingMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".shuntmodule.ShuntReadingProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.shuntReading != null) {
                if (typeof object.shuntReading !== "object")
                    throw TypeError(".shuntmodule.ShuntReadingProfile.shuntReading: object expected");
                message.shuntReading = $root.shuntmodule.ShuntReading.fromObject(object.shuntReading);
            }
            if (object.shuntSystem != null) {
                if (typeof object.shuntSystem !== "object")
                    throw TypeError(".shuntmodule.ShuntReadingProfile.shuntSystem: object expected");
                message.shuntSystem = $root.shuntmodule.ShuntSystem.fromObject(object.shuntSystem);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntReadingProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntReadingProfile
         * @static
         * @param {shuntmodule.ShuntReadingProfile} message ShuntReadingProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntReadingProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.readingMessageInfo = null;
                object.ied = null;
                object.shuntReading = null;
                object.shuntSystem = null;
            }
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo"))
                object.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.toObject(message.readingMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.shuntReading != null && message.hasOwnProperty("shuntReading"))
                object.shuntReading = $root.shuntmodule.ShuntReading.toObject(message.shuntReading, options);
            if (message.shuntSystem != null && message.hasOwnProperty("shuntSystem"))
                object.shuntSystem = $root.shuntmodule.ShuntSystem.toObject(message.shuntSystem, options);
            return object;
        };

        /**
         * Converts this ShuntReadingProfile to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntReadingProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntReadingProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntReadingProfile;
    })();

    shuntmodule.ShuntStatus = (function() {

        /**
         * Properties of a ShuntStatus.
         * @memberof shuntmodule
         * @interface IShuntStatus
         * @property {commonmodule.IStatusValue|null} [statusValue] ShuntStatus statusValue
         * @property {shuntmodule.IShuntEventAndStatusZCAP|null} [shuntEventAndStatusZCAP] ShuntStatus shuntEventAndStatusZCAP
         */

        /**
         * Constructs a new ShuntStatus.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntStatus.
         * @implements IShuntStatus
         * @constructor
         * @param {shuntmodule.IShuntStatus=} [properties] Properties to set
         */
        function ShuntStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntStatus statusValue.
         * @member {commonmodule.IStatusValue|null|undefined} statusValue
         * @memberof shuntmodule.ShuntStatus
         * @instance
         */
        ShuntStatus.prototype.statusValue = null;

        /**
         * ShuntStatus shuntEventAndStatusZCAP.
         * @member {shuntmodule.IShuntEventAndStatusZCAP|null|undefined} shuntEventAndStatusZCAP
         * @memberof shuntmodule.ShuntStatus
         * @instance
         */
        ShuntStatus.prototype.shuntEventAndStatusZCAP = null;

        /**
         * Creates a new ShuntStatus instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntStatus
         * @static
         * @param {shuntmodule.IShuntStatus=} [properties] Properties to set
         * @returns {shuntmodule.ShuntStatus} ShuntStatus instance
         */
        ShuntStatus.create = function create(properties) {
            return new ShuntStatus(properties);
        };

        /**
         * Encodes the specified ShuntStatus message. Does not implicitly {@link shuntmodule.ShuntStatus.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntStatus
         * @static
         * @param {shuntmodule.IShuntStatus} message ShuntStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusValue != null && Object.hasOwnProperty.call(message, "statusValue"))
                $root.commonmodule.StatusValue.encode(message.statusValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.shuntEventAndStatusZCAP != null && Object.hasOwnProperty.call(message, "shuntEventAndStatusZCAP"))
                $root.shuntmodule.ShuntEventAndStatusZCAP.encode(message.shuntEventAndStatusZCAP, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntStatus message, length delimited. Does not implicitly {@link shuntmodule.ShuntStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntStatus
         * @static
         * @param {shuntmodule.IShuntStatus} message ShuntStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntStatus message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntStatus} ShuntStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusValue = $root.commonmodule.StatusValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.shuntEventAndStatusZCAP = $root.shuntmodule.ShuntEventAndStatusZCAP.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntStatus} ShuntStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntStatus message.
         * @function verify
         * @memberof shuntmodule.ShuntStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusValue != null && message.hasOwnProperty("statusValue")) {
                var error = $root.commonmodule.StatusValue.verify(message.statusValue);
                if (error)
                    return "statusValue." + error;
            }
            if (message.shuntEventAndStatusZCAP != null && message.hasOwnProperty("shuntEventAndStatusZCAP")) {
                var error = $root.shuntmodule.ShuntEventAndStatusZCAP.verify(message.shuntEventAndStatusZCAP);
                if (error)
                    return "shuntEventAndStatusZCAP." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntStatus} ShuntStatus
         */
        ShuntStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntStatus)
                return object;
            var message = new $root.shuntmodule.ShuntStatus();
            if (object.statusValue != null) {
                if (typeof object.statusValue !== "object")
                    throw TypeError(".shuntmodule.ShuntStatus.statusValue: object expected");
                message.statusValue = $root.commonmodule.StatusValue.fromObject(object.statusValue);
            }
            if (object.shuntEventAndStatusZCAP != null) {
                if (typeof object.shuntEventAndStatusZCAP !== "object")
                    throw TypeError(".shuntmodule.ShuntStatus.shuntEventAndStatusZCAP: object expected");
                message.shuntEventAndStatusZCAP = $root.shuntmodule.ShuntEventAndStatusZCAP.fromObject(object.shuntEventAndStatusZCAP);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntStatus
         * @static
         * @param {shuntmodule.ShuntStatus} message ShuntStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusValue = null;
                object.shuntEventAndStatusZCAP = null;
            }
            if (message.statusValue != null && message.hasOwnProperty("statusValue"))
                object.statusValue = $root.commonmodule.StatusValue.toObject(message.statusValue, options);
            if (message.shuntEventAndStatusZCAP != null && message.hasOwnProperty("shuntEventAndStatusZCAP"))
                object.shuntEventAndStatusZCAP = $root.shuntmodule.ShuntEventAndStatusZCAP.toObject(message.shuntEventAndStatusZCAP, options);
            return object;
        };

        /**
         * Converts this ShuntStatus to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntStatus;
    })();

    shuntmodule.ShuntStatusProfile = (function() {

        /**
         * Properties of a ShuntStatusProfile.
         * @memberof shuntmodule
         * @interface IShuntStatusProfile
         * @property {commonmodule.IStatusMessageInfo|null} [statusMessageInfo] ShuntStatusProfile statusMessageInfo
         * @property {commonmodule.IIED|null} [ied] ShuntStatusProfile ied
         * @property {shuntmodule.IShuntStatus|null} [shuntStatus] ShuntStatusProfile shuntStatus
         * @property {shuntmodule.IShuntSystem|null} [shuntSystem] ShuntStatusProfile shuntSystem
         */

        /**
         * Constructs a new ShuntStatusProfile.
         * @memberof shuntmodule
         * @classdesc Represents a ShuntStatusProfile.
         * @implements IShuntStatusProfile
         * @constructor
         * @param {shuntmodule.IShuntStatusProfile=} [properties] Properties to set
         */
        function ShuntStatusProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ShuntStatusProfile statusMessageInfo.
         * @member {commonmodule.IStatusMessageInfo|null|undefined} statusMessageInfo
         * @memberof shuntmodule.ShuntStatusProfile
         * @instance
         */
        ShuntStatusProfile.prototype.statusMessageInfo = null;

        /**
         * ShuntStatusProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof shuntmodule.ShuntStatusProfile
         * @instance
         */
        ShuntStatusProfile.prototype.ied = null;

        /**
         * ShuntStatusProfile shuntStatus.
         * @member {shuntmodule.IShuntStatus|null|undefined} shuntStatus
         * @memberof shuntmodule.ShuntStatusProfile
         * @instance
         */
        ShuntStatusProfile.prototype.shuntStatus = null;

        /**
         * ShuntStatusProfile shuntSystem.
         * @member {shuntmodule.IShuntSystem|null|undefined} shuntSystem
         * @memberof shuntmodule.ShuntStatusProfile
         * @instance
         */
        ShuntStatusProfile.prototype.shuntSystem = null;

        /**
         * Creates a new ShuntStatusProfile instance using the specified properties.
         * @function create
         * @memberof shuntmodule.ShuntStatusProfile
         * @static
         * @param {shuntmodule.IShuntStatusProfile=} [properties] Properties to set
         * @returns {shuntmodule.ShuntStatusProfile} ShuntStatusProfile instance
         */
        ShuntStatusProfile.create = function create(properties) {
            return new ShuntStatusProfile(properties);
        };

        /**
         * Encodes the specified ShuntStatusProfile message. Does not implicitly {@link shuntmodule.ShuntStatusProfile.verify|verify} messages.
         * @function encode
         * @memberof shuntmodule.ShuntStatusProfile
         * @static
         * @param {shuntmodule.IShuntStatusProfile} message ShuntStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntStatusProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusMessageInfo != null && Object.hasOwnProperty.call(message, "statusMessageInfo"))
                $root.commonmodule.StatusMessageInfo.encode(message.statusMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.shuntStatus != null && Object.hasOwnProperty.call(message, "shuntStatus"))
                $root.shuntmodule.ShuntStatus.encode(message.shuntStatus, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.shuntSystem != null && Object.hasOwnProperty.call(message, "shuntSystem"))
                $root.shuntmodule.ShuntSystem.encode(message.shuntSystem, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ShuntStatusProfile message, length delimited. Does not implicitly {@link shuntmodule.ShuntStatusProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof shuntmodule.ShuntStatusProfile
         * @static
         * @param {shuntmodule.IShuntStatusProfile} message ShuntStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ShuntStatusProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ShuntStatusProfile message from the specified reader or buffer.
         * @function decode
         * @memberof shuntmodule.ShuntStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {shuntmodule.ShuntStatusProfile} ShuntStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntStatusProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.shuntmodule.ShuntStatusProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.shuntStatus = $root.shuntmodule.ShuntStatus.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.shuntSystem = $root.shuntmodule.ShuntSystem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ShuntStatusProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof shuntmodule.ShuntStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {shuntmodule.ShuntStatusProfile} ShuntStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ShuntStatusProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ShuntStatusProfile message.
         * @function verify
         * @memberof shuntmodule.ShuntStatusProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ShuntStatusProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo")) {
                var error = $root.commonmodule.StatusMessageInfo.verify(message.statusMessageInfo);
                if (error)
                    return "statusMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.shuntStatus != null && message.hasOwnProperty("shuntStatus")) {
                var error = $root.shuntmodule.ShuntStatus.verify(message.shuntStatus);
                if (error)
                    return "shuntStatus." + error;
            }
            if (message.shuntSystem != null && message.hasOwnProperty("shuntSystem")) {
                var error = $root.shuntmodule.ShuntSystem.verify(message.shuntSystem);
                if (error)
                    return "shuntSystem." + error;
            }
            return null;
        };

        /**
         * Creates a ShuntStatusProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof shuntmodule.ShuntStatusProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {shuntmodule.ShuntStatusProfile} ShuntStatusProfile
         */
        ShuntStatusProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.shuntmodule.ShuntStatusProfile)
                return object;
            var message = new $root.shuntmodule.ShuntStatusProfile();
            if (object.statusMessageInfo != null) {
                if (typeof object.statusMessageInfo !== "object")
                    throw TypeError(".shuntmodule.ShuntStatusProfile.statusMessageInfo: object expected");
                message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.fromObject(object.statusMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".shuntmodule.ShuntStatusProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.shuntStatus != null) {
                if (typeof object.shuntStatus !== "object")
                    throw TypeError(".shuntmodule.ShuntStatusProfile.shuntStatus: object expected");
                message.shuntStatus = $root.shuntmodule.ShuntStatus.fromObject(object.shuntStatus);
            }
            if (object.shuntSystem != null) {
                if (typeof object.shuntSystem !== "object")
                    throw TypeError(".shuntmodule.ShuntStatusProfile.shuntSystem: object expected");
                message.shuntSystem = $root.shuntmodule.ShuntSystem.fromObject(object.shuntSystem);
            }
            return message;
        };

        /**
         * Creates a plain object from a ShuntStatusProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof shuntmodule.ShuntStatusProfile
         * @static
         * @param {shuntmodule.ShuntStatusProfile} message ShuntStatusProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ShuntStatusProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusMessageInfo = null;
                object.ied = null;
                object.shuntStatus = null;
                object.shuntSystem = null;
            }
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo"))
                object.statusMessageInfo = $root.commonmodule.StatusMessageInfo.toObject(message.statusMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.shuntStatus != null && message.hasOwnProperty("shuntStatus"))
                object.shuntStatus = $root.shuntmodule.ShuntStatus.toObject(message.shuntStatus, options);
            if (message.shuntSystem != null && message.hasOwnProperty("shuntSystem"))
                object.shuntSystem = $root.shuntmodule.ShuntSystem.toObject(message.shuntSystem, options);
            return object;
        };

        /**
         * Converts this ShuntStatusProfile to JSON.
         * @function toJSON
         * @memberof shuntmodule.ShuntStatusProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ShuntStatusProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ShuntStatusProfile;
    })();

    return shuntmodule;
})();

$root.google = (function() {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    var google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        var protobuf = {};

        protobuf.DoubleValue = (function() {

            /**
             * Properties of a DoubleValue.
             * @memberof google.protobuf
             * @interface IDoubleValue
             * @property {number|null} [value] DoubleValue value
             */

            /**
             * Constructs a new DoubleValue.
             * @memberof google.protobuf
             * @classdesc Represents a DoubleValue.
             * @implements IDoubleValue
             * @constructor
             * @param {google.protobuf.IDoubleValue=} [properties] Properties to set
             */
            function DoubleValue(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DoubleValue value.
             * @member {number} value
             * @memberof google.protobuf.DoubleValue
             * @instance
             */
            DoubleValue.prototype.value = 0;

            /**
             * Creates a new DoubleValue instance using the specified properties.
             * @function create
             * @memberof google.protobuf.DoubleValue
             * @static
             * @param {google.protobuf.IDoubleValue=} [properties] Properties to set
             * @returns {google.protobuf.DoubleValue} DoubleValue instance
             */
            DoubleValue.create = function create(properties) {
                return new DoubleValue(properties);
            };

            /**
             * Encodes the specified DoubleValue message. Does not implicitly {@link google.protobuf.DoubleValue.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.DoubleValue
             * @static
             * @param {google.protobuf.IDoubleValue} message DoubleValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DoubleValue.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 1 =*/9).double(message.value);
                return writer;
            };

            /**
             * Encodes the specified DoubleValue message, length delimited. Does not implicitly {@link google.protobuf.DoubleValue.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.DoubleValue
             * @static
             * @param {google.protobuf.IDoubleValue} message DoubleValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DoubleValue.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DoubleValue message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.DoubleValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.DoubleValue} DoubleValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DoubleValue.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DoubleValue();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.double();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DoubleValue message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.DoubleValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.DoubleValue} DoubleValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DoubleValue.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DoubleValue message.
             * @function verify
             * @memberof google.protobuf.DoubleValue
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DoubleValue.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (typeof message.value !== "number")
                        return "value: number expected";
                return null;
            };

            /**
             * Creates a DoubleValue message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.DoubleValue
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DoubleValue} DoubleValue
             */
            DoubleValue.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DoubleValue)
                    return object;
                var message = new $root.google.protobuf.DoubleValue();
                if (object.value != null)
                    message.value = Number(object.value);
                return message;
            };

            /**
             * Creates a plain object from a DoubleValue message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.DoubleValue
             * @static
             * @param {google.protobuf.DoubleValue} message DoubleValue
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DoubleValue.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.value = 0;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                return object;
            };

            /**
             * Converts this DoubleValue to JSON.
             * @function toJSON
             * @memberof google.protobuf.DoubleValue
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DoubleValue.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return DoubleValue;
        })();

        protobuf.FloatValue = (function() {

            /**
             * Properties of a FloatValue.
             * @memberof google.protobuf
             * @interface IFloatValue
             * @property {number|null} [value] FloatValue value
             */

            /**
             * Constructs a new FloatValue.
             * @memberof google.protobuf
             * @classdesc Represents a FloatValue.
             * @implements IFloatValue
             * @constructor
             * @param {google.protobuf.IFloatValue=} [properties] Properties to set
             */
            function FloatValue(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FloatValue value.
             * @member {number} value
             * @memberof google.protobuf.FloatValue
             * @instance
             */
            FloatValue.prototype.value = 0;

            /**
             * Creates a new FloatValue instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FloatValue
             * @static
             * @param {google.protobuf.IFloatValue=} [properties] Properties to set
             * @returns {google.protobuf.FloatValue} FloatValue instance
             */
            FloatValue.create = function create(properties) {
                return new FloatValue(properties);
            };

            /**
             * Encodes the specified FloatValue message. Does not implicitly {@link google.protobuf.FloatValue.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FloatValue
             * @static
             * @param {google.protobuf.IFloatValue} message FloatValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FloatValue.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 5 =*/13).float(message.value);
                return writer;
            };

            /**
             * Encodes the specified FloatValue message, length delimited. Does not implicitly {@link google.protobuf.FloatValue.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FloatValue
             * @static
             * @param {google.protobuf.IFloatValue} message FloatValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FloatValue.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FloatValue message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FloatValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FloatValue} FloatValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FloatValue.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FloatValue();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.float();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FloatValue message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FloatValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FloatValue} FloatValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FloatValue.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FloatValue message.
             * @function verify
             * @memberof google.protobuf.FloatValue
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FloatValue.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (typeof message.value !== "number")
                        return "value: number expected";
                return null;
            };

            /**
             * Creates a FloatValue message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FloatValue
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FloatValue} FloatValue
             */
            FloatValue.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FloatValue)
                    return object;
                var message = new $root.google.protobuf.FloatValue();
                if (object.value != null)
                    message.value = Number(object.value);
                return message;
            };

            /**
             * Creates a plain object from a FloatValue message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FloatValue
             * @static
             * @param {google.protobuf.FloatValue} message FloatValue
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FloatValue.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.value = 0;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
                return object;
            };

            /**
             * Converts this FloatValue to JSON.
             * @function toJSON
             * @memberof google.protobuf.FloatValue
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FloatValue.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FloatValue;
        })();

        protobuf.Int64Value = (function() {

            /**
             * Properties of an Int64Value.
             * @memberof google.protobuf
             * @interface IInt64Value
             * @property {number|Long|null} [value] Int64Value value
             */

            /**
             * Constructs a new Int64Value.
             * @memberof google.protobuf
             * @classdesc Represents an Int64Value.
             * @implements IInt64Value
             * @constructor
             * @param {google.protobuf.IInt64Value=} [properties] Properties to set
             */
            function Int64Value(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Int64Value value.
             * @member {number|Long} value
             * @memberof google.protobuf.Int64Value
             * @instance
             */
            Int64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Creates a new Int64Value instance using the specified properties.
             * @function create
             * @memberof google.protobuf.Int64Value
             * @static
             * @param {google.protobuf.IInt64Value=} [properties] Properties to set
             * @returns {google.protobuf.Int64Value} Int64Value instance
             */
            Int64Value.create = function create(properties) {
                return new Int64Value(properties);
            };

            /**
             * Encodes the specified Int64Value message. Does not implicitly {@link google.protobuf.Int64Value.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Int64Value
             * @static
             * @param {google.protobuf.IInt64Value} message Int64Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Int64Value.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.value);
                return writer;
            };

            /**
             * Encodes the specified Int64Value message, length delimited. Does not implicitly {@link google.protobuf.Int64Value.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Int64Value
             * @static
             * @param {google.protobuf.IInt64Value} message Int64Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Int64Value.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Int64Value message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Int64Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Int64Value} Int64Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Int64Value.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Int64Value();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.int64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Int64Value message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Int64Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Int64Value} Int64Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Int64Value.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Int64Value message.
             * @function verify
             * @memberof google.protobuf.Int64Value
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Int64Value.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                        return "value: integer|Long expected";
                return null;
            };

            /**
             * Creates an Int64Value message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Int64Value
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Int64Value} Int64Value
             */
            Int64Value.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Int64Value)
                    return object;
                var message = new $root.google.protobuf.Int64Value();
                if (object.value != null)
                    if ($util.Long)
                        (message.value = $util.Long.fromValue(object.value)).unsigned = false;
                    else if (typeof object.value === "string")
                        message.value = parseInt(object.value, 10);
                    else if (typeof object.value === "number")
                        message.value = object.value;
                    else if (typeof object.value === "object")
                        message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber();
                return message;
            };

            /**
             * Creates a plain object from an Int64Value message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Int64Value
             * @static
             * @param {google.protobuf.Int64Value} message Int64Value
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Int64Value.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.value = options.longs === String ? "0" : 0;
                if (message.value != null && message.hasOwnProperty("value"))
                    if (typeof message.value === "number")
                        object.value = options.longs === String ? String(message.value) : message.value;
                    else
                        object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber() : message.value;
                return object;
            };

            /**
             * Converts this Int64Value to JSON.
             * @function toJSON
             * @memberof google.protobuf.Int64Value
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Int64Value.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Int64Value;
        })();

        protobuf.UInt64Value = (function() {

            /**
             * Properties of a UInt64Value.
             * @memberof google.protobuf
             * @interface IUInt64Value
             * @property {number|Long|null} [value] UInt64Value value
             */

            /**
             * Constructs a new UInt64Value.
             * @memberof google.protobuf
             * @classdesc Represents a UInt64Value.
             * @implements IUInt64Value
             * @constructor
             * @param {google.protobuf.IUInt64Value=} [properties] Properties to set
             */
            function UInt64Value(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UInt64Value value.
             * @member {number|Long} value
             * @memberof google.protobuf.UInt64Value
             * @instance
             */
            UInt64Value.prototype.value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * Creates a new UInt64Value instance using the specified properties.
             * @function create
             * @memberof google.protobuf.UInt64Value
             * @static
             * @param {google.protobuf.IUInt64Value=} [properties] Properties to set
             * @returns {google.protobuf.UInt64Value} UInt64Value instance
             */
            UInt64Value.create = function create(properties) {
                return new UInt64Value(properties);
            };

            /**
             * Encodes the specified UInt64Value message. Does not implicitly {@link google.protobuf.UInt64Value.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UInt64Value
             * @static
             * @param {google.protobuf.IUInt64Value} message UInt64Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UInt64Value.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.value);
                return writer;
            };

            /**
             * Encodes the specified UInt64Value message, length delimited. Does not implicitly {@link google.protobuf.UInt64Value.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.UInt64Value
             * @static
             * @param {google.protobuf.IUInt64Value} message UInt64Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UInt64Value.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a UInt64Value message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UInt64Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UInt64Value} UInt64Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UInt64Value.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UInt64Value();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.uint64();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a UInt64Value message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.UInt64Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.UInt64Value} UInt64Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UInt64Value.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a UInt64Value message.
             * @function verify
             * @memberof google.protobuf.UInt64Value
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UInt64Value.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isInteger(message.value) && !(message.value && $util.isInteger(message.value.low) && $util.isInteger(message.value.high)))
                        return "value: integer|Long expected";
                return null;
            };

            /**
             * Creates a UInt64Value message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UInt64Value
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UInt64Value} UInt64Value
             */
            UInt64Value.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UInt64Value)
                    return object;
                var message = new $root.google.protobuf.UInt64Value();
                if (object.value != null)
                    if ($util.Long)
                        (message.value = $util.Long.fromValue(object.value)).unsigned = true;
                    else if (typeof object.value === "string")
                        message.value = parseInt(object.value, 10);
                    else if (typeof object.value === "number")
                        message.value = object.value;
                    else if (typeof object.value === "object")
                        message.value = new $util.LongBits(object.value.low >>> 0, object.value.high >>> 0).toNumber(true);
                return message;
            };

            /**
             * Creates a plain object from a UInt64Value message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UInt64Value
             * @static
             * @param {google.protobuf.UInt64Value} message UInt64Value
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UInt64Value.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.value = options.longs === String ? "0" : 0;
                if (message.value != null && message.hasOwnProperty("value"))
                    if (typeof message.value === "number")
                        object.value = options.longs === String ? String(message.value) : message.value;
                    else
                        object.value = options.longs === String ? $util.Long.prototype.toString.call(message.value) : options.longs === Number ? new $util.LongBits(message.value.low >>> 0, message.value.high >>> 0).toNumber(true) : message.value;
                return object;
            };

            /**
             * Converts this UInt64Value to JSON.
             * @function toJSON
             * @memberof google.protobuf.UInt64Value
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UInt64Value.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UInt64Value;
        })();

        protobuf.Int32Value = (function() {

            /**
             * Properties of an Int32Value.
             * @memberof google.protobuf
             * @interface IInt32Value
             * @property {number|null} [value] Int32Value value
             */

            /**
             * Constructs a new Int32Value.
             * @memberof google.protobuf
             * @classdesc Represents an Int32Value.
             * @implements IInt32Value
             * @constructor
             * @param {google.protobuf.IInt32Value=} [properties] Properties to set
             */
            function Int32Value(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Int32Value value.
             * @member {number} value
             * @memberof google.protobuf.Int32Value
             * @instance
             */
            Int32Value.prototype.value = 0;

            /**
             * Creates a new Int32Value instance using the specified properties.
             * @function create
             * @memberof google.protobuf.Int32Value
             * @static
             * @param {google.protobuf.IInt32Value=} [properties] Properties to set
             * @returns {google.protobuf.Int32Value} Int32Value instance
             */
            Int32Value.create = function create(properties) {
                return new Int32Value(properties);
            };

            /**
             * Encodes the specified Int32Value message. Does not implicitly {@link google.protobuf.Int32Value.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Int32Value
             * @static
             * @param {google.protobuf.IInt32Value} message Int32Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Int32Value.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
                return writer;
            };

            /**
             * Encodes the specified Int32Value message, length delimited. Does not implicitly {@link google.protobuf.Int32Value.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Int32Value
             * @static
             * @param {google.protobuf.IInt32Value} message Int32Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Int32Value.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Int32Value message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Int32Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Int32Value} Int32Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Int32Value.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Int32Value();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.int32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Int32Value message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Int32Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Int32Value} Int32Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Int32Value.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Int32Value message.
             * @function verify
             * @memberof google.protobuf.Int32Value
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Int32Value.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isInteger(message.value))
                        return "value: integer expected";
                return null;
            };

            /**
             * Creates an Int32Value message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Int32Value
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Int32Value} Int32Value
             */
            Int32Value.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Int32Value)
                    return object;
                var message = new $root.google.protobuf.Int32Value();
                if (object.value != null)
                    message.value = object.value | 0;
                return message;
            };

            /**
             * Creates a plain object from an Int32Value message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Int32Value
             * @static
             * @param {google.protobuf.Int32Value} message Int32Value
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Int32Value.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.value = 0;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };

            /**
             * Converts this Int32Value to JSON.
             * @function toJSON
             * @memberof google.protobuf.Int32Value
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Int32Value.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return Int32Value;
        })();

        protobuf.UInt32Value = (function() {

            /**
             * Properties of a UInt32Value.
             * @memberof google.protobuf
             * @interface IUInt32Value
             * @property {number|null} [value] UInt32Value value
             */

            /**
             * Constructs a new UInt32Value.
             * @memberof google.protobuf
             * @classdesc Represents a UInt32Value.
             * @implements IUInt32Value
             * @constructor
             * @param {google.protobuf.IUInt32Value=} [properties] Properties to set
             */
            function UInt32Value(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UInt32Value value.
             * @member {number} value
             * @memberof google.protobuf.UInt32Value
             * @instance
             */
            UInt32Value.prototype.value = 0;

            /**
             * Creates a new UInt32Value instance using the specified properties.
             * @function create
             * @memberof google.protobuf.UInt32Value
             * @static
             * @param {google.protobuf.IUInt32Value=} [properties] Properties to set
             * @returns {google.protobuf.UInt32Value} UInt32Value instance
             */
            UInt32Value.create = function create(properties) {
                return new UInt32Value(properties);
            };

            /**
             * Encodes the specified UInt32Value message. Does not implicitly {@link google.protobuf.UInt32Value.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UInt32Value
             * @static
             * @param {google.protobuf.IUInt32Value} message UInt32Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UInt32Value.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.value);
                return writer;
            };

            /**
             * Encodes the specified UInt32Value message, length delimited. Does not implicitly {@link google.protobuf.UInt32Value.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.UInt32Value
             * @static
             * @param {google.protobuf.IUInt32Value} message UInt32Value message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UInt32Value.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a UInt32Value message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UInt32Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UInt32Value} UInt32Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UInt32Value.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UInt32Value();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.uint32();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a UInt32Value message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.UInt32Value
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.UInt32Value} UInt32Value
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UInt32Value.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a UInt32Value message.
             * @function verify
             * @memberof google.protobuf.UInt32Value
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UInt32Value.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isInteger(message.value))
                        return "value: integer expected";
                return null;
            };

            /**
             * Creates a UInt32Value message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UInt32Value
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UInt32Value} UInt32Value
             */
            UInt32Value.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UInt32Value)
                    return object;
                var message = new $root.google.protobuf.UInt32Value();
                if (object.value != null)
                    message.value = object.value >>> 0;
                return message;
            };

            /**
             * Creates a plain object from a UInt32Value message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UInt32Value
             * @static
             * @param {google.protobuf.UInt32Value} message UInt32Value
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UInt32Value.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.value = 0;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };

            /**
             * Converts this UInt32Value to JSON.
             * @function toJSON
             * @memberof google.protobuf.UInt32Value
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UInt32Value.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return UInt32Value;
        })();

        protobuf.BoolValue = (function() {

            /**
             * Properties of a BoolValue.
             * @memberof google.protobuf
             * @interface IBoolValue
             * @property {boolean|null} [value] BoolValue value
             */

            /**
             * Constructs a new BoolValue.
             * @memberof google.protobuf
             * @classdesc Represents a BoolValue.
             * @implements IBoolValue
             * @constructor
             * @param {google.protobuf.IBoolValue=} [properties] Properties to set
             */
            function BoolValue(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BoolValue value.
             * @member {boolean} value
             * @memberof google.protobuf.BoolValue
             * @instance
             */
            BoolValue.prototype.value = false;

            /**
             * Creates a new BoolValue instance using the specified properties.
             * @function create
             * @memberof google.protobuf.BoolValue
             * @static
             * @param {google.protobuf.IBoolValue=} [properties] Properties to set
             * @returns {google.protobuf.BoolValue} BoolValue instance
             */
            BoolValue.create = function create(properties) {
                return new BoolValue(properties);
            };

            /**
             * Encodes the specified BoolValue message. Does not implicitly {@link google.protobuf.BoolValue.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.BoolValue
             * @static
             * @param {google.protobuf.IBoolValue} message BoolValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BoolValue.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.value);
                return writer;
            };

            /**
             * Encodes the specified BoolValue message, length delimited. Does not implicitly {@link google.protobuf.BoolValue.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.BoolValue
             * @static
             * @param {google.protobuf.IBoolValue} message BoolValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BoolValue.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BoolValue message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.BoolValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.BoolValue} BoolValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BoolValue.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.BoolValue();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BoolValue message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.BoolValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.BoolValue} BoolValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BoolValue.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BoolValue message.
             * @function verify
             * @memberof google.protobuf.BoolValue
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BoolValue.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (typeof message.value !== "boolean")
                        return "value: boolean expected";
                return null;
            };

            /**
             * Creates a BoolValue message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.BoolValue
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.BoolValue} BoolValue
             */
            BoolValue.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.BoolValue)
                    return object;
                var message = new $root.google.protobuf.BoolValue();
                if (object.value != null)
                    message.value = Boolean(object.value);
                return message;
            };

            /**
             * Creates a plain object from a BoolValue message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.BoolValue
             * @static
             * @param {google.protobuf.BoolValue} message BoolValue
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BoolValue.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.value = false;
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };

            /**
             * Converts this BoolValue to JSON.
             * @function toJSON
             * @memberof google.protobuf.BoolValue
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BoolValue.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BoolValue;
        })();

        protobuf.StringValue = (function() {

            /**
             * Properties of a StringValue.
             * @memberof google.protobuf
             * @interface IStringValue
             * @property {string|null} [value] StringValue value
             */

            /**
             * Constructs a new StringValue.
             * @memberof google.protobuf
             * @classdesc Represents a StringValue.
             * @implements IStringValue
             * @constructor
             * @param {google.protobuf.IStringValue=} [properties] Properties to set
             */
            function StringValue(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StringValue value.
             * @member {string} value
             * @memberof google.protobuf.StringValue
             * @instance
             */
            StringValue.prototype.value = "";

            /**
             * Creates a new StringValue instance using the specified properties.
             * @function create
             * @memberof google.protobuf.StringValue
             * @static
             * @param {google.protobuf.IStringValue=} [properties] Properties to set
             * @returns {google.protobuf.StringValue} StringValue instance
             */
            StringValue.create = function create(properties) {
                return new StringValue(properties);
            };

            /**
             * Encodes the specified StringValue message. Does not implicitly {@link google.protobuf.StringValue.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.StringValue
             * @static
             * @param {google.protobuf.IStringValue} message StringValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StringValue.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.value);
                return writer;
            };

            /**
             * Encodes the specified StringValue message, length delimited. Does not implicitly {@link google.protobuf.StringValue.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.StringValue
             * @static
             * @param {google.protobuf.IStringValue} message StringValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StringValue.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StringValue message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.StringValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.StringValue} StringValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StringValue.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.StringValue();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StringValue message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.StringValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.StringValue} StringValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StringValue.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StringValue message.
             * @function verify
             * @memberof google.protobuf.StringValue
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StringValue.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!$util.isString(message.value))
                        return "value: string expected";
                return null;
            };

            /**
             * Creates a StringValue message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.StringValue
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.StringValue} StringValue
             */
            StringValue.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.StringValue)
                    return object;
                var message = new $root.google.protobuf.StringValue();
                if (object.value != null)
                    message.value = String(object.value);
                return message;
            };

            /**
             * Creates a plain object from a StringValue message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.StringValue
             * @static
             * @param {google.protobuf.StringValue} message StringValue
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StringValue.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    object.value = "";
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = message.value;
                return object;
            };

            /**
             * Converts this StringValue to JSON.
             * @function toJSON
             * @memberof google.protobuf.StringValue
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StringValue.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return StringValue;
        })();

        protobuf.BytesValue = (function() {

            /**
             * Properties of a BytesValue.
             * @memberof google.protobuf
             * @interface IBytesValue
             * @property {Uint8Array|null} [value] BytesValue value
             */

            /**
             * Constructs a new BytesValue.
             * @memberof google.protobuf
             * @classdesc Represents a BytesValue.
             * @implements IBytesValue
             * @constructor
             * @param {google.protobuf.IBytesValue=} [properties] Properties to set
             */
            function BytesValue(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BytesValue value.
             * @member {Uint8Array} value
             * @memberof google.protobuf.BytesValue
             * @instance
             */
            BytesValue.prototype.value = $util.newBuffer([]);

            /**
             * Creates a new BytesValue instance using the specified properties.
             * @function create
             * @memberof google.protobuf.BytesValue
             * @static
             * @param {google.protobuf.IBytesValue=} [properties] Properties to set
             * @returns {google.protobuf.BytesValue} BytesValue instance
             */
            BytesValue.create = function create(properties) {
                return new BytesValue(properties);
            };

            /**
             * Encodes the specified BytesValue message. Does not implicitly {@link google.protobuf.BytesValue.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.BytesValue
             * @static
             * @param {google.protobuf.IBytesValue} message BytesValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BytesValue.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.value);
                return writer;
            };

            /**
             * Encodes the specified BytesValue message, length delimited. Does not implicitly {@link google.protobuf.BytesValue.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.BytesValue
             * @static
             * @param {google.protobuf.IBytesValue} message BytesValue message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BytesValue.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BytesValue message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.BytesValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.BytesValue} BytesValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BytesValue.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.BytesValue();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.value = reader.bytes();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BytesValue message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.BytesValue
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.BytesValue} BytesValue
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BytesValue.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BytesValue message.
             * @function verify
             * @memberof google.protobuf.BytesValue
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BytesValue.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.value != null && message.hasOwnProperty("value"))
                    if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                        return "value: buffer expected";
                return null;
            };

            /**
             * Creates a BytesValue message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.BytesValue
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.BytesValue} BytesValue
             */
            BytesValue.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.BytesValue)
                    return object;
                var message = new $root.google.protobuf.BytesValue();
                if (object.value != null)
                    if (typeof object.value === "string")
                        $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                    else if (object.value.length)
                        message.value = object.value;
                return message;
            };

            /**
             * Creates a plain object from a BytesValue message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.BytesValue
             * @static
             * @param {google.protobuf.BytesValue} message BytesValue
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BytesValue.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults)
                    if (options.bytes === String)
                        object.value = "";
                    else {
                        object.value = [];
                        if (options.bytes !== Array)
                            object.value = $util.newBuffer(object.value);
                    }
                if (message.value != null && message.hasOwnProperty("value"))
                    object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                return object;
            };

            /**
             * Converts this BytesValue to JSON.
             * @function toJSON
             * @memberof google.protobuf.BytesValue
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BytesValue.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return BytesValue;
        })();

        protobuf.FileDescriptorSet = (function() {

            /**
             * Properties of a FileDescriptorSet.
             * @memberof google.protobuf
             * @interface IFileDescriptorSet
             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
             */

            /**
             * Constructs a new FileDescriptorSet.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorSet.
             * @implements IFileDescriptorSet
             * @constructor
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             */
            function FileDescriptorSet(properties) {
                this.file = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorSet file.
             * @member {Array.<google.protobuf.IFileDescriptorProto>} file
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             */
            FileDescriptorSet.prototype.file = $util.emptyArray;

            /**
             * Creates a new FileDescriptorSet instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
             */
            FileDescriptorSet.create = function create(properties) {
                return new FileDescriptorSet(properties);
            };

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.file != null && message.file.length)
                    for (var i = 0; i < message.file.length; ++i)
                        $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.file && message.file.length))
                            message.file = [];
                        message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorSet message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file != null && message.hasOwnProperty("file")) {
                    if (!Array.isArray(message.file))
                        return "file: array expected";
                    for (var i = 0; i < message.file.length; ++i) {
                        var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                        if (error)
                            return "file." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            FileDescriptorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorSet)
                    return object;
                var message = new $root.google.protobuf.FileDescriptorSet();
                if (object.file) {
                    if (!Array.isArray(object.file))
                        throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                    message.file = [];
                    for (var i = 0; i < object.file.length; ++i) {
                        if (typeof object.file[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                        message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.file = [];
                if (message.file && message.file.length) {
                    object.file = [];
                    for (var j = 0; j < message.file.length; ++j)
                        object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                }
                return object;
            };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorSet;
        })();

        protobuf.FileDescriptorProto = (function() {

            /**
             * Properties of a FileDescriptorProto.
             * @memberof google.protobuf
             * @interface IFileDescriptorProto
             * @property {string|null} [name] FileDescriptorProto name
             * @property {string|null} ["package"] FileDescriptorProto package
             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
             * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
             * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
             * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
             * @property {string|null} [syntax] FileDescriptorProto syntax
             */

            /**
             * Constructs a new FileDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorProto.
             * @implements IFileDescriptorProto
             * @constructor
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             */
            function FileDescriptorProto(properties) {
                this.dependency = [];
                this.publicDependency = [];
                this.weakDependency = [];
                this.messageType = [];
                this.enumType = [];
                this.service = [];
                this.extension = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.name = "";

            /**
             * FileDescriptorProto package.
             * @member {string} package
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype["package"] = "";

            /**
             * FileDescriptorProto dependency.
             * @member {Array.<string>} dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.dependency = $util.emptyArray;

            /**
             * FileDescriptorProto publicDependency.
             * @member {Array.<number>} publicDependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.publicDependency = $util.emptyArray;

            /**
             * FileDescriptorProto weakDependency.
             * @member {Array.<number>} weakDependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.weakDependency = $util.emptyArray;

            /**
             * FileDescriptorProto messageType.
             * @member {Array.<google.protobuf.IDescriptorProto>} messageType
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.messageType = $util.emptyArray;

            /**
             * FileDescriptorProto enumType.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.enumType = $util.emptyArray;

            /**
             * FileDescriptorProto service.
             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.service = $util.emptyArray;

            /**
             * FileDescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * FileDescriptorProto options.
             * @member {google.protobuf.IFileOptions|null|undefined} options
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.options = null;

            /**
             * FileDescriptorProto sourceCodeInfo.
             * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.sourceCodeInfo = null;

            /**
             * FileDescriptorProto syntax.
             * @member {string} syntax
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.syntax = "";

            /**
             * Creates a new FileDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
             */
            FileDescriptorProto.create = function create(properties) {
                return new FileDescriptorProto(properties);
            };

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                if (message.dependency != null && message.dependency.length)
                    for (var i = 0; i < message.dependency.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                if (message.messageType != null && message.messageType.length)
                    for (var i = 0; i < message.messageType.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.enumType != null && message.enumType.length)
                    for (var i = 0; i < message.enumType.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.service != null && message.service.length)
                    for (var i = 0; i < message.service.length; ++i)
                        $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (var i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                    $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.publicDependency != null && message.publicDependency.length)
                    for (var i = 0; i < message.publicDependency.length; ++i)
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                if (message.weakDependency != null && message.weakDependency.length)
                    for (var i = 0; i < message.weakDependency.length; ++i)
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message["package"] = reader.string();
                        break;
                    case 3:
                        if (!(message.dependency && message.dependency.length))
                            message.dependency = [];
                        message.dependency.push(reader.string());
                        break;
                    case 10:
                        if (!(message.publicDependency && message.publicDependency.length))
                            message.publicDependency = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.publicDependency.push(reader.int32());
                        } else
                            message.publicDependency.push(reader.int32());
                        break;
                    case 11:
                        if (!(message.weakDependency && message.weakDependency.length))
                            message.weakDependency = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.weakDependency.push(reader.int32());
                        } else
                            message.weakDependency.push(reader.int32());
                        break;
                    case 4:
                        if (!(message.messageType && message.messageType.length))
                            message.messageType = [];
                        message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.enumType && message.enumType.length))
                            message.enumType = [];
                        message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.service && message.service.length))
                            message.service = [];
                        message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                        break;
                    case 12:
                        message.syntax = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message["package"] != null && message.hasOwnProperty("package"))
                    if (!$util.isString(message["package"]))
                        return "package: string expected";
                if (message.dependency != null && message.hasOwnProperty("dependency")) {
                    if (!Array.isArray(message.dependency))
                        return "dependency: array expected";
                    for (var i = 0; i < message.dependency.length; ++i)
                        if (!$util.isString(message.dependency[i]))
                            return "dependency: string[] expected";
                }
                if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                    if (!Array.isArray(message.publicDependency))
                        return "publicDependency: array expected";
                    for (var i = 0; i < message.publicDependency.length; ++i)
                        if (!$util.isInteger(message.publicDependency[i]))
                            return "publicDependency: integer[] expected";
                }
                if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                    if (!Array.isArray(message.weakDependency))
                        return "weakDependency: array expected";
                    for (var i = 0; i < message.weakDependency.length; ++i)
                        if (!$util.isInteger(message.weakDependency[i]))
                            return "weakDependency: integer[] expected";
                }
                if (message.messageType != null && message.hasOwnProperty("messageType")) {
                    if (!Array.isArray(message.messageType))
                        return "messageType: array expected";
                    for (var i = 0; i < message.messageType.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                        if (error)
                            return "messageType." + error;
                    }
                }
                if (message.enumType != null && message.hasOwnProperty("enumType")) {
                    if (!Array.isArray(message.enumType))
                        return "enumType: array expected";
                    for (var i = 0; i < message.enumType.length; ++i) {
                        var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                        if (error)
                            return "enumType." + error;
                    }
                }
                if (message.service != null && message.hasOwnProperty("service")) {
                    if (!Array.isArray(message.service))
                        return "service: array expected";
                    for (var i = 0; i < message.service.length; ++i) {
                        var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                        if (error)
                            return "service." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (var i = 0; i < message.extension.length; ++i) {
                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.FileOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                    var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                    if (error)
                        return "sourceCodeInfo." + error;
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    if (!$util.isString(message.syntax))
                        return "syntax: string expected";
                return null;
            };

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            FileDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.FileDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object["package"] != null)
                    message["package"] = String(object["package"]);
                if (object.dependency) {
                    if (!Array.isArray(object.dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                    message.dependency = [];
                    for (var i = 0; i < object.dependency.length; ++i)
                        message.dependency[i] = String(object.dependency[i]);
                }
                if (object.publicDependency) {
                    if (!Array.isArray(object.publicDependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                    message.publicDependency = [];
                    for (var i = 0; i < object.publicDependency.length; ++i)
                        message.publicDependency[i] = object.publicDependency[i] | 0;
                }
                if (object.weakDependency) {
                    if (!Array.isArray(object.weakDependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                    message.weakDependency = [];
                    for (var i = 0; i < object.weakDependency.length; ++i)
                        message.weakDependency[i] = object.weakDependency[i] | 0;
                }
                if (object.messageType) {
                    if (!Array.isArray(object.messageType))
                        throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                    message.messageType = [];
                    for (var i = 0; i < object.messageType.length; ++i) {
                        if (typeof object.messageType[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                        message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                    }
                }
                if (object.enumType) {
                    if (!Array.isArray(object.enumType))
                        throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                    message.enumType = [];
                    for (var i = 0; i < object.enumType.length; ++i) {
                        if (typeof object.enumType[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                        message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                    }
                }
                if (object.service) {
                    if (!Array.isArray(object.service))
                        throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                    message.service = [];
                    for (var i = 0; i < object.service.length; ++i) {
                        if (typeof object.service[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                        message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                    message.extension = [];
                    for (var i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                }
                if (object.sourceCodeInfo != null) {
                    if (typeof object.sourceCodeInfo !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                    message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                }
                if (object.syntax != null)
                    message.syntax = String(object.syntax);
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.dependency = [];
                    object.messageType = [];
                    object.enumType = [];
                    object.service = [];
                    object.extension = [];
                    object.publicDependency = [];
                    object.weakDependency = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object["package"] = "";
                    object.options = null;
                    object.sourceCodeInfo = null;
                    object.syntax = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message["package"] != null && message.hasOwnProperty("package"))
                    object["package"] = message["package"];
                if (message.dependency && message.dependency.length) {
                    object.dependency = [];
                    for (var j = 0; j < message.dependency.length; ++j)
                        object.dependency[j] = message.dependency[j];
                }
                if (message.messageType && message.messageType.length) {
                    object.messageType = [];
                    for (var j = 0; j < message.messageType.length; ++j)
                        object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                }
                if (message.enumType && message.enumType.length) {
                    object.enumType = [];
                    for (var j = 0; j < message.enumType.length; ++j)
                        object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                }
                if (message.service && message.service.length) {
                    object.service = [];
                    for (var j = 0; j < message.service.length; ++j)
                        object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (var j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                    object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                if (message.publicDependency && message.publicDependency.length) {
                    object.publicDependency = [];
                    for (var j = 0; j < message.publicDependency.length; ++j)
                        object.publicDependency[j] = message.publicDependency[j];
                }
                if (message.weakDependency && message.weakDependency.length) {
                    object.weakDependency = [];
                    for (var j = 0; j < message.weakDependency.length; ++j)
                        object.weakDependency[j] = message.weakDependency[j];
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    object.syntax = message.syntax;
                return object;
            };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return FileDescriptorProto;
        })();

        protobuf.DescriptorProto = (function() {

            /**
             * Properties of a DescriptorProto.
             * @memberof google.protobuf
             * @interface IDescriptorProto
             * @property {string|null} [name] DescriptorProto name
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
             * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
             */

            /**
             * Constructs a new DescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a DescriptorProto.
             * @implements IDescriptorProto
             * @constructor
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             */
            function DescriptorProto(properties) {
                this.field = [];
                this.extension = [];
                this.nestedType = [];
                this.enumType = [];
                this.extensionRange = [];
                this.oneofDecl = [];
                this.reservedRange = [];
                this.reservedName = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.name = "";

            /**
             * DescriptorProto field.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.field = $util.emptyArray;

            /**
             * DescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * DescriptorProto nestedType.
             * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.nestedType = $util.emptyArray;

            /**
             * DescriptorProto enumType.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.enumType = $util.emptyArray;

            /**
             * DescriptorProto extensionRange.
             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extensionRange = $util.emptyArray;

            /**
             * DescriptorProto oneofDecl.
             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.oneofDecl = $util.emptyArray;

            /**
             * DescriptorProto options.
             * @member {google.protobuf.IMessageOptions|null|undefined} options
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.options = null;

            /**
             * DescriptorProto reservedRange.
             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reservedRange = $util.emptyArray;

            /**
             * DescriptorProto reservedName.
             * @member {Array.<string>} reservedName
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reservedName = $util.emptyArray;

            /**
             * Creates a new DescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
             */
            DescriptorProto.create = function create(properties) {
                return new DescriptorProto(properties);
            };

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.field != null && message.field.length)
                    for (var i = 0; i < message.field.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.nestedType != null && message.nestedType.length)
                    for (var i = 0; i < message.nestedType.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.enumType != null && message.enumType.length)
                    for (var i = 0; i < message.enumType.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.extensionRange != null && message.extensionRange.length)
                    for (var i = 0; i < message.extensionRange.length; ++i)
                        $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (var i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.oneofDecl != null && message.oneofDecl.length)
                    for (var i = 0; i < message.oneofDecl.length; ++i)
                        $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.reservedRange != null && message.reservedRange.length)
                    for (var i = 0; i < message.reservedRange.length; ++i)
                        $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.reservedName != null && message.reservedName.length)
                    for (var i = 0; i < message.reservedName.length; ++i)
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                return writer;
            };

            /**
             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.field && message.field.length))
                            message.field = [];
                        message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 6:
                        if (!(message.extension && message.extension.length))
                            message.extension = [];
                        message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        if (!(message.nestedType && message.nestedType.length))
                            message.nestedType = [];
                        message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 4:
                        if (!(message.enumType && message.enumType.length))
                            message.enumType = [];
                        message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.extensionRange && message.extensionRange.length))
                            message.extensionRange = [];
                        message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                        break;
                    case 8:
                        if (!(message.oneofDecl && message.oneofDecl.length))
                            message.oneofDecl = [];
                        message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 7:
                        message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                        break;
                    case 9:
                        if (!(message.reservedRange && message.reservedRange.length))
                            message.reservedRange = [];
                        message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                        break;
                    case 10:
                        if (!(message.reservedName && message.reservedName.length))
                            message.reservedName = [];
                        message.reservedName.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DescriptorProto message.
             * @function verify
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.field != null && message.hasOwnProperty("field")) {
                    if (!Array.isArray(message.field))
                        return "field: array expected";
                    for (var i = 0; i < message.field.length; ++i) {
                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                        if (error)
                            return "field." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (var i = 0; i < message.extension.length; ++i) {
                        var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                    if (!Array.isArray(message.nestedType))
                        return "nestedType: array expected";
                    for (var i = 0; i < message.nestedType.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                        if (error)
                            return "nestedType." + error;
                    }
                }
                if (message.enumType != null && message.hasOwnProperty("enumType")) {
                    if (!Array.isArray(message.enumType))
                        return "enumType: array expected";
                    for (var i = 0; i < message.enumType.length; ++i) {
                        var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                        if (error)
                            return "enumType." + error;
                    }
                }
                if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                    if (!Array.isArray(message.extensionRange))
                        return "extensionRange: array expected";
                    for (var i = 0; i < message.extensionRange.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                        if (error)
                            return "extensionRange." + error;
                    }
                }
                if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                    if (!Array.isArray(message.oneofDecl))
                        return "oneofDecl: array expected";
                    for (var i = 0; i < message.oneofDecl.length; ++i) {
                        var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                        if (error)
                            return "oneofDecl." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.MessageOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                    if (!Array.isArray(message.reservedRange))
                        return "reservedRange: array expected";
                    for (var i = 0; i < message.reservedRange.length; ++i) {
                        var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                        if (error)
                            return "reservedRange." + error;
                    }
                }
                if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                    if (!Array.isArray(message.reservedName))
                        return "reservedName: array expected";
                    for (var i = 0; i < message.reservedName.length; ++i)
                        if (!$util.isString(message.reservedName[i]))
                            return "reservedName: string[] expected";
                }
                return null;
            };

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            DescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto)
                    return object;
                var message = new $root.google.protobuf.DescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.field) {
                    if (!Array.isArray(object.field))
                        throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                    message.field = [];
                    for (var i = 0; i < object.field.length; ++i) {
                        if (typeof object.field[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                        message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                    message.extension = [];
                    for (var i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.nestedType) {
                    if (!Array.isArray(object.nestedType))
                        throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                    message.nestedType = [];
                    for (var i = 0; i < object.nestedType.length; ++i) {
                        if (typeof object.nestedType[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                        message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                    }
                }
                if (object.enumType) {
                    if (!Array.isArray(object.enumType))
                        throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                    message.enumType = [];
                    for (var i = 0; i < object.enumType.length; ++i) {
                        if (typeof object.enumType[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                        message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                    }
                }
                if (object.extensionRange) {
                    if (!Array.isArray(object.extensionRange))
                        throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                    message.extensionRange = [];
                    for (var i = 0; i < object.extensionRange.length; ++i) {
                        if (typeof object.extensionRange[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                        message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                    }
                }
                if (object.oneofDecl) {
                    if (!Array.isArray(object.oneofDecl))
                        throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                    message.oneofDecl = [];
                    for (var i = 0; i < object.oneofDecl.length; ++i) {
                        if (typeof object.oneofDecl[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                        message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                }
                if (object.reservedRange) {
                    if (!Array.isArray(object.reservedRange))
                        throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                    message.reservedRange = [];
                    for (var i = 0; i < object.reservedRange.length; ++i) {
                        if (typeof object.reservedRange[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                        message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                    }
                }
                if (object.reservedName) {
                    if (!Array.isArray(object.reservedName))
                        throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                    message.reservedName = [];
                    for (var i = 0; i < object.reservedName.length; ++i)
                        message.reservedName[i] = String(object.reservedName[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.DescriptorProto} message DescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.field = [];
                    object.nestedType = [];
                    object.enumType = [];
                    object.extensionRange = [];
                    object.extension = [];
                    object.oneofDecl = [];
                    object.reservedRange = [];
                    object.reservedName = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.field && message.field.length) {
                    object.field = [];
                    for (var j = 0; j < message.field.length; ++j)
                        object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                }
                if (message.nestedType && message.nestedType.length) {
                    object.nestedType = [];
                    for (var j = 0; j < message.nestedType.length; ++j)
                        object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                }
                if (message.enumType && message.enumType.length) {
                    object.enumType = [];
                    for (var j = 0; j < message.enumType.length; ++j)
                        object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                }
                if (message.extensionRange && message.extensionRange.length) {
                    object.extensionRange = [];
                    for (var j = 0; j < message.extensionRange.length; ++j)
                        object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (var j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                if (message.oneofDecl && message.oneofDecl.length) {
                    object.oneofDecl = [];
                    for (var j = 0; j < message.oneofDecl.length; ++j)
                        object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                }
                if (message.reservedRange && message.reservedRange.length) {
                    object.reservedRange = [];
                    for (var j = 0; j < message.reservedRange.length; ++j)
                        object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                }
                if (message.reservedName && message.reservedName.length) {
                    object.reservedName = [];
                    for (var j = 0; j < message.reservedName.length; ++j)
                        object.reservedName[j] = message.reservedName[j];
                }
                return object;
            };

            /**
             * Converts this DescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.DescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            DescriptorProto.ExtensionRange = (function() {

                /**
                 * Properties of an ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IExtensionRange
                 * @property {number|null} [start] ExtensionRange start
                 * @property {number|null} [end] ExtensionRange end
                 * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                 */

                /**
                 * Constructs a new ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents an ExtensionRange.
                 * @implements IExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 */
                function ExtensionRange(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.start = 0;

                /**
                 * ExtensionRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.end = 0;

                /**
                 * ExtensionRange options.
                 * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.options = null;

                /**
                 * Creates a new ExtensionRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                 */
                ExtensionRange.create = function create(properties) {
                    return new ExtensionRange(properties);
                };

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExtensionRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                ExtensionRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                        message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                        object.options = null;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ExtensionRange;
            })();

            DescriptorProto.ReservedRange = (function() {

                /**
                 * Properties of a ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IReservedRange
                 * @property {number|null} [start] ReservedRange start
                 * @property {number|null} [end] ReservedRange end
                 */

                /**
                 * Constructs a new ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents a ReservedRange.
                 * @implements IReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 */
                function ReservedRange(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.start = 0;

                /**
                 * ReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.end = 0;

                /**
                 * Creates a new ReservedRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                 */
                ReservedRange.create = function create(properties) {
                    return new ReservedRange(properties);
                };

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                ReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return ReservedRange;
            })();

            return DescriptorProto;
        })();

        protobuf.ExtensionRangeOptions = (function() {

            /**
             * Properties of an ExtensionRangeOptions.
             * @memberof google.protobuf
             * @interface IExtensionRangeOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
             */

            /**
             * Constructs a new ExtensionRangeOptions.
             * @memberof google.protobuf
             * @classdesc Represents an ExtensionRangeOptions.
             * @implements IExtensionRangeOptions
             * @constructor
             * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
             */
            function ExtensionRangeOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExtensionRangeOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             */
            ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new ExtensionRangeOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
             */
            ExtensionRangeOptions.create = function create(properties) {
                return new ExtensionRangeOptions(properties);
            };

            /**
             * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExtensionRangeOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExtensionRangeOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ExtensionRangeOptions message.
             * @function verify
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExtensionRangeOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             */
            ExtensionRangeOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                    return object;
                var message = new $root.google.protobuf.ExtensionRangeOptions();
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExtensionRangeOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this ExtensionRangeOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ExtensionRangeOptions;
        })();

        protobuf.FieldDescriptorProto = (function() {

            /**
             * Properties of a FieldDescriptorProto.
             * @memberof google.protobuf
             * @interface IFieldDescriptorProto
             * @property {string|null} [name] FieldDescriptorProto name
             * @property {number|null} [number] FieldDescriptorProto number
             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
             * @property {string|null} [typeName] FieldDescriptorProto typeName
             * @property {string|null} [extendee] FieldDescriptorProto extendee
             * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
             * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
             * @property {string|null} [jsonName] FieldDescriptorProto jsonName
             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
             */

            /**
             * Constructs a new FieldDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FieldDescriptorProto.
             * @implements IFieldDescriptorProto
             * @constructor
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             */
            function FieldDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.name = "";

            /**
             * FieldDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.number = 0;

            /**
             * FieldDescriptorProto label.
             * @member {google.protobuf.FieldDescriptorProto.Label} label
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.label = 1;

            /**
             * FieldDescriptorProto type.
             * @member {google.protobuf.FieldDescriptorProto.Type} type
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type = 1;

            /**
             * FieldDescriptorProto typeName.
             * @member {string} typeName
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.typeName = "";

            /**
             * FieldDescriptorProto extendee.
             * @member {string} extendee
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.extendee = "";

            /**
             * FieldDescriptorProto defaultValue.
             * @member {string} defaultValue
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.defaultValue = "";

            /**
             * FieldDescriptorProto oneofIndex.
             * @member {number} oneofIndex
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.oneofIndex = 0;

            /**
             * FieldDescriptorProto jsonName.
             * @member {string} jsonName
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.jsonName = "";

            /**
             * FieldDescriptorProto options.
             * @member {google.protobuf.IFieldOptions|null|undefined} options
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.options = null;

            /**
             * Creates a new FieldDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
             */
            FieldDescriptorProto.create = function create(properties) {
                return new FieldDescriptorProto(properties);
            };

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                return writer;
            };

            /**
             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 3:
                        message.number = reader.int32();
                        break;
                    case 4:
                        message.label = reader.int32();
                        break;
                    case 5:
                        message.type = reader.int32();
                        break;
                    case 6:
                        message.typeName = reader.string();
                        break;
                    case 2:
                        message.extendee = reader.string();
                        break;
                    case 7:
                        message.defaultValue = reader.string();
                        break;
                    case 9:
                        message.oneofIndex = reader.int32();
                        break;
                    case 10:
                        message.jsonName = reader.string();
                        break;
                    case 8:
                        message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    switch (message.label) {
                    default:
                        return "label: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                        break;
                    }
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    if (!$util.isString(message.typeName))
                        return "typeName: string expected";
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    if (!$util.isString(message.extendee))
                        return "extendee: string expected";
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    if (!$util.isString(message.defaultValue))
                        return "defaultValue: string expected";
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    if (!$util.isInteger(message.oneofIndex))
                        return "oneofIndex: integer expected";
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    if (!$util.isString(message.jsonName))
                        return "jsonName: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.FieldOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            FieldDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.FieldDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                switch (object.label) {
                case "LABEL_OPTIONAL":
                case 1:
                    message.label = 1;
                    break;
                case "LABEL_REQUIRED":
                case 2:
                    message.label = 2;
                    break;
                case "LABEL_REPEATED":
                case 3:
                    message.label = 3;
                    break;
                }
                switch (object.type) {
                case "TYPE_DOUBLE":
                case 1:
                    message.type = 1;
                    break;
                case "TYPE_FLOAT":
                case 2:
                    message.type = 2;
                    break;
                case "TYPE_INT64":
                case 3:
                    message.type = 3;
                    break;
                case "TYPE_UINT64":
                case 4:
                    message.type = 4;
                    break;
                case "TYPE_INT32":
                case 5:
                    message.type = 5;
                    break;
                case "TYPE_FIXED64":
                case 6:
                    message.type = 6;
                    break;
                case "TYPE_FIXED32":
                case 7:
                    message.type = 7;
                    break;
                case "TYPE_BOOL":
                case 8:
                    message.type = 8;
                    break;
                case "TYPE_STRING":
                case 9:
                    message.type = 9;
                    break;
                case "TYPE_GROUP":
                case 10:
                    message.type = 10;
                    break;
                case "TYPE_MESSAGE":
                case 11:
                    message.type = 11;
                    break;
                case "TYPE_BYTES":
                case 12:
                    message.type = 12;
                    break;
                case "TYPE_UINT32":
                case 13:
                    message.type = 13;
                    break;
                case "TYPE_ENUM":
                case 14:
                    message.type = 14;
                    break;
                case "TYPE_SFIXED32":
                case 15:
                    message.type = 15;
                    break;
                case "TYPE_SFIXED64":
                case 16:
                    message.type = 16;
                    break;
                case "TYPE_SINT32":
                case 17:
                    message.type = 17;
                    break;
                case "TYPE_SINT64":
                case 18:
                    message.type = 18;
                    break;
                }
                if (object.typeName != null)
                    message.typeName = String(object.typeName);
                if (object.extendee != null)
                    message.extendee = String(object.extendee);
                if (object.defaultValue != null)
                    message.defaultValue = String(object.defaultValue);
                if (object.oneofIndex != null)
                    message.oneofIndex = object.oneofIndex | 0;
                if (object.jsonName != null)
                    message.jsonName = String(object.jsonName);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.extendee = "";
                    object.number = 0;
                    object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                    object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                    object.typeName = "";
                    object.defaultValue = "";
                    object.options = null;
                    object.oneofIndex = 0;
                    object.jsonName = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    object.extendee = message.extendee;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    object.typeName = message.typeName;
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    object.defaultValue = message.defaultValue;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    object.oneofIndex = message.oneofIndex;
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    object.jsonName = message.jsonName;
                return object;
            };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Type enum.
             * @name google.protobuf.FieldDescriptorProto.Type
             * @enum {number}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            FieldDescriptorProto.Type = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                values[valuesById[2] = "TYPE_FLOAT"] = 2;
                values[valuesById[3] = "TYPE_INT64"] = 3;
                values[valuesById[4] = "TYPE_UINT64"] = 4;
                values[valuesById[5] = "TYPE_INT32"] = 5;
                values[valuesById[6] = "TYPE_FIXED64"] = 6;
                values[valuesById[7] = "TYPE_FIXED32"] = 7;
                values[valuesById[8] = "TYPE_BOOL"] = 8;
                values[valuesById[9] = "TYPE_STRING"] = 9;
                values[valuesById[10] = "TYPE_GROUP"] = 10;
                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                values[valuesById[12] = "TYPE_BYTES"] = 12;
                values[valuesById[13] = "TYPE_UINT32"] = 13;
                values[valuesById[14] = "TYPE_ENUM"] = 14;
                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                values[valuesById[17] = "TYPE_SINT32"] = 17;
                values[valuesById[18] = "TYPE_SINT64"] = 18;
                return values;
            })();

            /**
             * Label enum.
             * @name google.protobuf.FieldDescriptorProto.Label
             * @enum {number}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             */
            FieldDescriptorProto.Label = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                values[valuesById[3] = "LABEL_REPEATED"] = 3;
                return values;
            })();

            return FieldDescriptorProto;
        })();

        protobuf.OneofDescriptorProto = (function() {

            /**
             * Properties of an OneofDescriptorProto.
             * @memberof google.protobuf
             * @interface IOneofDescriptorProto
             * @property {string|null} [name] OneofDescriptorProto name
             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
             */

            /**
             * Constructs a new OneofDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an OneofDescriptorProto.
             * @implements IOneofDescriptorProto
             * @constructor
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             */
            function OneofDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.name = "";

            /**
             * OneofDescriptorProto options.
             * @member {google.protobuf.IOneofOptions|null|undefined} options
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.options = null;

            /**
             * Creates a new OneofDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
             */
            OneofDescriptorProto.create = function create(properties) {
                return new OneofDescriptorProto(properties);
            };

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.OneofOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            OneofDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.OneofDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofDescriptorProto;
        })();

        protobuf.EnumDescriptorProto = (function() {

            /**
             * Properties of an EnumDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumDescriptorProto
             * @property {string|null} [name] EnumDescriptorProto name
             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
             * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
             * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
             */

            /**
             * Constructs a new EnumDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumDescriptorProto.
             * @implements IEnumDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             */
            function EnumDescriptorProto(properties) {
                this.value = [];
                this.reservedRange = [];
                this.reservedName = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.name = "";

            /**
             * EnumDescriptorProto value.
             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.value = $util.emptyArray;

            /**
             * EnumDescriptorProto options.
             * @member {google.protobuf.IEnumOptions|null|undefined} options
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.options = null;

            /**
             * EnumDescriptorProto reservedRange.
             * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;

            /**
             * EnumDescriptorProto reservedName.
             * @member {Array.<string>} reservedName
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.reservedName = $util.emptyArray;

            /**
             * Creates a new EnumDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
             */
            EnumDescriptorProto.create = function create(properties) {
                return new EnumDescriptorProto(properties);
            };

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.value.length)
                    for (var i = 0; i < message.value.length; ++i)
                        $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.reservedRange != null && message.reservedRange.length)
                    for (var i = 0; i < message.reservedRange.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.reservedName != null && message.reservedName.length)
                    for (var i = 0; i < message.reservedName.length; ++i)
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                return writer;
            };

            /**
             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.value && message.value.length))
                            message.value = [];
                        message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                        break;
                    case 4:
                        if (!(message.reservedRange && message.reservedRange.length))
                            message.reservedRange = [];
                        message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                        break;
                    case 5:
                        if (!(message.reservedName && message.reservedName.length))
                            message.reservedName = [];
                        message.reservedName.push(reader.string());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (var i = 0; i < message.value.length; ++i) {
                        var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                        if (error)
                            return "value." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.EnumOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                    if (!Array.isArray(message.reservedRange))
                        return "reservedRange: array expected";
                    for (var i = 0; i < message.reservedRange.length; ++i) {
                        var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                        if (error)
                            return "reservedRange." + error;
                    }
                }
                if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                    if (!Array.isArray(message.reservedName))
                        return "reservedName: array expected";
                    for (var i = 0; i < message.reservedName.length; ++i)
                        if (!$util.isString(message.reservedName[i]))
                            return "reservedName: string[] expected";
                }
                return null;
            };

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            EnumDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.EnumDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                    message.value = [];
                    for (var i = 0; i < object.value.length; ++i) {
                        if (typeof object.value[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                        message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                }
                if (object.reservedRange) {
                    if (!Array.isArray(object.reservedRange))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                    message.reservedRange = [];
                    for (var i = 0; i < object.reservedRange.length; ++i) {
                        if (typeof object.reservedRange[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                        message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                    }
                }
                if (object.reservedName) {
                    if (!Array.isArray(object.reservedName))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                    message.reservedName = [];
                    for (var i = 0; i < object.reservedName.length; ++i)
                        message.reservedName[i] = String(object.reservedName[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults) {
                    object.value = [];
                    object.reservedRange = [];
                    object.reservedName = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (var j = 0; j < message.value.length; ++j)
                        object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                if (message.reservedRange && message.reservedRange.length) {
                    object.reservedRange = [];
                    for (var j = 0; j < message.reservedRange.length; ++j)
                        object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                }
                if (message.reservedName && message.reservedName.length) {
                    object.reservedName = [];
                    for (var j = 0; j < message.reservedName.length; ++j)
                        object.reservedName[j] = message.reservedName[j];
                }
                return object;
            };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            EnumDescriptorProto.EnumReservedRange = (function() {

                /**
                 * Properties of an EnumReservedRange.
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @interface IEnumReservedRange
                 * @property {number|null} [start] EnumReservedRange start
                 * @property {number|null} [end] EnumReservedRange end
                 */

                /**
                 * Constructs a new EnumReservedRange.
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @classdesc Represents an EnumReservedRange.
                 * @implements IEnumReservedRange
                 * @constructor
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                 */
                function EnumReservedRange(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EnumReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 */
                EnumReservedRange.prototype.start = 0;

                /**
                 * EnumReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 */
                EnumReservedRange.prototype.end = 0;

                /**
                 * Creates a new EnumReservedRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                 */
                EnumReservedRange.create = function create(properties) {
                    return new EnumReservedRange(properties);
                };

                /**
                 * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EnumReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumReservedRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.start = reader.int32();
                            break;
                        case 2:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EnumReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 */
                EnumReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this EnumReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return EnumReservedRange;
            })();

            return EnumDescriptorProto;
        })();

        protobuf.EnumValueDescriptorProto = (function() {

            /**
             * Properties of an EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumValueDescriptorProto
             * @property {string|null} [name] EnumValueDescriptorProto name
             * @property {number|null} [number] EnumValueDescriptorProto number
             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
             */

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueDescriptorProto.
             * @implements IEnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             */
            function EnumValueDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.name = "";

            /**
             * EnumValueDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.number = 0;

            /**
             * EnumValueDescriptorProto options.
             * @member {google.protobuf.IEnumValueOptions|null|undefined} options
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.options = null;

            /**
             * Creates a new EnumValueDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
             */
            EnumValueDescriptorProto.create = function create(properties) {
                return new EnumValueDescriptorProto(properties);
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.number = reader.int32();
                        break;
                    case 3:
                        message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.EnumValueDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.number = 0;
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueDescriptorProto;
        })();

        protobuf.ServiceDescriptorProto = (function() {

            /**
             * Properties of a ServiceDescriptorProto.
             * @memberof google.protobuf
             * @interface IServiceDescriptorProto
             * @property {string|null} [name] ServiceDescriptorProto name
             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
             */

            /**
             * Constructs a new ServiceDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceDescriptorProto.
             * @implements IServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             */
            function ServiceDescriptorProto(properties) {
                this.method = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.name = "";

            /**
             * ServiceDescriptorProto method.
             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.method = $util.emptyArray;

            /**
             * ServiceDescriptorProto options.
             * @member {google.protobuf.IServiceOptions|null|undefined} options
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.options = null;

            /**
             * Creates a new ServiceDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
             */
            ServiceDescriptorProto.create = function create(properties) {
                return new ServiceDescriptorProto(properties);
            };

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.method != null && message.method.length)
                    for (var i = 0; i < message.method.length; ++i)
                        $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        if (!(message.method && message.method.length))
                            message.method = [];
                        message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.method != null && message.hasOwnProperty("method")) {
                    if (!Array.isArray(message.method))
                        return "method: array expected";
                    for (var i = 0; i < message.method.length; ++i) {
                        var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                        if (error)
                            return "method." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            ServiceDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.ServiceDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.method) {
                    if (!Array.isArray(object.method))
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                    message.method = [];
                    for (var i = 0; i < object.method.length; ++i) {
                        if (typeof object.method[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                        message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.method = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.method && message.method.length) {
                    object.method = [];
                    for (var j = 0; j < message.method.length; ++j)
                        object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceDescriptorProto;
        })();

        protobuf.MethodDescriptorProto = (function() {

            /**
             * Properties of a MethodDescriptorProto.
             * @memberof google.protobuf
             * @interface IMethodDescriptorProto
             * @property {string|null} [name] MethodDescriptorProto name
             * @property {string|null} [inputType] MethodDescriptorProto inputType
             * @property {string|null} [outputType] MethodDescriptorProto outputType
             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
             * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
             * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
             */

            /**
             * Constructs a new MethodDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a MethodDescriptorProto.
             * @implements IMethodDescriptorProto
             * @constructor
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             */
            function MethodDescriptorProto(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.name = "";

            /**
             * MethodDescriptorProto inputType.
             * @member {string} inputType
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.inputType = "";

            /**
             * MethodDescriptorProto outputType.
             * @member {string} outputType
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.outputType = "";

            /**
             * MethodDescriptorProto options.
             * @member {google.protobuf.IMethodOptions|null|undefined} options
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.options = null;

            /**
             * MethodDescriptorProto clientStreaming.
             * @member {boolean} clientStreaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.clientStreaming = false;

            /**
             * MethodDescriptorProto serverStreaming.
             * @member {boolean} serverStreaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.serverStreaming = false;

            /**
             * Creates a new MethodDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
             */
            MethodDescriptorProto.create = function create(properties) {
                return new MethodDescriptorProto(properties);
            };

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                return writer;
            };

            /**
             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.inputType = reader.string();
                        break;
                    case 3:
                        message.outputType = reader.string();
                        break;
                    case 4:
                        message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                        break;
                    case 5:
                        message.clientStreaming = reader.bool();
                        break;
                    case 6:
                        message.serverStreaming = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    if (!$util.isString(message.inputType))
                        return "inputType: string expected";
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    if (!$util.isString(message.outputType))
                        return "outputType: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    var error = $root.google.protobuf.MethodOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    if (typeof message.clientStreaming !== "boolean")
                        return "clientStreaming: boolean expected";
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    if (typeof message.serverStreaming !== "boolean")
                        return "serverStreaming: boolean expected";
                return null;
            };

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            MethodDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                    return object;
                var message = new $root.google.protobuf.MethodDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.inputType != null)
                    message.inputType = String(object.inputType);
                if (object.outputType != null)
                    message.outputType = String(object.outputType);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                }
                if (object.clientStreaming != null)
                    message.clientStreaming = Boolean(object.clientStreaming);
                if (object.serverStreaming != null)
                    message.serverStreaming = Boolean(object.serverStreaming);
                return message;
            };

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.inputType = "";
                    object.outputType = "";
                    object.options = null;
                    object.clientStreaming = false;
                    object.serverStreaming = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    object.inputType = message.inputType;
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    object.outputType = message.outputType;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    object.clientStreaming = message.clientStreaming;
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    object.serverStreaming = message.serverStreaming;
                return object;
            };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MethodDescriptorProto;
        })();

        protobuf.FileOptions = (function() {

            /**
             * Properties of a FileOptions.
             * @memberof google.protobuf
             * @interface IFileOptions
             * @property {string|null} [javaPackage] FileOptions javaPackage
             * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
             * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
             * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
             * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
             * @property {string|null} [goPackage] FileOptions goPackage
             * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
             * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
             * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
             * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
             * @property {boolean|null} [deprecated] FileOptions deprecated
             * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
             * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
             * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
             * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
             * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
             * @property {string|null} [phpNamespace] FileOptions phpNamespace
             * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
             * @property {string|null} [rubyPackage] FileOptions rubyPackage
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
             */

            /**
             * Constructs a new FileOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FileOptions.
             * @implements IFileOptions
             * @constructor
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             */
            function FileOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileOptions javaPackage.
             * @member {string} javaPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaPackage = "";

            /**
             * FileOptions javaOuterClassname.
             * @member {string} javaOuterClassname
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaOuterClassname = "";

            /**
             * FileOptions javaMultipleFiles.
             * @member {boolean} javaMultipleFiles
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaMultipleFiles = false;

            /**
             * FileOptions javaGenerateEqualsAndHash.
             * @member {boolean} javaGenerateEqualsAndHash
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaGenerateEqualsAndHash = false;

            /**
             * FileOptions javaStringCheckUtf8.
             * @member {boolean} javaStringCheckUtf8
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaStringCheckUtf8 = false;

            /**
             * FileOptions optimizeFor.
             * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.optimizeFor = 1;

            /**
             * FileOptions goPackage.
             * @member {string} goPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.goPackage = "";

            /**
             * FileOptions ccGenericServices.
             * @member {boolean} ccGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ccGenericServices = false;

            /**
             * FileOptions javaGenericServices.
             * @member {boolean} javaGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaGenericServices = false;

            /**
             * FileOptions pyGenericServices.
             * @member {boolean} pyGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.pyGenericServices = false;

            /**
             * FileOptions phpGenericServices.
             * @member {boolean} phpGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpGenericServices = false;

            /**
             * FileOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.deprecated = false;

            /**
             * FileOptions ccEnableArenas.
             * @member {boolean} ccEnableArenas
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ccEnableArenas = false;

            /**
             * FileOptions objcClassPrefix.
             * @member {string} objcClassPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.objcClassPrefix = "";

            /**
             * FileOptions csharpNamespace.
             * @member {string} csharpNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.csharpNamespace = "";

            /**
             * FileOptions swiftPrefix.
             * @member {string} swiftPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.swiftPrefix = "";

            /**
             * FileOptions phpClassPrefix.
             * @member {string} phpClassPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpClassPrefix = "";

            /**
             * FileOptions phpNamespace.
             * @member {string} phpNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpNamespace = "";

            /**
             * FileOptions phpMetadataNamespace.
             * @member {string} phpMetadataNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpMetadataNamespace = "";

            /**
             * FileOptions rubyPackage.
             * @member {string} rubyPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.rubyPackage = "";

            /**
             * FileOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new FileOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             * @returns {google.protobuf.FileOptions} FileOptions instance
             */
            FileOptions.create = function create(properties) {
                return new FileOptions(properties);
            };

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                    writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                    writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                    writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                    writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                    writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                    writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                    writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                    writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                    writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.javaPackage = reader.string();
                        break;
                    case 8:
                        message.javaOuterClassname = reader.string();
                        break;
                    case 10:
                        message.javaMultipleFiles = reader.bool();
                        break;
                    case 20:
                        message.javaGenerateEqualsAndHash = reader.bool();
                        break;
                    case 27:
                        message.javaStringCheckUtf8 = reader.bool();
                        break;
                    case 9:
                        message.optimizeFor = reader.int32();
                        break;
                    case 11:
                        message.goPackage = reader.string();
                        break;
                    case 16:
                        message.ccGenericServices = reader.bool();
                        break;
                    case 17:
                        message.javaGenericServices = reader.bool();
                        break;
                    case 18:
                        message.pyGenericServices = reader.bool();
                        break;
                    case 42:
                        message.phpGenericServices = reader.bool();
                        break;
                    case 23:
                        message.deprecated = reader.bool();
                        break;
                    case 31:
                        message.ccEnableArenas = reader.bool();
                        break;
                    case 36:
                        message.objcClassPrefix = reader.string();
                        break;
                    case 37:
                        message.csharpNamespace = reader.string();
                        break;
                    case 39:
                        message.swiftPrefix = reader.string();
                        break;
                    case 40:
                        message.phpClassPrefix = reader.string();
                        break;
                    case 41:
                        message.phpNamespace = reader.string();
                        break;
                    case 44:
                        message.phpMetadataNamespace = reader.string();
                        break;
                    case 45:
                        message.rubyPackage = reader.string();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileOptions message.
             * @function verify
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    if (!$util.isString(message.javaPackage))
                        return "javaPackage: string expected";
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    if (!$util.isString(message.javaOuterClassname))
                        return "javaOuterClassname: string expected";
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    if (typeof message.javaMultipleFiles !== "boolean")
                        return "javaMultipleFiles: boolean expected";
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                        return "javaGenerateEqualsAndHash: boolean expected";
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    if (typeof message.javaStringCheckUtf8 !== "boolean")
                        return "javaStringCheckUtf8: boolean expected";
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    switch (message.optimizeFor) {
                    default:
                        return "optimizeFor: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    if (!$util.isString(message.goPackage))
                        return "goPackage: string expected";
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    if (typeof message.ccGenericServices !== "boolean")
                        return "ccGenericServices: boolean expected";
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    if (typeof message.javaGenericServices !== "boolean")
                        return "javaGenericServices: boolean expected";
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    if (typeof message.pyGenericServices !== "boolean")
                        return "pyGenericServices: boolean expected";
                if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                    if (typeof message.phpGenericServices !== "boolean")
                        return "phpGenericServices: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    if (typeof message.ccEnableArenas !== "boolean")
                        return "ccEnableArenas: boolean expected";
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    if (!$util.isString(message.objcClassPrefix))
                        return "objcClassPrefix: string expected";
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    if (!$util.isString(message.csharpNamespace))
                        return "csharpNamespace: string expected";
                if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                    if (!$util.isString(message.swiftPrefix))
                        return "swiftPrefix: string expected";
                if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                    if (!$util.isString(message.phpClassPrefix))
                        return "phpClassPrefix: string expected";
                if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                    if (!$util.isString(message.phpNamespace))
                        return "phpNamespace: string expected";
                if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                    if (!$util.isString(message.phpMetadataNamespace))
                        return "phpMetadataNamespace: string expected";
                if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                    if (!$util.isString(message.rubyPackage))
                        return "rubyPackage: string expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            FileOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileOptions)
                    return object;
                var message = new $root.google.protobuf.FileOptions();
                if (object.javaPackage != null)
                    message.javaPackage = String(object.javaPackage);
                if (object.javaOuterClassname != null)
                    message.javaOuterClassname = String(object.javaOuterClassname);
                if (object.javaMultipleFiles != null)
                    message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                if (object.javaGenerateEqualsAndHash != null)
                    message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                if (object.javaStringCheckUtf8 != null)
                    message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                switch (object.optimizeFor) {
                case "SPEED":
                case 1:
                    message.optimizeFor = 1;
                    break;
                case "CODE_SIZE":
                case 2:
                    message.optimizeFor = 2;
                    break;
                case "LITE_RUNTIME":
                case 3:
                    message.optimizeFor = 3;
                    break;
                }
                if (object.goPackage != null)
                    message.goPackage = String(object.goPackage);
                if (object.ccGenericServices != null)
                    message.ccGenericServices = Boolean(object.ccGenericServices);
                if (object.javaGenericServices != null)
                    message.javaGenericServices = Boolean(object.javaGenericServices);
                if (object.pyGenericServices != null)
                    message.pyGenericServices = Boolean(object.pyGenericServices);
                if (object.phpGenericServices != null)
                    message.phpGenericServices = Boolean(object.phpGenericServices);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.ccEnableArenas != null)
                    message.ccEnableArenas = Boolean(object.ccEnableArenas);
                if (object.objcClassPrefix != null)
                    message.objcClassPrefix = String(object.objcClassPrefix);
                if (object.csharpNamespace != null)
                    message.csharpNamespace = String(object.csharpNamespace);
                if (object.swiftPrefix != null)
                    message.swiftPrefix = String(object.swiftPrefix);
                if (object.phpClassPrefix != null)
                    message.phpClassPrefix = String(object.phpClassPrefix);
                if (object.phpNamespace != null)
                    message.phpNamespace = String(object.phpNamespace);
                if (object.phpMetadataNamespace != null)
                    message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                if (object.rubyPackage != null)
                    message.rubyPackage = String(object.rubyPackage);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.FileOptions} message FileOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.javaPackage = "";
                    object.javaOuterClassname = "";
                    object.optimizeFor = options.enums === String ? "SPEED" : 1;
                    object.javaMultipleFiles = false;
                    object.goPackage = "";
                    object.ccGenericServices = false;
                    object.javaGenericServices = false;
                    object.pyGenericServices = false;
                    object.javaGenerateEqualsAndHash = false;
                    object.deprecated = false;
                    object.javaStringCheckUtf8 = false;
                    object.ccEnableArenas = false;
                    object.objcClassPrefix = "";
                    object.csharpNamespace = "";
                    object.swiftPrefix = "";
                    object.phpClassPrefix = "";
                    object.phpNamespace = "";
                    object.phpGenericServices = false;
                    object.phpMetadataNamespace = "";
                    object.rubyPackage = "";
                }
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    object.javaPackage = message.javaPackage;
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    object.javaOuterClassname = message.javaOuterClassname;
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    object.javaMultipleFiles = message.javaMultipleFiles;
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    object.goPackage = message.goPackage;
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    object.ccGenericServices = message.ccGenericServices;
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    object.javaGenericServices = message.javaGenericServices;
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    object.pyGenericServices = message.pyGenericServices;
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    object.ccEnableArenas = message.ccEnableArenas;
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    object.objcClassPrefix = message.objcClassPrefix;
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    object.csharpNamespace = message.csharpNamespace;
                if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                    object.swiftPrefix = message.swiftPrefix;
                if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                    object.phpClassPrefix = message.phpClassPrefix;
                if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                    object.phpNamespace = message.phpNamespace;
                if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                    object.phpGenericServices = message.phpGenericServices;
                if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                    object.phpMetadataNamespace = message.phpMetadataNamespace;
                if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                    object.rubyPackage = message.rubyPackage;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this FileOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * OptimizeMode enum.
             * @name google.protobuf.FileOptions.OptimizeMode
             * @enum {number}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            FileOptions.OptimizeMode = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SPEED"] = 1;
                values[valuesById[2] = "CODE_SIZE"] = 2;
                values[valuesById[3] = "LITE_RUNTIME"] = 3;
                return values;
            })();

            return FileOptions;
        })();

        protobuf.MessageOptions = (function() {

            /**
             * Properties of a MessageOptions.
             * @memberof google.protobuf
             * @interface IMessageOptions
             * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
             * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
             * @property {boolean|null} [deprecated] MessageOptions deprecated
             * @property {boolean|null} [mapEntry] MessageOptions mapEntry
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
             * @property {boolean|null} [".uml.optionOpenfmbProfile"] MessageOptions .uml.optionOpenfmbProfile
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageOptions messageSetWireFormat.
             * @member {boolean} messageSetWireFormat
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.messageSetWireFormat = false;

            /**
             * MessageOptions noStandardDescriptorAccessor.
             * @member {boolean} noStandardDescriptorAccessor
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.noStandardDescriptorAccessor = false;

            /**
             * MessageOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated = false;

            /**
             * MessageOptions mapEntry.
             * @member {boolean} mapEntry
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.mapEntry = false;

            /**
             * MessageOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * MessageOptions .uml.optionOpenfmbProfile.
             * @member {boolean} .uml.optionOpenfmbProfile
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".uml.optionOpenfmbProfile"] = false;

            /**
             * Creates a new MessageOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             * @returns {google.protobuf.MessageOptions} MessageOptions instance
             */
            MessageOptions.create = function create(properties) {
                return new MessageOptions(properties);
            };

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".uml.optionOpenfmbProfile"] != null && Object.hasOwnProperty.call(message, ".uml.optionOpenfmbProfile"))
                    writer.uint32(/* id 51000, wireType 0 =*/408000).bool(message[".uml.optionOpenfmbProfile"]);
                return writer;
            };

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.messageSetWireFormat = reader.bool();
                        break;
                    case 2:
                        message.noStandardDescriptorAccessor = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 7:
                        message.mapEntry = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 51000:
                        message[".uml.optionOpenfmbProfile"] = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    if (typeof message.messageSetWireFormat !== "boolean")
                        return "messageSetWireFormat: boolean expected";
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    if (typeof message.noStandardDescriptorAccessor !== "boolean")
                        return "noStandardDescriptorAccessor: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    if (typeof message.mapEntry !== "boolean")
                        return "mapEntry: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".uml.optionOpenfmbProfile"] != null && message.hasOwnProperty(".uml.optionOpenfmbProfile"))
                    if (typeof message[".uml.optionOpenfmbProfile"] !== "boolean")
                        return ".uml.optionOpenfmbProfile: boolean expected";
                return null;
            };

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MessageOptions)
                    return object;
                var message = new $root.google.protobuf.MessageOptions();
                if (object.messageSetWireFormat != null)
                    message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                if (object.noStandardDescriptorAccessor != null)
                    message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.mapEntry != null)
                    message.mapEntry = Boolean(object.mapEntry);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".uml.optionOpenfmbProfile"] != null)
                    message[".uml.optionOpenfmbProfile"] = Boolean(object[".uml.optionOpenfmbProfile"]);
                return message;
            };

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.messageSetWireFormat = false;
                    object.noStandardDescriptorAccessor = false;
                    object.deprecated = false;
                    object.mapEntry = false;
                    object[".uml.optionOpenfmbProfile"] = false;
                }
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    object.messageSetWireFormat = message.messageSetWireFormat;
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    object.mapEntry = message.mapEntry;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".uml.optionOpenfmbProfile"] != null && message.hasOwnProperty(".uml.optionOpenfmbProfile"))
                    object[".uml.optionOpenfmbProfile"] = message[".uml.optionOpenfmbProfile"];
                return object;
            };

            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return MessageOptions;
        })();

        protobuf.FieldOptions = (function() {

            /**
             * Properties of a FieldOptions.
             * @memberof google.protobuf
             * @interface IFieldOptions
             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
             * @property {boolean|null} [packed] FieldOptions packed
             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
             * @property {boolean|null} [lazy] FieldOptions lazy
             * @property {boolean|null} [deprecated] FieldOptions deprecated
             * @property {boolean|null} [weak] FieldOptions weak
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
             * @property {boolean|null} [".uml.optionParentMessage"] FieldOptions .uml.optionParentMessage
             * @property {boolean|null} [".uml.optionRequiredField"] FieldOptions .uml.optionRequiredField
             * @property {number|null} [".uml.optionMultiplicityMin"] FieldOptions .uml.optionMultiplicityMin
             * @property {number|null} [".uml.optionMultiplicityMax"] FieldOptions .uml.optionMultiplicityMax
             * @property {boolean|null} [".uml.optionUuid"] FieldOptions .uml.optionUuid
             * @property {boolean|null} [".uml.optionKey"] FieldOptions .uml.optionKey
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldOptions ctype.
             * @member {google.protobuf.FieldOptions.CType} ctype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.ctype = 0;

            /**
             * FieldOptions packed.
             * @member {boolean} packed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.packed = false;

            /**
             * FieldOptions jstype.
             * @member {google.protobuf.FieldOptions.JSType} jstype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.jstype = 0;

            /**
             * FieldOptions lazy.
             * @member {boolean} lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.lazy = false;

            /**
             * FieldOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.deprecated = false;

            /**
             * FieldOptions weak.
             * @member {boolean} weak
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.weak = false;

            /**
             * FieldOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * FieldOptions .uml.optionParentMessage.
             * @member {boolean} .uml.optionParentMessage
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".uml.optionParentMessage"] = false;

            /**
             * FieldOptions .uml.optionRequiredField.
             * @member {boolean} .uml.optionRequiredField
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".uml.optionRequiredField"] = false;

            /**
             * FieldOptions .uml.optionMultiplicityMin.
             * @member {number} .uml.optionMultiplicityMin
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".uml.optionMultiplicityMin"] = 0;

            /**
             * FieldOptions .uml.optionMultiplicityMax.
             * @member {number} .uml.optionMultiplicityMax
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".uml.optionMultiplicityMax"] = 0;

            /**
             * FieldOptions .uml.optionUuid.
             * @member {boolean} .uml.optionUuid
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".uml.optionUuid"] = false;

            /**
             * FieldOptions .uml.optionKey.
             * @member {boolean} .uml.optionKey
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".uml.optionKey"] = false;

            /**
             * Creates a new FieldOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             * @returns {google.protobuf.FieldOptions} FieldOptions instance
             */
            FieldOptions.create = function create(properties) {
                return new FieldOptions(properties);
            };

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".uml.optionParentMessage"] != null && Object.hasOwnProperty.call(message, ".uml.optionParentMessage"))
                    writer.uint32(/* id 50000, wireType 0 =*/400000).bool(message[".uml.optionParentMessage"]);
                if (message[".uml.optionRequiredField"] != null && Object.hasOwnProperty.call(message, ".uml.optionRequiredField"))
                    writer.uint32(/* id 50001, wireType 0 =*/400008).bool(message[".uml.optionRequiredField"]);
                if (message[".uml.optionMultiplicityMin"] != null && Object.hasOwnProperty.call(message, ".uml.optionMultiplicityMin"))
                    writer.uint32(/* id 50002, wireType 0 =*/400016).int32(message[".uml.optionMultiplicityMin"]);
                if (message[".uml.optionMultiplicityMax"] != null && Object.hasOwnProperty.call(message, ".uml.optionMultiplicityMax"))
                    writer.uint32(/* id 50003, wireType 0 =*/400024).int32(message[".uml.optionMultiplicityMax"]);
                if (message[".uml.optionUuid"] != null && Object.hasOwnProperty.call(message, ".uml.optionUuid"))
                    writer.uint32(/* id 50004, wireType 0 =*/400032).bool(message[".uml.optionUuid"]);
                if (message[".uml.optionKey"] != null && Object.hasOwnProperty.call(message, ".uml.optionKey"))
                    writer.uint32(/* id 50005, wireType 0 =*/400040).bool(message[".uml.optionKey"]);
                return writer;
            };

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.ctype = reader.int32();
                        break;
                    case 2:
                        message.packed = reader.bool();
                        break;
                    case 6:
                        message.jstype = reader.int32();
                        break;
                    case 5:
                        message.lazy = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 10:
                        message.weak = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    case 50000:
                        message[".uml.optionParentMessage"] = reader.bool();
                        break;
                    case 50001:
                        message[".uml.optionRequiredField"] = reader.bool();
                        break;
                    case 50002:
                        message[".uml.optionMultiplicityMin"] = reader.int32();
                        break;
                    case 50003:
                        message[".uml.optionMultiplicityMax"] = reader.int32();
                        break;
                    case 50004:
                        message[".uml.optionUuid"] = reader.bool();
                        break;
                    case 50005:
                        message[".uml.optionKey"] = reader.bool();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    switch (message.ctype) {
                    default:
                        return "ctype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.packed != null && message.hasOwnProperty("packed"))
                    if (typeof message.packed !== "boolean")
                        return "packed: boolean expected";
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    switch (message.jstype) {
                    default:
                        return "jstype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    if (typeof message.lazy !== "boolean")
                        return "lazy: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.weak != null && message.hasOwnProperty("weak"))
                    if (typeof message.weak !== "boolean")
                        return "weak: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".uml.optionParentMessage"] != null && message.hasOwnProperty(".uml.optionParentMessage"))
                    if (typeof message[".uml.optionParentMessage"] !== "boolean")
                        return ".uml.optionParentMessage: boolean expected";
                if (message[".uml.optionRequiredField"] != null && message.hasOwnProperty(".uml.optionRequiredField"))
                    if (typeof message[".uml.optionRequiredField"] !== "boolean")
                        return ".uml.optionRequiredField: boolean expected";
                if (message[".uml.optionMultiplicityMin"] != null && message.hasOwnProperty(".uml.optionMultiplicityMin"))
                    if (!$util.isInteger(message[".uml.optionMultiplicityMin"]))
                        return ".uml.optionMultiplicityMin: integer expected";
                if (message[".uml.optionMultiplicityMax"] != null && message.hasOwnProperty(".uml.optionMultiplicityMax"))
                    if (!$util.isInteger(message[".uml.optionMultiplicityMax"]))
                        return ".uml.optionMultiplicityMax: integer expected";
                if (message[".uml.optionUuid"] != null && message.hasOwnProperty(".uml.optionUuid"))
                    if (typeof message[".uml.optionUuid"] !== "boolean")
                        return ".uml.optionUuid: boolean expected";
                if (message[".uml.optionKey"] != null && message.hasOwnProperty(".uml.optionKey"))
                    if (typeof message[".uml.optionKey"] !== "boolean")
                        return ".uml.optionKey: boolean expected";
                return null;
            };

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldOptions)
                    return object;
                var message = new $root.google.protobuf.FieldOptions();
                switch (object.ctype) {
                case "STRING":
                case 0:
                    message.ctype = 0;
                    break;
                case "CORD":
                case 1:
                    message.ctype = 1;
                    break;
                case "STRING_PIECE":
                case 2:
                    message.ctype = 2;
                    break;
                }
                if (object.packed != null)
                    message.packed = Boolean(object.packed);
                switch (object.jstype) {
                case "JS_NORMAL":
                case 0:
                    message.jstype = 0;
                    break;
                case "JS_STRING":
                case 1:
                    message.jstype = 1;
                    break;
                case "JS_NUMBER":
                case 2:
                    message.jstype = 2;
                    break;
                }
                if (object.lazy != null)
                    message.lazy = Boolean(object.lazy);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.weak != null)
                    message.weak = Boolean(object.weak);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".uml.optionParentMessage"] != null)
                    message[".uml.optionParentMessage"] = Boolean(object[".uml.optionParentMessage"]);
                if (object[".uml.optionRequiredField"] != null)
                    message[".uml.optionRequiredField"] = Boolean(object[".uml.optionRequiredField"]);
                if (object[".uml.optionMultiplicityMin"] != null)
                    message[".uml.optionMultiplicityMin"] = object[".uml.optionMultiplicityMin"] | 0;
                if (object[".uml.optionMultiplicityMax"] != null)
                    message[".uml.optionMultiplicityMax"] = object[".uml.optionMultiplicityMax"] | 0;
                if (object[".uml.optionUuid"] != null)
                    message[".uml.optionUuid"] = Boolean(object[".uml.optionUuid"]);
                if (object[".uml.optionKey"] != null)
                    message[".uml.optionKey"] = Boolean(object[".uml.optionKey"]);
                return message;
            };

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.ctype = options.enums === String ? "STRING" : 0;
                    object.packed = false;
                    object.deprecated = false;
                    object.lazy = false;
                    object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                    object.weak = false;
                    object[".uml.optionParentMessage"] = false;
                    object[".uml.optionRequiredField"] = false;
                    object[".uml.optionMultiplicityMin"] = 0;
                    object[".uml.optionMultiplicityMax"] = 0;
                    object[".uml.optionUuid"] = false;
                    object[".uml.optionKey"] = false;
                }
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                if (message.packed != null && message.hasOwnProperty("packed"))
                    object.packed = message.packed;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    object.lazy = message.lazy;
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                if (message.weak != null && message.hasOwnProperty("weak"))
                    object.weak = message.weak;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".uml.optionParentMessage"] != null && message.hasOwnProperty(".uml.optionParentMessage"))
                    object[".uml.optionParentMessage"] = message[".uml.optionParentMessage"];
                if (message[".uml.optionRequiredField"] != null && message.hasOwnProperty(".uml.optionRequiredField"))
                    object[".uml.optionRequiredField"] = message[".uml.optionRequiredField"];
                if (message[".uml.optionMultiplicityMin"] != null && message.hasOwnProperty(".uml.optionMultiplicityMin"))
                    object[".uml.optionMultiplicityMin"] = message[".uml.optionMultiplicityMin"];
                if (message[".uml.optionMultiplicityMax"] != null && message.hasOwnProperty(".uml.optionMultiplicityMax"))
                    object[".uml.optionMultiplicityMax"] = message[".uml.optionMultiplicityMax"];
                if (message[".uml.optionUuid"] != null && message.hasOwnProperty(".uml.optionUuid"))
                    object[".uml.optionUuid"] = message[".uml.optionUuid"];
                if (message[".uml.optionKey"] != null && message.hasOwnProperty(".uml.optionKey"))
                    object[".uml.optionKey"] = message[".uml.optionKey"];
                return object;
            };

            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * CType enum.
             * @name google.protobuf.FieldOptions.CType
             * @enum {number}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            FieldOptions.CType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRING"] = 0;
                values[valuesById[1] = "CORD"] = 1;
                values[valuesById[2] = "STRING_PIECE"] = 2;
                return values;
            })();

            /**
             * JSType enum.
             * @name google.protobuf.FieldOptions.JSType
             * @enum {number}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            FieldOptions.JSType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JS_NORMAL"] = 0;
                values[valuesById[1] = "JS_STRING"] = 1;
                values[valuesById[2] = "JS_NUMBER"] = 2;
                return values;
            })();

            return FieldOptions;
        })();

        protobuf.OneofOptions = (function() {

            /**
             * Properties of an OneofOptions.
             * @memberof google.protobuf
             * @interface IOneofOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof google.protobuf
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new OneofOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             * @returns {google.protobuf.OneofOptions} OneofOptions instance
             */
            OneofOptions.create = function create(properties) {
                return new OneofOptions(properties);
            };

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofOptions)
                    return object;
                var message = new $root.google.protobuf.OneofOptions();
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return OneofOptions;
        })();

        protobuf.EnumOptions = (function() {

            /**
             * Properties of an EnumOptions.
             * @memberof google.protobuf
             * @interface IEnumOptions
             * @property {boolean|null} [allowAlias] EnumOptions allowAlias
             * @property {boolean|null} [deprecated] EnumOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumOptions allowAlias.
             * @member {boolean} allowAlias
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.allowAlias = false;

            /**
             * EnumOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated = false;

            /**
             * EnumOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new EnumOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             * @returns {google.protobuf.EnumOptions} EnumOptions instance
             */
            EnumOptions.create = function create(properties) {
                return new EnumOptions(properties);
            };

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        message.allowAlias = reader.bool();
                        break;
                    case 3:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    if (typeof message.allowAlias !== "boolean")
                        return "allowAlias: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumOptions)
                    return object;
                var message = new $root.google.protobuf.EnumOptions();
                if (object.allowAlias != null)
                    message.allowAlias = Boolean(object.allowAlias);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.allowAlias = false;
                    object.deprecated = false;
                }
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    object.allowAlias = message.allowAlias;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumOptions;
        })();

        protobuf.EnumValueOptions = (function() {

            /**
             * Properties of an EnumValueOptions.
             * @memberof google.protobuf
             * @interface IEnumValueOptions
             * @property {boolean|null} [deprecated] EnumValueOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.deprecated = false;

            /**
             * EnumValueOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new EnumValueOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
             */
            EnumValueOptions.create = function create(properties) {
                return new EnumValueOptions(properties);
            };

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueOptions)
                    return object;
                var message = new $root.google.protobuf.EnumValueOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return EnumValueOptions;
        })();

        protobuf.ServiceOptions = (function() {

            /**
             * Properties of a ServiceOptions.
             * @memberof google.protobuf
             * @interface IServiceOptions
             * @property {boolean|null} [deprecated] ServiceOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
             */

            /**
             * Constructs a new ServiceOptions.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceOptions.
             * @implements IServiceOptions
             * @constructor
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             */
            function ServiceOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.deprecated = false;

            /**
             * ServiceOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new ServiceOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
             */
            ServiceOptions.create = function create(properties) {
                return new ServiceOptions(properties);
            };

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceOptions message.
             * @function verify
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            ServiceOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceOptions)
                    return object;
                var message = new $root.google.protobuf.ServiceOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.ServiceOptions} message ServiceOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this ServiceOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            return ServiceOptions;
        })();

        protobuf.MethodOptions = (function() {

            /**
             * Properties of a MethodOptions.
             * @memberof google.protobuf
             * @interface IMethodOptions
             * @property {boolean|null} [deprecated] MethodOptions deprecated
             * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
             */

            /**
             * Constructs a new MethodOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MethodOptions.
             * @implements IMethodOptions
             * @constructor
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             */
            function MethodOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.deprecated = false;

            /**
             * MethodOptions idempotencyLevel.
             * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.idempotencyLevel = 0;

            /**
             * MethodOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new MethodOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             * @returns {google.protobuf.MethodOptions} MethodOptions instance
             */
            MethodOptions.create = function create(properties) {
                return new MethodOptions(properties);
            };

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                    writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (var i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33:
                        message.deprecated = reader.bool();
                        break;
                    case 34:
                        message.idempotencyLevel = reader.int32();
                        break;
                    case 999:
                        if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                            message.uninterpretedOption = [];
                        message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodOptions message.
             * @function verify
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                    switch (message.idempotencyLevel) {
                    default:
                        return "idempotencyLevel: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            MethodOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodOptions)
                    return object;
                var message = new $root.google.protobuf.MethodOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                switch (object.idempotencyLevel) {
                case "IDEMPOTENCY_UNKNOWN":
                case 0:
                    message.idempotencyLevel = 0;
                    break;
                case "NO_SIDE_EFFECTS":
                case 1:
                    message.idempotencyLevel = 1;
                    break;
                case "IDEMPOTENT":
                case 2:
                    message.idempotencyLevel = 2;
                    break;
                }
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.MethodOptions} message MethodOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                    object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (var j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this MethodOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * IdempotencyLevel enum.
             * @name google.protobuf.MethodOptions.IdempotencyLevel
             * @enum {number}
             * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
             * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
             * @property {number} IDEMPOTENT=2 IDEMPOTENT value
             */
            MethodOptions.IdempotencyLevel = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                values[valuesById[2] = "IDEMPOTENT"] = 2;
                return values;
            })();

            return MethodOptions;
        })();

        protobuf.UninterpretedOption = (function() {

            /**
             * Properties of an UninterpretedOption.
             * @memberof google.protobuf
             * @interface IUninterpretedOption
             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
             * @property {string|null} [identifierValue] UninterpretedOption identifierValue
             * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
             * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
             * @property {number|null} [doubleValue] UninterpretedOption doubleValue
             * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
             * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
             */

            /**
             * Constructs a new UninterpretedOption.
             * @memberof google.protobuf
             * @classdesc Represents an UninterpretedOption.
             * @implements IUninterpretedOption
             * @constructor
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             */
            function UninterpretedOption(properties) {
                this.name = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UninterpretedOption name.
             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.name = $util.emptyArray;

            /**
             * UninterpretedOption identifierValue.
             * @member {string} identifierValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.identifierValue = "";

            /**
             * UninterpretedOption positiveIntValue.
             * @member {number|Long} positiveIntValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * UninterpretedOption negativeIntValue.
             * @member {number|Long} negativeIntValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UninterpretedOption doubleValue.
             * @member {number} doubleValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.doubleValue = 0;

            /**
             * UninterpretedOption stringValue.
             * @member {Uint8Array} stringValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.stringValue = $util.newBuffer([]);

            /**
             * UninterpretedOption aggregateValue.
             * @member {string} aggregateValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.aggregateValue = "";

            /**
             * Creates a new UninterpretedOption instance using the specified properties.
             * @function create
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
             */
            UninterpretedOption.create = function create(properties) {
                return new UninterpretedOption(properties);
            };

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.name.length)
                    for (var i = 0; i < message.name.length; ++i)
                        $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                return writer;
            };

            /**
             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2:
                        if (!(message.name && message.name.length))
                            message.name = [];
                        message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                        break;
                    case 3:
                        message.identifierValue = reader.string();
                        break;
                    case 4:
                        message.positiveIntValue = reader.uint64();
                        break;
                    case 5:
                        message.negativeIntValue = reader.int64();
                        break;
                    case 6:
                        message.doubleValue = reader.double();
                        break;
                    case 7:
                        message.stringValue = reader.bytes();
                        break;
                    case 8:
                        message.aggregateValue = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UninterpretedOption message.
             * @function verify
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UninterpretedOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                    if (!Array.isArray(message.name))
                        return "name: array expected";
                    for (var i = 0; i < message.name.length; ++i) {
                        var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                        if (error)
                            return "name." + error;
                    }
                }
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    if (!$util.isString(message.identifierValue))
                        return "identifierValue: string expected";
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                        return "positiveIntValue: integer|Long expected";
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                        return "negativeIntValue: integer|Long expected";
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    if (typeof message.doubleValue !== "number")
                        return "doubleValue: number expected";
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                        return "stringValue: buffer expected";
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    if (!$util.isString(message.aggregateValue))
                        return "aggregateValue: string expected";
                return null;
            };

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            UninterpretedOption.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption)
                    return object;
                var message = new $root.google.protobuf.UninterpretedOption();
                if (object.name) {
                    if (!Array.isArray(object.name))
                        throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                    message.name = [];
                    for (var i = 0; i < object.name.length; ++i) {
                        if (typeof object.name[i] !== "object")
                            throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                        message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                    }
                }
                if (object.identifierValue != null)
                    message.identifierValue = String(object.identifierValue);
                if (object.positiveIntValue != null)
                    if ($util.Long)
                        (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                    else if (typeof object.positiveIntValue === "string")
                        message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                    else if (typeof object.positiveIntValue === "number")
                        message.positiveIntValue = object.positiveIntValue;
                    else if (typeof object.positiveIntValue === "object")
                        message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                if (object.negativeIntValue != null)
                    if ($util.Long)
                        (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                    else if (typeof object.negativeIntValue === "string")
                        message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                    else if (typeof object.negativeIntValue === "number")
                        message.negativeIntValue = object.negativeIntValue;
                    else if (typeof object.negativeIntValue === "object")
                        message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                if (object.doubleValue != null)
                    message.doubleValue = Number(object.doubleValue);
                if (object.stringValue != null)
                    if (typeof object.stringValue === "string")
                        $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                    else if (object.stringValue.length)
                        message.stringValue = object.stringValue;
                if (object.aggregateValue != null)
                    message.aggregateValue = String(object.aggregateValue);
                return message;
            };

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UninterpretedOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.name = [];
                if (options.defaults) {
                    object.identifierValue = "";
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, true);
                        object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.positiveIntValue = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.negativeIntValue = options.longs === String ? "0" : 0;
                    object.doubleValue = 0;
                    if (options.bytes === String)
                        object.stringValue = "";
                    else {
                        object.stringValue = [];
                        if (options.bytes !== Array)
                            object.stringValue = $util.newBuffer(object.stringValue);
                    }
                    object.aggregateValue = "";
                }
                if (message.name && message.name.length) {
                    object.name = [];
                    for (var j = 0; j < message.name.length; ++j)
                        object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                }
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    object.identifierValue = message.identifierValue;
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    if (typeof message.positiveIntValue === "number")
                        object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                    else
                        object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    if (typeof message.negativeIntValue === "number")
                        object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                    else
                        object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    object.aggregateValue = message.aggregateValue;
                return object;
            };

            /**
             * Converts this UninterpretedOption to JSON.
             * @function toJSON
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UninterpretedOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            UninterpretedOption.NamePart = (function() {

                /**
                 * Properties of a NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @interface INamePart
                 * @property {string} namePart NamePart namePart
                 * @property {boolean} isExtension NamePart isExtension
                 */

                /**
                 * Constructs a new NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @classdesc Represents a NamePart.
                 * @implements INamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 */
                function NamePart(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NamePart namePart.
                 * @member {string} namePart
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.namePart = "";

                /**
                 * NamePart isExtension.
                 * @member {boolean} isExtension
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.isExtension = false;

                /**
                 * Creates a new NamePart instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                 */
                NamePart.create = function create(properties) {
                    return new NamePart(properties);
                };

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                    return writer;
                };

                /**
                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.namePart = reader.string();
                            break;
                        case 2:
                            message.isExtension = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("namePart"))
                        throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                    if (!message.hasOwnProperty("isExtension"))
                        throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NamePart message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NamePart.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.namePart))
                        return "namePart: string expected";
                    if (typeof message.isExtension !== "boolean")
                        return "isExtension: boolean expected";
                    return null;
                };

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                NamePart.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    if (object.namePart != null)
                        message.namePart = String(object.namePart);
                    if (object.isExtension != null)
                        message.isExtension = Boolean(object.isExtension);
                    return message;
                };

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NamePart.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.namePart = "";
                        object.isExtension = false;
                    }
                    if (message.namePart != null && message.hasOwnProperty("namePart"))
                        object.namePart = message.namePart;
                    if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                        object.isExtension = message.isExtension;
                    return object;
                };

                /**
                 * Converts this NamePart to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NamePart.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return NamePart;
            })();

            return UninterpretedOption;
        })();

        protobuf.SourceCodeInfo = (function() {

            /**
             * Properties of a SourceCodeInfo.
             * @memberof google.protobuf
             * @interface ISourceCodeInfo
             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
             */

            /**
             * Constructs a new SourceCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a SourceCodeInfo.
             * @implements ISourceCodeInfo
             * @constructor
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             */
            function SourceCodeInfo(properties) {
                this.location = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SourceCodeInfo location.
             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             */
            SourceCodeInfo.prototype.location = $util.emptyArray;

            /**
             * Creates a new SourceCodeInfo instance using the specified properties.
             * @function create
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
             */
            SourceCodeInfo.create = function create(properties) {
                return new SourceCodeInfo(properties);
            };

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.location != null && message.location.length)
                    for (var i = 0; i < message.location.length; ++i)
                        $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.location && message.location.length))
                            message.location = [];
                        message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SourceCodeInfo message.
             * @function verify
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SourceCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    if (!Array.isArray(message.location))
                        return "location: array expected";
                    for (var i = 0; i < message.location.length; ++i) {
                        var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                        if (error)
                            return "location." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            SourceCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo)
                    return object;
                var message = new $root.google.protobuf.SourceCodeInfo();
                if (object.location) {
                    if (!Array.isArray(object.location))
                        throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                    message.location = [];
                    for (var i = 0; i < object.location.length; ++i) {
                        if (typeof object.location[i] !== "object")
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                        message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SourceCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.location = [];
                if (message.location && message.location.length) {
                    object.location = [];
                    for (var j = 0; j < message.location.length; ++j)
                        object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                }
                return object;
            };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SourceCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            SourceCodeInfo.Location = (function() {

                /**
                 * Properties of a Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @interface ILocation
                 * @property {Array.<number>|null} [path] Location path
                 * @property {Array.<number>|null} [span] Location span
                 * @property {string|null} [leadingComments] Location leadingComments
                 * @property {string|null} [trailingComments] Location trailingComments
                 * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                 */

                /**
                 * Constructs a new Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    this.path = [];
                    this.span = [];
                    this.leadingDetachedComments = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Location path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.path = $util.emptyArray;

                /**
                 * Location span.
                 * @member {Array.<number>} span
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.span = $util.emptyArray;

                /**
                 * Location leadingComments.
                 * @member {string} leadingComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leadingComments = "";

                /**
                 * Location trailingComments.
                 * @member {string} trailingComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.trailingComments = "";

                /**
                 * Location leadingDetachedComments.
                 * @member {Array.<string>} leadingDetachedComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leadingDetachedComments = $util.emptyArray;

                /**
                 * Creates a new Location instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                 */
                Location.create = function create(properties) {
                    return new Location(properties);
                };

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.span != null && message.span.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (var i = 0; i < message.span.length; ++i)
                            writer.int32(message.span[i]);
                        writer.ldelim();
                    }
                    if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                    if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                    if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                        for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                    return writer;
                };

                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            if (!(message.span && message.span.length))
                                message.span = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.span.push(reader.int32());
                            } else
                                message.span.push(reader.int32());
                            break;
                        case 3:
                            message.leadingComments = reader.string();
                            break;
                        case 4:
                            message.trailingComments = reader.string();
                            break;
                        case 6:
                            if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                message.leadingDetachedComments = [];
                            message.leadingDetachedComments.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (var i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.span != null && message.hasOwnProperty("span")) {
                        if (!Array.isArray(message.span))
                            return "span: array expected";
                        for (var i = 0; i < message.span.length; ++i)
                            if (!$util.isInteger(message.span[i]))
                                return "span: integer[] expected";
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        if (!$util.isString(message.leadingComments))
                            return "leadingComments: string expected";
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        if (!$util.isString(message.trailingComments))
                            return "trailingComments: string expected";
                    if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                        if (!Array.isArray(message.leadingDetachedComments))
                            return "leadingDetachedComments: array expected";
                        for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                            if (!$util.isString(message.leadingDetachedComments[i]))
                                return "leadingDetachedComments: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo.Location();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                        message.path = [];
                        for (var i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.span) {
                        if (!Array.isArray(object.span))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                        message.span = [];
                        for (var i = 0; i < object.span.length; ++i)
                            message.span[i] = object.span[i] | 0;
                    }
                    if (object.leadingComments != null)
                        message.leadingComments = String(object.leadingComments);
                    if (object.trailingComments != null)
                        message.trailingComments = String(object.trailingComments);
                    if (object.leadingDetachedComments) {
                        if (!Array.isArray(object.leadingDetachedComments))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                        message.leadingDetachedComments = [];
                        for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                            message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.path = [];
                        object.span = [];
                        object.leadingDetachedComments = [];
                    }
                    if (options.defaults) {
                        object.leadingComments = "";
                        object.trailingComments = "";
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (var j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.span && message.span.length) {
                        object.span = [];
                        for (var j = 0; j < message.span.length; ++j)
                            object.span[j] = message.span[j];
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        object.leadingComments = message.leadingComments;
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        object.trailingComments = message.trailingComments;
                    if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                        object.leadingDetachedComments = [];
                        for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                            object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                    }
                    return object;
                };

                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Location;
            })();

            return SourceCodeInfo;
        })();

        protobuf.GeneratedCodeInfo = (function() {

            /**
             * Properties of a GeneratedCodeInfo.
             * @memberof google.protobuf
             * @interface IGeneratedCodeInfo
             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
             */

            /**
             * Constructs a new GeneratedCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a GeneratedCodeInfo.
             * @implements IGeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             */
            function GeneratedCodeInfo(properties) {
                this.annotation = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GeneratedCodeInfo annotation.
             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             */
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

            /**
             * Creates a new GeneratedCodeInfo instance using the specified properties.
             * @function create
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
             */
            GeneratedCodeInfo.create = function create(properties) {
                return new GeneratedCodeInfo(properties);
            };

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.annotation != null && message.annotation.length)
                    for (var i = 0; i < message.annotation.length; ++i)
                        $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        if (!(message.annotation && message.annotation.length))
                            message.annotation = [];
                        message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GeneratedCodeInfo message.
             * @function verify
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneratedCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.annotation != null && message.hasOwnProperty("annotation")) {
                    if (!Array.isArray(message.annotation))
                        return "annotation: array expected";
                    for (var i = 0; i < message.annotation.length; ++i) {
                        var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                        if (error)
                            return "annotation." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            GeneratedCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                    return object;
                var message = new $root.google.protobuf.GeneratedCodeInfo();
                if (object.annotation) {
                    if (!Array.isArray(object.annotation))
                        throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                    message.annotation = [];
                    for (var i = 0; i < object.annotation.length; ++i) {
                        if (typeof object.annotation[i] !== "object")
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                        message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneratedCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.annotation = [];
                if (message.annotation && message.annotation.length) {
                    object.annotation = [];
                    for (var j = 0; j < message.annotation.length; ++j)
                        object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                }
                return object;
            };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            GeneratedCodeInfo.Annotation = (function() {

                /**
                 * Properties of an Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @interface IAnnotation
                 * @property {Array.<number>|null} [path] Annotation path
                 * @property {string|null} [sourceFile] Annotation sourceFile
                 * @property {number|null} [begin] Annotation begin
                 * @property {number|null} [end] Annotation end
                 */

                /**
                 * Constructs a new Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @classdesc Represents an Annotation.
                 * @implements IAnnotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 */
                function Annotation(properties) {
                    this.path = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Annotation path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.path = $util.emptyArray;

                /**
                 * Annotation sourceFile.
                 * @member {string} sourceFile
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.sourceFile = "";

                /**
                 * Annotation begin.
                 * @member {number} begin
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.begin = 0;

                /**
                 * Annotation end.
                 * @member {number} end
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.end = 0;

                /**
                 * Creates a new Annotation instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                 */
                Annotation.create = function create(properties) {
                    return new Annotation(properties);
                };

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (var i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                    if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.path && message.path.length))
                                message.path = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.path.push(reader.int32());
                            } else
                                message.path.push(reader.int32());
                            break;
                        case 2:
                            message.sourceFile = reader.string();
                            break;
                        case 3:
                            message.begin = reader.int32();
                            break;
                        case 4:
                            message.end = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Annotation message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Annotation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (var i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        if (!$util.isString(message.sourceFile))
                            return "sourceFile: string expected";
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        if (!$util.isInteger(message.begin))
                            return "begin: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                Annotation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                        message.path = [];
                        for (var i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.sourceFile != null)
                        message.sourceFile = String(object.sourceFile);
                    if (object.begin != null)
                        message.begin = object.begin | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Annotation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.path = [];
                    if (options.defaults) {
                        object.sourceFile = "";
                        object.begin = 0;
                        object.end = 0;
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (var j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        object.sourceFile = message.sourceFile;
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        object.begin = message.begin;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this Annotation to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Annotation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                return Annotation;
            })();

            return GeneratedCodeInfo;
        })();

        return protobuf;
    })();

    return google;
})();

$root.solarmodule = (function() {

    /**
     * Namespace solarmodule.
     * @exports solarmodule
     * @namespace
     */
    var solarmodule = {};

    solarmodule.SolarPoint = (function() {

        /**
         * Properties of a SolarPoint.
         * @memberof solarmodule
         * @interface ISolarPoint
         * @property {commonmodule.IControlDPC|null} [frequencySetPointEnabled] SolarPoint frequencySetPointEnabled
         * @property {commonmodule.IENG_GridConnectModeKind|null} [mode] SolarPoint mode
         * @property {google.protobuf.IFloatValue|null} [pctHzDroop] SolarPoint pctHzDroop
         * @property {google.protobuf.IFloatValue|null} [pctVDroop] SolarPoint pctVDroop
         * @property {commonmodule.IRampRate|null} [rampRates] SolarPoint rampRates
         * @property {commonmodule.IControlDPC|null} [reactivePwrSetPointEnabled] SolarPoint reactivePwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [realPwrSetPointEnabled] SolarPoint realPwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [reset] SolarPoint reset
         * @property {commonmodule.IOptional_StateKind|null} [state] SolarPoint state
         * @property {commonmodule.IControlDPC|null} [voltageSetPointEnabled] SolarPoint voltageSetPointEnabled
         * @property {commonmodule.IControlTimestamp|null} [startTime] SolarPoint startTime
         */

        /**
         * Constructs a new SolarPoint.
         * @memberof solarmodule
         * @classdesc Represents a SolarPoint.
         * @implements ISolarPoint
         * @constructor
         * @param {solarmodule.ISolarPoint=} [properties] Properties to set
         */
        function SolarPoint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarPoint frequencySetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} frequencySetPointEnabled
         * @memberof solarmodule.SolarPoint
         * @instance
         */
        SolarPoint.prototype.frequencySetPointEnabled = null;

        /**
         * SolarPoint mode.
         * @member {commonmodule.IENG_GridConnectModeKind|null|undefined} mode
         * @memberof solarmodule.SolarPoint
         * @instance
         */
        SolarPoint.prototype.mode = null;

        /**
         * SolarPoint pctHzDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctHzDroop
         * @memberof solarmodule.SolarPoint
         * @instance
         */
        SolarPoint.prototype.pctHzDroop = null;

        /**
         * SolarPoint pctVDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctVDroop
         * @memberof solarmodule.SolarPoint
         * @instance
         */
        SolarPoint.prototype.pctVDroop = null;

        /**
         * SolarPoint rampRates.
         * @member {commonmodule.IRampRate|null|undefined} rampRates
         * @memberof solarmodule.SolarPoint
         * @instance
         */
        SolarPoint.prototype.rampRates = null;

        /**
         * SolarPoint reactivePwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} reactivePwrSetPointEnabled
         * @memberof solarmodule.SolarPoint
         * @instance
         */
        SolarPoint.prototype.reactivePwrSetPointEnabled = null;

        /**
         * SolarPoint realPwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} realPwrSetPointEnabled
         * @memberof solarmodule.SolarPoint
         * @instance
         */
        SolarPoint.prototype.realPwrSetPointEnabled = null;

        /**
         * SolarPoint reset.
         * @member {commonmodule.IControlDPC|null|undefined} reset
         * @memberof solarmodule.SolarPoint
         * @instance
         */
        SolarPoint.prototype.reset = null;

        /**
         * SolarPoint state.
         * @member {commonmodule.IOptional_StateKind|null|undefined} state
         * @memberof solarmodule.SolarPoint
         * @instance
         */
        SolarPoint.prototype.state = null;

        /**
         * SolarPoint voltageSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} voltageSetPointEnabled
         * @memberof solarmodule.SolarPoint
         * @instance
         */
        SolarPoint.prototype.voltageSetPointEnabled = null;

        /**
         * SolarPoint startTime.
         * @member {commonmodule.IControlTimestamp|null|undefined} startTime
         * @memberof solarmodule.SolarPoint
         * @instance
         */
        SolarPoint.prototype.startTime = null;

        /**
         * Creates a new SolarPoint instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarPoint
         * @static
         * @param {solarmodule.ISolarPoint=} [properties] Properties to set
         * @returns {solarmodule.SolarPoint} SolarPoint instance
         */
        SolarPoint.create = function create(properties) {
            return new SolarPoint(properties);
        };

        /**
         * Encodes the specified SolarPoint message. Does not implicitly {@link solarmodule.SolarPoint.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarPoint
         * @static
         * @param {solarmodule.ISolarPoint} message SolarPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarPoint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.frequencySetPointEnabled != null && Object.hasOwnProperty.call(message, "frequencySetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.frequencySetPointEnabled, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
                $root.commonmodule.ENG_GridConnectModeKind.encode(message.mode, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.pctHzDroop != null && Object.hasOwnProperty.call(message, "pctHzDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctHzDroop, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.pctVDroop != null && Object.hasOwnProperty.call(message, "pctVDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctVDroop, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.rampRates != null && Object.hasOwnProperty.call(message, "rampRates"))
                $root.commonmodule.RampRate.encode(message.rampRates, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.reactivePwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "reactivePwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.reactivePwrSetPointEnabled, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.realPwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "realPwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.realPwrSetPointEnabled, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.reset != null && Object.hasOwnProperty.call(message, "reset"))
                $root.commonmodule.ControlDPC.encode(message.reset, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                $root.commonmodule.Optional_StateKind.encode(message.state, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.voltageSetPointEnabled != null && Object.hasOwnProperty.call(message, "voltageSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.voltageSetPointEnabled, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                $root.commonmodule.ControlTimestamp.encode(message.startTime, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarPoint message, length delimited. Does not implicitly {@link solarmodule.SolarPoint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarPoint
         * @static
         * @param {solarmodule.ISolarPoint} message SolarPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarPoint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarPoint message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarPoint} SolarPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarPoint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarPoint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.frequencySetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.mode = $root.commonmodule.ENG_GridConnectModeKind.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.pctHzDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.pctVDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.rampRates = $root.commonmodule.RampRate.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.reset = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.state = $root.commonmodule.Optional_StateKind.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 11:
                    message.startTime = $root.commonmodule.ControlTimestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarPoint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarPoint} SolarPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarPoint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarPoint message.
         * @function verify
         * @memberof solarmodule.SolarPoint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarPoint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.frequencySetPointEnabled != null && message.hasOwnProperty("frequencySetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.frequencySetPointEnabled);
                if (error)
                    return "frequencySetPointEnabled." + error;
            }
            if (message.mode != null && message.hasOwnProperty("mode")) {
                var error = $root.commonmodule.ENG_GridConnectModeKind.verify(message.mode);
                if (error)
                    return "mode." + error;
            }
            if (message.pctHzDroop != null && message.hasOwnProperty("pctHzDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctHzDroop);
                if (error)
                    return "pctHzDroop." + error;
            }
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctVDroop);
                if (error)
                    return "pctVDroop." + error;
            }
            if (message.rampRates != null && message.hasOwnProperty("rampRates")) {
                var error = $root.commonmodule.RampRate.verify(message.rampRates);
                if (error)
                    return "rampRates." + error;
            }
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reactivePwrSetPointEnabled);
                if (error)
                    return "reactivePwrSetPointEnabled." + error;
            }
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.realPwrSetPointEnabled);
                if (error)
                    return "realPwrSetPointEnabled." + error;
            }
            if (message.reset != null && message.hasOwnProperty("reset")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reset);
                if (error)
                    return "reset." + error;
            }
            if (message.state != null && message.hasOwnProperty("state")) {
                var error = $root.commonmodule.Optional_StateKind.verify(message.state);
                if (error)
                    return "state." + error;
            }
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.voltageSetPointEnabled);
                if (error)
                    return "voltageSetPointEnabled." + error;
            }
            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                var error = $root.commonmodule.ControlTimestamp.verify(message.startTime);
                if (error)
                    return "startTime." + error;
            }
            return null;
        };

        /**
         * Creates a SolarPoint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarPoint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarPoint} SolarPoint
         */
        SolarPoint.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarPoint)
                return object;
            var message = new $root.solarmodule.SolarPoint();
            if (object.frequencySetPointEnabled != null) {
                if (typeof object.frequencySetPointEnabled !== "object")
                    throw TypeError(".solarmodule.SolarPoint.frequencySetPointEnabled: object expected");
                message.frequencySetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.frequencySetPointEnabled);
            }
            if (object.mode != null) {
                if (typeof object.mode !== "object")
                    throw TypeError(".solarmodule.SolarPoint.mode: object expected");
                message.mode = $root.commonmodule.ENG_GridConnectModeKind.fromObject(object.mode);
            }
            if (object.pctHzDroop != null) {
                if (typeof object.pctHzDroop !== "object")
                    throw TypeError(".solarmodule.SolarPoint.pctHzDroop: object expected");
                message.pctHzDroop = $root.google.protobuf.FloatValue.fromObject(object.pctHzDroop);
            }
            if (object.pctVDroop != null) {
                if (typeof object.pctVDroop !== "object")
                    throw TypeError(".solarmodule.SolarPoint.pctVDroop: object expected");
                message.pctVDroop = $root.google.protobuf.FloatValue.fromObject(object.pctVDroop);
            }
            if (object.rampRates != null) {
                if (typeof object.rampRates !== "object")
                    throw TypeError(".solarmodule.SolarPoint.rampRates: object expected");
                message.rampRates = $root.commonmodule.RampRate.fromObject(object.rampRates);
            }
            if (object.reactivePwrSetPointEnabled != null) {
                if (typeof object.reactivePwrSetPointEnabled !== "object")
                    throw TypeError(".solarmodule.SolarPoint.reactivePwrSetPointEnabled: object expected");
                message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.reactivePwrSetPointEnabled);
            }
            if (object.realPwrSetPointEnabled != null) {
                if (typeof object.realPwrSetPointEnabled !== "object")
                    throw TypeError(".solarmodule.SolarPoint.realPwrSetPointEnabled: object expected");
                message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.realPwrSetPointEnabled);
            }
            if (object.reset != null) {
                if (typeof object.reset !== "object")
                    throw TypeError(".solarmodule.SolarPoint.reset: object expected");
                message.reset = $root.commonmodule.ControlDPC.fromObject(object.reset);
            }
            if (object.state != null) {
                if (typeof object.state !== "object")
                    throw TypeError(".solarmodule.SolarPoint.state: object expected");
                message.state = $root.commonmodule.Optional_StateKind.fromObject(object.state);
            }
            if (object.voltageSetPointEnabled != null) {
                if (typeof object.voltageSetPointEnabled !== "object")
                    throw TypeError(".solarmodule.SolarPoint.voltageSetPointEnabled: object expected");
                message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.voltageSetPointEnabled);
            }
            if (object.startTime != null) {
                if (typeof object.startTime !== "object")
                    throw TypeError(".solarmodule.SolarPoint.startTime: object expected");
                message.startTime = $root.commonmodule.ControlTimestamp.fromObject(object.startTime);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarPoint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarPoint
         * @static
         * @param {solarmodule.SolarPoint} message SolarPoint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarPoint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.frequencySetPointEnabled = null;
                object.mode = null;
                object.pctHzDroop = null;
                object.pctVDroop = null;
                object.rampRates = null;
                object.reactivePwrSetPointEnabled = null;
                object.realPwrSetPointEnabled = null;
                object.reset = null;
                object.state = null;
                object.voltageSetPointEnabled = null;
                object.startTime = null;
            }
            if (message.frequencySetPointEnabled != null && message.hasOwnProperty("frequencySetPointEnabled"))
                object.frequencySetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.frequencySetPointEnabled, options);
            if (message.mode != null && message.hasOwnProperty("mode"))
                object.mode = $root.commonmodule.ENG_GridConnectModeKind.toObject(message.mode, options);
            if (message.pctHzDroop != null && message.hasOwnProperty("pctHzDroop"))
                object.pctHzDroop = $root.google.protobuf.FloatValue.toObject(message.pctHzDroop, options);
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop"))
                object.pctVDroop = $root.google.protobuf.FloatValue.toObject(message.pctVDroop, options);
            if (message.rampRates != null && message.hasOwnProperty("rampRates"))
                object.rampRates = $root.commonmodule.RampRate.toObject(message.rampRates, options);
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled"))
                object.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.reactivePwrSetPointEnabled, options);
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled"))
                object.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.realPwrSetPointEnabled, options);
            if (message.reset != null && message.hasOwnProperty("reset"))
                object.reset = $root.commonmodule.ControlDPC.toObject(message.reset, options);
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = $root.commonmodule.Optional_StateKind.toObject(message.state, options);
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled"))
                object.voltageSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.voltageSetPointEnabled, options);
            if (message.startTime != null && message.hasOwnProperty("startTime"))
                object.startTime = $root.commonmodule.ControlTimestamp.toObject(message.startTime, options);
            return object;
        };

        /**
         * Converts this SolarPoint to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarPoint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarPoint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarPoint;
    })();

    solarmodule.SolarCSG = (function() {

        /**
         * Properties of a SolarCSG.
         * @memberof solarmodule
         * @interface ISolarCSG
         * @property {Array.<solarmodule.ISolarPoint>|null} [crvPts] SolarCSG crvPts
         */

        /**
         * Constructs a new SolarCSG.
         * @memberof solarmodule
         * @classdesc Represents a SolarCSG.
         * @implements ISolarCSG
         * @constructor
         * @param {solarmodule.ISolarCSG=} [properties] Properties to set
         */
        function SolarCSG(properties) {
            this.crvPts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarCSG crvPts.
         * @member {Array.<solarmodule.ISolarPoint>} crvPts
         * @memberof solarmodule.SolarCSG
         * @instance
         */
        SolarCSG.prototype.crvPts = $util.emptyArray;

        /**
         * Creates a new SolarCSG instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarCSG
         * @static
         * @param {solarmodule.ISolarCSG=} [properties] Properties to set
         * @returns {solarmodule.SolarCSG} SolarCSG instance
         */
        SolarCSG.create = function create(properties) {
            return new SolarCSG(properties);
        };

        /**
         * Encodes the specified SolarCSG message. Does not implicitly {@link solarmodule.SolarCSG.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarCSG
         * @static
         * @param {solarmodule.ISolarCSG} message SolarCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarCSG.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.crvPts != null && message.crvPts.length)
                for (var i = 0; i < message.crvPts.length; ++i)
                    $root.solarmodule.SolarPoint.encode(message.crvPts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarCSG message, length delimited. Does not implicitly {@link solarmodule.SolarCSG.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarCSG
         * @static
         * @param {solarmodule.ISolarCSG} message SolarCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarCSG.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarCSG message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarCSG} SolarCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarCSG.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarCSG();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.crvPts && message.crvPts.length))
                        message.crvPts = [];
                    message.crvPts.push($root.solarmodule.SolarPoint.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarCSG message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarCSG} SolarCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarCSG.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarCSG message.
         * @function verify
         * @memberof solarmodule.SolarCSG
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarCSG.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.crvPts != null && message.hasOwnProperty("crvPts")) {
                if (!Array.isArray(message.crvPts))
                    return "crvPts: array expected";
                for (var i = 0; i < message.crvPts.length; ++i) {
                    var error = $root.solarmodule.SolarPoint.verify(message.crvPts[i]);
                    if (error)
                        return "crvPts." + error;
                }
            }
            return null;
        };

        /**
         * Creates a SolarCSG message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarCSG
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarCSG} SolarCSG
         */
        SolarCSG.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarCSG)
                return object;
            var message = new $root.solarmodule.SolarCSG();
            if (object.crvPts) {
                if (!Array.isArray(object.crvPts))
                    throw TypeError(".solarmodule.SolarCSG.crvPts: array expected");
                message.crvPts = [];
                for (var i = 0; i < object.crvPts.length; ++i) {
                    if (typeof object.crvPts[i] !== "object")
                        throw TypeError(".solarmodule.SolarCSG.crvPts: object expected");
                    message.crvPts[i] = $root.solarmodule.SolarPoint.fromObject(object.crvPts[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarCSG message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarCSG
         * @static
         * @param {solarmodule.SolarCSG} message SolarCSG
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarCSG.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.crvPts = [];
            if (message.crvPts && message.crvPts.length) {
                object.crvPts = [];
                for (var j = 0; j < message.crvPts.length; ++j)
                    object.crvPts[j] = $root.solarmodule.SolarPoint.toObject(message.crvPts[j], options);
            }
            return object;
        };

        /**
         * Converts this SolarCSG to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarCSG
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarCSG.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarCSG;
    })();

    solarmodule.SolarControlScheduleFSCH = (function() {

        /**
         * Properties of a SolarControlScheduleFSCH.
         * @memberof solarmodule
         * @interface ISolarControlScheduleFSCH
         * @property {solarmodule.ISolarCSG|null} [ValDCSG] SolarControlScheduleFSCH ValDCSG
         */

        /**
         * Constructs a new SolarControlScheduleFSCH.
         * @memberof solarmodule
         * @classdesc Represents a SolarControlScheduleFSCH.
         * @implements ISolarControlScheduleFSCH
         * @constructor
         * @param {solarmodule.ISolarControlScheduleFSCH=} [properties] Properties to set
         */
        function SolarControlScheduleFSCH(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarControlScheduleFSCH ValDCSG.
         * @member {solarmodule.ISolarCSG|null|undefined} ValDCSG
         * @memberof solarmodule.SolarControlScheduleFSCH
         * @instance
         */
        SolarControlScheduleFSCH.prototype.ValDCSG = null;

        /**
         * Creates a new SolarControlScheduleFSCH instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarControlScheduleFSCH
         * @static
         * @param {solarmodule.ISolarControlScheduleFSCH=} [properties] Properties to set
         * @returns {solarmodule.SolarControlScheduleFSCH} SolarControlScheduleFSCH instance
         */
        SolarControlScheduleFSCH.create = function create(properties) {
            return new SolarControlScheduleFSCH(properties);
        };

        /**
         * Encodes the specified SolarControlScheduleFSCH message. Does not implicitly {@link solarmodule.SolarControlScheduleFSCH.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarControlScheduleFSCH
         * @static
         * @param {solarmodule.ISolarControlScheduleFSCH} message SolarControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarControlScheduleFSCH.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ValDCSG != null && Object.hasOwnProperty.call(message, "ValDCSG"))
                $root.solarmodule.SolarCSG.encode(message.ValDCSG, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarControlScheduleFSCH message, length delimited. Does not implicitly {@link solarmodule.SolarControlScheduleFSCH.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarControlScheduleFSCH
         * @static
         * @param {solarmodule.ISolarControlScheduleFSCH} message SolarControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarControlScheduleFSCH.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarControlScheduleFSCH message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarControlScheduleFSCH} SolarControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarControlScheduleFSCH.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarControlScheduleFSCH();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ValDCSG = $root.solarmodule.SolarCSG.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarControlScheduleFSCH message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarControlScheduleFSCH} SolarControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarControlScheduleFSCH.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarControlScheduleFSCH message.
         * @function verify
         * @memberof solarmodule.SolarControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarControlScheduleFSCH.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ValDCSG != null && message.hasOwnProperty("ValDCSG")) {
                var error = $root.solarmodule.SolarCSG.verify(message.ValDCSG);
                if (error)
                    return "ValDCSG." + error;
            }
            return null;
        };

        /**
         * Creates a SolarControlScheduleFSCH message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarControlScheduleFSCH} SolarControlScheduleFSCH
         */
        SolarControlScheduleFSCH.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarControlScheduleFSCH)
                return object;
            var message = new $root.solarmodule.SolarControlScheduleFSCH();
            if (object.ValDCSG != null) {
                if (typeof object.ValDCSG !== "object")
                    throw TypeError(".solarmodule.SolarControlScheduleFSCH.ValDCSG: object expected");
                message.ValDCSG = $root.solarmodule.SolarCSG.fromObject(object.ValDCSG);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarControlScheduleFSCH message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarControlScheduleFSCH
         * @static
         * @param {solarmodule.SolarControlScheduleFSCH} message SolarControlScheduleFSCH
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarControlScheduleFSCH.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ValDCSG = null;
            if (message.ValDCSG != null && message.hasOwnProperty("ValDCSG"))
                object.ValDCSG = $root.solarmodule.SolarCSG.toObject(message.ValDCSG, options);
            return object;
        };

        /**
         * Converts this SolarControlScheduleFSCH to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarControlScheduleFSCH
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarControlScheduleFSCH.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarControlScheduleFSCH;
    })();

    solarmodule.SolarControlFSCC = (function() {

        /**
         * Properties of a SolarControlFSCC.
         * @memberof solarmodule
         * @interface ISolarControlFSCC
         * @property {commonmodule.IControlFSCC|null} [controlFSCC] SolarControlFSCC controlFSCC
         * @property {solarmodule.ISolarControlScheduleFSCH|null} [SolarControlScheduleFSCH] SolarControlFSCC SolarControlScheduleFSCH
         */

        /**
         * Constructs a new SolarControlFSCC.
         * @memberof solarmodule
         * @classdesc Represents a SolarControlFSCC.
         * @implements ISolarControlFSCC
         * @constructor
         * @param {solarmodule.ISolarControlFSCC=} [properties] Properties to set
         */
        function SolarControlFSCC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarControlFSCC controlFSCC.
         * @member {commonmodule.IControlFSCC|null|undefined} controlFSCC
         * @memberof solarmodule.SolarControlFSCC
         * @instance
         */
        SolarControlFSCC.prototype.controlFSCC = null;

        /**
         * SolarControlFSCC SolarControlScheduleFSCH.
         * @member {solarmodule.ISolarControlScheduleFSCH|null|undefined} SolarControlScheduleFSCH
         * @memberof solarmodule.SolarControlFSCC
         * @instance
         */
        SolarControlFSCC.prototype.SolarControlScheduleFSCH = null;

        /**
         * Creates a new SolarControlFSCC instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarControlFSCC
         * @static
         * @param {solarmodule.ISolarControlFSCC=} [properties] Properties to set
         * @returns {solarmodule.SolarControlFSCC} SolarControlFSCC instance
         */
        SolarControlFSCC.create = function create(properties) {
            return new SolarControlFSCC(properties);
        };

        /**
         * Encodes the specified SolarControlFSCC message. Does not implicitly {@link solarmodule.SolarControlFSCC.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarControlFSCC
         * @static
         * @param {solarmodule.ISolarControlFSCC} message SolarControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarControlFSCC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlFSCC != null && Object.hasOwnProperty.call(message, "controlFSCC"))
                $root.commonmodule.ControlFSCC.encode(message.controlFSCC, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.SolarControlScheduleFSCH != null && Object.hasOwnProperty.call(message, "SolarControlScheduleFSCH"))
                $root.solarmodule.SolarControlScheduleFSCH.encode(message.SolarControlScheduleFSCH, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarControlFSCC message, length delimited. Does not implicitly {@link solarmodule.SolarControlFSCC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarControlFSCC
         * @static
         * @param {solarmodule.ISolarControlFSCC} message SolarControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarControlFSCC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarControlFSCC message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarControlFSCC} SolarControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarControlFSCC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarControlFSCC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlFSCC = $root.commonmodule.ControlFSCC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.SolarControlScheduleFSCH = $root.solarmodule.SolarControlScheduleFSCH.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarControlFSCC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarControlFSCC} SolarControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarControlFSCC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarControlFSCC message.
         * @function verify
         * @memberof solarmodule.SolarControlFSCC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarControlFSCC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlFSCC != null && message.hasOwnProperty("controlFSCC")) {
                var error = $root.commonmodule.ControlFSCC.verify(message.controlFSCC);
                if (error)
                    return "controlFSCC." + error;
            }
            if (message.SolarControlScheduleFSCH != null && message.hasOwnProperty("SolarControlScheduleFSCH")) {
                var error = $root.solarmodule.SolarControlScheduleFSCH.verify(message.SolarControlScheduleFSCH);
                if (error)
                    return "SolarControlScheduleFSCH." + error;
            }
            return null;
        };

        /**
         * Creates a SolarControlFSCC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarControlFSCC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarControlFSCC} SolarControlFSCC
         */
        SolarControlFSCC.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarControlFSCC)
                return object;
            var message = new $root.solarmodule.SolarControlFSCC();
            if (object.controlFSCC != null) {
                if (typeof object.controlFSCC !== "object")
                    throw TypeError(".solarmodule.SolarControlFSCC.controlFSCC: object expected");
                message.controlFSCC = $root.commonmodule.ControlFSCC.fromObject(object.controlFSCC);
            }
            if (object.SolarControlScheduleFSCH != null) {
                if (typeof object.SolarControlScheduleFSCH !== "object")
                    throw TypeError(".solarmodule.SolarControlFSCC.SolarControlScheduleFSCH: object expected");
                message.SolarControlScheduleFSCH = $root.solarmodule.SolarControlScheduleFSCH.fromObject(object.SolarControlScheduleFSCH);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarControlFSCC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarControlFSCC
         * @static
         * @param {solarmodule.SolarControlFSCC} message SolarControlFSCC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarControlFSCC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlFSCC = null;
                object.SolarControlScheduleFSCH = null;
            }
            if (message.controlFSCC != null && message.hasOwnProperty("controlFSCC"))
                object.controlFSCC = $root.commonmodule.ControlFSCC.toObject(message.controlFSCC, options);
            if (message.SolarControlScheduleFSCH != null && message.hasOwnProperty("SolarControlScheduleFSCH"))
                object.SolarControlScheduleFSCH = $root.solarmodule.SolarControlScheduleFSCH.toObject(message.SolarControlScheduleFSCH, options);
            return object;
        };

        /**
         * Converts this SolarControlFSCC to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarControlFSCC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarControlFSCC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarControlFSCC;
    })();

    solarmodule.SolarControl = (function() {

        /**
         * Properties of a SolarControl.
         * @memberof solarmodule
         * @interface ISolarControl
         * @property {commonmodule.IControlValue|null} [controlValue] SolarControl controlValue
         * @property {commonmodule.ICheckConditions|null} [check] SolarControl check
         * @property {solarmodule.ISolarControlFSCC|null} [solarControlFSCC] SolarControl solarControlFSCC
         */

        /**
         * Constructs a new SolarControl.
         * @memberof solarmodule
         * @classdesc Represents a SolarControl.
         * @implements ISolarControl
         * @constructor
         * @param {solarmodule.ISolarControl=} [properties] Properties to set
         */
        function SolarControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarControl controlValue.
         * @member {commonmodule.IControlValue|null|undefined} controlValue
         * @memberof solarmodule.SolarControl
         * @instance
         */
        SolarControl.prototype.controlValue = null;

        /**
         * SolarControl check.
         * @member {commonmodule.ICheckConditions|null|undefined} check
         * @memberof solarmodule.SolarControl
         * @instance
         */
        SolarControl.prototype.check = null;

        /**
         * SolarControl solarControlFSCC.
         * @member {solarmodule.ISolarControlFSCC|null|undefined} solarControlFSCC
         * @memberof solarmodule.SolarControl
         * @instance
         */
        SolarControl.prototype.solarControlFSCC = null;

        /**
         * Creates a new SolarControl instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarControl
         * @static
         * @param {solarmodule.ISolarControl=} [properties] Properties to set
         * @returns {solarmodule.SolarControl} SolarControl instance
         */
        SolarControl.create = function create(properties) {
            return new SolarControl(properties);
        };

        /**
         * Encodes the specified SolarControl message. Does not implicitly {@link solarmodule.SolarControl.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarControl
         * @static
         * @param {solarmodule.ISolarControl} message SolarControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlValue != null && Object.hasOwnProperty.call(message, "controlValue"))
                $root.commonmodule.ControlValue.encode(message.controlValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.check != null && Object.hasOwnProperty.call(message, "check"))
                $root.commonmodule.CheckConditions.encode(message.check, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.solarControlFSCC != null && Object.hasOwnProperty.call(message, "solarControlFSCC"))
                $root.solarmodule.SolarControlFSCC.encode(message.solarControlFSCC, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarControl message, length delimited. Does not implicitly {@link solarmodule.SolarControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarControl
         * @static
         * @param {solarmodule.ISolarControl} message SolarControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarControl message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarControl} SolarControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlValue = $root.commonmodule.ControlValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.check = $root.commonmodule.CheckConditions.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.solarControlFSCC = $root.solarmodule.SolarControlFSCC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarControl} SolarControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarControl message.
         * @function verify
         * @memberof solarmodule.SolarControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlValue != null && message.hasOwnProperty("controlValue")) {
                var error = $root.commonmodule.ControlValue.verify(message.controlValue);
                if (error)
                    return "controlValue." + error;
            }
            if (message.check != null && message.hasOwnProperty("check")) {
                var error = $root.commonmodule.CheckConditions.verify(message.check);
                if (error)
                    return "check." + error;
            }
            if (message.solarControlFSCC != null && message.hasOwnProperty("solarControlFSCC")) {
                var error = $root.solarmodule.SolarControlFSCC.verify(message.solarControlFSCC);
                if (error)
                    return "solarControlFSCC." + error;
            }
            return null;
        };

        /**
         * Creates a SolarControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarControl} SolarControl
         */
        SolarControl.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarControl)
                return object;
            var message = new $root.solarmodule.SolarControl();
            if (object.controlValue != null) {
                if (typeof object.controlValue !== "object")
                    throw TypeError(".solarmodule.SolarControl.controlValue: object expected");
                message.controlValue = $root.commonmodule.ControlValue.fromObject(object.controlValue);
            }
            if (object.check != null) {
                if (typeof object.check !== "object")
                    throw TypeError(".solarmodule.SolarControl.check: object expected");
                message.check = $root.commonmodule.CheckConditions.fromObject(object.check);
            }
            if (object.solarControlFSCC != null) {
                if (typeof object.solarControlFSCC !== "object")
                    throw TypeError(".solarmodule.SolarControl.solarControlFSCC: object expected");
                message.solarControlFSCC = $root.solarmodule.SolarControlFSCC.fromObject(object.solarControlFSCC);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarControl
         * @static
         * @param {solarmodule.SolarControl} message SolarControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlValue = null;
                object.check = null;
                object.solarControlFSCC = null;
            }
            if (message.controlValue != null && message.hasOwnProperty("controlValue"))
                object.controlValue = $root.commonmodule.ControlValue.toObject(message.controlValue, options);
            if (message.check != null && message.hasOwnProperty("check"))
                object.check = $root.commonmodule.CheckConditions.toObject(message.check, options);
            if (message.solarControlFSCC != null && message.hasOwnProperty("solarControlFSCC"))
                object.solarControlFSCC = $root.solarmodule.SolarControlFSCC.toObject(message.solarControlFSCC, options);
            return object;
        };

        /**
         * Converts this SolarControl to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarControl;
    })();

    solarmodule.SolarInverter = (function() {

        /**
         * Properties of a SolarInverter.
         * @memberof solarmodule
         * @interface ISolarInverter
         * @property {commonmodule.IConductingEquipment|null} [conductingEquipment] SolarInverter conductingEquipment
         */

        /**
         * Constructs a new SolarInverter.
         * @memberof solarmodule
         * @classdesc Represents a SolarInverter.
         * @implements ISolarInverter
         * @constructor
         * @param {solarmodule.ISolarInverter=} [properties] Properties to set
         */
        function SolarInverter(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarInverter conductingEquipment.
         * @member {commonmodule.IConductingEquipment|null|undefined} conductingEquipment
         * @memberof solarmodule.SolarInverter
         * @instance
         */
        SolarInverter.prototype.conductingEquipment = null;

        /**
         * Creates a new SolarInverter instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarInverter
         * @static
         * @param {solarmodule.ISolarInverter=} [properties] Properties to set
         * @returns {solarmodule.SolarInverter} SolarInverter instance
         */
        SolarInverter.create = function create(properties) {
            return new SolarInverter(properties);
        };

        /**
         * Encodes the specified SolarInverter message. Does not implicitly {@link solarmodule.SolarInverter.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarInverter
         * @static
         * @param {solarmodule.ISolarInverter} message SolarInverter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarInverter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipment != null && Object.hasOwnProperty.call(message, "conductingEquipment"))
                $root.commonmodule.ConductingEquipment.encode(message.conductingEquipment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarInverter message, length delimited. Does not implicitly {@link solarmodule.SolarInverter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarInverter
         * @static
         * @param {solarmodule.ISolarInverter} message SolarInverter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarInverter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarInverter message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarInverter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarInverter} SolarInverter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarInverter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarInverter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipment = $root.commonmodule.ConductingEquipment.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarInverter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarInverter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarInverter} SolarInverter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarInverter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarInverter message.
         * @function verify
         * @memberof solarmodule.SolarInverter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarInverter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment")) {
                var error = $root.commonmodule.ConductingEquipment.verify(message.conductingEquipment);
                if (error)
                    return "conductingEquipment." + error;
            }
            return null;
        };

        /**
         * Creates a SolarInverter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarInverter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarInverter} SolarInverter
         */
        SolarInverter.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarInverter)
                return object;
            var message = new $root.solarmodule.SolarInverter();
            if (object.conductingEquipment != null) {
                if (typeof object.conductingEquipment !== "object")
                    throw TypeError(".solarmodule.SolarInverter.conductingEquipment: object expected");
                message.conductingEquipment = $root.commonmodule.ConductingEquipment.fromObject(object.conductingEquipment);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarInverter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarInverter
         * @static
         * @param {solarmodule.SolarInverter} message SolarInverter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarInverter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.conductingEquipment = null;
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment"))
                object.conductingEquipment = $root.commonmodule.ConductingEquipment.toObject(message.conductingEquipment, options);
            return object;
        };

        /**
         * Converts this SolarInverter to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarInverter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarInverter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarInverter;
    })();

    solarmodule.SolarControlProfile = (function() {

        /**
         * Properties of a SolarControlProfile.
         * @memberof solarmodule
         * @interface ISolarControlProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] SolarControlProfile controlMessageInfo
         * @property {commonmodule.IIED|null} [ied] SolarControlProfile ied
         * @property {solarmodule.ISolarControl|null} [solarControl] SolarControlProfile solarControl
         * @property {solarmodule.ISolarInverter|null} [solarInverter] SolarControlProfile solarInverter
         */

        /**
         * Constructs a new SolarControlProfile.
         * @memberof solarmodule
         * @classdesc Represents a SolarControlProfile.
         * @implements ISolarControlProfile
         * @constructor
         * @param {solarmodule.ISolarControlProfile=} [properties] Properties to set
         */
        function SolarControlProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarControlProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof solarmodule.SolarControlProfile
         * @instance
         */
        SolarControlProfile.prototype.controlMessageInfo = null;

        /**
         * SolarControlProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof solarmodule.SolarControlProfile
         * @instance
         */
        SolarControlProfile.prototype.ied = null;

        /**
         * SolarControlProfile solarControl.
         * @member {solarmodule.ISolarControl|null|undefined} solarControl
         * @memberof solarmodule.SolarControlProfile
         * @instance
         */
        SolarControlProfile.prototype.solarControl = null;

        /**
         * SolarControlProfile solarInverter.
         * @member {solarmodule.ISolarInverter|null|undefined} solarInverter
         * @memberof solarmodule.SolarControlProfile
         * @instance
         */
        SolarControlProfile.prototype.solarInverter = null;

        /**
         * Creates a new SolarControlProfile instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarControlProfile
         * @static
         * @param {solarmodule.ISolarControlProfile=} [properties] Properties to set
         * @returns {solarmodule.SolarControlProfile} SolarControlProfile instance
         */
        SolarControlProfile.create = function create(properties) {
            return new SolarControlProfile(properties);
        };

        /**
         * Encodes the specified SolarControlProfile message. Does not implicitly {@link solarmodule.SolarControlProfile.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarControlProfile
         * @static
         * @param {solarmodule.ISolarControlProfile} message SolarControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarControlProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.solarControl != null && Object.hasOwnProperty.call(message, "solarControl"))
                $root.solarmodule.SolarControl.encode(message.solarControl, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.solarInverter != null && Object.hasOwnProperty.call(message, "solarInverter"))
                $root.solarmodule.SolarInverter.encode(message.solarInverter, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarControlProfile message, length delimited. Does not implicitly {@link solarmodule.SolarControlProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarControlProfile
         * @static
         * @param {solarmodule.ISolarControlProfile} message SolarControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarControlProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarControlProfile message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarControlProfile} SolarControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarControlProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarControlProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.solarControl = $root.solarmodule.SolarControl.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.solarInverter = $root.solarmodule.SolarInverter.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarControlProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarControlProfile} SolarControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarControlProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarControlProfile message.
         * @function verify
         * @memberof solarmodule.SolarControlProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarControlProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.solarControl != null && message.hasOwnProperty("solarControl")) {
                var error = $root.solarmodule.SolarControl.verify(message.solarControl);
                if (error)
                    return "solarControl." + error;
            }
            if (message.solarInverter != null && message.hasOwnProperty("solarInverter")) {
                var error = $root.solarmodule.SolarInverter.verify(message.solarInverter);
                if (error)
                    return "solarInverter." + error;
            }
            return null;
        };

        /**
         * Creates a SolarControlProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarControlProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarControlProfile} SolarControlProfile
         */
        SolarControlProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarControlProfile)
                return object;
            var message = new $root.solarmodule.SolarControlProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".solarmodule.SolarControlProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".solarmodule.SolarControlProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.solarControl != null) {
                if (typeof object.solarControl !== "object")
                    throw TypeError(".solarmodule.SolarControlProfile.solarControl: object expected");
                message.solarControl = $root.solarmodule.SolarControl.fromObject(object.solarControl);
            }
            if (object.solarInverter != null) {
                if (typeof object.solarInverter !== "object")
                    throw TypeError(".solarmodule.SolarControlProfile.solarInverter: object expected");
                message.solarInverter = $root.solarmodule.SolarInverter.fromObject(object.solarInverter);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarControlProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarControlProfile
         * @static
         * @param {solarmodule.SolarControlProfile} message SolarControlProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarControlProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.ied = null;
                object.solarControl = null;
                object.solarInverter = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.solarControl != null && message.hasOwnProperty("solarControl"))
                object.solarControl = $root.solarmodule.SolarControl.toObject(message.solarControl, options);
            if (message.solarInverter != null && message.hasOwnProperty("solarInverter"))
                object.solarInverter = $root.solarmodule.SolarInverter.toObject(message.solarInverter, options);
            return object;
        };

        /**
         * Converts this SolarControlProfile to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarControlProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarControlProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarControlProfile;
    })();

    solarmodule.SolarPointStatus = (function() {

        /**
         * Properties of a SolarPointStatus.
         * @memberof solarmodule
         * @interface ISolarPointStatus
         * @property {commonmodule.IControlDPC|null} [frequencySetPointEnabled] SolarPointStatus frequencySetPointEnabled
         * @property {commonmodule.IENG_GridConnectModeKind|null} [mode] SolarPointStatus mode
         * @property {google.protobuf.IFloatValue|null} [pctHzDroop] SolarPointStatus pctHzDroop
         * @property {google.protobuf.IFloatValue|null} [pctVDroop] SolarPointStatus pctVDroop
         * @property {commonmodule.IRampRate|null} [rampRates] SolarPointStatus rampRates
         * @property {commonmodule.IControlDPC|null} [reactivePwrSetPointEnabled] SolarPointStatus reactivePwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [realPwrSetPointEnabled] SolarPointStatus realPwrSetPointEnabled
         * @property {commonmodule.IOptional_StateKind|null} [state] SolarPointStatus state
         * @property {commonmodule.IControlDPC|null} [voltageSetPointEnabled] SolarPointStatus voltageSetPointEnabled
         */

        /**
         * Constructs a new SolarPointStatus.
         * @memberof solarmodule
         * @classdesc Represents a SolarPointStatus.
         * @implements ISolarPointStatus
         * @constructor
         * @param {solarmodule.ISolarPointStatus=} [properties] Properties to set
         */
        function SolarPointStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarPointStatus frequencySetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} frequencySetPointEnabled
         * @memberof solarmodule.SolarPointStatus
         * @instance
         */
        SolarPointStatus.prototype.frequencySetPointEnabled = null;

        /**
         * SolarPointStatus mode.
         * @member {commonmodule.IENG_GridConnectModeKind|null|undefined} mode
         * @memberof solarmodule.SolarPointStatus
         * @instance
         */
        SolarPointStatus.prototype.mode = null;

        /**
         * SolarPointStatus pctHzDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctHzDroop
         * @memberof solarmodule.SolarPointStatus
         * @instance
         */
        SolarPointStatus.prototype.pctHzDroop = null;

        /**
         * SolarPointStatus pctVDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctVDroop
         * @memberof solarmodule.SolarPointStatus
         * @instance
         */
        SolarPointStatus.prototype.pctVDroop = null;

        /**
         * SolarPointStatus rampRates.
         * @member {commonmodule.IRampRate|null|undefined} rampRates
         * @memberof solarmodule.SolarPointStatus
         * @instance
         */
        SolarPointStatus.prototype.rampRates = null;

        /**
         * SolarPointStatus reactivePwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} reactivePwrSetPointEnabled
         * @memberof solarmodule.SolarPointStatus
         * @instance
         */
        SolarPointStatus.prototype.reactivePwrSetPointEnabled = null;

        /**
         * SolarPointStatus realPwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} realPwrSetPointEnabled
         * @memberof solarmodule.SolarPointStatus
         * @instance
         */
        SolarPointStatus.prototype.realPwrSetPointEnabled = null;

        /**
         * SolarPointStatus state.
         * @member {commonmodule.IOptional_StateKind|null|undefined} state
         * @memberof solarmodule.SolarPointStatus
         * @instance
         */
        SolarPointStatus.prototype.state = null;

        /**
         * SolarPointStatus voltageSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} voltageSetPointEnabled
         * @memberof solarmodule.SolarPointStatus
         * @instance
         */
        SolarPointStatus.prototype.voltageSetPointEnabled = null;

        /**
         * Creates a new SolarPointStatus instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarPointStatus
         * @static
         * @param {solarmodule.ISolarPointStatus=} [properties] Properties to set
         * @returns {solarmodule.SolarPointStatus} SolarPointStatus instance
         */
        SolarPointStatus.create = function create(properties) {
            return new SolarPointStatus(properties);
        };

        /**
         * Encodes the specified SolarPointStatus message. Does not implicitly {@link solarmodule.SolarPointStatus.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarPointStatus
         * @static
         * @param {solarmodule.ISolarPointStatus} message SolarPointStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarPointStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.frequencySetPointEnabled != null && Object.hasOwnProperty.call(message, "frequencySetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.frequencySetPointEnabled, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
                $root.commonmodule.ENG_GridConnectModeKind.encode(message.mode, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.pctHzDroop != null && Object.hasOwnProperty.call(message, "pctHzDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctHzDroop, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.pctVDroop != null && Object.hasOwnProperty.call(message, "pctVDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctVDroop, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.rampRates != null && Object.hasOwnProperty.call(message, "rampRates"))
                $root.commonmodule.RampRate.encode(message.rampRates, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.reactivePwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "reactivePwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.reactivePwrSetPointEnabled, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.realPwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "realPwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.realPwrSetPointEnabled, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                $root.commonmodule.Optional_StateKind.encode(message.state, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.voltageSetPointEnabled != null && Object.hasOwnProperty.call(message, "voltageSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.voltageSetPointEnabled, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarPointStatus message, length delimited. Does not implicitly {@link solarmodule.SolarPointStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarPointStatus
         * @static
         * @param {solarmodule.ISolarPointStatus} message SolarPointStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarPointStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarPointStatus message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarPointStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarPointStatus} SolarPointStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarPointStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarPointStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.frequencySetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.mode = $root.commonmodule.ENG_GridConnectModeKind.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.pctHzDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.pctVDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.rampRates = $root.commonmodule.RampRate.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.state = $root.commonmodule.Optional_StateKind.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarPointStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarPointStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarPointStatus} SolarPointStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarPointStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarPointStatus message.
         * @function verify
         * @memberof solarmodule.SolarPointStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarPointStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.frequencySetPointEnabled != null && message.hasOwnProperty("frequencySetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.frequencySetPointEnabled);
                if (error)
                    return "frequencySetPointEnabled." + error;
            }
            if (message.mode != null && message.hasOwnProperty("mode")) {
                var error = $root.commonmodule.ENG_GridConnectModeKind.verify(message.mode);
                if (error)
                    return "mode." + error;
            }
            if (message.pctHzDroop != null && message.hasOwnProperty("pctHzDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctHzDroop);
                if (error)
                    return "pctHzDroop." + error;
            }
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctVDroop);
                if (error)
                    return "pctVDroop." + error;
            }
            if (message.rampRates != null && message.hasOwnProperty("rampRates")) {
                var error = $root.commonmodule.RampRate.verify(message.rampRates);
                if (error)
                    return "rampRates." + error;
            }
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reactivePwrSetPointEnabled);
                if (error)
                    return "reactivePwrSetPointEnabled." + error;
            }
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.realPwrSetPointEnabled);
                if (error)
                    return "realPwrSetPointEnabled." + error;
            }
            if (message.state != null && message.hasOwnProperty("state")) {
                var error = $root.commonmodule.Optional_StateKind.verify(message.state);
                if (error)
                    return "state." + error;
            }
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.voltageSetPointEnabled);
                if (error)
                    return "voltageSetPointEnabled." + error;
            }
            return null;
        };

        /**
         * Creates a SolarPointStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarPointStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarPointStatus} SolarPointStatus
         */
        SolarPointStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarPointStatus)
                return object;
            var message = new $root.solarmodule.SolarPointStatus();
            if (object.frequencySetPointEnabled != null) {
                if (typeof object.frequencySetPointEnabled !== "object")
                    throw TypeError(".solarmodule.SolarPointStatus.frequencySetPointEnabled: object expected");
                message.frequencySetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.frequencySetPointEnabled);
            }
            if (object.mode != null) {
                if (typeof object.mode !== "object")
                    throw TypeError(".solarmodule.SolarPointStatus.mode: object expected");
                message.mode = $root.commonmodule.ENG_GridConnectModeKind.fromObject(object.mode);
            }
            if (object.pctHzDroop != null) {
                if (typeof object.pctHzDroop !== "object")
                    throw TypeError(".solarmodule.SolarPointStatus.pctHzDroop: object expected");
                message.pctHzDroop = $root.google.protobuf.FloatValue.fromObject(object.pctHzDroop);
            }
            if (object.pctVDroop != null) {
                if (typeof object.pctVDroop !== "object")
                    throw TypeError(".solarmodule.SolarPointStatus.pctVDroop: object expected");
                message.pctVDroop = $root.google.protobuf.FloatValue.fromObject(object.pctVDroop);
            }
            if (object.rampRates != null) {
                if (typeof object.rampRates !== "object")
                    throw TypeError(".solarmodule.SolarPointStatus.rampRates: object expected");
                message.rampRates = $root.commonmodule.RampRate.fromObject(object.rampRates);
            }
            if (object.reactivePwrSetPointEnabled != null) {
                if (typeof object.reactivePwrSetPointEnabled !== "object")
                    throw TypeError(".solarmodule.SolarPointStatus.reactivePwrSetPointEnabled: object expected");
                message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.reactivePwrSetPointEnabled);
            }
            if (object.realPwrSetPointEnabled != null) {
                if (typeof object.realPwrSetPointEnabled !== "object")
                    throw TypeError(".solarmodule.SolarPointStatus.realPwrSetPointEnabled: object expected");
                message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.realPwrSetPointEnabled);
            }
            if (object.state != null) {
                if (typeof object.state !== "object")
                    throw TypeError(".solarmodule.SolarPointStatus.state: object expected");
                message.state = $root.commonmodule.Optional_StateKind.fromObject(object.state);
            }
            if (object.voltageSetPointEnabled != null) {
                if (typeof object.voltageSetPointEnabled !== "object")
                    throw TypeError(".solarmodule.SolarPointStatus.voltageSetPointEnabled: object expected");
                message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.voltageSetPointEnabled);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarPointStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarPointStatus
         * @static
         * @param {solarmodule.SolarPointStatus} message SolarPointStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarPointStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.frequencySetPointEnabled = null;
                object.mode = null;
                object.pctHzDroop = null;
                object.pctVDroop = null;
                object.rampRates = null;
                object.reactivePwrSetPointEnabled = null;
                object.realPwrSetPointEnabled = null;
                object.state = null;
                object.voltageSetPointEnabled = null;
            }
            if (message.frequencySetPointEnabled != null && message.hasOwnProperty("frequencySetPointEnabled"))
                object.frequencySetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.frequencySetPointEnabled, options);
            if (message.mode != null && message.hasOwnProperty("mode"))
                object.mode = $root.commonmodule.ENG_GridConnectModeKind.toObject(message.mode, options);
            if (message.pctHzDroop != null && message.hasOwnProperty("pctHzDroop"))
                object.pctHzDroop = $root.google.protobuf.FloatValue.toObject(message.pctHzDroop, options);
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop"))
                object.pctVDroop = $root.google.protobuf.FloatValue.toObject(message.pctVDroop, options);
            if (message.rampRates != null && message.hasOwnProperty("rampRates"))
                object.rampRates = $root.commonmodule.RampRate.toObject(message.rampRates, options);
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled"))
                object.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.reactivePwrSetPointEnabled, options);
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled"))
                object.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.realPwrSetPointEnabled, options);
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = $root.commonmodule.Optional_StateKind.toObject(message.state, options);
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled"))
                object.voltageSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.voltageSetPointEnabled, options);
            return object;
        };

        /**
         * Converts this SolarPointStatus to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarPointStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarPointStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarPointStatus;
    })();

    solarmodule.SolarEventAndStatusZGEN = (function() {

        /**
         * Properties of a SolarEventAndStatusZGEN.
         * @memberof solarmodule
         * @interface ISolarEventAndStatusZGEN
         * @property {commonmodule.ILogicalNodeForEventAndStatus|null} [logicalNodeForEventAndStatus] SolarEventAndStatusZGEN logicalNodeForEventAndStatus
         * @property {commonmodule.IStatusSPS|null} [AuxPwrSt] SolarEventAndStatusZGEN AuxPwrSt
         * @property {commonmodule.IENS_DynamicTestKind|null} [DynamicTest] SolarEventAndStatusZGEN DynamicTest
         * @property {commonmodule.IStatusSPS|null} [EmgStop] SolarEventAndStatusZGEN EmgStop
         * @property {solarmodule.ISolarPointStatus|null} [PointStatus] SolarEventAndStatusZGEN PointStatus
         */

        /**
         * Constructs a new SolarEventAndStatusZGEN.
         * @memberof solarmodule
         * @classdesc Represents a SolarEventAndStatusZGEN.
         * @implements ISolarEventAndStatusZGEN
         * @constructor
         * @param {solarmodule.ISolarEventAndStatusZGEN=} [properties] Properties to set
         */
        function SolarEventAndStatusZGEN(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarEventAndStatusZGEN logicalNodeForEventAndStatus.
         * @member {commonmodule.ILogicalNodeForEventAndStatus|null|undefined} logicalNodeForEventAndStatus
         * @memberof solarmodule.SolarEventAndStatusZGEN
         * @instance
         */
        SolarEventAndStatusZGEN.prototype.logicalNodeForEventAndStatus = null;

        /**
         * SolarEventAndStatusZGEN AuxPwrSt.
         * @member {commonmodule.IStatusSPS|null|undefined} AuxPwrSt
         * @memberof solarmodule.SolarEventAndStatusZGEN
         * @instance
         */
        SolarEventAndStatusZGEN.prototype.AuxPwrSt = null;

        /**
         * SolarEventAndStatusZGEN DynamicTest.
         * @member {commonmodule.IENS_DynamicTestKind|null|undefined} DynamicTest
         * @memberof solarmodule.SolarEventAndStatusZGEN
         * @instance
         */
        SolarEventAndStatusZGEN.prototype.DynamicTest = null;

        /**
         * SolarEventAndStatusZGEN EmgStop.
         * @member {commonmodule.IStatusSPS|null|undefined} EmgStop
         * @memberof solarmodule.SolarEventAndStatusZGEN
         * @instance
         */
        SolarEventAndStatusZGEN.prototype.EmgStop = null;

        /**
         * SolarEventAndStatusZGEN PointStatus.
         * @member {solarmodule.ISolarPointStatus|null|undefined} PointStatus
         * @memberof solarmodule.SolarEventAndStatusZGEN
         * @instance
         */
        SolarEventAndStatusZGEN.prototype.PointStatus = null;

        /**
         * Creates a new SolarEventAndStatusZGEN instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarEventAndStatusZGEN
         * @static
         * @param {solarmodule.ISolarEventAndStatusZGEN=} [properties] Properties to set
         * @returns {solarmodule.SolarEventAndStatusZGEN} SolarEventAndStatusZGEN instance
         */
        SolarEventAndStatusZGEN.create = function create(properties) {
            return new SolarEventAndStatusZGEN(properties);
        };

        /**
         * Encodes the specified SolarEventAndStatusZGEN message. Does not implicitly {@link solarmodule.SolarEventAndStatusZGEN.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarEventAndStatusZGEN
         * @static
         * @param {solarmodule.ISolarEventAndStatusZGEN} message SolarEventAndStatusZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarEventAndStatusZGEN.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForEventAndStatus != null && Object.hasOwnProperty.call(message, "logicalNodeForEventAndStatus"))
                $root.commonmodule.LogicalNodeForEventAndStatus.encode(message.logicalNodeForEventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.AuxPwrSt != null && Object.hasOwnProperty.call(message, "AuxPwrSt"))
                $root.commonmodule.StatusSPS.encode(message.AuxPwrSt, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.DynamicTest != null && Object.hasOwnProperty.call(message, "DynamicTest"))
                $root.commonmodule.ENS_DynamicTestKind.encode(message.DynamicTest, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.EmgStop != null && Object.hasOwnProperty.call(message, "EmgStop"))
                $root.commonmodule.StatusSPS.encode(message.EmgStop, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.PointStatus != null && Object.hasOwnProperty.call(message, "PointStatus"))
                $root.solarmodule.SolarPointStatus.encode(message.PointStatus, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarEventAndStatusZGEN message, length delimited. Does not implicitly {@link solarmodule.SolarEventAndStatusZGEN.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarEventAndStatusZGEN
         * @static
         * @param {solarmodule.ISolarEventAndStatusZGEN} message SolarEventAndStatusZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarEventAndStatusZGEN.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarEventAndStatusZGEN message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarEventAndStatusZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarEventAndStatusZGEN} SolarEventAndStatusZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarEventAndStatusZGEN.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarEventAndStatusZGEN();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.AuxPwrSt = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.EmgStop = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.PointStatus = $root.solarmodule.SolarPointStatus.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarEventAndStatusZGEN message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarEventAndStatusZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarEventAndStatusZGEN} SolarEventAndStatusZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarEventAndStatusZGEN.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarEventAndStatusZGEN message.
         * @function verify
         * @memberof solarmodule.SolarEventAndStatusZGEN
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarEventAndStatusZGEN.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus")) {
                var error = $root.commonmodule.LogicalNodeForEventAndStatus.verify(message.logicalNodeForEventAndStatus);
                if (error)
                    return "logicalNodeForEventAndStatus." + error;
            }
            if (message.AuxPwrSt != null && message.hasOwnProperty("AuxPwrSt")) {
                var error = $root.commonmodule.StatusSPS.verify(message.AuxPwrSt);
                if (error)
                    return "AuxPwrSt." + error;
            }
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest")) {
                var error = $root.commonmodule.ENS_DynamicTestKind.verify(message.DynamicTest);
                if (error)
                    return "DynamicTest." + error;
            }
            if (message.EmgStop != null && message.hasOwnProperty("EmgStop")) {
                var error = $root.commonmodule.StatusSPS.verify(message.EmgStop);
                if (error)
                    return "EmgStop." + error;
            }
            if (message.PointStatus != null && message.hasOwnProperty("PointStatus")) {
                var error = $root.solarmodule.SolarPointStatus.verify(message.PointStatus);
                if (error)
                    return "PointStatus." + error;
            }
            return null;
        };

        /**
         * Creates a SolarEventAndStatusZGEN message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarEventAndStatusZGEN
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarEventAndStatusZGEN} SolarEventAndStatusZGEN
         */
        SolarEventAndStatusZGEN.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarEventAndStatusZGEN)
                return object;
            var message = new $root.solarmodule.SolarEventAndStatusZGEN();
            if (object.logicalNodeForEventAndStatus != null) {
                if (typeof object.logicalNodeForEventAndStatus !== "object")
                    throw TypeError(".solarmodule.SolarEventAndStatusZGEN.logicalNodeForEventAndStatus: object expected");
                message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.fromObject(object.logicalNodeForEventAndStatus);
            }
            if (object.AuxPwrSt != null) {
                if (typeof object.AuxPwrSt !== "object")
                    throw TypeError(".solarmodule.SolarEventAndStatusZGEN.AuxPwrSt: object expected");
                message.AuxPwrSt = $root.commonmodule.StatusSPS.fromObject(object.AuxPwrSt);
            }
            if (object.DynamicTest != null) {
                if (typeof object.DynamicTest !== "object")
                    throw TypeError(".solarmodule.SolarEventAndStatusZGEN.DynamicTest: object expected");
                message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.fromObject(object.DynamicTest);
            }
            if (object.EmgStop != null) {
                if (typeof object.EmgStop !== "object")
                    throw TypeError(".solarmodule.SolarEventAndStatusZGEN.EmgStop: object expected");
                message.EmgStop = $root.commonmodule.StatusSPS.fromObject(object.EmgStop);
            }
            if (object.PointStatus != null) {
                if (typeof object.PointStatus !== "object")
                    throw TypeError(".solarmodule.SolarEventAndStatusZGEN.PointStatus: object expected");
                message.PointStatus = $root.solarmodule.SolarPointStatus.fromObject(object.PointStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarEventAndStatusZGEN message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarEventAndStatusZGEN
         * @static
         * @param {solarmodule.SolarEventAndStatusZGEN} message SolarEventAndStatusZGEN
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarEventAndStatusZGEN.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForEventAndStatus = null;
                object.AuxPwrSt = null;
                object.DynamicTest = null;
                object.EmgStop = null;
                object.PointStatus = null;
            }
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus"))
                object.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.toObject(message.logicalNodeForEventAndStatus, options);
            if (message.AuxPwrSt != null && message.hasOwnProperty("AuxPwrSt"))
                object.AuxPwrSt = $root.commonmodule.StatusSPS.toObject(message.AuxPwrSt, options);
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest"))
                object.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.toObject(message.DynamicTest, options);
            if (message.EmgStop != null && message.hasOwnProperty("EmgStop"))
                object.EmgStop = $root.commonmodule.StatusSPS.toObject(message.EmgStop, options);
            if (message.PointStatus != null && message.hasOwnProperty("PointStatus"))
                object.PointStatus = $root.solarmodule.SolarPointStatus.toObject(message.PointStatus, options);
            return object;
        };

        /**
         * Converts this SolarEventAndStatusZGEN to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarEventAndStatusZGEN
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarEventAndStatusZGEN.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarEventAndStatusZGEN;
    })();

    solarmodule.SolarEventZGEN = (function() {

        /**
         * Properties of a SolarEventZGEN.
         * @memberof solarmodule
         * @interface ISolarEventZGEN
         * @property {solarmodule.ISolarEventAndStatusZGEN|null} [solarEventAndStatusZGEN] SolarEventZGEN solarEventAndStatusZGEN
         * @property {commonmodule.IENG_GridConnectModeKind|null} [GriMod] SolarEventZGEN GriMod
         */

        /**
         * Constructs a new SolarEventZGEN.
         * @memberof solarmodule
         * @classdesc Represents a SolarEventZGEN.
         * @implements ISolarEventZGEN
         * @constructor
         * @param {solarmodule.ISolarEventZGEN=} [properties] Properties to set
         */
        function SolarEventZGEN(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarEventZGEN solarEventAndStatusZGEN.
         * @member {solarmodule.ISolarEventAndStatusZGEN|null|undefined} solarEventAndStatusZGEN
         * @memberof solarmodule.SolarEventZGEN
         * @instance
         */
        SolarEventZGEN.prototype.solarEventAndStatusZGEN = null;

        /**
         * SolarEventZGEN GriMod.
         * @member {commonmodule.IENG_GridConnectModeKind|null|undefined} GriMod
         * @memberof solarmodule.SolarEventZGEN
         * @instance
         */
        SolarEventZGEN.prototype.GriMod = null;

        /**
         * Creates a new SolarEventZGEN instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarEventZGEN
         * @static
         * @param {solarmodule.ISolarEventZGEN=} [properties] Properties to set
         * @returns {solarmodule.SolarEventZGEN} SolarEventZGEN instance
         */
        SolarEventZGEN.create = function create(properties) {
            return new SolarEventZGEN(properties);
        };

        /**
         * Encodes the specified SolarEventZGEN message. Does not implicitly {@link solarmodule.SolarEventZGEN.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarEventZGEN
         * @static
         * @param {solarmodule.ISolarEventZGEN} message SolarEventZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarEventZGEN.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.solarEventAndStatusZGEN != null && Object.hasOwnProperty.call(message, "solarEventAndStatusZGEN"))
                $root.solarmodule.SolarEventAndStatusZGEN.encode(message.solarEventAndStatusZGEN, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.GriMod != null && Object.hasOwnProperty.call(message, "GriMod"))
                $root.commonmodule.ENG_GridConnectModeKind.encode(message.GriMod, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarEventZGEN message, length delimited. Does not implicitly {@link solarmodule.SolarEventZGEN.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarEventZGEN
         * @static
         * @param {solarmodule.ISolarEventZGEN} message SolarEventZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarEventZGEN.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarEventZGEN message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarEventZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarEventZGEN} SolarEventZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarEventZGEN.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarEventZGEN();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.solarEventAndStatusZGEN = $root.solarmodule.SolarEventAndStatusZGEN.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.GriMod = $root.commonmodule.ENG_GridConnectModeKind.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarEventZGEN message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarEventZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarEventZGEN} SolarEventZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarEventZGEN.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarEventZGEN message.
         * @function verify
         * @memberof solarmodule.SolarEventZGEN
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarEventZGEN.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.solarEventAndStatusZGEN != null && message.hasOwnProperty("solarEventAndStatusZGEN")) {
                var error = $root.solarmodule.SolarEventAndStatusZGEN.verify(message.solarEventAndStatusZGEN);
                if (error)
                    return "solarEventAndStatusZGEN." + error;
            }
            if (message.GriMod != null && message.hasOwnProperty("GriMod")) {
                var error = $root.commonmodule.ENG_GridConnectModeKind.verify(message.GriMod);
                if (error)
                    return "GriMod." + error;
            }
            return null;
        };

        /**
         * Creates a SolarEventZGEN message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarEventZGEN
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarEventZGEN} SolarEventZGEN
         */
        SolarEventZGEN.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarEventZGEN)
                return object;
            var message = new $root.solarmodule.SolarEventZGEN();
            if (object.solarEventAndStatusZGEN != null) {
                if (typeof object.solarEventAndStatusZGEN !== "object")
                    throw TypeError(".solarmodule.SolarEventZGEN.solarEventAndStatusZGEN: object expected");
                message.solarEventAndStatusZGEN = $root.solarmodule.SolarEventAndStatusZGEN.fromObject(object.solarEventAndStatusZGEN);
            }
            if (object.GriMod != null) {
                if (typeof object.GriMod !== "object")
                    throw TypeError(".solarmodule.SolarEventZGEN.GriMod: object expected");
                message.GriMod = $root.commonmodule.ENG_GridConnectModeKind.fromObject(object.GriMod);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarEventZGEN message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarEventZGEN
         * @static
         * @param {solarmodule.SolarEventZGEN} message SolarEventZGEN
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarEventZGEN.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.solarEventAndStatusZGEN = null;
                object.GriMod = null;
            }
            if (message.solarEventAndStatusZGEN != null && message.hasOwnProperty("solarEventAndStatusZGEN"))
                object.solarEventAndStatusZGEN = $root.solarmodule.SolarEventAndStatusZGEN.toObject(message.solarEventAndStatusZGEN, options);
            if (message.GriMod != null && message.hasOwnProperty("GriMod"))
                object.GriMod = $root.commonmodule.ENG_GridConnectModeKind.toObject(message.GriMod, options);
            return object;
        };

        /**
         * Converts this SolarEventZGEN to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarEventZGEN
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarEventZGEN.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarEventZGEN;
    })();

    solarmodule.SolarEvent = (function() {

        /**
         * Properties of a SolarEvent.
         * @memberof solarmodule
         * @interface ISolarEvent
         * @property {commonmodule.IEventValue|null} [eventValue] SolarEvent eventValue
         * @property {solarmodule.ISolarEventZGEN|null} [solarEventZGEN] SolarEvent solarEventZGEN
         */

        /**
         * Constructs a new SolarEvent.
         * @memberof solarmodule
         * @classdesc Represents a SolarEvent.
         * @implements ISolarEvent
         * @constructor
         * @param {solarmodule.ISolarEvent=} [properties] Properties to set
         */
        function SolarEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarEvent eventValue.
         * @member {commonmodule.IEventValue|null|undefined} eventValue
         * @memberof solarmodule.SolarEvent
         * @instance
         */
        SolarEvent.prototype.eventValue = null;

        /**
         * SolarEvent solarEventZGEN.
         * @member {solarmodule.ISolarEventZGEN|null|undefined} solarEventZGEN
         * @memberof solarmodule.SolarEvent
         * @instance
         */
        SolarEvent.prototype.solarEventZGEN = null;

        /**
         * Creates a new SolarEvent instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarEvent
         * @static
         * @param {solarmodule.ISolarEvent=} [properties] Properties to set
         * @returns {solarmodule.SolarEvent} SolarEvent instance
         */
        SolarEvent.create = function create(properties) {
            return new SolarEvent(properties);
        };

        /**
         * Encodes the specified SolarEvent message. Does not implicitly {@link solarmodule.SolarEvent.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarEvent
         * @static
         * @param {solarmodule.ISolarEvent} message SolarEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventValue != null && Object.hasOwnProperty.call(message, "eventValue"))
                $root.commonmodule.EventValue.encode(message.eventValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.solarEventZGEN != null && Object.hasOwnProperty.call(message, "solarEventZGEN"))
                $root.solarmodule.SolarEventZGEN.encode(message.solarEventZGEN, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarEvent message, length delimited. Does not implicitly {@link solarmodule.SolarEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarEvent
         * @static
         * @param {solarmodule.ISolarEvent} message SolarEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarEvent message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarEvent} SolarEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventValue = $root.commonmodule.EventValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.solarEventZGEN = $root.solarmodule.SolarEventZGEN.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarEvent} SolarEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarEvent message.
         * @function verify
         * @memberof solarmodule.SolarEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventValue != null && message.hasOwnProperty("eventValue")) {
                var error = $root.commonmodule.EventValue.verify(message.eventValue);
                if (error)
                    return "eventValue." + error;
            }
            if (message.solarEventZGEN != null && message.hasOwnProperty("solarEventZGEN")) {
                var error = $root.solarmodule.SolarEventZGEN.verify(message.solarEventZGEN);
                if (error)
                    return "solarEventZGEN." + error;
            }
            return null;
        };

        /**
         * Creates a SolarEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarEvent} SolarEvent
         */
        SolarEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarEvent)
                return object;
            var message = new $root.solarmodule.SolarEvent();
            if (object.eventValue != null) {
                if (typeof object.eventValue !== "object")
                    throw TypeError(".solarmodule.SolarEvent.eventValue: object expected");
                message.eventValue = $root.commonmodule.EventValue.fromObject(object.eventValue);
            }
            if (object.solarEventZGEN != null) {
                if (typeof object.solarEventZGEN !== "object")
                    throw TypeError(".solarmodule.SolarEvent.solarEventZGEN: object expected");
                message.solarEventZGEN = $root.solarmodule.SolarEventZGEN.fromObject(object.solarEventZGEN);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarEvent
         * @static
         * @param {solarmodule.SolarEvent} message SolarEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventValue = null;
                object.solarEventZGEN = null;
            }
            if (message.eventValue != null && message.hasOwnProperty("eventValue"))
                object.eventValue = $root.commonmodule.EventValue.toObject(message.eventValue, options);
            if (message.solarEventZGEN != null && message.hasOwnProperty("solarEventZGEN"))
                object.solarEventZGEN = $root.solarmodule.SolarEventZGEN.toObject(message.solarEventZGEN, options);
            return object;
        };

        /**
         * Converts this SolarEvent to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarEvent;
    })();

    solarmodule.SolarEventProfile = (function() {

        /**
         * Properties of a SolarEventProfile.
         * @memberof solarmodule
         * @interface ISolarEventProfile
         * @property {commonmodule.IEventMessageInfo|null} [eventMessageInfo] SolarEventProfile eventMessageInfo
         * @property {commonmodule.IIED|null} [ied] SolarEventProfile ied
         * @property {solarmodule.ISolarEvent|null} [solarEvent] SolarEventProfile solarEvent
         * @property {solarmodule.ISolarInverter|null} [solarInverter] SolarEventProfile solarInverter
         */

        /**
         * Constructs a new SolarEventProfile.
         * @memberof solarmodule
         * @classdesc Represents a SolarEventProfile.
         * @implements ISolarEventProfile
         * @constructor
         * @param {solarmodule.ISolarEventProfile=} [properties] Properties to set
         */
        function SolarEventProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarEventProfile eventMessageInfo.
         * @member {commonmodule.IEventMessageInfo|null|undefined} eventMessageInfo
         * @memberof solarmodule.SolarEventProfile
         * @instance
         */
        SolarEventProfile.prototype.eventMessageInfo = null;

        /**
         * SolarEventProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof solarmodule.SolarEventProfile
         * @instance
         */
        SolarEventProfile.prototype.ied = null;

        /**
         * SolarEventProfile solarEvent.
         * @member {solarmodule.ISolarEvent|null|undefined} solarEvent
         * @memberof solarmodule.SolarEventProfile
         * @instance
         */
        SolarEventProfile.prototype.solarEvent = null;

        /**
         * SolarEventProfile solarInverter.
         * @member {solarmodule.ISolarInverter|null|undefined} solarInverter
         * @memberof solarmodule.SolarEventProfile
         * @instance
         */
        SolarEventProfile.prototype.solarInverter = null;

        /**
         * Creates a new SolarEventProfile instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarEventProfile
         * @static
         * @param {solarmodule.ISolarEventProfile=} [properties] Properties to set
         * @returns {solarmodule.SolarEventProfile} SolarEventProfile instance
         */
        SolarEventProfile.create = function create(properties) {
            return new SolarEventProfile(properties);
        };

        /**
         * Encodes the specified SolarEventProfile message. Does not implicitly {@link solarmodule.SolarEventProfile.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarEventProfile
         * @static
         * @param {solarmodule.ISolarEventProfile} message SolarEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarEventProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventMessageInfo != null && Object.hasOwnProperty.call(message, "eventMessageInfo"))
                $root.commonmodule.EventMessageInfo.encode(message.eventMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.solarEvent != null && Object.hasOwnProperty.call(message, "solarEvent"))
                $root.solarmodule.SolarEvent.encode(message.solarEvent, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.solarInverter != null && Object.hasOwnProperty.call(message, "solarInverter"))
                $root.solarmodule.SolarInverter.encode(message.solarInverter, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarEventProfile message, length delimited. Does not implicitly {@link solarmodule.SolarEventProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarEventProfile
         * @static
         * @param {solarmodule.ISolarEventProfile} message SolarEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarEventProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarEventProfile message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarEventProfile} SolarEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarEventProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarEventProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventMessageInfo = $root.commonmodule.EventMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.solarEvent = $root.solarmodule.SolarEvent.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.solarInverter = $root.solarmodule.SolarInverter.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarEventProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarEventProfile} SolarEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarEventProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarEventProfile message.
         * @function verify
         * @memberof solarmodule.SolarEventProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarEventProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo")) {
                var error = $root.commonmodule.EventMessageInfo.verify(message.eventMessageInfo);
                if (error)
                    return "eventMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.solarEvent != null && message.hasOwnProperty("solarEvent")) {
                var error = $root.solarmodule.SolarEvent.verify(message.solarEvent);
                if (error)
                    return "solarEvent." + error;
            }
            if (message.solarInverter != null && message.hasOwnProperty("solarInverter")) {
                var error = $root.solarmodule.SolarInverter.verify(message.solarInverter);
                if (error)
                    return "solarInverter." + error;
            }
            return null;
        };

        /**
         * Creates a SolarEventProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarEventProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarEventProfile} SolarEventProfile
         */
        SolarEventProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarEventProfile)
                return object;
            var message = new $root.solarmodule.SolarEventProfile();
            if (object.eventMessageInfo != null) {
                if (typeof object.eventMessageInfo !== "object")
                    throw TypeError(".solarmodule.SolarEventProfile.eventMessageInfo: object expected");
                message.eventMessageInfo = $root.commonmodule.EventMessageInfo.fromObject(object.eventMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".solarmodule.SolarEventProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.solarEvent != null) {
                if (typeof object.solarEvent !== "object")
                    throw TypeError(".solarmodule.SolarEventProfile.solarEvent: object expected");
                message.solarEvent = $root.solarmodule.SolarEvent.fromObject(object.solarEvent);
            }
            if (object.solarInverter != null) {
                if (typeof object.solarInverter !== "object")
                    throw TypeError(".solarmodule.SolarEventProfile.solarInverter: object expected");
                message.solarInverter = $root.solarmodule.SolarInverter.fromObject(object.solarInverter);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarEventProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarEventProfile
         * @static
         * @param {solarmodule.SolarEventProfile} message SolarEventProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarEventProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventMessageInfo = null;
                object.ied = null;
                object.solarEvent = null;
                object.solarInverter = null;
            }
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo"))
                object.eventMessageInfo = $root.commonmodule.EventMessageInfo.toObject(message.eventMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.solarEvent != null && message.hasOwnProperty("solarEvent"))
                object.solarEvent = $root.solarmodule.SolarEvent.toObject(message.solarEvent, options);
            if (message.solarInverter != null && message.hasOwnProperty("solarInverter"))
                object.solarInverter = $root.solarmodule.SolarInverter.toObject(message.solarInverter, options);
            return object;
        };

        /**
         * Converts this SolarEventProfile to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarEventProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarEventProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarEventProfile;
    })();

    solarmodule.SolarReading = (function() {

        /**
         * Properties of a SolarReading.
         * @memberof solarmodule
         * @interface ISolarReading
         * @property {commonmodule.IConductingEquipmentTerminalReading|null} [conductingEquipmentTerminalReading] SolarReading conductingEquipmentTerminalReading
         * @property {commonmodule.IPhaseMMTN|null} [phaseMMTN] SolarReading phaseMMTN
         * @property {commonmodule.IReadingMMTR|null} [readingMMTR] SolarReading readingMMTR
         * @property {commonmodule.IReadingMMXU|null} [readingMMXU] SolarReading readingMMXU
         */

        /**
         * Constructs a new SolarReading.
         * @memberof solarmodule
         * @classdesc Represents a SolarReading.
         * @implements ISolarReading
         * @constructor
         * @param {solarmodule.ISolarReading=} [properties] Properties to set
         */
        function SolarReading(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarReading conductingEquipmentTerminalReading.
         * @member {commonmodule.IConductingEquipmentTerminalReading|null|undefined} conductingEquipmentTerminalReading
         * @memberof solarmodule.SolarReading
         * @instance
         */
        SolarReading.prototype.conductingEquipmentTerminalReading = null;

        /**
         * SolarReading phaseMMTN.
         * @member {commonmodule.IPhaseMMTN|null|undefined} phaseMMTN
         * @memberof solarmodule.SolarReading
         * @instance
         */
        SolarReading.prototype.phaseMMTN = null;

        /**
         * SolarReading readingMMTR.
         * @member {commonmodule.IReadingMMTR|null|undefined} readingMMTR
         * @memberof solarmodule.SolarReading
         * @instance
         */
        SolarReading.prototype.readingMMTR = null;

        /**
         * SolarReading readingMMXU.
         * @member {commonmodule.IReadingMMXU|null|undefined} readingMMXU
         * @memberof solarmodule.SolarReading
         * @instance
         */
        SolarReading.prototype.readingMMXU = null;

        /**
         * Creates a new SolarReading instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarReading
         * @static
         * @param {solarmodule.ISolarReading=} [properties] Properties to set
         * @returns {solarmodule.SolarReading} SolarReading instance
         */
        SolarReading.create = function create(properties) {
            return new SolarReading(properties);
        };

        /**
         * Encodes the specified SolarReading message. Does not implicitly {@link solarmodule.SolarReading.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarReading
         * @static
         * @param {solarmodule.ISolarReading} message SolarReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarReading.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipmentTerminalReading != null && Object.hasOwnProperty.call(message, "conductingEquipmentTerminalReading"))
                $root.commonmodule.ConductingEquipmentTerminalReading.encode(message.conductingEquipmentTerminalReading, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.phaseMMTN != null && Object.hasOwnProperty.call(message, "phaseMMTN"))
                $root.commonmodule.PhaseMMTN.encode(message.phaseMMTN, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.readingMMTR != null && Object.hasOwnProperty.call(message, "readingMMTR"))
                $root.commonmodule.ReadingMMTR.encode(message.readingMMTR, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.readingMMXU != null && Object.hasOwnProperty.call(message, "readingMMXU"))
                $root.commonmodule.ReadingMMXU.encode(message.readingMMXU, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarReading message, length delimited. Does not implicitly {@link solarmodule.SolarReading.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarReading
         * @static
         * @param {solarmodule.ISolarReading} message SolarReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarReading.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarReading message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarReading} SolarReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarReading.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarReading();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.phaseMMTN = $root.commonmodule.PhaseMMTN.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.readingMMTR = $root.commonmodule.ReadingMMTR.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.readingMMXU = $root.commonmodule.ReadingMMXU.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarReading message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarReading} SolarReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarReading.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarReading message.
         * @function verify
         * @memberof solarmodule.SolarReading
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarReading.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading")) {
                var error = $root.commonmodule.ConductingEquipmentTerminalReading.verify(message.conductingEquipmentTerminalReading);
                if (error)
                    return "conductingEquipmentTerminalReading." + error;
            }
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN")) {
                var error = $root.commonmodule.PhaseMMTN.verify(message.phaseMMTN);
                if (error)
                    return "phaseMMTN." + error;
            }
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR")) {
                var error = $root.commonmodule.ReadingMMTR.verify(message.readingMMTR);
                if (error)
                    return "readingMMTR." + error;
            }
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU")) {
                var error = $root.commonmodule.ReadingMMXU.verify(message.readingMMXU);
                if (error)
                    return "readingMMXU." + error;
            }
            return null;
        };

        /**
         * Creates a SolarReading message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarReading
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarReading} SolarReading
         */
        SolarReading.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarReading)
                return object;
            var message = new $root.solarmodule.SolarReading();
            if (object.conductingEquipmentTerminalReading != null) {
                if (typeof object.conductingEquipmentTerminalReading !== "object")
                    throw TypeError(".solarmodule.SolarReading.conductingEquipmentTerminalReading: object expected");
                message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.fromObject(object.conductingEquipmentTerminalReading);
            }
            if (object.phaseMMTN != null) {
                if (typeof object.phaseMMTN !== "object")
                    throw TypeError(".solarmodule.SolarReading.phaseMMTN: object expected");
                message.phaseMMTN = $root.commonmodule.PhaseMMTN.fromObject(object.phaseMMTN);
            }
            if (object.readingMMTR != null) {
                if (typeof object.readingMMTR !== "object")
                    throw TypeError(".solarmodule.SolarReading.readingMMTR: object expected");
                message.readingMMTR = $root.commonmodule.ReadingMMTR.fromObject(object.readingMMTR);
            }
            if (object.readingMMXU != null) {
                if (typeof object.readingMMXU !== "object")
                    throw TypeError(".solarmodule.SolarReading.readingMMXU: object expected");
                message.readingMMXU = $root.commonmodule.ReadingMMXU.fromObject(object.readingMMXU);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarReading message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarReading
         * @static
         * @param {solarmodule.SolarReading} message SolarReading
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarReading.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conductingEquipmentTerminalReading = null;
                object.phaseMMTN = null;
                object.readingMMTR = null;
                object.readingMMXU = null;
            }
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading"))
                object.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.toObject(message.conductingEquipmentTerminalReading, options);
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN"))
                object.phaseMMTN = $root.commonmodule.PhaseMMTN.toObject(message.phaseMMTN, options);
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR"))
                object.readingMMTR = $root.commonmodule.ReadingMMTR.toObject(message.readingMMTR, options);
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU"))
                object.readingMMXU = $root.commonmodule.ReadingMMXU.toObject(message.readingMMXU, options);
            return object;
        };

        /**
         * Converts this SolarReading to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarReading
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarReading.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarReading;
    })();

    solarmodule.SolarReadingProfile = (function() {

        /**
         * Properties of a SolarReadingProfile.
         * @memberof solarmodule
         * @interface ISolarReadingProfile
         * @property {commonmodule.IReadingMessageInfo|null} [readingMessageInfo] SolarReadingProfile readingMessageInfo
         * @property {commonmodule.IIED|null} [ied] SolarReadingProfile ied
         * @property {solarmodule.ISolarInverter|null} [solarInverter] SolarReadingProfile solarInverter
         * @property {solarmodule.ISolarReading|null} [solarReading] SolarReadingProfile solarReading
         */

        /**
         * Constructs a new SolarReadingProfile.
         * @memberof solarmodule
         * @classdesc Represents a SolarReadingProfile.
         * @implements ISolarReadingProfile
         * @constructor
         * @param {solarmodule.ISolarReadingProfile=} [properties] Properties to set
         */
        function SolarReadingProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarReadingProfile readingMessageInfo.
         * @member {commonmodule.IReadingMessageInfo|null|undefined} readingMessageInfo
         * @memberof solarmodule.SolarReadingProfile
         * @instance
         */
        SolarReadingProfile.prototype.readingMessageInfo = null;

        /**
         * SolarReadingProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof solarmodule.SolarReadingProfile
         * @instance
         */
        SolarReadingProfile.prototype.ied = null;

        /**
         * SolarReadingProfile solarInverter.
         * @member {solarmodule.ISolarInverter|null|undefined} solarInverter
         * @memberof solarmodule.SolarReadingProfile
         * @instance
         */
        SolarReadingProfile.prototype.solarInverter = null;

        /**
         * SolarReadingProfile solarReading.
         * @member {solarmodule.ISolarReading|null|undefined} solarReading
         * @memberof solarmodule.SolarReadingProfile
         * @instance
         */
        SolarReadingProfile.prototype.solarReading = null;

        /**
         * Creates a new SolarReadingProfile instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarReadingProfile
         * @static
         * @param {solarmodule.ISolarReadingProfile=} [properties] Properties to set
         * @returns {solarmodule.SolarReadingProfile} SolarReadingProfile instance
         */
        SolarReadingProfile.create = function create(properties) {
            return new SolarReadingProfile(properties);
        };

        /**
         * Encodes the specified SolarReadingProfile message. Does not implicitly {@link solarmodule.SolarReadingProfile.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarReadingProfile
         * @static
         * @param {solarmodule.ISolarReadingProfile} message SolarReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarReadingProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.readingMessageInfo != null && Object.hasOwnProperty.call(message, "readingMessageInfo"))
                $root.commonmodule.ReadingMessageInfo.encode(message.readingMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.solarInverter != null && Object.hasOwnProperty.call(message, "solarInverter"))
                $root.solarmodule.SolarInverter.encode(message.solarInverter, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.solarReading != null && Object.hasOwnProperty.call(message, "solarReading"))
                $root.solarmodule.SolarReading.encode(message.solarReading, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarReadingProfile message, length delimited. Does not implicitly {@link solarmodule.SolarReadingProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarReadingProfile
         * @static
         * @param {solarmodule.ISolarReadingProfile} message SolarReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarReadingProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarReadingProfile message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarReadingProfile} SolarReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarReadingProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarReadingProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.solarInverter = $root.solarmodule.SolarInverter.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.solarReading = $root.solarmodule.SolarReading.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarReadingProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarReadingProfile} SolarReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarReadingProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarReadingProfile message.
         * @function verify
         * @memberof solarmodule.SolarReadingProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarReadingProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo")) {
                var error = $root.commonmodule.ReadingMessageInfo.verify(message.readingMessageInfo);
                if (error)
                    return "readingMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.solarInverter != null && message.hasOwnProperty("solarInverter")) {
                var error = $root.solarmodule.SolarInverter.verify(message.solarInverter);
                if (error)
                    return "solarInverter." + error;
            }
            if (message.solarReading != null && message.hasOwnProperty("solarReading")) {
                var error = $root.solarmodule.SolarReading.verify(message.solarReading);
                if (error)
                    return "solarReading." + error;
            }
            return null;
        };

        /**
         * Creates a SolarReadingProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarReadingProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarReadingProfile} SolarReadingProfile
         */
        SolarReadingProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarReadingProfile)
                return object;
            var message = new $root.solarmodule.SolarReadingProfile();
            if (object.readingMessageInfo != null) {
                if (typeof object.readingMessageInfo !== "object")
                    throw TypeError(".solarmodule.SolarReadingProfile.readingMessageInfo: object expected");
                message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.fromObject(object.readingMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".solarmodule.SolarReadingProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.solarInverter != null) {
                if (typeof object.solarInverter !== "object")
                    throw TypeError(".solarmodule.SolarReadingProfile.solarInverter: object expected");
                message.solarInverter = $root.solarmodule.SolarInverter.fromObject(object.solarInverter);
            }
            if (object.solarReading != null) {
                if (typeof object.solarReading !== "object")
                    throw TypeError(".solarmodule.SolarReadingProfile.solarReading: object expected");
                message.solarReading = $root.solarmodule.SolarReading.fromObject(object.solarReading);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarReadingProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarReadingProfile
         * @static
         * @param {solarmodule.SolarReadingProfile} message SolarReadingProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarReadingProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.readingMessageInfo = null;
                object.ied = null;
                object.solarInverter = null;
                object.solarReading = null;
            }
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo"))
                object.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.toObject(message.readingMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.solarInverter != null && message.hasOwnProperty("solarInverter"))
                object.solarInverter = $root.solarmodule.SolarInverter.toObject(message.solarInverter, options);
            if (message.solarReading != null && message.hasOwnProperty("solarReading"))
                object.solarReading = $root.solarmodule.SolarReading.toObject(message.solarReading, options);
            return object;
        };

        /**
         * Converts this SolarReadingProfile to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarReadingProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarReadingProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarReadingProfile;
    })();

    solarmodule.SolarStatusZGEN = (function() {

        /**
         * Properties of a SolarStatusZGEN.
         * @memberof solarmodule
         * @interface ISolarStatusZGEN
         * @property {solarmodule.ISolarEventAndStatusZGEN|null} [solarEventAndStatusZGEN] SolarStatusZGEN solarEventAndStatusZGEN
         * @property {commonmodule.IENG_GridConnectModeKind|null} [GriMod] SolarStatusZGEN GriMod
         */

        /**
         * Constructs a new SolarStatusZGEN.
         * @memberof solarmodule
         * @classdesc Represents a SolarStatusZGEN.
         * @implements ISolarStatusZGEN
         * @constructor
         * @param {solarmodule.ISolarStatusZGEN=} [properties] Properties to set
         */
        function SolarStatusZGEN(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarStatusZGEN solarEventAndStatusZGEN.
         * @member {solarmodule.ISolarEventAndStatusZGEN|null|undefined} solarEventAndStatusZGEN
         * @memberof solarmodule.SolarStatusZGEN
         * @instance
         */
        SolarStatusZGEN.prototype.solarEventAndStatusZGEN = null;

        /**
         * SolarStatusZGEN GriMod.
         * @member {commonmodule.IENG_GridConnectModeKind|null|undefined} GriMod
         * @memberof solarmodule.SolarStatusZGEN
         * @instance
         */
        SolarStatusZGEN.prototype.GriMod = null;

        /**
         * Creates a new SolarStatusZGEN instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarStatusZGEN
         * @static
         * @param {solarmodule.ISolarStatusZGEN=} [properties] Properties to set
         * @returns {solarmodule.SolarStatusZGEN} SolarStatusZGEN instance
         */
        SolarStatusZGEN.create = function create(properties) {
            return new SolarStatusZGEN(properties);
        };

        /**
         * Encodes the specified SolarStatusZGEN message. Does not implicitly {@link solarmodule.SolarStatusZGEN.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarStatusZGEN
         * @static
         * @param {solarmodule.ISolarStatusZGEN} message SolarStatusZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarStatusZGEN.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.solarEventAndStatusZGEN != null && Object.hasOwnProperty.call(message, "solarEventAndStatusZGEN"))
                $root.solarmodule.SolarEventAndStatusZGEN.encode(message.solarEventAndStatusZGEN, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.GriMod != null && Object.hasOwnProperty.call(message, "GriMod"))
                $root.commonmodule.ENG_GridConnectModeKind.encode(message.GriMod, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarStatusZGEN message, length delimited. Does not implicitly {@link solarmodule.SolarStatusZGEN.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarStatusZGEN
         * @static
         * @param {solarmodule.ISolarStatusZGEN} message SolarStatusZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarStatusZGEN.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarStatusZGEN message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarStatusZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarStatusZGEN} SolarStatusZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarStatusZGEN.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarStatusZGEN();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.solarEventAndStatusZGEN = $root.solarmodule.SolarEventAndStatusZGEN.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.GriMod = $root.commonmodule.ENG_GridConnectModeKind.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarStatusZGEN message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarStatusZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarStatusZGEN} SolarStatusZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarStatusZGEN.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarStatusZGEN message.
         * @function verify
         * @memberof solarmodule.SolarStatusZGEN
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarStatusZGEN.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.solarEventAndStatusZGEN != null && message.hasOwnProperty("solarEventAndStatusZGEN")) {
                var error = $root.solarmodule.SolarEventAndStatusZGEN.verify(message.solarEventAndStatusZGEN);
                if (error)
                    return "solarEventAndStatusZGEN." + error;
            }
            if (message.GriMod != null && message.hasOwnProperty("GriMod")) {
                var error = $root.commonmodule.ENG_GridConnectModeKind.verify(message.GriMod);
                if (error)
                    return "GriMod." + error;
            }
            return null;
        };

        /**
         * Creates a SolarStatusZGEN message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarStatusZGEN
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarStatusZGEN} SolarStatusZGEN
         */
        SolarStatusZGEN.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarStatusZGEN)
                return object;
            var message = new $root.solarmodule.SolarStatusZGEN();
            if (object.solarEventAndStatusZGEN != null) {
                if (typeof object.solarEventAndStatusZGEN !== "object")
                    throw TypeError(".solarmodule.SolarStatusZGEN.solarEventAndStatusZGEN: object expected");
                message.solarEventAndStatusZGEN = $root.solarmodule.SolarEventAndStatusZGEN.fromObject(object.solarEventAndStatusZGEN);
            }
            if (object.GriMod != null) {
                if (typeof object.GriMod !== "object")
                    throw TypeError(".solarmodule.SolarStatusZGEN.GriMod: object expected");
                message.GriMod = $root.commonmodule.ENG_GridConnectModeKind.fromObject(object.GriMod);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarStatusZGEN message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarStatusZGEN
         * @static
         * @param {solarmodule.SolarStatusZGEN} message SolarStatusZGEN
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarStatusZGEN.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.solarEventAndStatusZGEN = null;
                object.GriMod = null;
            }
            if (message.solarEventAndStatusZGEN != null && message.hasOwnProperty("solarEventAndStatusZGEN"))
                object.solarEventAndStatusZGEN = $root.solarmodule.SolarEventAndStatusZGEN.toObject(message.solarEventAndStatusZGEN, options);
            if (message.GriMod != null && message.hasOwnProperty("GriMod"))
                object.GriMod = $root.commonmodule.ENG_GridConnectModeKind.toObject(message.GriMod, options);
            return object;
        };

        /**
         * Converts this SolarStatusZGEN to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarStatusZGEN
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarStatusZGEN.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarStatusZGEN;
    })();

    solarmodule.SolarStatus = (function() {

        /**
         * Properties of a SolarStatus.
         * @memberof solarmodule
         * @interface ISolarStatus
         * @property {commonmodule.IStatusValue|null} [statusValue] SolarStatus statusValue
         * @property {solarmodule.ISolarStatusZGEN|null} [solarStatusZGEN] SolarStatus solarStatusZGEN
         */

        /**
         * Constructs a new SolarStatus.
         * @memberof solarmodule
         * @classdesc Represents a SolarStatus.
         * @implements ISolarStatus
         * @constructor
         * @param {solarmodule.ISolarStatus=} [properties] Properties to set
         */
        function SolarStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarStatus statusValue.
         * @member {commonmodule.IStatusValue|null|undefined} statusValue
         * @memberof solarmodule.SolarStatus
         * @instance
         */
        SolarStatus.prototype.statusValue = null;

        /**
         * SolarStatus solarStatusZGEN.
         * @member {solarmodule.ISolarStatusZGEN|null|undefined} solarStatusZGEN
         * @memberof solarmodule.SolarStatus
         * @instance
         */
        SolarStatus.prototype.solarStatusZGEN = null;

        /**
         * Creates a new SolarStatus instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarStatus
         * @static
         * @param {solarmodule.ISolarStatus=} [properties] Properties to set
         * @returns {solarmodule.SolarStatus} SolarStatus instance
         */
        SolarStatus.create = function create(properties) {
            return new SolarStatus(properties);
        };

        /**
         * Encodes the specified SolarStatus message. Does not implicitly {@link solarmodule.SolarStatus.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarStatus
         * @static
         * @param {solarmodule.ISolarStatus} message SolarStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusValue != null && Object.hasOwnProperty.call(message, "statusValue"))
                $root.commonmodule.StatusValue.encode(message.statusValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.solarStatusZGEN != null && Object.hasOwnProperty.call(message, "solarStatusZGEN"))
                $root.solarmodule.SolarStatusZGEN.encode(message.solarStatusZGEN, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarStatus message, length delimited. Does not implicitly {@link solarmodule.SolarStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarStatus
         * @static
         * @param {solarmodule.ISolarStatus} message SolarStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarStatus message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarStatus} SolarStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusValue = $root.commonmodule.StatusValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.solarStatusZGEN = $root.solarmodule.SolarStatusZGEN.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarStatus} SolarStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarStatus message.
         * @function verify
         * @memberof solarmodule.SolarStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusValue != null && message.hasOwnProperty("statusValue")) {
                var error = $root.commonmodule.StatusValue.verify(message.statusValue);
                if (error)
                    return "statusValue." + error;
            }
            if (message.solarStatusZGEN != null && message.hasOwnProperty("solarStatusZGEN")) {
                var error = $root.solarmodule.SolarStatusZGEN.verify(message.solarStatusZGEN);
                if (error)
                    return "solarStatusZGEN." + error;
            }
            return null;
        };

        /**
         * Creates a SolarStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarStatus} SolarStatus
         */
        SolarStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarStatus)
                return object;
            var message = new $root.solarmodule.SolarStatus();
            if (object.statusValue != null) {
                if (typeof object.statusValue !== "object")
                    throw TypeError(".solarmodule.SolarStatus.statusValue: object expected");
                message.statusValue = $root.commonmodule.StatusValue.fromObject(object.statusValue);
            }
            if (object.solarStatusZGEN != null) {
                if (typeof object.solarStatusZGEN !== "object")
                    throw TypeError(".solarmodule.SolarStatus.solarStatusZGEN: object expected");
                message.solarStatusZGEN = $root.solarmodule.SolarStatusZGEN.fromObject(object.solarStatusZGEN);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarStatus
         * @static
         * @param {solarmodule.SolarStatus} message SolarStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusValue = null;
                object.solarStatusZGEN = null;
            }
            if (message.statusValue != null && message.hasOwnProperty("statusValue"))
                object.statusValue = $root.commonmodule.StatusValue.toObject(message.statusValue, options);
            if (message.solarStatusZGEN != null && message.hasOwnProperty("solarStatusZGEN"))
                object.solarStatusZGEN = $root.solarmodule.SolarStatusZGEN.toObject(message.solarStatusZGEN, options);
            return object;
        };

        /**
         * Converts this SolarStatus to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarStatus;
    })();

    solarmodule.SolarStatusProfile = (function() {

        /**
         * Properties of a SolarStatusProfile.
         * @memberof solarmodule
         * @interface ISolarStatusProfile
         * @property {commonmodule.IStatusMessageInfo|null} [statusMessageInfo] SolarStatusProfile statusMessageInfo
         * @property {commonmodule.IIED|null} [ied] SolarStatusProfile ied
         * @property {solarmodule.ISolarInverter|null} [solarInverter] SolarStatusProfile solarInverter
         * @property {solarmodule.ISolarStatus|null} [solarStatus] SolarStatusProfile solarStatus
         */

        /**
         * Constructs a new SolarStatusProfile.
         * @memberof solarmodule
         * @classdesc Represents a SolarStatusProfile.
         * @implements ISolarStatusProfile
         * @constructor
         * @param {solarmodule.ISolarStatusProfile=} [properties] Properties to set
         */
        function SolarStatusProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarStatusProfile statusMessageInfo.
         * @member {commonmodule.IStatusMessageInfo|null|undefined} statusMessageInfo
         * @memberof solarmodule.SolarStatusProfile
         * @instance
         */
        SolarStatusProfile.prototype.statusMessageInfo = null;

        /**
         * SolarStatusProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof solarmodule.SolarStatusProfile
         * @instance
         */
        SolarStatusProfile.prototype.ied = null;

        /**
         * SolarStatusProfile solarInverter.
         * @member {solarmodule.ISolarInverter|null|undefined} solarInverter
         * @memberof solarmodule.SolarStatusProfile
         * @instance
         */
        SolarStatusProfile.prototype.solarInverter = null;

        /**
         * SolarStatusProfile solarStatus.
         * @member {solarmodule.ISolarStatus|null|undefined} solarStatus
         * @memberof solarmodule.SolarStatusProfile
         * @instance
         */
        SolarStatusProfile.prototype.solarStatus = null;

        /**
         * Creates a new SolarStatusProfile instance using the specified properties.
         * @function create
         * @memberof solarmodule.SolarStatusProfile
         * @static
         * @param {solarmodule.ISolarStatusProfile=} [properties] Properties to set
         * @returns {solarmodule.SolarStatusProfile} SolarStatusProfile instance
         */
        SolarStatusProfile.create = function create(properties) {
            return new SolarStatusProfile(properties);
        };

        /**
         * Encodes the specified SolarStatusProfile message. Does not implicitly {@link solarmodule.SolarStatusProfile.verify|verify} messages.
         * @function encode
         * @memberof solarmodule.SolarStatusProfile
         * @static
         * @param {solarmodule.ISolarStatusProfile} message SolarStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarStatusProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusMessageInfo != null && Object.hasOwnProperty.call(message, "statusMessageInfo"))
                $root.commonmodule.StatusMessageInfo.encode(message.statusMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.solarInverter != null && Object.hasOwnProperty.call(message, "solarInverter"))
                $root.solarmodule.SolarInverter.encode(message.solarInverter, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.solarStatus != null && Object.hasOwnProperty.call(message, "solarStatus"))
                $root.solarmodule.SolarStatus.encode(message.solarStatus, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarStatusProfile message, length delimited. Does not implicitly {@link solarmodule.SolarStatusProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof solarmodule.SolarStatusProfile
         * @static
         * @param {solarmodule.ISolarStatusProfile} message SolarStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarStatusProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarStatusProfile message from the specified reader or buffer.
         * @function decode
         * @memberof solarmodule.SolarStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {solarmodule.SolarStatusProfile} SolarStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarStatusProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.solarmodule.SolarStatusProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.solarInverter = $root.solarmodule.SolarInverter.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.solarStatus = $root.solarmodule.SolarStatus.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarStatusProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof solarmodule.SolarStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {solarmodule.SolarStatusProfile} SolarStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarStatusProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarStatusProfile message.
         * @function verify
         * @memberof solarmodule.SolarStatusProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarStatusProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo")) {
                var error = $root.commonmodule.StatusMessageInfo.verify(message.statusMessageInfo);
                if (error)
                    return "statusMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.solarInverter != null && message.hasOwnProperty("solarInverter")) {
                var error = $root.solarmodule.SolarInverter.verify(message.solarInverter);
                if (error)
                    return "solarInverter." + error;
            }
            if (message.solarStatus != null && message.hasOwnProperty("solarStatus")) {
                var error = $root.solarmodule.SolarStatus.verify(message.solarStatus);
                if (error)
                    return "solarStatus." + error;
            }
            return null;
        };

        /**
         * Creates a SolarStatusProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof solarmodule.SolarStatusProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {solarmodule.SolarStatusProfile} SolarStatusProfile
         */
        SolarStatusProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.solarmodule.SolarStatusProfile)
                return object;
            var message = new $root.solarmodule.SolarStatusProfile();
            if (object.statusMessageInfo != null) {
                if (typeof object.statusMessageInfo !== "object")
                    throw TypeError(".solarmodule.SolarStatusProfile.statusMessageInfo: object expected");
                message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.fromObject(object.statusMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".solarmodule.SolarStatusProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.solarInverter != null) {
                if (typeof object.solarInverter !== "object")
                    throw TypeError(".solarmodule.SolarStatusProfile.solarInverter: object expected");
                message.solarInverter = $root.solarmodule.SolarInverter.fromObject(object.solarInverter);
            }
            if (object.solarStatus != null) {
                if (typeof object.solarStatus !== "object")
                    throw TypeError(".solarmodule.SolarStatusProfile.solarStatus: object expected");
                message.solarStatus = $root.solarmodule.SolarStatus.fromObject(object.solarStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarStatusProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof solarmodule.SolarStatusProfile
         * @static
         * @param {solarmodule.SolarStatusProfile} message SolarStatusProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarStatusProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusMessageInfo = null;
                object.ied = null;
                object.solarInverter = null;
                object.solarStatus = null;
            }
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo"))
                object.statusMessageInfo = $root.commonmodule.StatusMessageInfo.toObject(message.statusMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.solarInverter != null && message.hasOwnProperty("solarInverter"))
                object.solarInverter = $root.solarmodule.SolarInverter.toObject(message.solarInverter, options);
            if (message.solarStatus != null && message.hasOwnProperty("solarStatus"))
                object.solarStatus = $root.solarmodule.SolarStatus.toObject(message.solarStatus, options);
            return object;
        };

        /**
         * Converts this SolarStatusProfile to JSON.
         * @function toJSON
         * @memberof solarmodule.SolarStatusProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarStatusProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarStatusProfile;
    })();

    return solarmodule;
})();

$root.optimizermodule = (function() {

    /**
     * Namespace optimizermodule.
     * @exports optimizermodule
     * @namespace
     */
    var optimizermodule = {};

    optimizermodule.RegulatorControlScheduleProfileList = (function() {

        /**
         * Properties of a RegulatorControlScheduleProfileList.
         * @memberof optimizermodule
         * @interface IRegulatorControlScheduleProfileList
         * @property {Array.<regulatormodule.IRegulatorControlProfile>|null} [regulatorControlProfile] RegulatorControlScheduleProfileList regulatorControlProfile
         */

        /**
         * Constructs a new RegulatorControlScheduleProfileList.
         * @memberof optimizermodule
         * @classdesc Represents a RegulatorControlScheduleProfileList.
         * @implements IRegulatorControlScheduleProfileList
         * @constructor
         * @param {optimizermodule.IRegulatorControlScheduleProfileList=} [properties] Properties to set
         */
        function RegulatorControlScheduleProfileList(properties) {
            this.regulatorControlProfile = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorControlScheduleProfileList regulatorControlProfile.
         * @member {Array.<regulatormodule.IRegulatorControlProfile>} regulatorControlProfile
         * @memberof optimizermodule.RegulatorControlScheduleProfileList
         * @instance
         */
        RegulatorControlScheduleProfileList.prototype.regulatorControlProfile = $util.emptyArray;

        /**
         * Creates a new RegulatorControlScheduleProfileList instance using the specified properties.
         * @function create
         * @memberof optimizermodule.RegulatorControlScheduleProfileList
         * @static
         * @param {optimizermodule.IRegulatorControlScheduleProfileList=} [properties] Properties to set
         * @returns {optimizermodule.RegulatorControlScheduleProfileList} RegulatorControlScheduleProfileList instance
         */
        RegulatorControlScheduleProfileList.create = function create(properties) {
            return new RegulatorControlScheduleProfileList(properties);
        };

        /**
         * Encodes the specified RegulatorControlScheduleProfileList message. Does not implicitly {@link optimizermodule.RegulatorControlScheduleProfileList.verify|verify} messages.
         * @function encode
         * @memberof optimizermodule.RegulatorControlScheduleProfileList
         * @static
         * @param {optimizermodule.IRegulatorControlScheduleProfileList} message RegulatorControlScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorControlScheduleProfileList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.regulatorControlProfile != null && message.regulatorControlProfile.length)
                for (var i = 0; i < message.regulatorControlProfile.length; ++i)
                    $root.regulatormodule.RegulatorControlProfile.encode(message.regulatorControlProfile[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorControlScheduleProfileList message, length delimited. Does not implicitly {@link optimizermodule.RegulatorControlScheduleProfileList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof optimizermodule.RegulatorControlScheduleProfileList
         * @static
         * @param {optimizermodule.IRegulatorControlScheduleProfileList} message RegulatorControlScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorControlScheduleProfileList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorControlScheduleProfileList message from the specified reader or buffer.
         * @function decode
         * @memberof optimizermodule.RegulatorControlScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {optimizermodule.RegulatorControlScheduleProfileList} RegulatorControlScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorControlScheduleProfileList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.optimizermodule.RegulatorControlScheduleProfileList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.regulatorControlProfile && message.regulatorControlProfile.length))
                        message.regulatorControlProfile = [];
                    message.regulatorControlProfile.push($root.regulatormodule.RegulatorControlProfile.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorControlScheduleProfileList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof optimizermodule.RegulatorControlScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {optimizermodule.RegulatorControlScheduleProfileList} RegulatorControlScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorControlScheduleProfileList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorControlScheduleProfileList message.
         * @function verify
         * @memberof optimizermodule.RegulatorControlScheduleProfileList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorControlScheduleProfileList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.regulatorControlProfile != null && message.hasOwnProperty("regulatorControlProfile")) {
                if (!Array.isArray(message.regulatorControlProfile))
                    return "regulatorControlProfile: array expected";
                for (var i = 0; i < message.regulatorControlProfile.length; ++i) {
                    var error = $root.regulatormodule.RegulatorControlProfile.verify(message.regulatorControlProfile[i]);
                    if (error)
                        return "regulatorControlProfile." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RegulatorControlScheduleProfileList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof optimizermodule.RegulatorControlScheduleProfileList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {optimizermodule.RegulatorControlScheduleProfileList} RegulatorControlScheduleProfileList
         */
        RegulatorControlScheduleProfileList.fromObject = function fromObject(object) {
            if (object instanceof $root.optimizermodule.RegulatorControlScheduleProfileList)
                return object;
            var message = new $root.optimizermodule.RegulatorControlScheduleProfileList();
            if (object.regulatorControlProfile) {
                if (!Array.isArray(object.regulatorControlProfile))
                    throw TypeError(".optimizermodule.RegulatorControlScheduleProfileList.regulatorControlProfile: array expected");
                message.regulatorControlProfile = [];
                for (var i = 0; i < object.regulatorControlProfile.length; ++i) {
                    if (typeof object.regulatorControlProfile[i] !== "object")
                        throw TypeError(".optimizermodule.RegulatorControlScheduleProfileList.regulatorControlProfile: object expected");
                    message.regulatorControlProfile[i] = $root.regulatormodule.RegulatorControlProfile.fromObject(object.regulatorControlProfile[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorControlScheduleProfileList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof optimizermodule.RegulatorControlScheduleProfileList
         * @static
         * @param {optimizermodule.RegulatorControlScheduleProfileList} message RegulatorControlScheduleProfileList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorControlScheduleProfileList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.regulatorControlProfile = [];
            if (message.regulatorControlProfile && message.regulatorControlProfile.length) {
                object.regulatorControlProfile = [];
                for (var j = 0; j < message.regulatorControlProfile.length; ++j)
                    object.regulatorControlProfile[j] = $root.regulatormodule.RegulatorControlProfile.toObject(message.regulatorControlProfile[j], options);
            }
            return object;
        };

        /**
         * Converts this RegulatorControlScheduleProfileList to JSON.
         * @function toJSON
         * @memberof optimizermodule.RegulatorControlScheduleProfileList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorControlScheduleProfileList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorControlScheduleProfileList;
    })();

    optimizermodule.SolarControlScheduleProfileList = (function() {

        /**
         * Properties of a SolarControlScheduleProfileList.
         * @memberof optimizermodule
         * @interface ISolarControlScheduleProfileList
         * @property {Array.<solarmodule.ISolarControlProfile>|null} [solarControlProfile] SolarControlScheduleProfileList solarControlProfile
         */

        /**
         * Constructs a new SolarControlScheduleProfileList.
         * @memberof optimizermodule
         * @classdesc Represents a SolarControlScheduleProfileList.
         * @implements ISolarControlScheduleProfileList
         * @constructor
         * @param {optimizermodule.ISolarControlScheduleProfileList=} [properties] Properties to set
         */
        function SolarControlScheduleProfileList(properties) {
            this.solarControlProfile = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SolarControlScheduleProfileList solarControlProfile.
         * @member {Array.<solarmodule.ISolarControlProfile>} solarControlProfile
         * @memberof optimizermodule.SolarControlScheduleProfileList
         * @instance
         */
        SolarControlScheduleProfileList.prototype.solarControlProfile = $util.emptyArray;

        /**
         * Creates a new SolarControlScheduleProfileList instance using the specified properties.
         * @function create
         * @memberof optimizermodule.SolarControlScheduleProfileList
         * @static
         * @param {optimizermodule.ISolarControlScheduleProfileList=} [properties] Properties to set
         * @returns {optimizermodule.SolarControlScheduleProfileList} SolarControlScheduleProfileList instance
         */
        SolarControlScheduleProfileList.create = function create(properties) {
            return new SolarControlScheduleProfileList(properties);
        };

        /**
         * Encodes the specified SolarControlScheduleProfileList message. Does not implicitly {@link optimizermodule.SolarControlScheduleProfileList.verify|verify} messages.
         * @function encode
         * @memberof optimizermodule.SolarControlScheduleProfileList
         * @static
         * @param {optimizermodule.ISolarControlScheduleProfileList} message SolarControlScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarControlScheduleProfileList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.solarControlProfile != null && message.solarControlProfile.length)
                for (var i = 0; i < message.solarControlProfile.length; ++i)
                    $root.solarmodule.SolarControlProfile.encode(message.solarControlProfile[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SolarControlScheduleProfileList message, length delimited. Does not implicitly {@link optimizermodule.SolarControlScheduleProfileList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof optimizermodule.SolarControlScheduleProfileList
         * @static
         * @param {optimizermodule.ISolarControlScheduleProfileList} message SolarControlScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SolarControlScheduleProfileList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SolarControlScheduleProfileList message from the specified reader or buffer.
         * @function decode
         * @memberof optimizermodule.SolarControlScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {optimizermodule.SolarControlScheduleProfileList} SolarControlScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarControlScheduleProfileList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.optimizermodule.SolarControlScheduleProfileList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.solarControlProfile && message.solarControlProfile.length))
                        message.solarControlProfile = [];
                    message.solarControlProfile.push($root.solarmodule.SolarControlProfile.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SolarControlScheduleProfileList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof optimizermodule.SolarControlScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {optimizermodule.SolarControlScheduleProfileList} SolarControlScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SolarControlScheduleProfileList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SolarControlScheduleProfileList message.
         * @function verify
         * @memberof optimizermodule.SolarControlScheduleProfileList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SolarControlScheduleProfileList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.solarControlProfile != null && message.hasOwnProperty("solarControlProfile")) {
                if (!Array.isArray(message.solarControlProfile))
                    return "solarControlProfile: array expected";
                for (var i = 0; i < message.solarControlProfile.length; ++i) {
                    var error = $root.solarmodule.SolarControlProfile.verify(message.solarControlProfile[i]);
                    if (error)
                        return "solarControlProfile." + error;
                }
            }
            return null;
        };

        /**
         * Creates a SolarControlScheduleProfileList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof optimizermodule.SolarControlScheduleProfileList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {optimizermodule.SolarControlScheduleProfileList} SolarControlScheduleProfileList
         */
        SolarControlScheduleProfileList.fromObject = function fromObject(object) {
            if (object instanceof $root.optimizermodule.SolarControlScheduleProfileList)
                return object;
            var message = new $root.optimizermodule.SolarControlScheduleProfileList();
            if (object.solarControlProfile) {
                if (!Array.isArray(object.solarControlProfile))
                    throw TypeError(".optimizermodule.SolarControlScheduleProfileList.solarControlProfile: array expected");
                message.solarControlProfile = [];
                for (var i = 0; i < object.solarControlProfile.length; ++i) {
                    if (typeof object.solarControlProfile[i] !== "object")
                        throw TypeError(".optimizermodule.SolarControlScheduleProfileList.solarControlProfile: object expected");
                    message.solarControlProfile[i] = $root.solarmodule.SolarControlProfile.fromObject(object.solarControlProfile[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a SolarControlScheduleProfileList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof optimizermodule.SolarControlScheduleProfileList
         * @static
         * @param {optimizermodule.SolarControlScheduleProfileList} message SolarControlScheduleProfileList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SolarControlScheduleProfileList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.solarControlProfile = [];
            if (message.solarControlProfile && message.solarControlProfile.length) {
                object.solarControlProfile = [];
                for (var j = 0; j < message.solarControlProfile.length; ++j)
                    object.solarControlProfile[j] = $root.solarmodule.SolarControlProfile.toObject(message.solarControlProfile[j], options);
            }
            return object;
        };

        /**
         * Converts this SolarControlScheduleProfileList to JSON.
         * @function toJSON
         * @memberof optimizermodule.SolarControlScheduleProfileList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SolarControlScheduleProfileList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SolarControlScheduleProfileList;
    })();

    optimizermodule.PlannedInterconnectionScheduleProfileList = (function() {

        /**
         * Properties of a PlannedInterconnectionScheduleProfileList.
         * @memberof optimizermodule
         * @interface IPlannedInterconnectionScheduleProfileList
         * @property {Array.<interconnectionmodule.IPlannedInterconnectionScheduleProfile>|null} [plannedInterconnectionScheduleProfile] PlannedInterconnectionScheduleProfileList plannedInterconnectionScheduleProfile
         */

        /**
         * Constructs a new PlannedInterconnectionScheduleProfileList.
         * @memberof optimizermodule
         * @classdesc Represents a PlannedInterconnectionScheduleProfileList.
         * @implements IPlannedInterconnectionScheduleProfileList
         * @constructor
         * @param {optimizermodule.IPlannedInterconnectionScheduleProfileList=} [properties] Properties to set
         */
        function PlannedInterconnectionScheduleProfileList(properties) {
            this.plannedInterconnectionScheduleProfile = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PlannedInterconnectionScheduleProfileList plannedInterconnectionScheduleProfile.
         * @member {Array.<interconnectionmodule.IPlannedInterconnectionScheduleProfile>} plannedInterconnectionScheduleProfile
         * @memberof optimizermodule.PlannedInterconnectionScheduleProfileList
         * @instance
         */
        PlannedInterconnectionScheduleProfileList.prototype.plannedInterconnectionScheduleProfile = $util.emptyArray;

        /**
         * Creates a new PlannedInterconnectionScheduleProfileList instance using the specified properties.
         * @function create
         * @memberof optimizermodule.PlannedInterconnectionScheduleProfileList
         * @static
         * @param {optimizermodule.IPlannedInterconnectionScheduleProfileList=} [properties] Properties to set
         * @returns {optimizermodule.PlannedInterconnectionScheduleProfileList} PlannedInterconnectionScheduleProfileList instance
         */
        PlannedInterconnectionScheduleProfileList.create = function create(properties) {
            return new PlannedInterconnectionScheduleProfileList(properties);
        };

        /**
         * Encodes the specified PlannedInterconnectionScheduleProfileList message. Does not implicitly {@link optimizermodule.PlannedInterconnectionScheduleProfileList.verify|verify} messages.
         * @function encode
         * @memberof optimizermodule.PlannedInterconnectionScheduleProfileList
         * @static
         * @param {optimizermodule.IPlannedInterconnectionScheduleProfileList} message PlannedInterconnectionScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlannedInterconnectionScheduleProfileList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.plannedInterconnectionScheduleProfile != null && message.plannedInterconnectionScheduleProfile.length)
                for (var i = 0; i < message.plannedInterconnectionScheduleProfile.length; ++i)
                    $root.interconnectionmodule.PlannedInterconnectionScheduleProfile.encode(message.plannedInterconnectionScheduleProfile[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified PlannedInterconnectionScheduleProfileList message, length delimited. Does not implicitly {@link optimizermodule.PlannedInterconnectionScheduleProfileList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof optimizermodule.PlannedInterconnectionScheduleProfileList
         * @static
         * @param {optimizermodule.IPlannedInterconnectionScheduleProfileList} message PlannedInterconnectionScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlannedInterconnectionScheduleProfileList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PlannedInterconnectionScheduleProfileList message from the specified reader or buffer.
         * @function decode
         * @memberof optimizermodule.PlannedInterconnectionScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {optimizermodule.PlannedInterconnectionScheduleProfileList} PlannedInterconnectionScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlannedInterconnectionScheduleProfileList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.optimizermodule.PlannedInterconnectionScheduleProfileList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.plannedInterconnectionScheduleProfile && message.plannedInterconnectionScheduleProfile.length))
                        message.plannedInterconnectionScheduleProfile = [];
                    message.plannedInterconnectionScheduleProfile.push($root.interconnectionmodule.PlannedInterconnectionScheduleProfile.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PlannedInterconnectionScheduleProfileList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof optimizermodule.PlannedInterconnectionScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {optimizermodule.PlannedInterconnectionScheduleProfileList} PlannedInterconnectionScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlannedInterconnectionScheduleProfileList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PlannedInterconnectionScheduleProfileList message.
         * @function verify
         * @memberof optimizermodule.PlannedInterconnectionScheduleProfileList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PlannedInterconnectionScheduleProfileList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.plannedInterconnectionScheduleProfile != null && message.hasOwnProperty("plannedInterconnectionScheduleProfile")) {
                if (!Array.isArray(message.plannedInterconnectionScheduleProfile))
                    return "plannedInterconnectionScheduleProfile: array expected";
                for (var i = 0; i < message.plannedInterconnectionScheduleProfile.length; ++i) {
                    var error = $root.interconnectionmodule.PlannedInterconnectionScheduleProfile.verify(message.plannedInterconnectionScheduleProfile[i]);
                    if (error)
                        return "plannedInterconnectionScheduleProfile." + error;
                }
            }
            return null;
        };

        /**
         * Creates a PlannedInterconnectionScheduleProfileList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof optimizermodule.PlannedInterconnectionScheduleProfileList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {optimizermodule.PlannedInterconnectionScheduleProfileList} PlannedInterconnectionScheduleProfileList
         */
        PlannedInterconnectionScheduleProfileList.fromObject = function fromObject(object) {
            if (object instanceof $root.optimizermodule.PlannedInterconnectionScheduleProfileList)
                return object;
            var message = new $root.optimizermodule.PlannedInterconnectionScheduleProfileList();
            if (object.plannedInterconnectionScheduleProfile) {
                if (!Array.isArray(object.plannedInterconnectionScheduleProfile))
                    throw TypeError(".optimizermodule.PlannedInterconnectionScheduleProfileList.plannedInterconnectionScheduleProfile: array expected");
                message.plannedInterconnectionScheduleProfile = [];
                for (var i = 0; i < object.plannedInterconnectionScheduleProfile.length; ++i) {
                    if (typeof object.plannedInterconnectionScheduleProfile[i] !== "object")
                        throw TypeError(".optimizermodule.PlannedInterconnectionScheduleProfileList.plannedInterconnectionScheduleProfile: object expected");
                    message.plannedInterconnectionScheduleProfile[i] = $root.interconnectionmodule.PlannedInterconnectionScheduleProfile.fromObject(object.plannedInterconnectionScheduleProfile[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a PlannedInterconnectionScheduleProfileList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof optimizermodule.PlannedInterconnectionScheduleProfileList
         * @static
         * @param {optimizermodule.PlannedInterconnectionScheduleProfileList} message PlannedInterconnectionScheduleProfileList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PlannedInterconnectionScheduleProfileList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.plannedInterconnectionScheduleProfile = [];
            if (message.plannedInterconnectionScheduleProfile && message.plannedInterconnectionScheduleProfile.length) {
                object.plannedInterconnectionScheduleProfile = [];
                for (var j = 0; j < message.plannedInterconnectionScheduleProfile.length; ++j)
                    object.plannedInterconnectionScheduleProfile[j] = $root.interconnectionmodule.PlannedInterconnectionScheduleProfile.toObject(message.plannedInterconnectionScheduleProfile[j], options);
            }
            return object;
        };

        /**
         * Converts this PlannedInterconnectionScheduleProfileList to JSON.
         * @function toJSON
         * @memberof optimizermodule.PlannedInterconnectionScheduleProfileList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PlannedInterconnectionScheduleProfileList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PlannedInterconnectionScheduleProfileList;
    })();

    optimizermodule.LoadControlScheduleProfileList = (function() {

        /**
         * Properties of a LoadControlScheduleProfileList.
         * @memberof optimizermodule
         * @interface ILoadControlScheduleProfileList
         * @property {Array.<loadmodule.ILoadControlProfile>|null} [loadControlProfile] LoadControlScheduleProfileList loadControlProfile
         */

        /**
         * Constructs a new LoadControlScheduleProfileList.
         * @memberof optimizermodule
         * @classdesc Represents a LoadControlScheduleProfileList.
         * @implements ILoadControlScheduleProfileList
         * @constructor
         * @param {optimizermodule.ILoadControlScheduleProfileList=} [properties] Properties to set
         */
        function LoadControlScheduleProfileList(properties) {
            this.loadControlProfile = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadControlScheduleProfileList loadControlProfile.
         * @member {Array.<loadmodule.ILoadControlProfile>} loadControlProfile
         * @memberof optimizermodule.LoadControlScheduleProfileList
         * @instance
         */
        LoadControlScheduleProfileList.prototype.loadControlProfile = $util.emptyArray;

        /**
         * Creates a new LoadControlScheduleProfileList instance using the specified properties.
         * @function create
         * @memberof optimizermodule.LoadControlScheduleProfileList
         * @static
         * @param {optimizermodule.ILoadControlScheduleProfileList=} [properties] Properties to set
         * @returns {optimizermodule.LoadControlScheduleProfileList} LoadControlScheduleProfileList instance
         */
        LoadControlScheduleProfileList.create = function create(properties) {
            return new LoadControlScheduleProfileList(properties);
        };

        /**
         * Encodes the specified LoadControlScheduleProfileList message. Does not implicitly {@link optimizermodule.LoadControlScheduleProfileList.verify|verify} messages.
         * @function encode
         * @memberof optimizermodule.LoadControlScheduleProfileList
         * @static
         * @param {optimizermodule.ILoadControlScheduleProfileList} message LoadControlScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadControlScheduleProfileList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.loadControlProfile != null && message.loadControlProfile.length)
                for (var i = 0; i < message.loadControlProfile.length; ++i)
                    $root.loadmodule.LoadControlProfile.encode(message.loadControlProfile[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadControlScheduleProfileList message, length delimited. Does not implicitly {@link optimizermodule.LoadControlScheduleProfileList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof optimizermodule.LoadControlScheduleProfileList
         * @static
         * @param {optimizermodule.ILoadControlScheduleProfileList} message LoadControlScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadControlScheduleProfileList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadControlScheduleProfileList message from the specified reader or buffer.
         * @function decode
         * @memberof optimizermodule.LoadControlScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {optimizermodule.LoadControlScheduleProfileList} LoadControlScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadControlScheduleProfileList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.optimizermodule.LoadControlScheduleProfileList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.loadControlProfile && message.loadControlProfile.length))
                        message.loadControlProfile = [];
                    message.loadControlProfile.push($root.loadmodule.LoadControlProfile.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadControlScheduleProfileList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof optimizermodule.LoadControlScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {optimizermodule.LoadControlScheduleProfileList} LoadControlScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadControlScheduleProfileList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadControlScheduleProfileList message.
         * @function verify
         * @memberof optimizermodule.LoadControlScheduleProfileList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadControlScheduleProfileList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.loadControlProfile != null && message.hasOwnProperty("loadControlProfile")) {
                if (!Array.isArray(message.loadControlProfile))
                    return "loadControlProfile: array expected";
                for (var i = 0; i < message.loadControlProfile.length; ++i) {
                    var error = $root.loadmodule.LoadControlProfile.verify(message.loadControlProfile[i]);
                    if (error)
                        return "loadControlProfile." + error;
                }
            }
            return null;
        };

        /**
         * Creates a LoadControlScheduleProfileList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof optimizermodule.LoadControlScheduleProfileList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {optimizermodule.LoadControlScheduleProfileList} LoadControlScheduleProfileList
         */
        LoadControlScheduleProfileList.fromObject = function fromObject(object) {
            if (object instanceof $root.optimizermodule.LoadControlScheduleProfileList)
                return object;
            var message = new $root.optimizermodule.LoadControlScheduleProfileList();
            if (object.loadControlProfile) {
                if (!Array.isArray(object.loadControlProfile))
                    throw TypeError(".optimizermodule.LoadControlScheduleProfileList.loadControlProfile: array expected");
                message.loadControlProfile = [];
                for (var i = 0; i < object.loadControlProfile.length; ++i) {
                    if (typeof object.loadControlProfile[i] !== "object")
                        throw TypeError(".optimizermodule.LoadControlScheduleProfileList.loadControlProfile: object expected");
                    message.loadControlProfile[i] = $root.loadmodule.LoadControlProfile.fromObject(object.loadControlProfile[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadControlScheduleProfileList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof optimizermodule.LoadControlScheduleProfileList
         * @static
         * @param {optimizermodule.LoadControlScheduleProfileList} message LoadControlScheduleProfileList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadControlScheduleProfileList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.loadControlProfile = [];
            if (message.loadControlProfile && message.loadControlProfile.length) {
                object.loadControlProfile = [];
                for (var j = 0; j < message.loadControlProfile.length; ++j)
                    object.loadControlProfile[j] = $root.loadmodule.LoadControlProfile.toObject(message.loadControlProfile[j], options);
            }
            return object;
        };

        /**
         * Converts this LoadControlScheduleProfileList to JSON.
         * @function toJSON
         * @memberof optimizermodule.LoadControlScheduleProfileList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadControlScheduleProfileList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadControlScheduleProfileList;
    })();

    optimizermodule.ESSControlScheduleProfileList = (function() {

        /**
         * Properties of a ESSControlScheduleProfileList.
         * @memberof optimizermodule
         * @interface IESSControlScheduleProfileList
         * @property {Array.<essmodule.IESSControlProfile>|null} [essControlProfile] ESSControlScheduleProfileList essControlProfile
         */

        /**
         * Constructs a new ESSControlScheduleProfileList.
         * @memberof optimizermodule
         * @classdesc Represents a ESSControlScheduleProfileList.
         * @implements IESSControlScheduleProfileList
         * @constructor
         * @param {optimizermodule.IESSControlScheduleProfileList=} [properties] Properties to set
         */
        function ESSControlScheduleProfileList(properties) {
            this.essControlProfile = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSControlScheduleProfileList essControlProfile.
         * @member {Array.<essmodule.IESSControlProfile>} essControlProfile
         * @memberof optimizermodule.ESSControlScheduleProfileList
         * @instance
         */
        ESSControlScheduleProfileList.prototype.essControlProfile = $util.emptyArray;

        /**
         * Creates a new ESSControlScheduleProfileList instance using the specified properties.
         * @function create
         * @memberof optimizermodule.ESSControlScheduleProfileList
         * @static
         * @param {optimizermodule.IESSControlScheduleProfileList=} [properties] Properties to set
         * @returns {optimizermodule.ESSControlScheduleProfileList} ESSControlScheduleProfileList instance
         */
        ESSControlScheduleProfileList.create = function create(properties) {
            return new ESSControlScheduleProfileList(properties);
        };

        /**
         * Encodes the specified ESSControlScheduleProfileList message. Does not implicitly {@link optimizermodule.ESSControlScheduleProfileList.verify|verify} messages.
         * @function encode
         * @memberof optimizermodule.ESSControlScheduleProfileList
         * @static
         * @param {optimizermodule.IESSControlScheduleProfileList} message ESSControlScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSControlScheduleProfileList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.essControlProfile != null && message.essControlProfile.length)
                for (var i = 0; i < message.essControlProfile.length; ++i)
                    $root.essmodule.ESSControlProfile.encode(message.essControlProfile[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSControlScheduleProfileList message, length delimited. Does not implicitly {@link optimizermodule.ESSControlScheduleProfileList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof optimizermodule.ESSControlScheduleProfileList
         * @static
         * @param {optimizermodule.IESSControlScheduleProfileList} message ESSControlScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSControlScheduleProfileList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSControlScheduleProfileList message from the specified reader or buffer.
         * @function decode
         * @memberof optimizermodule.ESSControlScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {optimizermodule.ESSControlScheduleProfileList} ESSControlScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSControlScheduleProfileList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.optimizermodule.ESSControlScheduleProfileList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.essControlProfile && message.essControlProfile.length))
                        message.essControlProfile = [];
                    message.essControlProfile.push($root.essmodule.ESSControlProfile.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSControlScheduleProfileList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof optimizermodule.ESSControlScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {optimizermodule.ESSControlScheduleProfileList} ESSControlScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSControlScheduleProfileList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSControlScheduleProfileList message.
         * @function verify
         * @memberof optimizermodule.ESSControlScheduleProfileList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSControlScheduleProfileList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.essControlProfile != null && message.hasOwnProperty("essControlProfile")) {
                if (!Array.isArray(message.essControlProfile))
                    return "essControlProfile: array expected";
                for (var i = 0; i < message.essControlProfile.length; ++i) {
                    var error = $root.essmodule.ESSControlProfile.verify(message.essControlProfile[i]);
                    if (error)
                        return "essControlProfile." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ESSControlScheduleProfileList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof optimizermodule.ESSControlScheduleProfileList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {optimizermodule.ESSControlScheduleProfileList} ESSControlScheduleProfileList
         */
        ESSControlScheduleProfileList.fromObject = function fromObject(object) {
            if (object instanceof $root.optimizermodule.ESSControlScheduleProfileList)
                return object;
            var message = new $root.optimizermodule.ESSControlScheduleProfileList();
            if (object.essControlProfile) {
                if (!Array.isArray(object.essControlProfile))
                    throw TypeError(".optimizermodule.ESSControlScheduleProfileList.essControlProfile: array expected");
                message.essControlProfile = [];
                for (var i = 0; i < object.essControlProfile.length; ++i) {
                    if (typeof object.essControlProfile[i] !== "object")
                        throw TypeError(".optimizermodule.ESSControlScheduleProfileList.essControlProfile: object expected");
                    message.essControlProfile[i] = $root.essmodule.ESSControlProfile.fromObject(object.essControlProfile[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSControlScheduleProfileList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof optimizermodule.ESSControlScheduleProfileList
         * @static
         * @param {optimizermodule.ESSControlScheduleProfileList} message ESSControlScheduleProfileList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSControlScheduleProfileList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.essControlProfile = [];
            if (message.essControlProfile && message.essControlProfile.length) {
                object.essControlProfile = [];
                for (var j = 0; j < message.essControlProfile.length; ++j)
                    object.essControlProfile[j] = $root.essmodule.ESSControlProfile.toObject(message.essControlProfile[j], options);
            }
            return object;
        };

        /**
         * Converts this ESSControlScheduleProfileList to JSON.
         * @function toJSON
         * @memberof optimizermodule.ESSControlScheduleProfileList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSControlScheduleProfileList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSControlScheduleProfileList;
    })();

    optimizermodule.SwitchControlScheduleProfileList = (function() {

        /**
         * Properties of a SwitchControlScheduleProfileList.
         * @memberof optimizermodule
         * @interface ISwitchControlScheduleProfileList
         * @property {Array.<switchmodule.ISwitchControlProfile>|null} [switchControlProfile] SwitchControlScheduleProfileList switchControlProfile
         */

        /**
         * Constructs a new SwitchControlScheduleProfileList.
         * @memberof optimizermodule
         * @classdesc Represents a SwitchControlScheduleProfileList.
         * @implements ISwitchControlScheduleProfileList
         * @constructor
         * @param {optimizermodule.ISwitchControlScheduleProfileList=} [properties] Properties to set
         */
        function SwitchControlScheduleProfileList(properties) {
            this.switchControlProfile = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchControlScheduleProfileList switchControlProfile.
         * @member {Array.<switchmodule.ISwitchControlProfile>} switchControlProfile
         * @memberof optimizermodule.SwitchControlScheduleProfileList
         * @instance
         */
        SwitchControlScheduleProfileList.prototype.switchControlProfile = $util.emptyArray;

        /**
         * Creates a new SwitchControlScheduleProfileList instance using the specified properties.
         * @function create
         * @memberof optimizermodule.SwitchControlScheduleProfileList
         * @static
         * @param {optimizermodule.ISwitchControlScheduleProfileList=} [properties] Properties to set
         * @returns {optimizermodule.SwitchControlScheduleProfileList} SwitchControlScheduleProfileList instance
         */
        SwitchControlScheduleProfileList.create = function create(properties) {
            return new SwitchControlScheduleProfileList(properties);
        };

        /**
         * Encodes the specified SwitchControlScheduleProfileList message. Does not implicitly {@link optimizermodule.SwitchControlScheduleProfileList.verify|verify} messages.
         * @function encode
         * @memberof optimizermodule.SwitchControlScheduleProfileList
         * @static
         * @param {optimizermodule.ISwitchControlScheduleProfileList} message SwitchControlScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchControlScheduleProfileList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.switchControlProfile != null && message.switchControlProfile.length)
                for (var i = 0; i < message.switchControlProfile.length; ++i)
                    $root.switchmodule.SwitchControlProfile.encode(message.switchControlProfile[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchControlScheduleProfileList message, length delimited. Does not implicitly {@link optimizermodule.SwitchControlScheduleProfileList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof optimizermodule.SwitchControlScheduleProfileList
         * @static
         * @param {optimizermodule.ISwitchControlScheduleProfileList} message SwitchControlScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchControlScheduleProfileList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchControlScheduleProfileList message from the specified reader or buffer.
         * @function decode
         * @memberof optimizermodule.SwitchControlScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {optimizermodule.SwitchControlScheduleProfileList} SwitchControlScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchControlScheduleProfileList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.optimizermodule.SwitchControlScheduleProfileList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.switchControlProfile && message.switchControlProfile.length))
                        message.switchControlProfile = [];
                    message.switchControlProfile.push($root.switchmodule.SwitchControlProfile.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchControlScheduleProfileList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof optimizermodule.SwitchControlScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {optimizermodule.SwitchControlScheduleProfileList} SwitchControlScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchControlScheduleProfileList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchControlScheduleProfileList message.
         * @function verify
         * @memberof optimizermodule.SwitchControlScheduleProfileList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchControlScheduleProfileList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.switchControlProfile != null && message.hasOwnProperty("switchControlProfile")) {
                if (!Array.isArray(message.switchControlProfile))
                    return "switchControlProfile: array expected";
                for (var i = 0; i < message.switchControlProfile.length; ++i) {
                    var error = $root.switchmodule.SwitchControlProfile.verify(message.switchControlProfile[i]);
                    if (error)
                        return "switchControlProfile." + error;
                }
            }
            return null;
        };

        /**
         * Creates a SwitchControlScheduleProfileList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof optimizermodule.SwitchControlScheduleProfileList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {optimizermodule.SwitchControlScheduleProfileList} SwitchControlScheduleProfileList
         */
        SwitchControlScheduleProfileList.fromObject = function fromObject(object) {
            if (object instanceof $root.optimizermodule.SwitchControlScheduleProfileList)
                return object;
            var message = new $root.optimizermodule.SwitchControlScheduleProfileList();
            if (object.switchControlProfile) {
                if (!Array.isArray(object.switchControlProfile))
                    throw TypeError(".optimizermodule.SwitchControlScheduleProfileList.switchControlProfile: array expected");
                message.switchControlProfile = [];
                for (var i = 0; i < object.switchControlProfile.length; ++i) {
                    if (typeof object.switchControlProfile[i] !== "object")
                        throw TypeError(".optimizermodule.SwitchControlScheduleProfileList.switchControlProfile: object expected");
                    message.switchControlProfile[i] = $root.switchmodule.SwitchControlProfile.fromObject(object.switchControlProfile[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchControlScheduleProfileList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof optimizermodule.SwitchControlScheduleProfileList
         * @static
         * @param {optimizermodule.SwitchControlScheduleProfileList} message SwitchControlScheduleProfileList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchControlScheduleProfileList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.switchControlProfile = [];
            if (message.switchControlProfile && message.switchControlProfile.length) {
                object.switchControlProfile = [];
                for (var j = 0; j < message.switchControlProfile.length; ++j)
                    object.switchControlProfile[j] = $root.switchmodule.SwitchControlProfile.toObject(message.switchControlProfile[j], options);
            }
            return object;
        };

        /**
         * Converts this SwitchControlScheduleProfileList to JSON.
         * @function toJSON
         * @memberof optimizermodule.SwitchControlScheduleProfileList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchControlScheduleProfileList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchControlScheduleProfileList;
    })();

    optimizermodule.GenerationControlScheduleProfileList = (function() {

        /**
         * Properties of a GenerationControlScheduleProfileList.
         * @memberof optimizermodule
         * @interface IGenerationControlScheduleProfileList
         * @property {Array.<generationmodule.IGenerationControlProfile>|null} [generationControlProfile] GenerationControlScheduleProfileList generationControlProfile
         */

        /**
         * Constructs a new GenerationControlScheduleProfileList.
         * @memberof optimizermodule
         * @classdesc Represents a GenerationControlScheduleProfileList.
         * @implements IGenerationControlScheduleProfileList
         * @constructor
         * @param {optimizermodule.IGenerationControlScheduleProfileList=} [properties] Properties to set
         */
        function GenerationControlScheduleProfileList(properties) {
            this.generationControlProfile = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationControlScheduleProfileList generationControlProfile.
         * @member {Array.<generationmodule.IGenerationControlProfile>} generationControlProfile
         * @memberof optimizermodule.GenerationControlScheduleProfileList
         * @instance
         */
        GenerationControlScheduleProfileList.prototype.generationControlProfile = $util.emptyArray;

        /**
         * Creates a new GenerationControlScheduleProfileList instance using the specified properties.
         * @function create
         * @memberof optimizermodule.GenerationControlScheduleProfileList
         * @static
         * @param {optimizermodule.IGenerationControlScheduleProfileList=} [properties] Properties to set
         * @returns {optimizermodule.GenerationControlScheduleProfileList} GenerationControlScheduleProfileList instance
         */
        GenerationControlScheduleProfileList.create = function create(properties) {
            return new GenerationControlScheduleProfileList(properties);
        };

        /**
         * Encodes the specified GenerationControlScheduleProfileList message. Does not implicitly {@link optimizermodule.GenerationControlScheduleProfileList.verify|verify} messages.
         * @function encode
         * @memberof optimizermodule.GenerationControlScheduleProfileList
         * @static
         * @param {optimizermodule.IGenerationControlScheduleProfileList} message GenerationControlScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationControlScheduleProfileList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.generationControlProfile != null && message.generationControlProfile.length)
                for (var i = 0; i < message.generationControlProfile.length; ++i)
                    $root.generationmodule.GenerationControlProfile.encode(message.generationControlProfile[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationControlScheduleProfileList message, length delimited. Does not implicitly {@link optimizermodule.GenerationControlScheduleProfileList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof optimizermodule.GenerationControlScheduleProfileList
         * @static
         * @param {optimizermodule.IGenerationControlScheduleProfileList} message GenerationControlScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationControlScheduleProfileList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationControlScheduleProfileList message from the specified reader or buffer.
         * @function decode
         * @memberof optimizermodule.GenerationControlScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {optimizermodule.GenerationControlScheduleProfileList} GenerationControlScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationControlScheduleProfileList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.optimizermodule.GenerationControlScheduleProfileList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.generationControlProfile && message.generationControlProfile.length))
                        message.generationControlProfile = [];
                    message.generationControlProfile.push($root.generationmodule.GenerationControlProfile.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationControlScheduleProfileList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof optimizermodule.GenerationControlScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {optimizermodule.GenerationControlScheduleProfileList} GenerationControlScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationControlScheduleProfileList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationControlScheduleProfileList message.
         * @function verify
         * @memberof optimizermodule.GenerationControlScheduleProfileList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationControlScheduleProfileList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.generationControlProfile != null && message.hasOwnProperty("generationControlProfile")) {
                if (!Array.isArray(message.generationControlProfile))
                    return "generationControlProfile: array expected";
                for (var i = 0; i < message.generationControlProfile.length; ++i) {
                    var error = $root.generationmodule.GenerationControlProfile.verify(message.generationControlProfile[i]);
                    if (error)
                        return "generationControlProfile." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GenerationControlScheduleProfileList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof optimizermodule.GenerationControlScheduleProfileList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {optimizermodule.GenerationControlScheduleProfileList} GenerationControlScheduleProfileList
         */
        GenerationControlScheduleProfileList.fromObject = function fromObject(object) {
            if (object instanceof $root.optimizermodule.GenerationControlScheduleProfileList)
                return object;
            var message = new $root.optimizermodule.GenerationControlScheduleProfileList();
            if (object.generationControlProfile) {
                if (!Array.isArray(object.generationControlProfile))
                    throw TypeError(".optimizermodule.GenerationControlScheduleProfileList.generationControlProfile: array expected");
                message.generationControlProfile = [];
                for (var i = 0; i < object.generationControlProfile.length; ++i) {
                    if (typeof object.generationControlProfile[i] !== "object")
                        throw TypeError(".optimizermodule.GenerationControlScheduleProfileList.generationControlProfile: object expected");
                    message.generationControlProfile[i] = $root.generationmodule.GenerationControlProfile.fromObject(object.generationControlProfile[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationControlScheduleProfileList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof optimizermodule.GenerationControlScheduleProfileList
         * @static
         * @param {optimizermodule.GenerationControlScheduleProfileList} message GenerationControlScheduleProfileList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationControlScheduleProfileList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.generationControlProfile = [];
            if (message.generationControlProfile && message.generationControlProfile.length) {
                object.generationControlProfile = [];
                for (var j = 0; j < message.generationControlProfile.length; ++j)
                    object.generationControlProfile[j] = $root.generationmodule.GenerationControlProfile.toObject(message.generationControlProfile[j], options);
            }
            return object;
        };

        /**
         * Converts this GenerationControlScheduleProfileList to JSON.
         * @function toJSON
         * @memberof optimizermodule.GenerationControlScheduleProfileList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationControlScheduleProfileList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationControlScheduleProfileList;
    })();

    optimizermodule.PlannedOptimizerScheduleProfile = (function() {

        /**
         * Properties of a PlannedOptimizerScheduleProfile.
         * @memberof optimizermodule
         * @interface IPlannedOptimizerScheduleProfile
         * @property {commonmodule.IOptimizationMessageInfo|null} [optimizationMessageInfo] PlannedOptimizerScheduleProfile optimizationMessageInfo
         * @property {commonmodule.IApplicationSystem|null} [applicationSystem] PlannedOptimizerScheduleProfile applicationSystem
         * @property {optimizermodule.IESSControlScheduleProfileList|null} [essControlScheduleProfileList] PlannedOptimizerScheduleProfile essControlScheduleProfileList
         * @property {optimizermodule.IGenerationControlScheduleProfileList|null} [generationControlScheduleProfileList] PlannedOptimizerScheduleProfile generationControlScheduleProfileList
         * @property {optimizermodule.ILoadControlScheduleProfileList|null} [loadControlScheduleProfileList] PlannedOptimizerScheduleProfile loadControlScheduleProfileList
         * @property {optimizermodule.IPlannedInterconnectionScheduleProfileList|null} [plannedInterconnectionScheduleProfileList] PlannedOptimizerScheduleProfile plannedInterconnectionScheduleProfileList
         * @property {optimizermodule.IRegulatorControlScheduleProfileList|null} [regulatorControlScheduleProfileList] PlannedOptimizerScheduleProfile regulatorControlScheduleProfileList
         * @property {optimizermodule.ISolarControlScheduleProfileList|null} [solarControlScheduleProfileList] PlannedOptimizerScheduleProfile solarControlScheduleProfileList
         * @property {optimizermodule.ISwitchControlScheduleProfileList|null} [switchControlScheduleProfileList] PlannedOptimizerScheduleProfile switchControlScheduleProfileList
         */

        /**
         * Constructs a new PlannedOptimizerScheduleProfile.
         * @memberof optimizermodule
         * @classdesc Represents a PlannedOptimizerScheduleProfile.
         * @implements IPlannedOptimizerScheduleProfile
         * @constructor
         * @param {optimizermodule.IPlannedOptimizerScheduleProfile=} [properties] Properties to set
         */
        function PlannedOptimizerScheduleProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PlannedOptimizerScheduleProfile optimizationMessageInfo.
         * @member {commonmodule.IOptimizationMessageInfo|null|undefined} optimizationMessageInfo
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @instance
         */
        PlannedOptimizerScheduleProfile.prototype.optimizationMessageInfo = null;

        /**
         * PlannedOptimizerScheduleProfile applicationSystem.
         * @member {commonmodule.IApplicationSystem|null|undefined} applicationSystem
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @instance
         */
        PlannedOptimizerScheduleProfile.prototype.applicationSystem = null;

        /**
         * PlannedOptimizerScheduleProfile essControlScheduleProfileList.
         * @member {optimizermodule.IESSControlScheduleProfileList|null|undefined} essControlScheduleProfileList
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @instance
         */
        PlannedOptimizerScheduleProfile.prototype.essControlScheduleProfileList = null;

        /**
         * PlannedOptimizerScheduleProfile generationControlScheduleProfileList.
         * @member {optimizermodule.IGenerationControlScheduleProfileList|null|undefined} generationControlScheduleProfileList
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @instance
         */
        PlannedOptimizerScheduleProfile.prototype.generationControlScheduleProfileList = null;

        /**
         * PlannedOptimizerScheduleProfile loadControlScheduleProfileList.
         * @member {optimizermodule.ILoadControlScheduleProfileList|null|undefined} loadControlScheduleProfileList
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @instance
         */
        PlannedOptimizerScheduleProfile.prototype.loadControlScheduleProfileList = null;

        /**
         * PlannedOptimizerScheduleProfile plannedInterconnectionScheduleProfileList.
         * @member {optimizermodule.IPlannedInterconnectionScheduleProfileList|null|undefined} plannedInterconnectionScheduleProfileList
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @instance
         */
        PlannedOptimizerScheduleProfile.prototype.plannedInterconnectionScheduleProfileList = null;

        /**
         * PlannedOptimizerScheduleProfile regulatorControlScheduleProfileList.
         * @member {optimizermodule.IRegulatorControlScheduleProfileList|null|undefined} regulatorControlScheduleProfileList
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @instance
         */
        PlannedOptimizerScheduleProfile.prototype.regulatorControlScheduleProfileList = null;

        /**
         * PlannedOptimizerScheduleProfile solarControlScheduleProfileList.
         * @member {optimizermodule.ISolarControlScheduleProfileList|null|undefined} solarControlScheduleProfileList
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @instance
         */
        PlannedOptimizerScheduleProfile.prototype.solarControlScheduleProfileList = null;

        /**
         * PlannedOptimizerScheduleProfile switchControlScheduleProfileList.
         * @member {optimizermodule.ISwitchControlScheduleProfileList|null|undefined} switchControlScheduleProfileList
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @instance
         */
        PlannedOptimizerScheduleProfile.prototype.switchControlScheduleProfileList = null;

        /**
         * Creates a new PlannedOptimizerScheduleProfile instance using the specified properties.
         * @function create
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @static
         * @param {optimizermodule.IPlannedOptimizerScheduleProfile=} [properties] Properties to set
         * @returns {optimizermodule.PlannedOptimizerScheduleProfile} PlannedOptimizerScheduleProfile instance
         */
        PlannedOptimizerScheduleProfile.create = function create(properties) {
            return new PlannedOptimizerScheduleProfile(properties);
        };

        /**
         * Encodes the specified PlannedOptimizerScheduleProfile message. Does not implicitly {@link optimizermodule.PlannedOptimizerScheduleProfile.verify|verify} messages.
         * @function encode
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @static
         * @param {optimizermodule.IPlannedOptimizerScheduleProfile} message PlannedOptimizerScheduleProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlannedOptimizerScheduleProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.optimizationMessageInfo != null && Object.hasOwnProperty.call(message, "optimizationMessageInfo"))
                $root.commonmodule.OptimizationMessageInfo.encode(message.optimizationMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.applicationSystem != null && Object.hasOwnProperty.call(message, "applicationSystem"))
                $root.commonmodule.ApplicationSystem.encode(message.applicationSystem, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.essControlScheduleProfileList != null && Object.hasOwnProperty.call(message, "essControlScheduleProfileList"))
                $root.optimizermodule.ESSControlScheduleProfileList.encode(message.essControlScheduleProfileList, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.generationControlScheduleProfileList != null && Object.hasOwnProperty.call(message, "generationControlScheduleProfileList"))
                $root.optimizermodule.GenerationControlScheduleProfileList.encode(message.generationControlScheduleProfileList, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.loadControlScheduleProfileList != null && Object.hasOwnProperty.call(message, "loadControlScheduleProfileList"))
                $root.optimizermodule.LoadControlScheduleProfileList.encode(message.loadControlScheduleProfileList, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.plannedInterconnectionScheduleProfileList != null && Object.hasOwnProperty.call(message, "plannedInterconnectionScheduleProfileList"))
                $root.optimizermodule.PlannedInterconnectionScheduleProfileList.encode(message.plannedInterconnectionScheduleProfileList, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.regulatorControlScheduleProfileList != null && Object.hasOwnProperty.call(message, "regulatorControlScheduleProfileList"))
                $root.optimizermodule.RegulatorControlScheduleProfileList.encode(message.regulatorControlScheduleProfileList, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.solarControlScheduleProfileList != null && Object.hasOwnProperty.call(message, "solarControlScheduleProfileList"))
                $root.optimizermodule.SolarControlScheduleProfileList.encode(message.solarControlScheduleProfileList, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.switchControlScheduleProfileList != null && Object.hasOwnProperty.call(message, "switchControlScheduleProfileList"))
                $root.optimizermodule.SwitchControlScheduleProfileList.encode(message.switchControlScheduleProfileList, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified PlannedOptimizerScheduleProfile message, length delimited. Does not implicitly {@link optimizermodule.PlannedOptimizerScheduleProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @static
         * @param {optimizermodule.IPlannedOptimizerScheduleProfile} message PlannedOptimizerScheduleProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlannedOptimizerScheduleProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PlannedOptimizerScheduleProfile message from the specified reader or buffer.
         * @function decode
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {optimizermodule.PlannedOptimizerScheduleProfile} PlannedOptimizerScheduleProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlannedOptimizerScheduleProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.optimizermodule.PlannedOptimizerScheduleProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.optimizationMessageInfo = $root.commonmodule.OptimizationMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.applicationSystem = $root.commonmodule.ApplicationSystem.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.essControlScheduleProfileList = $root.optimizermodule.ESSControlScheduleProfileList.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.generationControlScheduleProfileList = $root.optimizermodule.GenerationControlScheduleProfileList.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.loadControlScheduleProfileList = $root.optimizermodule.LoadControlScheduleProfileList.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.plannedInterconnectionScheduleProfileList = $root.optimizermodule.PlannedInterconnectionScheduleProfileList.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.regulatorControlScheduleProfileList = $root.optimizermodule.RegulatorControlScheduleProfileList.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.solarControlScheduleProfileList = $root.optimizermodule.SolarControlScheduleProfileList.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.switchControlScheduleProfileList = $root.optimizermodule.SwitchControlScheduleProfileList.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PlannedOptimizerScheduleProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {optimizermodule.PlannedOptimizerScheduleProfile} PlannedOptimizerScheduleProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlannedOptimizerScheduleProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PlannedOptimizerScheduleProfile message.
         * @function verify
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PlannedOptimizerScheduleProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.optimizationMessageInfo != null && message.hasOwnProperty("optimizationMessageInfo")) {
                var error = $root.commonmodule.OptimizationMessageInfo.verify(message.optimizationMessageInfo);
                if (error)
                    return "optimizationMessageInfo." + error;
            }
            if (message.applicationSystem != null && message.hasOwnProperty("applicationSystem")) {
                var error = $root.commonmodule.ApplicationSystem.verify(message.applicationSystem);
                if (error)
                    return "applicationSystem." + error;
            }
            if (message.essControlScheduleProfileList != null && message.hasOwnProperty("essControlScheduleProfileList")) {
                var error = $root.optimizermodule.ESSControlScheduleProfileList.verify(message.essControlScheduleProfileList);
                if (error)
                    return "essControlScheduleProfileList." + error;
            }
            if (message.generationControlScheduleProfileList != null && message.hasOwnProperty("generationControlScheduleProfileList")) {
                var error = $root.optimizermodule.GenerationControlScheduleProfileList.verify(message.generationControlScheduleProfileList);
                if (error)
                    return "generationControlScheduleProfileList." + error;
            }
            if (message.loadControlScheduleProfileList != null && message.hasOwnProperty("loadControlScheduleProfileList")) {
                var error = $root.optimizermodule.LoadControlScheduleProfileList.verify(message.loadControlScheduleProfileList);
                if (error)
                    return "loadControlScheduleProfileList." + error;
            }
            if (message.plannedInterconnectionScheduleProfileList != null && message.hasOwnProperty("plannedInterconnectionScheduleProfileList")) {
                var error = $root.optimizermodule.PlannedInterconnectionScheduleProfileList.verify(message.plannedInterconnectionScheduleProfileList);
                if (error)
                    return "plannedInterconnectionScheduleProfileList." + error;
            }
            if (message.regulatorControlScheduleProfileList != null && message.hasOwnProperty("regulatorControlScheduleProfileList")) {
                var error = $root.optimizermodule.RegulatorControlScheduleProfileList.verify(message.regulatorControlScheduleProfileList);
                if (error)
                    return "regulatorControlScheduleProfileList." + error;
            }
            if (message.solarControlScheduleProfileList != null && message.hasOwnProperty("solarControlScheduleProfileList")) {
                var error = $root.optimizermodule.SolarControlScheduleProfileList.verify(message.solarControlScheduleProfileList);
                if (error)
                    return "solarControlScheduleProfileList." + error;
            }
            if (message.switchControlScheduleProfileList != null && message.hasOwnProperty("switchControlScheduleProfileList")) {
                var error = $root.optimizermodule.SwitchControlScheduleProfileList.verify(message.switchControlScheduleProfileList);
                if (error)
                    return "switchControlScheduleProfileList." + error;
            }
            return null;
        };

        /**
         * Creates a PlannedOptimizerScheduleProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {optimizermodule.PlannedOptimizerScheduleProfile} PlannedOptimizerScheduleProfile
         */
        PlannedOptimizerScheduleProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.optimizermodule.PlannedOptimizerScheduleProfile)
                return object;
            var message = new $root.optimizermodule.PlannedOptimizerScheduleProfile();
            if (object.optimizationMessageInfo != null) {
                if (typeof object.optimizationMessageInfo !== "object")
                    throw TypeError(".optimizermodule.PlannedOptimizerScheduleProfile.optimizationMessageInfo: object expected");
                message.optimizationMessageInfo = $root.commonmodule.OptimizationMessageInfo.fromObject(object.optimizationMessageInfo);
            }
            if (object.applicationSystem != null) {
                if (typeof object.applicationSystem !== "object")
                    throw TypeError(".optimizermodule.PlannedOptimizerScheduleProfile.applicationSystem: object expected");
                message.applicationSystem = $root.commonmodule.ApplicationSystem.fromObject(object.applicationSystem);
            }
            if (object.essControlScheduleProfileList != null) {
                if (typeof object.essControlScheduleProfileList !== "object")
                    throw TypeError(".optimizermodule.PlannedOptimizerScheduleProfile.essControlScheduleProfileList: object expected");
                message.essControlScheduleProfileList = $root.optimizermodule.ESSControlScheduleProfileList.fromObject(object.essControlScheduleProfileList);
            }
            if (object.generationControlScheduleProfileList != null) {
                if (typeof object.generationControlScheduleProfileList !== "object")
                    throw TypeError(".optimizermodule.PlannedOptimizerScheduleProfile.generationControlScheduleProfileList: object expected");
                message.generationControlScheduleProfileList = $root.optimizermodule.GenerationControlScheduleProfileList.fromObject(object.generationControlScheduleProfileList);
            }
            if (object.loadControlScheduleProfileList != null) {
                if (typeof object.loadControlScheduleProfileList !== "object")
                    throw TypeError(".optimizermodule.PlannedOptimizerScheduleProfile.loadControlScheduleProfileList: object expected");
                message.loadControlScheduleProfileList = $root.optimizermodule.LoadControlScheduleProfileList.fromObject(object.loadControlScheduleProfileList);
            }
            if (object.plannedInterconnectionScheduleProfileList != null) {
                if (typeof object.plannedInterconnectionScheduleProfileList !== "object")
                    throw TypeError(".optimizermodule.PlannedOptimizerScheduleProfile.plannedInterconnectionScheduleProfileList: object expected");
                message.plannedInterconnectionScheduleProfileList = $root.optimizermodule.PlannedInterconnectionScheduleProfileList.fromObject(object.plannedInterconnectionScheduleProfileList);
            }
            if (object.regulatorControlScheduleProfileList != null) {
                if (typeof object.regulatorControlScheduleProfileList !== "object")
                    throw TypeError(".optimizermodule.PlannedOptimizerScheduleProfile.regulatorControlScheduleProfileList: object expected");
                message.regulatorControlScheduleProfileList = $root.optimizermodule.RegulatorControlScheduleProfileList.fromObject(object.regulatorControlScheduleProfileList);
            }
            if (object.solarControlScheduleProfileList != null) {
                if (typeof object.solarControlScheduleProfileList !== "object")
                    throw TypeError(".optimizermodule.PlannedOptimizerScheduleProfile.solarControlScheduleProfileList: object expected");
                message.solarControlScheduleProfileList = $root.optimizermodule.SolarControlScheduleProfileList.fromObject(object.solarControlScheduleProfileList);
            }
            if (object.switchControlScheduleProfileList != null) {
                if (typeof object.switchControlScheduleProfileList !== "object")
                    throw TypeError(".optimizermodule.PlannedOptimizerScheduleProfile.switchControlScheduleProfileList: object expected");
                message.switchControlScheduleProfileList = $root.optimizermodule.SwitchControlScheduleProfileList.fromObject(object.switchControlScheduleProfileList);
            }
            return message;
        };

        /**
         * Creates a plain object from a PlannedOptimizerScheduleProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @static
         * @param {optimizermodule.PlannedOptimizerScheduleProfile} message PlannedOptimizerScheduleProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PlannedOptimizerScheduleProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.optimizationMessageInfo = null;
                object.applicationSystem = null;
                object.essControlScheduleProfileList = null;
                object.generationControlScheduleProfileList = null;
                object.loadControlScheduleProfileList = null;
                object.plannedInterconnectionScheduleProfileList = null;
                object.regulatorControlScheduleProfileList = null;
                object.solarControlScheduleProfileList = null;
                object.switchControlScheduleProfileList = null;
            }
            if (message.optimizationMessageInfo != null && message.hasOwnProperty("optimizationMessageInfo"))
                object.optimizationMessageInfo = $root.commonmodule.OptimizationMessageInfo.toObject(message.optimizationMessageInfo, options);
            if (message.applicationSystem != null && message.hasOwnProperty("applicationSystem"))
                object.applicationSystem = $root.commonmodule.ApplicationSystem.toObject(message.applicationSystem, options);
            if (message.essControlScheduleProfileList != null && message.hasOwnProperty("essControlScheduleProfileList"))
                object.essControlScheduleProfileList = $root.optimizermodule.ESSControlScheduleProfileList.toObject(message.essControlScheduleProfileList, options);
            if (message.generationControlScheduleProfileList != null && message.hasOwnProperty("generationControlScheduleProfileList"))
                object.generationControlScheduleProfileList = $root.optimizermodule.GenerationControlScheduleProfileList.toObject(message.generationControlScheduleProfileList, options);
            if (message.loadControlScheduleProfileList != null && message.hasOwnProperty("loadControlScheduleProfileList"))
                object.loadControlScheduleProfileList = $root.optimizermodule.LoadControlScheduleProfileList.toObject(message.loadControlScheduleProfileList, options);
            if (message.plannedInterconnectionScheduleProfileList != null && message.hasOwnProperty("plannedInterconnectionScheduleProfileList"))
                object.plannedInterconnectionScheduleProfileList = $root.optimizermodule.PlannedInterconnectionScheduleProfileList.toObject(message.plannedInterconnectionScheduleProfileList, options);
            if (message.regulatorControlScheduleProfileList != null && message.hasOwnProperty("regulatorControlScheduleProfileList"))
                object.regulatorControlScheduleProfileList = $root.optimizermodule.RegulatorControlScheduleProfileList.toObject(message.regulatorControlScheduleProfileList, options);
            if (message.solarControlScheduleProfileList != null && message.hasOwnProperty("solarControlScheduleProfileList"))
                object.solarControlScheduleProfileList = $root.optimizermodule.SolarControlScheduleProfileList.toObject(message.solarControlScheduleProfileList, options);
            if (message.switchControlScheduleProfileList != null && message.hasOwnProperty("switchControlScheduleProfileList"))
                object.switchControlScheduleProfileList = $root.optimizermodule.SwitchControlScheduleProfileList.toObject(message.switchControlScheduleProfileList, options);
            return object;
        };

        /**
         * Converts this PlannedOptimizerScheduleProfile to JSON.
         * @function toJSON
         * @memberof optimizermodule.PlannedOptimizerScheduleProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PlannedOptimizerScheduleProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PlannedOptimizerScheduleProfile;
    })();

    optimizermodule.RequestedInterconnectionScheduleProfileList = (function() {

        /**
         * Properties of a RequestedInterconnectionScheduleProfileList.
         * @memberof optimizermodule
         * @interface IRequestedInterconnectionScheduleProfileList
         * @property {Array.<interconnectionmodule.IRequestedInterconnectionScheduleProfile>|null} [requestedInterconnectionScheduleProfile] RequestedInterconnectionScheduleProfileList requestedInterconnectionScheduleProfile
         */

        /**
         * Constructs a new RequestedInterconnectionScheduleProfileList.
         * @memberof optimizermodule
         * @classdesc Represents a RequestedInterconnectionScheduleProfileList.
         * @implements IRequestedInterconnectionScheduleProfileList
         * @constructor
         * @param {optimizermodule.IRequestedInterconnectionScheduleProfileList=} [properties] Properties to set
         */
        function RequestedInterconnectionScheduleProfileList(properties) {
            this.requestedInterconnectionScheduleProfile = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestedInterconnectionScheduleProfileList requestedInterconnectionScheduleProfile.
         * @member {Array.<interconnectionmodule.IRequestedInterconnectionScheduleProfile>} requestedInterconnectionScheduleProfile
         * @memberof optimizermodule.RequestedInterconnectionScheduleProfileList
         * @instance
         */
        RequestedInterconnectionScheduleProfileList.prototype.requestedInterconnectionScheduleProfile = $util.emptyArray;

        /**
         * Creates a new RequestedInterconnectionScheduleProfileList instance using the specified properties.
         * @function create
         * @memberof optimizermodule.RequestedInterconnectionScheduleProfileList
         * @static
         * @param {optimizermodule.IRequestedInterconnectionScheduleProfileList=} [properties] Properties to set
         * @returns {optimizermodule.RequestedInterconnectionScheduleProfileList} RequestedInterconnectionScheduleProfileList instance
         */
        RequestedInterconnectionScheduleProfileList.create = function create(properties) {
            return new RequestedInterconnectionScheduleProfileList(properties);
        };

        /**
         * Encodes the specified RequestedInterconnectionScheduleProfileList message. Does not implicitly {@link optimizermodule.RequestedInterconnectionScheduleProfileList.verify|verify} messages.
         * @function encode
         * @memberof optimizermodule.RequestedInterconnectionScheduleProfileList
         * @static
         * @param {optimizermodule.IRequestedInterconnectionScheduleProfileList} message RequestedInterconnectionScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestedInterconnectionScheduleProfileList.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.requestedInterconnectionScheduleProfile != null && message.requestedInterconnectionScheduleProfile.length)
                for (var i = 0; i < message.requestedInterconnectionScheduleProfile.length; ++i)
                    $root.interconnectionmodule.RequestedInterconnectionScheduleProfile.encode(message.requestedInterconnectionScheduleProfile[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestedInterconnectionScheduleProfileList message, length delimited. Does not implicitly {@link optimizermodule.RequestedInterconnectionScheduleProfileList.verify|verify} messages.
         * @function encodeDelimited
         * @memberof optimizermodule.RequestedInterconnectionScheduleProfileList
         * @static
         * @param {optimizermodule.IRequestedInterconnectionScheduleProfileList} message RequestedInterconnectionScheduleProfileList message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestedInterconnectionScheduleProfileList.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestedInterconnectionScheduleProfileList message from the specified reader or buffer.
         * @function decode
         * @memberof optimizermodule.RequestedInterconnectionScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {optimizermodule.RequestedInterconnectionScheduleProfileList} RequestedInterconnectionScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestedInterconnectionScheduleProfileList.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.optimizermodule.RequestedInterconnectionScheduleProfileList();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.requestedInterconnectionScheduleProfile && message.requestedInterconnectionScheduleProfile.length))
                        message.requestedInterconnectionScheduleProfile = [];
                    message.requestedInterconnectionScheduleProfile.push($root.interconnectionmodule.RequestedInterconnectionScheduleProfile.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestedInterconnectionScheduleProfileList message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof optimizermodule.RequestedInterconnectionScheduleProfileList
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {optimizermodule.RequestedInterconnectionScheduleProfileList} RequestedInterconnectionScheduleProfileList
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestedInterconnectionScheduleProfileList.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestedInterconnectionScheduleProfileList message.
         * @function verify
         * @memberof optimizermodule.RequestedInterconnectionScheduleProfileList
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestedInterconnectionScheduleProfileList.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.requestedInterconnectionScheduleProfile != null && message.hasOwnProperty("requestedInterconnectionScheduleProfile")) {
                if (!Array.isArray(message.requestedInterconnectionScheduleProfile))
                    return "requestedInterconnectionScheduleProfile: array expected";
                for (var i = 0; i < message.requestedInterconnectionScheduleProfile.length; ++i) {
                    var error = $root.interconnectionmodule.RequestedInterconnectionScheduleProfile.verify(message.requestedInterconnectionScheduleProfile[i]);
                    if (error)
                        return "requestedInterconnectionScheduleProfile." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RequestedInterconnectionScheduleProfileList message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof optimizermodule.RequestedInterconnectionScheduleProfileList
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {optimizermodule.RequestedInterconnectionScheduleProfileList} RequestedInterconnectionScheduleProfileList
         */
        RequestedInterconnectionScheduleProfileList.fromObject = function fromObject(object) {
            if (object instanceof $root.optimizermodule.RequestedInterconnectionScheduleProfileList)
                return object;
            var message = new $root.optimizermodule.RequestedInterconnectionScheduleProfileList();
            if (object.requestedInterconnectionScheduleProfile) {
                if (!Array.isArray(object.requestedInterconnectionScheduleProfile))
                    throw TypeError(".optimizermodule.RequestedInterconnectionScheduleProfileList.requestedInterconnectionScheduleProfile: array expected");
                message.requestedInterconnectionScheduleProfile = [];
                for (var i = 0; i < object.requestedInterconnectionScheduleProfile.length; ++i) {
                    if (typeof object.requestedInterconnectionScheduleProfile[i] !== "object")
                        throw TypeError(".optimizermodule.RequestedInterconnectionScheduleProfileList.requestedInterconnectionScheduleProfile: object expected");
                    message.requestedInterconnectionScheduleProfile[i] = $root.interconnectionmodule.RequestedInterconnectionScheduleProfile.fromObject(object.requestedInterconnectionScheduleProfile[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestedInterconnectionScheduleProfileList message. Also converts values to other types if specified.
         * @function toObject
         * @memberof optimizermodule.RequestedInterconnectionScheduleProfileList
         * @static
         * @param {optimizermodule.RequestedInterconnectionScheduleProfileList} message RequestedInterconnectionScheduleProfileList
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestedInterconnectionScheduleProfileList.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.requestedInterconnectionScheduleProfile = [];
            if (message.requestedInterconnectionScheduleProfile && message.requestedInterconnectionScheduleProfile.length) {
                object.requestedInterconnectionScheduleProfile = [];
                for (var j = 0; j < message.requestedInterconnectionScheduleProfile.length; ++j)
                    object.requestedInterconnectionScheduleProfile[j] = $root.interconnectionmodule.RequestedInterconnectionScheduleProfile.toObject(message.requestedInterconnectionScheduleProfile[j], options);
            }
            return object;
        };

        /**
         * Converts this RequestedInterconnectionScheduleProfileList to JSON.
         * @function toJSON
         * @memberof optimizermodule.RequestedInterconnectionScheduleProfileList
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestedInterconnectionScheduleProfileList.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestedInterconnectionScheduleProfileList;
    })();

    optimizermodule.RequestedOptimizerScheduleProfile = (function() {

        /**
         * Properties of a RequestedOptimizerScheduleProfile.
         * @memberof optimizermodule
         * @interface IRequestedOptimizerScheduleProfile
         * @property {commonmodule.IOptimizationMessageInfo|null} [optimizationMessageInfo] RequestedOptimizerScheduleProfile optimizationMessageInfo
         * @property {commonmodule.IApplicationSystem|null} [applicationSystem] RequestedOptimizerScheduleProfile applicationSystem
         * @property {optimizermodule.IESSControlScheduleProfileList|null} [essControlScheduleProfileList] RequestedOptimizerScheduleProfile essControlScheduleProfileList
         * @property {optimizermodule.IGenerationControlScheduleProfileList|null} [generationControlScheduleProfileList] RequestedOptimizerScheduleProfile generationControlScheduleProfileList
         * @property {optimizermodule.ILoadControlScheduleProfileList|null} [loadControlScheduleProfileList] RequestedOptimizerScheduleProfile loadControlScheduleProfileList
         * @property {optimizermodule.IRegulatorControlScheduleProfileList|null} [regulatorControlScheduleProfileList] RequestedOptimizerScheduleProfile regulatorControlScheduleProfileList
         * @property {optimizermodule.IRequestedInterconnectionScheduleProfileList|null} [requestedInterconnectionScheduleProfileList] RequestedOptimizerScheduleProfile requestedInterconnectionScheduleProfileList
         * @property {optimizermodule.ISolarControlScheduleProfileList|null} [solarControlScheduleProfileList] RequestedOptimizerScheduleProfile solarControlScheduleProfileList
         * @property {optimizermodule.ISwitchControlScheduleProfileList|null} [switchControlScheduleProfileList] RequestedOptimizerScheduleProfile switchControlScheduleProfileList
         */

        /**
         * Constructs a new RequestedOptimizerScheduleProfile.
         * @memberof optimizermodule
         * @classdesc Represents a RequestedOptimizerScheduleProfile.
         * @implements IRequestedOptimizerScheduleProfile
         * @constructor
         * @param {optimizermodule.IRequestedOptimizerScheduleProfile=} [properties] Properties to set
         */
        function RequestedOptimizerScheduleProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestedOptimizerScheduleProfile optimizationMessageInfo.
         * @member {commonmodule.IOptimizationMessageInfo|null|undefined} optimizationMessageInfo
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @instance
         */
        RequestedOptimizerScheduleProfile.prototype.optimizationMessageInfo = null;

        /**
         * RequestedOptimizerScheduleProfile applicationSystem.
         * @member {commonmodule.IApplicationSystem|null|undefined} applicationSystem
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @instance
         */
        RequestedOptimizerScheduleProfile.prototype.applicationSystem = null;

        /**
         * RequestedOptimizerScheduleProfile essControlScheduleProfileList.
         * @member {optimizermodule.IESSControlScheduleProfileList|null|undefined} essControlScheduleProfileList
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @instance
         */
        RequestedOptimizerScheduleProfile.prototype.essControlScheduleProfileList = null;

        /**
         * RequestedOptimizerScheduleProfile generationControlScheduleProfileList.
         * @member {optimizermodule.IGenerationControlScheduleProfileList|null|undefined} generationControlScheduleProfileList
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @instance
         */
        RequestedOptimizerScheduleProfile.prototype.generationControlScheduleProfileList = null;

        /**
         * RequestedOptimizerScheduleProfile loadControlScheduleProfileList.
         * @member {optimizermodule.ILoadControlScheduleProfileList|null|undefined} loadControlScheduleProfileList
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @instance
         */
        RequestedOptimizerScheduleProfile.prototype.loadControlScheduleProfileList = null;

        /**
         * RequestedOptimizerScheduleProfile regulatorControlScheduleProfileList.
         * @member {optimizermodule.IRegulatorControlScheduleProfileList|null|undefined} regulatorControlScheduleProfileList
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @instance
         */
        RequestedOptimizerScheduleProfile.prototype.regulatorControlScheduleProfileList = null;

        /**
         * RequestedOptimizerScheduleProfile requestedInterconnectionScheduleProfileList.
         * @member {optimizermodule.IRequestedInterconnectionScheduleProfileList|null|undefined} requestedInterconnectionScheduleProfileList
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @instance
         */
        RequestedOptimizerScheduleProfile.prototype.requestedInterconnectionScheduleProfileList = null;

        /**
         * RequestedOptimizerScheduleProfile solarControlScheduleProfileList.
         * @member {optimizermodule.ISolarControlScheduleProfileList|null|undefined} solarControlScheduleProfileList
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @instance
         */
        RequestedOptimizerScheduleProfile.prototype.solarControlScheduleProfileList = null;

        /**
         * RequestedOptimizerScheduleProfile switchControlScheduleProfileList.
         * @member {optimizermodule.ISwitchControlScheduleProfileList|null|undefined} switchControlScheduleProfileList
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @instance
         */
        RequestedOptimizerScheduleProfile.prototype.switchControlScheduleProfileList = null;

        /**
         * Creates a new RequestedOptimizerScheduleProfile instance using the specified properties.
         * @function create
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @static
         * @param {optimizermodule.IRequestedOptimizerScheduleProfile=} [properties] Properties to set
         * @returns {optimizermodule.RequestedOptimizerScheduleProfile} RequestedOptimizerScheduleProfile instance
         */
        RequestedOptimizerScheduleProfile.create = function create(properties) {
            return new RequestedOptimizerScheduleProfile(properties);
        };

        /**
         * Encodes the specified RequestedOptimizerScheduleProfile message. Does not implicitly {@link optimizermodule.RequestedOptimizerScheduleProfile.verify|verify} messages.
         * @function encode
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @static
         * @param {optimizermodule.IRequestedOptimizerScheduleProfile} message RequestedOptimizerScheduleProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestedOptimizerScheduleProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.optimizationMessageInfo != null && Object.hasOwnProperty.call(message, "optimizationMessageInfo"))
                $root.commonmodule.OptimizationMessageInfo.encode(message.optimizationMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.applicationSystem != null && Object.hasOwnProperty.call(message, "applicationSystem"))
                $root.commonmodule.ApplicationSystem.encode(message.applicationSystem, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.essControlScheduleProfileList != null && Object.hasOwnProperty.call(message, "essControlScheduleProfileList"))
                $root.optimizermodule.ESSControlScheduleProfileList.encode(message.essControlScheduleProfileList, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.generationControlScheduleProfileList != null && Object.hasOwnProperty.call(message, "generationControlScheduleProfileList"))
                $root.optimizermodule.GenerationControlScheduleProfileList.encode(message.generationControlScheduleProfileList, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.loadControlScheduleProfileList != null && Object.hasOwnProperty.call(message, "loadControlScheduleProfileList"))
                $root.optimizermodule.LoadControlScheduleProfileList.encode(message.loadControlScheduleProfileList, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.regulatorControlScheduleProfileList != null && Object.hasOwnProperty.call(message, "regulatorControlScheduleProfileList"))
                $root.optimizermodule.RegulatorControlScheduleProfileList.encode(message.regulatorControlScheduleProfileList, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.requestedInterconnectionScheduleProfileList != null && Object.hasOwnProperty.call(message, "requestedInterconnectionScheduleProfileList"))
                $root.optimizermodule.RequestedInterconnectionScheduleProfileList.encode(message.requestedInterconnectionScheduleProfileList, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.solarControlScheduleProfileList != null && Object.hasOwnProperty.call(message, "solarControlScheduleProfileList"))
                $root.optimizermodule.SolarControlScheduleProfileList.encode(message.solarControlScheduleProfileList, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.switchControlScheduleProfileList != null && Object.hasOwnProperty.call(message, "switchControlScheduleProfileList"))
                $root.optimizermodule.SwitchControlScheduleProfileList.encode(message.switchControlScheduleProfileList, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestedOptimizerScheduleProfile message, length delimited. Does not implicitly {@link optimizermodule.RequestedOptimizerScheduleProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @static
         * @param {optimizermodule.IRequestedOptimizerScheduleProfile} message RequestedOptimizerScheduleProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestedOptimizerScheduleProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestedOptimizerScheduleProfile message from the specified reader or buffer.
         * @function decode
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {optimizermodule.RequestedOptimizerScheduleProfile} RequestedOptimizerScheduleProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestedOptimizerScheduleProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.optimizermodule.RequestedOptimizerScheduleProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.optimizationMessageInfo = $root.commonmodule.OptimizationMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.applicationSystem = $root.commonmodule.ApplicationSystem.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.essControlScheduleProfileList = $root.optimizermodule.ESSControlScheduleProfileList.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.generationControlScheduleProfileList = $root.optimizermodule.GenerationControlScheduleProfileList.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.loadControlScheduleProfileList = $root.optimizermodule.LoadControlScheduleProfileList.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.regulatorControlScheduleProfileList = $root.optimizermodule.RegulatorControlScheduleProfileList.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.requestedInterconnectionScheduleProfileList = $root.optimizermodule.RequestedInterconnectionScheduleProfileList.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.solarControlScheduleProfileList = $root.optimizermodule.SolarControlScheduleProfileList.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.switchControlScheduleProfileList = $root.optimizermodule.SwitchControlScheduleProfileList.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestedOptimizerScheduleProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {optimizermodule.RequestedOptimizerScheduleProfile} RequestedOptimizerScheduleProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestedOptimizerScheduleProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestedOptimizerScheduleProfile message.
         * @function verify
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestedOptimizerScheduleProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.optimizationMessageInfo != null && message.hasOwnProperty("optimizationMessageInfo")) {
                var error = $root.commonmodule.OptimizationMessageInfo.verify(message.optimizationMessageInfo);
                if (error)
                    return "optimizationMessageInfo." + error;
            }
            if (message.applicationSystem != null && message.hasOwnProperty("applicationSystem")) {
                var error = $root.commonmodule.ApplicationSystem.verify(message.applicationSystem);
                if (error)
                    return "applicationSystem." + error;
            }
            if (message.essControlScheduleProfileList != null && message.hasOwnProperty("essControlScheduleProfileList")) {
                var error = $root.optimizermodule.ESSControlScheduleProfileList.verify(message.essControlScheduleProfileList);
                if (error)
                    return "essControlScheduleProfileList." + error;
            }
            if (message.generationControlScheduleProfileList != null && message.hasOwnProperty("generationControlScheduleProfileList")) {
                var error = $root.optimizermodule.GenerationControlScheduleProfileList.verify(message.generationControlScheduleProfileList);
                if (error)
                    return "generationControlScheduleProfileList." + error;
            }
            if (message.loadControlScheduleProfileList != null && message.hasOwnProperty("loadControlScheduleProfileList")) {
                var error = $root.optimizermodule.LoadControlScheduleProfileList.verify(message.loadControlScheduleProfileList);
                if (error)
                    return "loadControlScheduleProfileList." + error;
            }
            if (message.regulatorControlScheduleProfileList != null && message.hasOwnProperty("regulatorControlScheduleProfileList")) {
                var error = $root.optimizermodule.RegulatorControlScheduleProfileList.verify(message.regulatorControlScheduleProfileList);
                if (error)
                    return "regulatorControlScheduleProfileList." + error;
            }
            if (message.requestedInterconnectionScheduleProfileList != null && message.hasOwnProperty("requestedInterconnectionScheduleProfileList")) {
                var error = $root.optimizermodule.RequestedInterconnectionScheduleProfileList.verify(message.requestedInterconnectionScheduleProfileList);
                if (error)
                    return "requestedInterconnectionScheduleProfileList." + error;
            }
            if (message.solarControlScheduleProfileList != null && message.hasOwnProperty("solarControlScheduleProfileList")) {
                var error = $root.optimizermodule.SolarControlScheduleProfileList.verify(message.solarControlScheduleProfileList);
                if (error)
                    return "solarControlScheduleProfileList." + error;
            }
            if (message.switchControlScheduleProfileList != null && message.hasOwnProperty("switchControlScheduleProfileList")) {
                var error = $root.optimizermodule.SwitchControlScheduleProfileList.verify(message.switchControlScheduleProfileList);
                if (error)
                    return "switchControlScheduleProfileList." + error;
            }
            return null;
        };

        /**
         * Creates a RequestedOptimizerScheduleProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {optimizermodule.RequestedOptimizerScheduleProfile} RequestedOptimizerScheduleProfile
         */
        RequestedOptimizerScheduleProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.optimizermodule.RequestedOptimizerScheduleProfile)
                return object;
            var message = new $root.optimizermodule.RequestedOptimizerScheduleProfile();
            if (object.optimizationMessageInfo != null) {
                if (typeof object.optimizationMessageInfo !== "object")
                    throw TypeError(".optimizermodule.RequestedOptimizerScheduleProfile.optimizationMessageInfo: object expected");
                message.optimizationMessageInfo = $root.commonmodule.OptimizationMessageInfo.fromObject(object.optimizationMessageInfo);
            }
            if (object.applicationSystem != null) {
                if (typeof object.applicationSystem !== "object")
                    throw TypeError(".optimizermodule.RequestedOptimizerScheduleProfile.applicationSystem: object expected");
                message.applicationSystem = $root.commonmodule.ApplicationSystem.fromObject(object.applicationSystem);
            }
            if (object.essControlScheduleProfileList != null) {
                if (typeof object.essControlScheduleProfileList !== "object")
                    throw TypeError(".optimizermodule.RequestedOptimizerScheduleProfile.essControlScheduleProfileList: object expected");
                message.essControlScheduleProfileList = $root.optimizermodule.ESSControlScheduleProfileList.fromObject(object.essControlScheduleProfileList);
            }
            if (object.generationControlScheduleProfileList != null) {
                if (typeof object.generationControlScheduleProfileList !== "object")
                    throw TypeError(".optimizermodule.RequestedOptimizerScheduleProfile.generationControlScheduleProfileList: object expected");
                message.generationControlScheduleProfileList = $root.optimizermodule.GenerationControlScheduleProfileList.fromObject(object.generationControlScheduleProfileList);
            }
            if (object.loadControlScheduleProfileList != null) {
                if (typeof object.loadControlScheduleProfileList !== "object")
                    throw TypeError(".optimizermodule.RequestedOptimizerScheduleProfile.loadControlScheduleProfileList: object expected");
                message.loadControlScheduleProfileList = $root.optimizermodule.LoadControlScheduleProfileList.fromObject(object.loadControlScheduleProfileList);
            }
            if (object.regulatorControlScheduleProfileList != null) {
                if (typeof object.regulatorControlScheduleProfileList !== "object")
                    throw TypeError(".optimizermodule.RequestedOptimizerScheduleProfile.regulatorControlScheduleProfileList: object expected");
                message.regulatorControlScheduleProfileList = $root.optimizermodule.RegulatorControlScheduleProfileList.fromObject(object.regulatorControlScheduleProfileList);
            }
            if (object.requestedInterconnectionScheduleProfileList != null) {
                if (typeof object.requestedInterconnectionScheduleProfileList !== "object")
                    throw TypeError(".optimizermodule.RequestedOptimizerScheduleProfile.requestedInterconnectionScheduleProfileList: object expected");
                message.requestedInterconnectionScheduleProfileList = $root.optimizermodule.RequestedInterconnectionScheduleProfileList.fromObject(object.requestedInterconnectionScheduleProfileList);
            }
            if (object.solarControlScheduleProfileList != null) {
                if (typeof object.solarControlScheduleProfileList !== "object")
                    throw TypeError(".optimizermodule.RequestedOptimizerScheduleProfile.solarControlScheduleProfileList: object expected");
                message.solarControlScheduleProfileList = $root.optimizermodule.SolarControlScheduleProfileList.fromObject(object.solarControlScheduleProfileList);
            }
            if (object.switchControlScheduleProfileList != null) {
                if (typeof object.switchControlScheduleProfileList !== "object")
                    throw TypeError(".optimizermodule.RequestedOptimizerScheduleProfile.switchControlScheduleProfileList: object expected");
                message.switchControlScheduleProfileList = $root.optimizermodule.SwitchControlScheduleProfileList.fromObject(object.switchControlScheduleProfileList);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestedOptimizerScheduleProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @static
         * @param {optimizermodule.RequestedOptimizerScheduleProfile} message RequestedOptimizerScheduleProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestedOptimizerScheduleProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.optimizationMessageInfo = null;
                object.applicationSystem = null;
                object.essControlScheduleProfileList = null;
                object.generationControlScheduleProfileList = null;
                object.loadControlScheduleProfileList = null;
                object.regulatorControlScheduleProfileList = null;
                object.requestedInterconnectionScheduleProfileList = null;
                object.solarControlScheduleProfileList = null;
                object.switchControlScheduleProfileList = null;
            }
            if (message.optimizationMessageInfo != null && message.hasOwnProperty("optimizationMessageInfo"))
                object.optimizationMessageInfo = $root.commonmodule.OptimizationMessageInfo.toObject(message.optimizationMessageInfo, options);
            if (message.applicationSystem != null && message.hasOwnProperty("applicationSystem"))
                object.applicationSystem = $root.commonmodule.ApplicationSystem.toObject(message.applicationSystem, options);
            if (message.essControlScheduleProfileList != null && message.hasOwnProperty("essControlScheduleProfileList"))
                object.essControlScheduleProfileList = $root.optimizermodule.ESSControlScheduleProfileList.toObject(message.essControlScheduleProfileList, options);
            if (message.generationControlScheduleProfileList != null && message.hasOwnProperty("generationControlScheduleProfileList"))
                object.generationControlScheduleProfileList = $root.optimizermodule.GenerationControlScheduleProfileList.toObject(message.generationControlScheduleProfileList, options);
            if (message.loadControlScheduleProfileList != null && message.hasOwnProperty("loadControlScheduleProfileList"))
                object.loadControlScheduleProfileList = $root.optimizermodule.LoadControlScheduleProfileList.toObject(message.loadControlScheduleProfileList, options);
            if (message.regulatorControlScheduleProfileList != null && message.hasOwnProperty("regulatorControlScheduleProfileList"))
                object.regulatorControlScheduleProfileList = $root.optimizermodule.RegulatorControlScheduleProfileList.toObject(message.regulatorControlScheduleProfileList, options);
            if (message.requestedInterconnectionScheduleProfileList != null && message.hasOwnProperty("requestedInterconnectionScheduleProfileList"))
                object.requestedInterconnectionScheduleProfileList = $root.optimizermodule.RequestedInterconnectionScheduleProfileList.toObject(message.requestedInterconnectionScheduleProfileList, options);
            if (message.solarControlScheduleProfileList != null && message.hasOwnProperty("solarControlScheduleProfileList"))
                object.solarControlScheduleProfileList = $root.optimizermodule.SolarControlScheduleProfileList.toObject(message.solarControlScheduleProfileList, options);
            if (message.switchControlScheduleProfileList != null && message.hasOwnProperty("switchControlScheduleProfileList"))
                object.switchControlScheduleProfileList = $root.optimizermodule.SwitchControlScheduleProfileList.toObject(message.switchControlScheduleProfileList, options);
            return object;
        };

        /**
         * Converts this RequestedOptimizerScheduleProfile to JSON.
         * @function toJSON
         * @memberof optimizermodule.RequestedOptimizerScheduleProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestedOptimizerScheduleProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestedOptimizerScheduleProfile;
    })();

    return optimizermodule;
})();

$root.resourcemodule = (function() {

    /**
     * Namespace resourcemodule.
     * @exports resourcemodule
     * @namespace
     */
    var resourcemodule = {};

    resourcemodule.ResourceReading = (function() {

        /**
         * Properties of a ResourceReading.
         * @memberof resourcemodule
         * @interface IResourceReading
         * @property {commonmodule.IConductingEquipmentTerminalReading|null} [conductingEquipmentTerminalReading] ResourceReading conductingEquipmentTerminalReading
         * @property {commonmodule.IPhaseMMTN|null} [phaseMMTN] ResourceReading phaseMMTN
         * @property {commonmodule.IReadingMMTR|null} [readingMMTR] ResourceReading readingMMTR
         * @property {commonmodule.IReadingMMXU|null} [readingMMXU] ResourceReading readingMMXU
         */

        /**
         * Constructs a new ResourceReading.
         * @memberof resourcemodule
         * @classdesc Represents a ResourceReading.
         * @implements IResourceReading
         * @constructor
         * @param {resourcemodule.IResourceReading=} [properties] Properties to set
         */
        function ResourceReading(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ResourceReading conductingEquipmentTerminalReading.
         * @member {commonmodule.IConductingEquipmentTerminalReading|null|undefined} conductingEquipmentTerminalReading
         * @memberof resourcemodule.ResourceReading
         * @instance
         */
        ResourceReading.prototype.conductingEquipmentTerminalReading = null;

        /**
         * ResourceReading phaseMMTN.
         * @member {commonmodule.IPhaseMMTN|null|undefined} phaseMMTN
         * @memberof resourcemodule.ResourceReading
         * @instance
         */
        ResourceReading.prototype.phaseMMTN = null;

        /**
         * ResourceReading readingMMTR.
         * @member {commonmodule.IReadingMMTR|null|undefined} readingMMTR
         * @memberof resourcemodule.ResourceReading
         * @instance
         */
        ResourceReading.prototype.readingMMTR = null;

        /**
         * ResourceReading readingMMXU.
         * @member {commonmodule.IReadingMMXU|null|undefined} readingMMXU
         * @memberof resourcemodule.ResourceReading
         * @instance
         */
        ResourceReading.prototype.readingMMXU = null;

        /**
         * Creates a new ResourceReading instance using the specified properties.
         * @function create
         * @memberof resourcemodule.ResourceReading
         * @static
         * @param {resourcemodule.IResourceReading=} [properties] Properties to set
         * @returns {resourcemodule.ResourceReading} ResourceReading instance
         */
        ResourceReading.create = function create(properties) {
            return new ResourceReading(properties);
        };

        /**
         * Encodes the specified ResourceReading message. Does not implicitly {@link resourcemodule.ResourceReading.verify|verify} messages.
         * @function encode
         * @memberof resourcemodule.ResourceReading
         * @static
         * @param {resourcemodule.IResourceReading} message ResourceReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ResourceReading.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipmentTerminalReading != null && Object.hasOwnProperty.call(message, "conductingEquipmentTerminalReading"))
                $root.commonmodule.ConductingEquipmentTerminalReading.encode(message.conductingEquipmentTerminalReading, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.phaseMMTN != null && Object.hasOwnProperty.call(message, "phaseMMTN"))
                $root.commonmodule.PhaseMMTN.encode(message.phaseMMTN, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.readingMMTR != null && Object.hasOwnProperty.call(message, "readingMMTR"))
                $root.commonmodule.ReadingMMTR.encode(message.readingMMTR, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.readingMMXU != null && Object.hasOwnProperty.call(message, "readingMMXU"))
                $root.commonmodule.ReadingMMXU.encode(message.readingMMXU, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ResourceReading message, length delimited. Does not implicitly {@link resourcemodule.ResourceReading.verify|verify} messages.
         * @function encodeDelimited
         * @memberof resourcemodule.ResourceReading
         * @static
         * @param {resourcemodule.IResourceReading} message ResourceReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ResourceReading.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ResourceReading message from the specified reader or buffer.
         * @function decode
         * @memberof resourcemodule.ResourceReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {resourcemodule.ResourceReading} ResourceReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ResourceReading.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.resourcemodule.ResourceReading();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.phaseMMTN = $root.commonmodule.PhaseMMTN.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.readingMMTR = $root.commonmodule.ReadingMMTR.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.readingMMXU = $root.commonmodule.ReadingMMXU.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ResourceReading message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof resourcemodule.ResourceReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {resourcemodule.ResourceReading} ResourceReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ResourceReading.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ResourceReading message.
         * @function verify
         * @memberof resourcemodule.ResourceReading
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ResourceReading.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading")) {
                var error = $root.commonmodule.ConductingEquipmentTerminalReading.verify(message.conductingEquipmentTerminalReading);
                if (error)
                    return "conductingEquipmentTerminalReading." + error;
            }
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN")) {
                var error = $root.commonmodule.PhaseMMTN.verify(message.phaseMMTN);
                if (error)
                    return "phaseMMTN." + error;
            }
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR")) {
                var error = $root.commonmodule.ReadingMMTR.verify(message.readingMMTR);
                if (error)
                    return "readingMMTR." + error;
            }
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU")) {
                var error = $root.commonmodule.ReadingMMXU.verify(message.readingMMXU);
                if (error)
                    return "readingMMXU." + error;
            }
            return null;
        };

        /**
         * Creates a ResourceReading message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof resourcemodule.ResourceReading
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {resourcemodule.ResourceReading} ResourceReading
         */
        ResourceReading.fromObject = function fromObject(object) {
            if (object instanceof $root.resourcemodule.ResourceReading)
                return object;
            var message = new $root.resourcemodule.ResourceReading();
            if (object.conductingEquipmentTerminalReading != null) {
                if (typeof object.conductingEquipmentTerminalReading !== "object")
                    throw TypeError(".resourcemodule.ResourceReading.conductingEquipmentTerminalReading: object expected");
                message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.fromObject(object.conductingEquipmentTerminalReading);
            }
            if (object.phaseMMTN != null) {
                if (typeof object.phaseMMTN !== "object")
                    throw TypeError(".resourcemodule.ResourceReading.phaseMMTN: object expected");
                message.phaseMMTN = $root.commonmodule.PhaseMMTN.fromObject(object.phaseMMTN);
            }
            if (object.readingMMTR != null) {
                if (typeof object.readingMMTR !== "object")
                    throw TypeError(".resourcemodule.ResourceReading.readingMMTR: object expected");
                message.readingMMTR = $root.commonmodule.ReadingMMTR.fromObject(object.readingMMTR);
            }
            if (object.readingMMXU != null) {
                if (typeof object.readingMMXU !== "object")
                    throw TypeError(".resourcemodule.ResourceReading.readingMMXU: object expected");
                message.readingMMXU = $root.commonmodule.ReadingMMXU.fromObject(object.readingMMXU);
            }
            return message;
        };

        /**
         * Creates a plain object from a ResourceReading message. Also converts values to other types if specified.
         * @function toObject
         * @memberof resourcemodule.ResourceReading
         * @static
         * @param {resourcemodule.ResourceReading} message ResourceReading
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ResourceReading.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conductingEquipmentTerminalReading = null;
                object.phaseMMTN = null;
                object.readingMMTR = null;
                object.readingMMXU = null;
            }
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading"))
                object.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.toObject(message.conductingEquipmentTerminalReading, options);
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN"))
                object.phaseMMTN = $root.commonmodule.PhaseMMTN.toObject(message.phaseMMTN, options);
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR"))
                object.readingMMTR = $root.commonmodule.ReadingMMTR.toObject(message.readingMMTR, options);
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU"))
                object.readingMMXU = $root.commonmodule.ReadingMMXU.toObject(message.readingMMXU, options);
            return object;
        };

        /**
         * Converts this ResourceReading to JSON.
         * @function toJSON
         * @memberof resourcemodule.ResourceReading
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ResourceReading.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResourceReading;
    })();

    resourcemodule.ResourceReadingProfile = (function() {

        /**
         * Properties of a ResourceReadingProfile.
         * @memberof resourcemodule
         * @interface IResourceReadingProfile
         * @property {commonmodule.IReadingMessageInfo|null} [readingMessageInfo] ResourceReadingProfile readingMessageInfo
         * @property {commonmodule.IConductingEquipment|null} [conductingEquipment] ResourceReadingProfile conductingEquipment
         * @property {commonmodule.IIED|null} [ied] ResourceReadingProfile ied
         * @property {resourcemodule.IResourceReading|null} [resourceReading] ResourceReadingProfile resourceReading
         */

        /**
         * Constructs a new ResourceReadingProfile.
         * @memberof resourcemodule
         * @classdesc Represents a ResourceReadingProfile.
         * @implements IResourceReadingProfile
         * @constructor
         * @param {resourcemodule.IResourceReadingProfile=} [properties] Properties to set
         */
        function ResourceReadingProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ResourceReadingProfile readingMessageInfo.
         * @member {commonmodule.IReadingMessageInfo|null|undefined} readingMessageInfo
         * @memberof resourcemodule.ResourceReadingProfile
         * @instance
         */
        ResourceReadingProfile.prototype.readingMessageInfo = null;

        /**
         * ResourceReadingProfile conductingEquipment.
         * @member {commonmodule.IConductingEquipment|null|undefined} conductingEquipment
         * @memberof resourcemodule.ResourceReadingProfile
         * @instance
         */
        ResourceReadingProfile.prototype.conductingEquipment = null;

        /**
         * ResourceReadingProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof resourcemodule.ResourceReadingProfile
         * @instance
         */
        ResourceReadingProfile.prototype.ied = null;

        /**
         * ResourceReadingProfile resourceReading.
         * @member {resourcemodule.IResourceReading|null|undefined} resourceReading
         * @memberof resourcemodule.ResourceReadingProfile
         * @instance
         */
        ResourceReadingProfile.prototype.resourceReading = null;

        /**
         * Creates a new ResourceReadingProfile instance using the specified properties.
         * @function create
         * @memberof resourcemodule.ResourceReadingProfile
         * @static
         * @param {resourcemodule.IResourceReadingProfile=} [properties] Properties to set
         * @returns {resourcemodule.ResourceReadingProfile} ResourceReadingProfile instance
         */
        ResourceReadingProfile.create = function create(properties) {
            return new ResourceReadingProfile(properties);
        };

        /**
         * Encodes the specified ResourceReadingProfile message. Does not implicitly {@link resourcemodule.ResourceReadingProfile.verify|verify} messages.
         * @function encode
         * @memberof resourcemodule.ResourceReadingProfile
         * @static
         * @param {resourcemodule.IResourceReadingProfile} message ResourceReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ResourceReadingProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.readingMessageInfo != null && Object.hasOwnProperty.call(message, "readingMessageInfo"))
                $root.commonmodule.ReadingMessageInfo.encode(message.readingMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.conductingEquipment != null && Object.hasOwnProperty.call(message, "conductingEquipment"))
                $root.commonmodule.ConductingEquipment.encode(message.conductingEquipment, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.resourceReading != null && Object.hasOwnProperty.call(message, "resourceReading"))
                $root.resourcemodule.ResourceReading.encode(message.resourceReading, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ResourceReadingProfile message, length delimited. Does not implicitly {@link resourcemodule.ResourceReadingProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof resourcemodule.ResourceReadingProfile
         * @static
         * @param {resourcemodule.IResourceReadingProfile} message ResourceReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ResourceReadingProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ResourceReadingProfile message from the specified reader or buffer.
         * @function decode
         * @memberof resourcemodule.ResourceReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {resourcemodule.ResourceReadingProfile} ResourceReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ResourceReadingProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.resourcemodule.ResourceReadingProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.conductingEquipment = $root.commonmodule.ConductingEquipment.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.resourceReading = $root.resourcemodule.ResourceReading.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ResourceReadingProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof resourcemodule.ResourceReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {resourcemodule.ResourceReadingProfile} ResourceReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ResourceReadingProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ResourceReadingProfile message.
         * @function verify
         * @memberof resourcemodule.ResourceReadingProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ResourceReadingProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo")) {
                var error = $root.commonmodule.ReadingMessageInfo.verify(message.readingMessageInfo);
                if (error)
                    return "readingMessageInfo." + error;
            }
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment")) {
                var error = $root.commonmodule.ConductingEquipment.verify(message.conductingEquipment);
                if (error)
                    return "conductingEquipment." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.resourceReading != null && message.hasOwnProperty("resourceReading")) {
                var error = $root.resourcemodule.ResourceReading.verify(message.resourceReading);
                if (error)
                    return "resourceReading." + error;
            }
            return null;
        };

        /**
         * Creates a ResourceReadingProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof resourcemodule.ResourceReadingProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {resourcemodule.ResourceReadingProfile} ResourceReadingProfile
         */
        ResourceReadingProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.resourcemodule.ResourceReadingProfile)
                return object;
            var message = new $root.resourcemodule.ResourceReadingProfile();
            if (object.readingMessageInfo != null) {
                if (typeof object.readingMessageInfo !== "object")
                    throw TypeError(".resourcemodule.ResourceReadingProfile.readingMessageInfo: object expected");
                message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.fromObject(object.readingMessageInfo);
            }
            if (object.conductingEquipment != null) {
                if (typeof object.conductingEquipment !== "object")
                    throw TypeError(".resourcemodule.ResourceReadingProfile.conductingEquipment: object expected");
                message.conductingEquipment = $root.commonmodule.ConductingEquipment.fromObject(object.conductingEquipment);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".resourcemodule.ResourceReadingProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.resourceReading != null) {
                if (typeof object.resourceReading !== "object")
                    throw TypeError(".resourcemodule.ResourceReadingProfile.resourceReading: object expected");
                message.resourceReading = $root.resourcemodule.ResourceReading.fromObject(object.resourceReading);
            }
            return message;
        };

        /**
         * Creates a plain object from a ResourceReadingProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof resourcemodule.ResourceReadingProfile
         * @static
         * @param {resourcemodule.ResourceReadingProfile} message ResourceReadingProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ResourceReadingProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.readingMessageInfo = null;
                object.conductingEquipment = null;
                object.ied = null;
                object.resourceReading = null;
            }
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo"))
                object.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.toObject(message.readingMessageInfo, options);
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment"))
                object.conductingEquipment = $root.commonmodule.ConductingEquipment.toObject(message.conductingEquipment, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.resourceReading != null && message.hasOwnProperty("resourceReading"))
                object.resourceReading = $root.resourcemodule.ResourceReading.toObject(message.resourceReading, options);
            return object;
        };

        /**
         * Converts this ResourceReadingProfile to JSON.
         * @function toJSON
         * @memberof resourcemodule.ResourceReadingProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ResourceReadingProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResourceReadingProfile;
    })();

    resourcemodule.ResourceStatus = (function() {

        /**
         * Properties of a ResourceStatus.
         * @memberof resourcemodule
         * @interface IResourceStatus
         * @property {commonmodule.IStatusValue|null} [statusValue] ResourceStatus statusValue
         * @property {Array.<commonmodule.IAnalogStatusGGIO>|null} [analogStatusGGIO] ResourceStatus analogStatusGGIO
         * @property {Array.<commonmodule.IBooleanStatusGGIO>|null} [booleanStatusGGIO] ResourceStatus booleanStatusGGIO
         * @property {Array.<commonmodule.IIntegerStatusGGIO>|null} [integerStatusGGIO] ResourceStatus integerStatusGGIO
         * @property {Array.<commonmodule.IStringStatusGGIO>|null} [stringStatusGGIO] ResourceStatus stringStatusGGIO
         */

        /**
         * Constructs a new ResourceStatus.
         * @memberof resourcemodule
         * @classdesc Represents a ResourceStatus.
         * @implements IResourceStatus
         * @constructor
         * @param {resourcemodule.IResourceStatus=} [properties] Properties to set
         */
        function ResourceStatus(properties) {
            this.analogStatusGGIO = [];
            this.booleanStatusGGIO = [];
            this.integerStatusGGIO = [];
            this.stringStatusGGIO = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ResourceStatus statusValue.
         * @member {commonmodule.IStatusValue|null|undefined} statusValue
         * @memberof resourcemodule.ResourceStatus
         * @instance
         */
        ResourceStatus.prototype.statusValue = null;

        /**
         * ResourceStatus analogStatusGGIO.
         * @member {Array.<commonmodule.IAnalogStatusGGIO>} analogStatusGGIO
         * @memberof resourcemodule.ResourceStatus
         * @instance
         */
        ResourceStatus.prototype.analogStatusGGIO = $util.emptyArray;

        /**
         * ResourceStatus booleanStatusGGIO.
         * @member {Array.<commonmodule.IBooleanStatusGGIO>} booleanStatusGGIO
         * @memberof resourcemodule.ResourceStatus
         * @instance
         */
        ResourceStatus.prototype.booleanStatusGGIO = $util.emptyArray;

        /**
         * ResourceStatus integerStatusGGIO.
         * @member {Array.<commonmodule.IIntegerStatusGGIO>} integerStatusGGIO
         * @memberof resourcemodule.ResourceStatus
         * @instance
         */
        ResourceStatus.prototype.integerStatusGGIO = $util.emptyArray;

        /**
         * ResourceStatus stringStatusGGIO.
         * @member {Array.<commonmodule.IStringStatusGGIO>} stringStatusGGIO
         * @memberof resourcemodule.ResourceStatus
         * @instance
         */
        ResourceStatus.prototype.stringStatusGGIO = $util.emptyArray;

        /**
         * Creates a new ResourceStatus instance using the specified properties.
         * @function create
         * @memberof resourcemodule.ResourceStatus
         * @static
         * @param {resourcemodule.IResourceStatus=} [properties] Properties to set
         * @returns {resourcemodule.ResourceStatus} ResourceStatus instance
         */
        ResourceStatus.create = function create(properties) {
            return new ResourceStatus(properties);
        };

        /**
         * Encodes the specified ResourceStatus message. Does not implicitly {@link resourcemodule.ResourceStatus.verify|verify} messages.
         * @function encode
         * @memberof resourcemodule.ResourceStatus
         * @static
         * @param {resourcemodule.IResourceStatus} message ResourceStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ResourceStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusValue != null && Object.hasOwnProperty.call(message, "statusValue"))
                $root.commonmodule.StatusValue.encode(message.statusValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.analogStatusGGIO != null && message.analogStatusGGIO.length)
                for (var i = 0; i < message.analogStatusGGIO.length; ++i)
                    $root.commonmodule.AnalogStatusGGIO.encode(message.analogStatusGGIO[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.booleanStatusGGIO != null && message.booleanStatusGGIO.length)
                for (var i = 0; i < message.booleanStatusGGIO.length; ++i)
                    $root.commonmodule.BooleanStatusGGIO.encode(message.booleanStatusGGIO[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.integerStatusGGIO != null && message.integerStatusGGIO.length)
                for (var i = 0; i < message.integerStatusGGIO.length; ++i)
                    $root.commonmodule.IntegerStatusGGIO.encode(message.integerStatusGGIO[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.stringStatusGGIO != null && message.stringStatusGGIO.length)
                for (var i = 0; i < message.stringStatusGGIO.length; ++i)
                    $root.commonmodule.StringStatusGGIO.encode(message.stringStatusGGIO[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ResourceStatus message, length delimited. Does not implicitly {@link resourcemodule.ResourceStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof resourcemodule.ResourceStatus
         * @static
         * @param {resourcemodule.IResourceStatus} message ResourceStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ResourceStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ResourceStatus message from the specified reader or buffer.
         * @function decode
         * @memberof resourcemodule.ResourceStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {resourcemodule.ResourceStatus} ResourceStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ResourceStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.resourcemodule.ResourceStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusValue = $root.commonmodule.StatusValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    if (!(message.analogStatusGGIO && message.analogStatusGGIO.length))
                        message.analogStatusGGIO = [];
                    message.analogStatusGGIO.push($root.commonmodule.AnalogStatusGGIO.decode(reader, reader.uint32()));
                    break;
                case 3:
                    if (!(message.booleanStatusGGIO && message.booleanStatusGGIO.length))
                        message.booleanStatusGGIO = [];
                    message.booleanStatusGGIO.push($root.commonmodule.BooleanStatusGGIO.decode(reader, reader.uint32()));
                    break;
                case 4:
                    if (!(message.integerStatusGGIO && message.integerStatusGGIO.length))
                        message.integerStatusGGIO = [];
                    message.integerStatusGGIO.push($root.commonmodule.IntegerStatusGGIO.decode(reader, reader.uint32()));
                    break;
                case 5:
                    if (!(message.stringStatusGGIO && message.stringStatusGGIO.length))
                        message.stringStatusGGIO = [];
                    message.stringStatusGGIO.push($root.commonmodule.StringStatusGGIO.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ResourceStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof resourcemodule.ResourceStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {resourcemodule.ResourceStatus} ResourceStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ResourceStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ResourceStatus message.
         * @function verify
         * @memberof resourcemodule.ResourceStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ResourceStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusValue != null && message.hasOwnProperty("statusValue")) {
                var error = $root.commonmodule.StatusValue.verify(message.statusValue);
                if (error)
                    return "statusValue." + error;
            }
            if (message.analogStatusGGIO != null && message.hasOwnProperty("analogStatusGGIO")) {
                if (!Array.isArray(message.analogStatusGGIO))
                    return "analogStatusGGIO: array expected";
                for (var i = 0; i < message.analogStatusGGIO.length; ++i) {
                    var error = $root.commonmodule.AnalogStatusGGIO.verify(message.analogStatusGGIO[i]);
                    if (error)
                        return "analogStatusGGIO." + error;
                }
            }
            if (message.booleanStatusGGIO != null && message.hasOwnProperty("booleanStatusGGIO")) {
                if (!Array.isArray(message.booleanStatusGGIO))
                    return "booleanStatusGGIO: array expected";
                for (var i = 0; i < message.booleanStatusGGIO.length; ++i) {
                    var error = $root.commonmodule.BooleanStatusGGIO.verify(message.booleanStatusGGIO[i]);
                    if (error)
                        return "booleanStatusGGIO." + error;
                }
            }
            if (message.integerStatusGGIO != null && message.hasOwnProperty("integerStatusGGIO")) {
                if (!Array.isArray(message.integerStatusGGIO))
                    return "integerStatusGGIO: array expected";
                for (var i = 0; i < message.integerStatusGGIO.length; ++i) {
                    var error = $root.commonmodule.IntegerStatusGGIO.verify(message.integerStatusGGIO[i]);
                    if (error)
                        return "integerStatusGGIO." + error;
                }
            }
            if (message.stringStatusGGIO != null && message.hasOwnProperty("stringStatusGGIO")) {
                if (!Array.isArray(message.stringStatusGGIO))
                    return "stringStatusGGIO: array expected";
                for (var i = 0; i < message.stringStatusGGIO.length; ++i) {
                    var error = $root.commonmodule.StringStatusGGIO.verify(message.stringStatusGGIO[i]);
                    if (error)
                        return "stringStatusGGIO." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ResourceStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof resourcemodule.ResourceStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {resourcemodule.ResourceStatus} ResourceStatus
         */
        ResourceStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.resourcemodule.ResourceStatus)
                return object;
            var message = new $root.resourcemodule.ResourceStatus();
            if (object.statusValue != null) {
                if (typeof object.statusValue !== "object")
                    throw TypeError(".resourcemodule.ResourceStatus.statusValue: object expected");
                message.statusValue = $root.commonmodule.StatusValue.fromObject(object.statusValue);
            }
            if (object.analogStatusGGIO) {
                if (!Array.isArray(object.analogStatusGGIO))
                    throw TypeError(".resourcemodule.ResourceStatus.analogStatusGGIO: array expected");
                message.analogStatusGGIO = [];
                for (var i = 0; i < object.analogStatusGGIO.length; ++i) {
                    if (typeof object.analogStatusGGIO[i] !== "object")
                        throw TypeError(".resourcemodule.ResourceStatus.analogStatusGGIO: object expected");
                    message.analogStatusGGIO[i] = $root.commonmodule.AnalogStatusGGIO.fromObject(object.analogStatusGGIO[i]);
                }
            }
            if (object.booleanStatusGGIO) {
                if (!Array.isArray(object.booleanStatusGGIO))
                    throw TypeError(".resourcemodule.ResourceStatus.booleanStatusGGIO: array expected");
                message.booleanStatusGGIO = [];
                for (var i = 0; i < object.booleanStatusGGIO.length; ++i) {
                    if (typeof object.booleanStatusGGIO[i] !== "object")
                        throw TypeError(".resourcemodule.ResourceStatus.booleanStatusGGIO: object expected");
                    message.booleanStatusGGIO[i] = $root.commonmodule.BooleanStatusGGIO.fromObject(object.booleanStatusGGIO[i]);
                }
            }
            if (object.integerStatusGGIO) {
                if (!Array.isArray(object.integerStatusGGIO))
                    throw TypeError(".resourcemodule.ResourceStatus.integerStatusGGIO: array expected");
                message.integerStatusGGIO = [];
                for (var i = 0; i < object.integerStatusGGIO.length; ++i) {
                    if (typeof object.integerStatusGGIO[i] !== "object")
                        throw TypeError(".resourcemodule.ResourceStatus.integerStatusGGIO: object expected");
                    message.integerStatusGGIO[i] = $root.commonmodule.IntegerStatusGGIO.fromObject(object.integerStatusGGIO[i]);
                }
            }
            if (object.stringStatusGGIO) {
                if (!Array.isArray(object.stringStatusGGIO))
                    throw TypeError(".resourcemodule.ResourceStatus.stringStatusGGIO: array expected");
                message.stringStatusGGIO = [];
                for (var i = 0; i < object.stringStatusGGIO.length; ++i) {
                    if (typeof object.stringStatusGGIO[i] !== "object")
                        throw TypeError(".resourcemodule.ResourceStatus.stringStatusGGIO: object expected");
                    message.stringStatusGGIO[i] = $root.commonmodule.StringStatusGGIO.fromObject(object.stringStatusGGIO[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ResourceStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof resourcemodule.ResourceStatus
         * @static
         * @param {resourcemodule.ResourceStatus} message ResourceStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ResourceStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.analogStatusGGIO = [];
                object.booleanStatusGGIO = [];
                object.integerStatusGGIO = [];
                object.stringStatusGGIO = [];
            }
            if (options.defaults)
                object.statusValue = null;
            if (message.statusValue != null && message.hasOwnProperty("statusValue"))
                object.statusValue = $root.commonmodule.StatusValue.toObject(message.statusValue, options);
            if (message.analogStatusGGIO && message.analogStatusGGIO.length) {
                object.analogStatusGGIO = [];
                for (var j = 0; j < message.analogStatusGGIO.length; ++j)
                    object.analogStatusGGIO[j] = $root.commonmodule.AnalogStatusGGIO.toObject(message.analogStatusGGIO[j], options);
            }
            if (message.booleanStatusGGIO && message.booleanStatusGGIO.length) {
                object.booleanStatusGGIO = [];
                for (var j = 0; j < message.booleanStatusGGIO.length; ++j)
                    object.booleanStatusGGIO[j] = $root.commonmodule.BooleanStatusGGIO.toObject(message.booleanStatusGGIO[j], options);
            }
            if (message.integerStatusGGIO && message.integerStatusGGIO.length) {
                object.integerStatusGGIO = [];
                for (var j = 0; j < message.integerStatusGGIO.length; ++j)
                    object.integerStatusGGIO[j] = $root.commonmodule.IntegerStatusGGIO.toObject(message.integerStatusGGIO[j], options);
            }
            if (message.stringStatusGGIO && message.stringStatusGGIO.length) {
                object.stringStatusGGIO = [];
                for (var j = 0; j < message.stringStatusGGIO.length; ++j)
                    object.stringStatusGGIO[j] = $root.commonmodule.StringStatusGGIO.toObject(message.stringStatusGGIO[j], options);
            }
            return object;
        };

        /**
         * Converts this ResourceStatus to JSON.
         * @function toJSON
         * @memberof resourcemodule.ResourceStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ResourceStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResourceStatus;
    })();

    resourcemodule.ResourceStatusProfile = (function() {

        /**
         * Properties of a ResourceStatusProfile.
         * @memberof resourcemodule
         * @interface IResourceStatusProfile
         * @property {commonmodule.IStatusMessageInfo|null} [statusMessageInfo] ResourceStatusProfile statusMessageInfo
         * @property {commonmodule.IConductingEquipment|null} [conductingEquipment] ResourceStatusProfile conductingEquipment
         * @property {commonmodule.IIED|null} [ied] ResourceStatusProfile ied
         * @property {resourcemodule.IResourceStatus|null} [resourceStatus] ResourceStatusProfile resourceStatus
         */

        /**
         * Constructs a new ResourceStatusProfile.
         * @memberof resourcemodule
         * @classdesc Represents a ResourceStatusProfile.
         * @implements IResourceStatusProfile
         * @constructor
         * @param {resourcemodule.IResourceStatusProfile=} [properties] Properties to set
         */
        function ResourceStatusProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ResourceStatusProfile statusMessageInfo.
         * @member {commonmodule.IStatusMessageInfo|null|undefined} statusMessageInfo
         * @memberof resourcemodule.ResourceStatusProfile
         * @instance
         */
        ResourceStatusProfile.prototype.statusMessageInfo = null;

        /**
         * ResourceStatusProfile conductingEquipment.
         * @member {commonmodule.IConductingEquipment|null|undefined} conductingEquipment
         * @memberof resourcemodule.ResourceStatusProfile
         * @instance
         */
        ResourceStatusProfile.prototype.conductingEquipment = null;

        /**
         * ResourceStatusProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof resourcemodule.ResourceStatusProfile
         * @instance
         */
        ResourceStatusProfile.prototype.ied = null;

        /**
         * ResourceStatusProfile resourceStatus.
         * @member {resourcemodule.IResourceStatus|null|undefined} resourceStatus
         * @memberof resourcemodule.ResourceStatusProfile
         * @instance
         */
        ResourceStatusProfile.prototype.resourceStatus = null;

        /**
         * Creates a new ResourceStatusProfile instance using the specified properties.
         * @function create
         * @memberof resourcemodule.ResourceStatusProfile
         * @static
         * @param {resourcemodule.IResourceStatusProfile=} [properties] Properties to set
         * @returns {resourcemodule.ResourceStatusProfile} ResourceStatusProfile instance
         */
        ResourceStatusProfile.create = function create(properties) {
            return new ResourceStatusProfile(properties);
        };

        /**
         * Encodes the specified ResourceStatusProfile message. Does not implicitly {@link resourcemodule.ResourceStatusProfile.verify|verify} messages.
         * @function encode
         * @memberof resourcemodule.ResourceStatusProfile
         * @static
         * @param {resourcemodule.IResourceStatusProfile} message ResourceStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ResourceStatusProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusMessageInfo != null && Object.hasOwnProperty.call(message, "statusMessageInfo"))
                $root.commonmodule.StatusMessageInfo.encode(message.statusMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.conductingEquipment != null && Object.hasOwnProperty.call(message, "conductingEquipment"))
                $root.commonmodule.ConductingEquipment.encode(message.conductingEquipment, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.resourceStatus != null && Object.hasOwnProperty.call(message, "resourceStatus"))
                $root.resourcemodule.ResourceStatus.encode(message.resourceStatus, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ResourceStatusProfile message, length delimited. Does not implicitly {@link resourcemodule.ResourceStatusProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof resourcemodule.ResourceStatusProfile
         * @static
         * @param {resourcemodule.IResourceStatusProfile} message ResourceStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ResourceStatusProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ResourceStatusProfile message from the specified reader or buffer.
         * @function decode
         * @memberof resourcemodule.ResourceStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {resourcemodule.ResourceStatusProfile} ResourceStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ResourceStatusProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.resourcemodule.ResourceStatusProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.conductingEquipment = $root.commonmodule.ConductingEquipment.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.resourceStatus = $root.resourcemodule.ResourceStatus.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ResourceStatusProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof resourcemodule.ResourceStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {resourcemodule.ResourceStatusProfile} ResourceStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ResourceStatusProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ResourceStatusProfile message.
         * @function verify
         * @memberof resourcemodule.ResourceStatusProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ResourceStatusProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo")) {
                var error = $root.commonmodule.StatusMessageInfo.verify(message.statusMessageInfo);
                if (error)
                    return "statusMessageInfo." + error;
            }
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment")) {
                var error = $root.commonmodule.ConductingEquipment.verify(message.conductingEquipment);
                if (error)
                    return "conductingEquipment." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.resourceStatus != null && message.hasOwnProperty("resourceStatus")) {
                var error = $root.resourcemodule.ResourceStatus.verify(message.resourceStatus);
                if (error)
                    return "resourceStatus." + error;
            }
            return null;
        };

        /**
         * Creates a ResourceStatusProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof resourcemodule.ResourceStatusProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {resourcemodule.ResourceStatusProfile} ResourceStatusProfile
         */
        ResourceStatusProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.resourcemodule.ResourceStatusProfile)
                return object;
            var message = new $root.resourcemodule.ResourceStatusProfile();
            if (object.statusMessageInfo != null) {
                if (typeof object.statusMessageInfo !== "object")
                    throw TypeError(".resourcemodule.ResourceStatusProfile.statusMessageInfo: object expected");
                message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.fromObject(object.statusMessageInfo);
            }
            if (object.conductingEquipment != null) {
                if (typeof object.conductingEquipment !== "object")
                    throw TypeError(".resourcemodule.ResourceStatusProfile.conductingEquipment: object expected");
                message.conductingEquipment = $root.commonmodule.ConductingEquipment.fromObject(object.conductingEquipment);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".resourcemodule.ResourceStatusProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.resourceStatus != null) {
                if (typeof object.resourceStatus !== "object")
                    throw TypeError(".resourcemodule.ResourceStatusProfile.resourceStatus: object expected");
                message.resourceStatus = $root.resourcemodule.ResourceStatus.fromObject(object.resourceStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a ResourceStatusProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof resourcemodule.ResourceStatusProfile
         * @static
         * @param {resourcemodule.ResourceStatusProfile} message ResourceStatusProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ResourceStatusProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusMessageInfo = null;
                object.conductingEquipment = null;
                object.ied = null;
                object.resourceStatus = null;
            }
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo"))
                object.statusMessageInfo = $root.commonmodule.StatusMessageInfo.toObject(message.statusMessageInfo, options);
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment"))
                object.conductingEquipment = $root.commonmodule.ConductingEquipment.toObject(message.conductingEquipment, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.resourceStatus != null && message.hasOwnProperty("resourceStatus"))
                object.resourceStatus = $root.resourcemodule.ResourceStatus.toObject(message.resourceStatus, options);
            return object;
        };

        /**
         * Converts this ResourceStatusProfile to JSON.
         * @function toJSON
         * @memberof resourcemodule.ResourceStatusProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ResourceStatusProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ResourceStatusProfile;
    })();

    return resourcemodule;
})();

$root.commonmodule = (function() {

    /**
     * Namespace commonmodule.
     * @exports commonmodule
     * @namespace
     */
    var commonmodule = {};

    commonmodule.IdentifiedObject = (function() {

        /**
         * Properties of an IdentifiedObject.
         * @memberof commonmodule
         * @interface IIdentifiedObject
         * @property {google.protobuf.IStringValue|null} [description] IdentifiedObject description
         * @property {google.protobuf.IStringValue|null} [mRID] IdentifiedObject mRID
         * @property {google.protobuf.IStringValue|null} [name] IdentifiedObject name
         */

        /**
         * Constructs a new IdentifiedObject.
         * @memberof commonmodule
         * @classdesc Represents an IdentifiedObject.
         * @implements IIdentifiedObject
         * @constructor
         * @param {commonmodule.IIdentifiedObject=} [properties] Properties to set
         */
        function IdentifiedObject(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * IdentifiedObject description.
         * @member {google.protobuf.IStringValue|null|undefined} description
         * @memberof commonmodule.IdentifiedObject
         * @instance
         */
        IdentifiedObject.prototype.description = null;

        /**
         * IdentifiedObject mRID.
         * @member {google.protobuf.IStringValue|null|undefined} mRID
         * @memberof commonmodule.IdentifiedObject
         * @instance
         */
        IdentifiedObject.prototype.mRID = null;

        /**
         * IdentifiedObject name.
         * @member {google.protobuf.IStringValue|null|undefined} name
         * @memberof commonmodule.IdentifiedObject
         * @instance
         */
        IdentifiedObject.prototype.name = null;

        /**
         * Creates a new IdentifiedObject instance using the specified properties.
         * @function create
         * @memberof commonmodule.IdentifiedObject
         * @static
         * @param {commonmodule.IIdentifiedObject=} [properties] Properties to set
         * @returns {commonmodule.IdentifiedObject} IdentifiedObject instance
         */
        IdentifiedObject.create = function create(properties) {
            return new IdentifiedObject(properties);
        };

        /**
         * Encodes the specified IdentifiedObject message. Does not implicitly {@link commonmodule.IdentifiedObject.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.IdentifiedObject
         * @static
         * @param {commonmodule.IIdentifiedObject} message IdentifiedObject message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IdentifiedObject.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                $root.google.protobuf.StringValue.encode(message.description, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.mRID != null && Object.hasOwnProperty.call(message, "mRID"))
                $root.google.protobuf.StringValue.encode(message.mRID, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                $root.google.protobuf.StringValue.encode(message.name, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified IdentifiedObject message, length delimited. Does not implicitly {@link commonmodule.IdentifiedObject.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.IdentifiedObject
         * @static
         * @param {commonmodule.IIdentifiedObject} message IdentifiedObject message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IdentifiedObject.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an IdentifiedObject message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.IdentifiedObject
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.IdentifiedObject} IdentifiedObject
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IdentifiedObject.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.IdentifiedObject();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.description = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.mRID = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.name = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an IdentifiedObject message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.IdentifiedObject
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.IdentifiedObject} IdentifiedObject
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IdentifiedObject.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an IdentifiedObject message.
         * @function verify
         * @memberof commonmodule.IdentifiedObject
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        IdentifiedObject.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.description != null && message.hasOwnProperty("description")) {
                var error = $root.google.protobuf.StringValue.verify(message.description);
                if (error)
                    return "description." + error;
            }
            if (message.mRID != null && message.hasOwnProperty("mRID")) {
                var error = $root.google.protobuf.StringValue.verify(message.mRID);
                if (error)
                    return "mRID." + error;
            }
            if (message.name != null && message.hasOwnProperty("name")) {
                var error = $root.google.protobuf.StringValue.verify(message.name);
                if (error)
                    return "name." + error;
            }
            return null;
        };

        /**
         * Creates an IdentifiedObject message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.IdentifiedObject
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.IdentifiedObject} IdentifiedObject
         */
        IdentifiedObject.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.IdentifiedObject)
                return object;
            var message = new $root.commonmodule.IdentifiedObject();
            if (object.description != null) {
                if (typeof object.description !== "object")
                    throw TypeError(".commonmodule.IdentifiedObject.description: object expected");
                message.description = $root.google.protobuf.StringValue.fromObject(object.description);
            }
            if (object.mRID != null) {
                if (typeof object.mRID !== "object")
                    throw TypeError(".commonmodule.IdentifiedObject.mRID: object expected");
                message.mRID = $root.google.protobuf.StringValue.fromObject(object.mRID);
            }
            if (object.name != null) {
                if (typeof object.name !== "object")
                    throw TypeError(".commonmodule.IdentifiedObject.name: object expected");
                message.name = $root.google.protobuf.StringValue.fromObject(object.name);
            }
            return message;
        };

        /**
         * Creates a plain object from an IdentifiedObject message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.IdentifiedObject
         * @static
         * @param {commonmodule.IdentifiedObject} message IdentifiedObject
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        IdentifiedObject.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.description = null;
                object.mRID = null;
                object.name = null;
            }
            if (message.description != null && message.hasOwnProperty("description"))
                object.description = $root.google.protobuf.StringValue.toObject(message.description, options);
            if (message.mRID != null && message.hasOwnProperty("mRID"))
                object.mRID = $root.google.protobuf.StringValue.toObject(message.mRID, options);
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = $root.google.protobuf.StringValue.toObject(message.name, options);
            return object;
        };

        /**
         * Converts this IdentifiedObject to JSON.
         * @function toJSON
         * @memberof commonmodule.IdentifiedObject
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        IdentifiedObject.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return IdentifiedObject;
    })();

    commonmodule.ACDCTerminal = (function() {

        /**
         * Properties of a ACDCTerminal.
         * @memberof commonmodule
         * @interface IACDCTerminal
         * @property {commonmodule.IIdentifiedObject|null} [identifiedObject] ACDCTerminal identifiedObject
         * @property {google.protobuf.IBoolValue|null} [connected] ACDCTerminal connected
         * @property {google.protobuf.IInt32Value|null} [sequenceNumber] ACDCTerminal sequenceNumber
         */

        /**
         * Constructs a new ACDCTerminal.
         * @memberof commonmodule
         * @classdesc Represents a ACDCTerminal.
         * @implements IACDCTerminal
         * @constructor
         * @param {commonmodule.IACDCTerminal=} [properties] Properties to set
         */
        function ACDCTerminal(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ACDCTerminal identifiedObject.
         * @member {commonmodule.IIdentifiedObject|null|undefined} identifiedObject
         * @memberof commonmodule.ACDCTerminal
         * @instance
         */
        ACDCTerminal.prototype.identifiedObject = null;

        /**
         * ACDCTerminal connected.
         * @member {google.protobuf.IBoolValue|null|undefined} connected
         * @memberof commonmodule.ACDCTerminal
         * @instance
         */
        ACDCTerminal.prototype.connected = null;

        /**
         * ACDCTerminal sequenceNumber.
         * @member {google.protobuf.IInt32Value|null|undefined} sequenceNumber
         * @memberof commonmodule.ACDCTerminal
         * @instance
         */
        ACDCTerminal.prototype.sequenceNumber = null;

        /**
         * Creates a new ACDCTerminal instance using the specified properties.
         * @function create
         * @memberof commonmodule.ACDCTerminal
         * @static
         * @param {commonmodule.IACDCTerminal=} [properties] Properties to set
         * @returns {commonmodule.ACDCTerminal} ACDCTerminal instance
         */
        ACDCTerminal.create = function create(properties) {
            return new ACDCTerminal(properties);
        };

        /**
         * Encodes the specified ACDCTerminal message. Does not implicitly {@link commonmodule.ACDCTerminal.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ACDCTerminal
         * @static
         * @param {commonmodule.IACDCTerminal} message ACDCTerminal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ACDCTerminal.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.identifiedObject != null && Object.hasOwnProperty.call(message, "identifiedObject"))
                $root.commonmodule.IdentifiedObject.encode(message.identifiedObject, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.connected != null && Object.hasOwnProperty.call(message, "connected"))
                $root.google.protobuf.BoolValue.encode(message.connected, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.sequenceNumber != null && Object.hasOwnProperty.call(message, "sequenceNumber"))
                $root.google.protobuf.Int32Value.encode(message.sequenceNumber, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ACDCTerminal message, length delimited. Does not implicitly {@link commonmodule.ACDCTerminal.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ACDCTerminal
         * @static
         * @param {commonmodule.IACDCTerminal} message ACDCTerminal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ACDCTerminal.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ACDCTerminal message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ACDCTerminal
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ACDCTerminal} ACDCTerminal
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ACDCTerminal.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ACDCTerminal();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.identifiedObject = $root.commonmodule.IdentifiedObject.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.connected = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.sequenceNumber = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ACDCTerminal message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ACDCTerminal
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ACDCTerminal} ACDCTerminal
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ACDCTerminal.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ACDCTerminal message.
         * @function verify
         * @memberof commonmodule.ACDCTerminal
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ACDCTerminal.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject")) {
                var error = $root.commonmodule.IdentifiedObject.verify(message.identifiedObject);
                if (error)
                    return "identifiedObject." + error;
            }
            if (message.connected != null && message.hasOwnProperty("connected")) {
                var error = $root.google.protobuf.BoolValue.verify(message.connected);
                if (error)
                    return "connected." + error;
            }
            if (message.sequenceNumber != null && message.hasOwnProperty("sequenceNumber")) {
                var error = $root.google.protobuf.Int32Value.verify(message.sequenceNumber);
                if (error)
                    return "sequenceNumber." + error;
            }
            return null;
        };

        /**
         * Creates a ACDCTerminal message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ACDCTerminal
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ACDCTerminal} ACDCTerminal
         */
        ACDCTerminal.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ACDCTerminal)
                return object;
            var message = new $root.commonmodule.ACDCTerminal();
            if (object.identifiedObject != null) {
                if (typeof object.identifiedObject !== "object")
                    throw TypeError(".commonmodule.ACDCTerminal.identifiedObject: object expected");
                message.identifiedObject = $root.commonmodule.IdentifiedObject.fromObject(object.identifiedObject);
            }
            if (object.connected != null) {
                if (typeof object.connected !== "object")
                    throw TypeError(".commonmodule.ACDCTerminal.connected: object expected");
                message.connected = $root.google.protobuf.BoolValue.fromObject(object.connected);
            }
            if (object.sequenceNumber != null) {
                if (typeof object.sequenceNumber !== "object")
                    throw TypeError(".commonmodule.ACDCTerminal.sequenceNumber: object expected");
                message.sequenceNumber = $root.google.protobuf.Int32Value.fromObject(object.sequenceNumber);
            }
            return message;
        };

        /**
         * Creates a plain object from a ACDCTerminal message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ACDCTerminal
         * @static
         * @param {commonmodule.ACDCTerminal} message ACDCTerminal
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ACDCTerminal.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.identifiedObject = null;
                object.connected = null;
                object.sequenceNumber = null;
            }
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject"))
                object.identifiedObject = $root.commonmodule.IdentifiedObject.toObject(message.identifiedObject, options);
            if (message.connected != null && message.hasOwnProperty("connected"))
                object.connected = $root.google.protobuf.BoolValue.toObject(message.connected, options);
            if (message.sequenceNumber != null && message.hasOwnProperty("sequenceNumber"))
                object.sequenceNumber = $root.google.protobuf.Int32Value.toObject(message.sequenceNumber, options);
            return object;
        };

        /**
         * Converts this ACDCTerminal to JSON.
         * @function toJSON
         * @memberof commonmodule.ACDCTerminal
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ACDCTerminal.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ACDCTerminal;
    })();

    /**
     * UnitSymbolKind enum.
     * @name commonmodule.UnitSymbolKind
     * @enum {number}
     * @property {number} UnitSymbolKind_none=0 UnitSymbolKind_none value
     * @property {number} UnitSymbolKind_meter=2 UnitSymbolKind_meter value
     * @property {number} UnitSymbolKind_gram=3 UnitSymbolKind_gram value
     * @property {number} UnitSymbolKind_Amp=5 UnitSymbolKind_Amp value
     * @property {number} UnitSymbolKind_deg=9 UnitSymbolKind_deg value
     * @property {number} UnitSymbolKind_rad=10 UnitSymbolKind_rad value
     * @property {number} UnitSymbolKind_degC=23 UnitSymbolKind_degC value
     * @property {number} UnitSymbolKind_Farad=25 UnitSymbolKind_Farad value
     * @property {number} UnitSymbolKind_sec=27 UnitSymbolKind_sec value
     * @property {number} UnitSymbolKind_Henry=28 UnitSymbolKind_Henry value
     * @property {number} UnitSymbolKind_V=29 UnitSymbolKind_V value
     * @property {number} UnitSymbolKind_ohm=30 UnitSymbolKind_ohm value
     * @property {number} UnitSymbolKind_Joule=31 UnitSymbolKind_Joule value
     * @property {number} UnitSymbolKind_Newton=32 UnitSymbolKind_Newton value
     * @property {number} UnitSymbolKind_Hz=33 UnitSymbolKind_Hz value
     * @property {number} UnitSymbolKind_W=38 UnitSymbolKind_W value
     * @property {number} UnitSymbolKind_Pa=39 UnitSymbolKind_Pa value
     * @property {number} UnitSymbolKind_m2=41 UnitSymbolKind_m2 value
     * @property {number} UnitSymbolKind_Siemens=53 UnitSymbolKind_Siemens value
     * @property {number} UnitSymbolKind_VA=61 UnitSymbolKind_VA value
     * @property {number} UnitSymbolKind_VAr=63 UnitSymbolKind_VAr value
     * @property {number} UnitSymbolKind_wPerVA=65 UnitSymbolKind_wPerVA value
     * @property {number} UnitSymbolKind_VAh=71 UnitSymbolKind_VAh value
     * @property {number} UnitSymbolKind_Wh=72 UnitSymbolKind_Wh value
     * @property {number} UnitSymbolKind_VArh=73 UnitSymbolKind_VArh value
     * @property {number} UnitSymbolKind_hzPerS=75 UnitSymbolKind_hzPerS value
     * @property {number} UnitSymbolKind_wPerS=81 UnitSymbolKind_wPerS value
     * @property {number} UnitSymbolKind_other=100 UnitSymbolKind_other value
     * @property {number} UnitSymbolKind_Ah=106 UnitSymbolKind_Ah value
     * @property {number} UnitSymbolKind_min=159 UnitSymbolKind_min value
     * @property {number} UnitSymbolKind_hour=160 UnitSymbolKind_hour value
     * @property {number} UnitSymbolKind_m3=166 UnitSymbolKind_m3 value
     * @property {number} UnitSymbolKind_wPerM2=179 UnitSymbolKind_wPerM2 value
     * @property {number} UnitSymbolKind_degF=279 UnitSymbolKind_degF value
     * @property {number} UnitSymbolKind_mph=500 UnitSymbolKind_mph value
     */
    commonmodule.UnitSymbolKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "UnitSymbolKind_none"] = 0;
        values[valuesById[2] = "UnitSymbolKind_meter"] = 2;
        values[valuesById[3] = "UnitSymbolKind_gram"] = 3;
        values[valuesById[5] = "UnitSymbolKind_Amp"] = 5;
        values[valuesById[9] = "UnitSymbolKind_deg"] = 9;
        values[valuesById[10] = "UnitSymbolKind_rad"] = 10;
        values[valuesById[23] = "UnitSymbolKind_degC"] = 23;
        values[valuesById[25] = "UnitSymbolKind_Farad"] = 25;
        values[valuesById[27] = "UnitSymbolKind_sec"] = 27;
        values[valuesById[28] = "UnitSymbolKind_Henry"] = 28;
        values[valuesById[29] = "UnitSymbolKind_V"] = 29;
        values[valuesById[30] = "UnitSymbolKind_ohm"] = 30;
        values[valuesById[31] = "UnitSymbolKind_Joule"] = 31;
        values[valuesById[32] = "UnitSymbolKind_Newton"] = 32;
        values[valuesById[33] = "UnitSymbolKind_Hz"] = 33;
        values[valuesById[38] = "UnitSymbolKind_W"] = 38;
        values[valuesById[39] = "UnitSymbolKind_Pa"] = 39;
        values[valuesById[41] = "UnitSymbolKind_m2"] = 41;
        values[valuesById[53] = "UnitSymbolKind_Siemens"] = 53;
        values[valuesById[61] = "UnitSymbolKind_VA"] = 61;
        values[valuesById[63] = "UnitSymbolKind_VAr"] = 63;
        values[valuesById[65] = "UnitSymbolKind_wPerVA"] = 65;
        values[valuesById[71] = "UnitSymbolKind_VAh"] = 71;
        values[valuesById[72] = "UnitSymbolKind_Wh"] = 72;
        values[valuesById[73] = "UnitSymbolKind_VArh"] = 73;
        values[valuesById[75] = "UnitSymbolKind_hzPerS"] = 75;
        values[valuesById[81] = "UnitSymbolKind_wPerS"] = 81;
        values[valuesById[100] = "UnitSymbolKind_other"] = 100;
        values[valuesById[106] = "UnitSymbolKind_Ah"] = 106;
        values[valuesById[159] = "UnitSymbolKind_min"] = 159;
        values[valuesById[160] = "UnitSymbolKind_hour"] = 160;
        values[valuesById[166] = "UnitSymbolKind_m3"] = 166;
        values[valuesById[179] = "UnitSymbolKind_wPerM2"] = 179;
        values[valuesById[279] = "UnitSymbolKind_degF"] = 279;
        values[valuesById[500] = "UnitSymbolKind_mph"] = 500;
        return values;
    })();

    commonmodule.Optional_UnitSymbolKind = (function() {

        /**
         * Properties of an Optional_UnitSymbolKind.
         * @memberof commonmodule
         * @interface IOptional_UnitSymbolKind
         * @property {commonmodule.UnitSymbolKind|null} [value] Optional_UnitSymbolKind value
         */

        /**
         * Constructs a new Optional_UnitSymbolKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_UnitSymbolKind.
         * @implements IOptional_UnitSymbolKind
         * @constructor
         * @param {commonmodule.IOptional_UnitSymbolKind=} [properties] Properties to set
         */
        function Optional_UnitSymbolKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_UnitSymbolKind value.
         * @member {commonmodule.UnitSymbolKind} value
         * @memberof commonmodule.Optional_UnitSymbolKind
         * @instance
         */
        Optional_UnitSymbolKind.prototype.value = 0;

        /**
         * Creates a new Optional_UnitSymbolKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_UnitSymbolKind
         * @static
         * @param {commonmodule.IOptional_UnitSymbolKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_UnitSymbolKind} Optional_UnitSymbolKind instance
         */
        Optional_UnitSymbolKind.create = function create(properties) {
            return new Optional_UnitSymbolKind(properties);
        };

        /**
         * Encodes the specified Optional_UnitSymbolKind message. Does not implicitly {@link commonmodule.Optional_UnitSymbolKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_UnitSymbolKind
         * @static
         * @param {commonmodule.IOptional_UnitSymbolKind} message Optional_UnitSymbolKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_UnitSymbolKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_UnitSymbolKind message, length delimited. Does not implicitly {@link commonmodule.Optional_UnitSymbolKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_UnitSymbolKind
         * @static
         * @param {commonmodule.IOptional_UnitSymbolKind} message Optional_UnitSymbolKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_UnitSymbolKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_UnitSymbolKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_UnitSymbolKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_UnitSymbolKind} Optional_UnitSymbolKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_UnitSymbolKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_UnitSymbolKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_UnitSymbolKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_UnitSymbolKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_UnitSymbolKind} Optional_UnitSymbolKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_UnitSymbolKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_UnitSymbolKind message.
         * @function verify
         * @memberof commonmodule.Optional_UnitSymbolKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_UnitSymbolKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 2:
                case 3:
                case 5:
                case 9:
                case 10:
                case 23:
                case 25:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 38:
                case 39:
                case 41:
                case 53:
                case 61:
                case 63:
                case 65:
                case 71:
                case 72:
                case 73:
                case 75:
                case 81:
                case 100:
                case 106:
                case 159:
                case 160:
                case 166:
                case 179:
                case 279:
                case 500:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_UnitSymbolKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_UnitSymbolKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_UnitSymbolKind} Optional_UnitSymbolKind
         */
        Optional_UnitSymbolKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_UnitSymbolKind)
                return object;
            var message = new $root.commonmodule.Optional_UnitSymbolKind();
            switch (object.value) {
            case "UnitSymbolKind_none":
            case 0:
                message.value = 0;
                break;
            case "UnitSymbolKind_meter":
            case 2:
                message.value = 2;
                break;
            case "UnitSymbolKind_gram":
            case 3:
                message.value = 3;
                break;
            case "UnitSymbolKind_Amp":
            case 5:
                message.value = 5;
                break;
            case "UnitSymbolKind_deg":
            case 9:
                message.value = 9;
                break;
            case "UnitSymbolKind_rad":
            case 10:
                message.value = 10;
                break;
            case "UnitSymbolKind_degC":
            case 23:
                message.value = 23;
                break;
            case "UnitSymbolKind_Farad":
            case 25:
                message.value = 25;
                break;
            case "UnitSymbolKind_sec":
            case 27:
                message.value = 27;
                break;
            case "UnitSymbolKind_Henry":
            case 28:
                message.value = 28;
                break;
            case "UnitSymbolKind_V":
            case 29:
                message.value = 29;
                break;
            case "UnitSymbolKind_ohm":
            case 30:
                message.value = 30;
                break;
            case "UnitSymbolKind_Joule":
            case 31:
                message.value = 31;
                break;
            case "UnitSymbolKind_Newton":
            case 32:
                message.value = 32;
                break;
            case "UnitSymbolKind_Hz":
            case 33:
                message.value = 33;
                break;
            case "UnitSymbolKind_W":
            case 38:
                message.value = 38;
                break;
            case "UnitSymbolKind_Pa":
            case 39:
                message.value = 39;
                break;
            case "UnitSymbolKind_m2":
            case 41:
                message.value = 41;
                break;
            case "UnitSymbolKind_Siemens":
            case 53:
                message.value = 53;
                break;
            case "UnitSymbolKind_VA":
            case 61:
                message.value = 61;
                break;
            case "UnitSymbolKind_VAr":
            case 63:
                message.value = 63;
                break;
            case "UnitSymbolKind_wPerVA":
            case 65:
                message.value = 65;
                break;
            case "UnitSymbolKind_VAh":
            case 71:
                message.value = 71;
                break;
            case "UnitSymbolKind_Wh":
            case 72:
                message.value = 72;
                break;
            case "UnitSymbolKind_VArh":
            case 73:
                message.value = 73;
                break;
            case "UnitSymbolKind_hzPerS":
            case 75:
                message.value = 75;
                break;
            case "UnitSymbolKind_wPerS":
            case 81:
                message.value = 81;
                break;
            case "UnitSymbolKind_other":
            case 100:
                message.value = 100;
                break;
            case "UnitSymbolKind_Ah":
            case 106:
                message.value = 106;
                break;
            case "UnitSymbolKind_min":
            case 159:
                message.value = 159;
                break;
            case "UnitSymbolKind_hour":
            case 160:
                message.value = 160;
                break;
            case "UnitSymbolKind_m3":
            case 166:
                message.value = 166;
                break;
            case "UnitSymbolKind_wPerM2":
            case 179:
                message.value = 179;
                break;
            case "UnitSymbolKind_degF":
            case 279:
                message.value = 279;
                break;
            case "UnitSymbolKind_mph":
            case 500:
                message.value = 500;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_UnitSymbolKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_UnitSymbolKind
         * @static
         * @param {commonmodule.Optional_UnitSymbolKind} message Optional_UnitSymbolKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_UnitSymbolKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "UnitSymbolKind_none" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.UnitSymbolKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_UnitSymbolKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_UnitSymbolKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_UnitSymbolKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_UnitSymbolKind;
    })();

    /**
     * UnitMultiplierKind enum.
     * @name commonmodule.UnitMultiplierKind
     * @enum {number}
     * @property {number} UnitMultiplierKind_none=0 UnitMultiplierKind_none value
     * @property {number} UnitMultiplierKind_other=1 UnitMultiplierKind_other value
     * @property {number} UnitMultiplierKind_centi=2 UnitMultiplierKind_centi value
     * @property {number} UnitMultiplierKind_deci=3 UnitMultiplierKind_deci value
     * @property {number} UnitMultiplierKind_Giga=4 UnitMultiplierKind_Giga value
     * @property {number} UnitMultiplierKind_kilo=5 UnitMultiplierKind_kilo value
     * @property {number} UnitMultiplierKind_Mega=6 UnitMultiplierKind_Mega value
     * @property {number} UnitMultiplierKind_micro=7 UnitMultiplierKind_micro value
     * @property {number} UnitMultiplierKind_milli=8 UnitMultiplierKind_milli value
     * @property {number} UnitMultiplierKind_nano=9 UnitMultiplierKind_nano value
     * @property {number} UnitMultiplierKind_pico=10 UnitMultiplierKind_pico value
     * @property {number} UnitMultiplierKind_Tera=11 UnitMultiplierKind_Tera value
     */
    commonmodule.UnitMultiplierKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "UnitMultiplierKind_none"] = 0;
        values[valuesById[1] = "UnitMultiplierKind_other"] = 1;
        values[valuesById[2] = "UnitMultiplierKind_centi"] = 2;
        values[valuesById[3] = "UnitMultiplierKind_deci"] = 3;
        values[valuesById[4] = "UnitMultiplierKind_Giga"] = 4;
        values[valuesById[5] = "UnitMultiplierKind_kilo"] = 5;
        values[valuesById[6] = "UnitMultiplierKind_Mega"] = 6;
        values[valuesById[7] = "UnitMultiplierKind_micro"] = 7;
        values[valuesById[8] = "UnitMultiplierKind_milli"] = 8;
        values[valuesById[9] = "UnitMultiplierKind_nano"] = 9;
        values[valuesById[10] = "UnitMultiplierKind_pico"] = 10;
        values[valuesById[11] = "UnitMultiplierKind_Tera"] = 11;
        return values;
    })();

    commonmodule.Optional_UnitMultiplierKind = (function() {

        /**
         * Properties of an Optional_UnitMultiplierKind.
         * @memberof commonmodule
         * @interface IOptional_UnitMultiplierKind
         * @property {commonmodule.UnitMultiplierKind|null} [value] Optional_UnitMultiplierKind value
         */

        /**
         * Constructs a new Optional_UnitMultiplierKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_UnitMultiplierKind.
         * @implements IOptional_UnitMultiplierKind
         * @constructor
         * @param {commonmodule.IOptional_UnitMultiplierKind=} [properties] Properties to set
         */
        function Optional_UnitMultiplierKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_UnitMultiplierKind value.
         * @member {commonmodule.UnitMultiplierKind} value
         * @memberof commonmodule.Optional_UnitMultiplierKind
         * @instance
         */
        Optional_UnitMultiplierKind.prototype.value = 0;

        /**
         * Creates a new Optional_UnitMultiplierKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_UnitMultiplierKind
         * @static
         * @param {commonmodule.IOptional_UnitMultiplierKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_UnitMultiplierKind} Optional_UnitMultiplierKind instance
         */
        Optional_UnitMultiplierKind.create = function create(properties) {
            return new Optional_UnitMultiplierKind(properties);
        };

        /**
         * Encodes the specified Optional_UnitMultiplierKind message. Does not implicitly {@link commonmodule.Optional_UnitMultiplierKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_UnitMultiplierKind
         * @static
         * @param {commonmodule.IOptional_UnitMultiplierKind} message Optional_UnitMultiplierKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_UnitMultiplierKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_UnitMultiplierKind message, length delimited. Does not implicitly {@link commonmodule.Optional_UnitMultiplierKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_UnitMultiplierKind
         * @static
         * @param {commonmodule.IOptional_UnitMultiplierKind} message Optional_UnitMultiplierKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_UnitMultiplierKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_UnitMultiplierKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_UnitMultiplierKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_UnitMultiplierKind} Optional_UnitMultiplierKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_UnitMultiplierKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_UnitMultiplierKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_UnitMultiplierKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_UnitMultiplierKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_UnitMultiplierKind} Optional_UnitMultiplierKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_UnitMultiplierKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_UnitMultiplierKind message.
         * @function verify
         * @memberof commonmodule.Optional_UnitMultiplierKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_UnitMultiplierKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_UnitMultiplierKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_UnitMultiplierKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_UnitMultiplierKind} Optional_UnitMultiplierKind
         */
        Optional_UnitMultiplierKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_UnitMultiplierKind)
                return object;
            var message = new $root.commonmodule.Optional_UnitMultiplierKind();
            switch (object.value) {
            case "UnitMultiplierKind_none":
            case 0:
                message.value = 0;
                break;
            case "UnitMultiplierKind_other":
            case 1:
                message.value = 1;
                break;
            case "UnitMultiplierKind_centi":
            case 2:
                message.value = 2;
                break;
            case "UnitMultiplierKind_deci":
            case 3:
                message.value = 3;
                break;
            case "UnitMultiplierKind_Giga":
            case 4:
                message.value = 4;
                break;
            case "UnitMultiplierKind_kilo":
            case 5:
                message.value = 5;
                break;
            case "UnitMultiplierKind_Mega":
            case 6:
                message.value = 6;
                break;
            case "UnitMultiplierKind_micro":
            case 7:
                message.value = 7;
                break;
            case "UnitMultiplierKind_milli":
            case 8:
                message.value = 8;
                break;
            case "UnitMultiplierKind_nano":
            case 9:
                message.value = 9;
                break;
            case "UnitMultiplierKind_pico":
            case 10:
                message.value = 10;
                break;
            case "UnitMultiplierKind_Tera":
            case 11:
                message.value = 11;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_UnitMultiplierKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_UnitMultiplierKind
         * @static
         * @param {commonmodule.Optional_UnitMultiplierKind} message Optional_UnitMultiplierKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_UnitMultiplierKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "UnitMultiplierKind_none" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.UnitMultiplierKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_UnitMultiplierKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_UnitMultiplierKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_UnitMultiplierKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_UnitMultiplierKind;
    })();

    commonmodule.ActivePower = (function() {

        /**
         * Properties of an ActivePower.
         * @memberof commonmodule
         * @interface IActivePower
         * @property {commonmodule.IOptional_UnitMultiplierKind|null} [multiplier] ActivePower multiplier
         * @property {commonmodule.IOptional_UnitSymbolKind|null} [unit] ActivePower unit
         * @property {google.protobuf.IFloatValue|null} [value] ActivePower value
         */

        /**
         * Constructs a new ActivePower.
         * @memberof commonmodule
         * @classdesc Represents an ActivePower.
         * @implements IActivePower
         * @constructor
         * @param {commonmodule.IActivePower=} [properties] Properties to set
         */
        function ActivePower(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ActivePower multiplier.
         * @member {commonmodule.IOptional_UnitMultiplierKind|null|undefined} multiplier
         * @memberof commonmodule.ActivePower
         * @instance
         */
        ActivePower.prototype.multiplier = null;

        /**
         * ActivePower unit.
         * @member {commonmodule.IOptional_UnitSymbolKind|null|undefined} unit
         * @memberof commonmodule.ActivePower
         * @instance
         */
        ActivePower.prototype.unit = null;

        /**
         * ActivePower value.
         * @member {google.protobuf.IFloatValue|null|undefined} value
         * @memberof commonmodule.ActivePower
         * @instance
         */
        ActivePower.prototype.value = null;

        /**
         * Creates a new ActivePower instance using the specified properties.
         * @function create
         * @memberof commonmodule.ActivePower
         * @static
         * @param {commonmodule.IActivePower=} [properties] Properties to set
         * @returns {commonmodule.ActivePower} ActivePower instance
         */
        ActivePower.create = function create(properties) {
            return new ActivePower(properties);
        };

        /**
         * Encodes the specified ActivePower message. Does not implicitly {@link commonmodule.ActivePower.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ActivePower
         * @static
         * @param {commonmodule.IActivePower} message ActivePower message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ActivePower.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.multiplier != null && Object.hasOwnProperty.call(message, "multiplier"))
                $root.commonmodule.Optional_UnitMultiplierKind.encode(message.multiplier, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.unit != null && Object.hasOwnProperty.call(message, "unit"))
                $root.commonmodule.Optional_UnitSymbolKind.encode(message.unit, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                $root.google.protobuf.FloatValue.encode(message.value, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ActivePower message, length delimited. Does not implicitly {@link commonmodule.ActivePower.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ActivePower
         * @static
         * @param {commonmodule.IActivePower} message ActivePower message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ActivePower.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ActivePower message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ActivePower
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ActivePower} ActivePower
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ActivePower.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ActivePower();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.multiplier = $root.commonmodule.Optional_UnitMultiplierKind.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.unit = $root.commonmodule.Optional_UnitSymbolKind.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.value = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ActivePower message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ActivePower
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ActivePower} ActivePower
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ActivePower.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ActivePower message.
         * @function verify
         * @memberof commonmodule.ActivePower
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ActivePower.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.multiplier != null && message.hasOwnProperty("multiplier")) {
                var error = $root.commonmodule.Optional_UnitMultiplierKind.verify(message.multiplier);
                if (error)
                    return "multiplier." + error;
            }
            if (message.unit != null && message.hasOwnProperty("unit")) {
                var error = $root.commonmodule.Optional_UnitSymbolKind.verify(message.unit);
                if (error)
                    return "unit." + error;
            }
            if (message.value != null && message.hasOwnProperty("value")) {
                var error = $root.google.protobuf.FloatValue.verify(message.value);
                if (error)
                    return "value." + error;
            }
            return null;
        };

        /**
         * Creates an ActivePower message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ActivePower
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ActivePower} ActivePower
         */
        ActivePower.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ActivePower)
                return object;
            var message = new $root.commonmodule.ActivePower();
            if (object.multiplier != null) {
                if (typeof object.multiplier !== "object")
                    throw TypeError(".commonmodule.ActivePower.multiplier: object expected");
                message.multiplier = $root.commonmodule.Optional_UnitMultiplierKind.fromObject(object.multiplier);
            }
            if (object.unit != null) {
                if (typeof object.unit !== "object")
                    throw TypeError(".commonmodule.ActivePower.unit: object expected");
                message.unit = $root.commonmodule.Optional_UnitSymbolKind.fromObject(object.unit);
            }
            if (object.value != null) {
                if (typeof object.value !== "object")
                    throw TypeError(".commonmodule.ActivePower.value: object expected");
                message.value = $root.google.protobuf.FloatValue.fromObject(object.value);
            }
            return message;
        };

        /**
         * Creates a plain object from an ActivePower message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ActivePower
         * @static
         * @param {commonmodule.ActivePower} message ActivePower
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ActivePower.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.multiplier = null;
                object.unit = null;
                object.value = null;
            }
            if (message.multiplier != null && message.hasOwnProperty("multiplier"))
                object.multiplier = $root.commonmodule.Optional_UnitMultiplierKind.toObject(message.multiplier, options);
            if (message.unit != null && message.hasOwnProperty("unit"))
                object.unit = $root.commonmodule.Optional_UnitSymbolKind.toObject(message.unit, options);
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = $root.google.protobuf.FloatValue.toObject(message.value, options);
            return object;
        };

        /**
         * Converts this ActivePower to JSON.
         * @function toJSON
         * @memberof commonmodule.ActivePower
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ActivePower.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ActivePower;
    })();

    /**
     * PhaseCodeKind enum.
     * @name commonmodule.PhaseCodeKind
     * @enum {number}
     * @property {number} PhaseCodeKind_none=0 PhaseCodeKind_none value
     * @property {number} PhaseCodeKind_other=1 PhaseCodeKind_other value
     * @property {number} PhaseCodeKind_N=16 PhaseCodeKind_N value
     * @property {number} PhaseCodeKind_C=32 PhaseCodeKind_C value
     * @property {number} PhaseCodeKind_CN=33 PhaseCodeKind_CN value
     * @property {number} PhaseCodeKind_AC=40 PhaseCodeKind_AC value
     * @property {number} PhaseCodeKind_ACN=41 PhaseCodeKind_ACN value
     * @property {number} PhaseCodeKind_B=64 PhaseCodeKind_B value
     * @property {number} PhaseCodeKind_BN=65 PhaseCodeKind_BN value
     * @property {number} PhaseCodeKind_BC=66 PhaseCodeKind_BC value
     * @property {number} PhaseCodeKind_BCN=97 PhaseCodeKind_BCN value
     * @property {number} PhaseCodeKind_A=128 PhaseCodeKind_A value
     * @property {number} PhaseCodeKind_AN=129 PhaseCodeKind_AN value
     * @property {number} PhaseCodeKind_AB=132 PhaseCodeKind_AB value
     * @property {number} PhaseCodeKind_ABN=193 PhaseCodeKind_ABN value
     * @property {number} PhaseCodeKind_ABC=224 PhaseCodeKind_ABC value
     * @property {number} PhaseCodeKind_ABCN=225 PhaseCodeKind_ABCN value
     * @property {number} PhaseCodeKind_s2=256 PhaseCodeKind_s2 value
     * @property {number} PhaseCodeKind_s2N=257 PhaseCodeKind_s2N value
     * @property {number} PhaseCodeKind_s1=512 PhaseCodeKind_s1 value
     * @property {number} PhaseCodeKind_s1N=513 PhaseCodeKind_s1N value
     * @property {number} PhaseCodeKind_s12=768 PhaseCodeKind_s12 value
     * @property {number} PhaseCodeKind_s12N=769 PhaseCodeKind_s12N value
     */
    commonmodule.PhaseCodeKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "PhaseCodeKind_none"] = 0;
        values[valuesById[1] = "PhaseCodeKind_other"] = 1;
        values[valuesById[16] = "PhaseCodeKind_N"] = 16;
        values[valuesById[32] = "PhaseCodeKind_C"] = 32;
        values[valuesById[33] = "PhaseCodeKind_CN"] = 33;
        values[valuesById[40] = "PhaseCodeKind_AC"] = 40;
        values[valuesById[41] = "PhaseCodeKind_ACN"] = 41;
        values[valuesById[64] = "PhaseCodeKind_B"] = 64;
        values[valuesById[65] = "PhaseCodeKind_BN"] = 65;
        values[valuesById[66] = "PhaseCodeKind_BC"] = 66;
        values[valuesById[97] = "PhaseCodeKind_BCN"] = 97;
        values[valuesById[128] = "PhaseCodeKind_A"] = 128;
        values[valuesById[129] = "PhaseCodeKind_AN"] = 129;
        values[valuesById[132] = "PhaseCodeKind_AB"] = 132;
        values[valuesById[193] = "PhaseCodeKind_ABN"] = 193;
        values[valuesById[224] = "PhaseCodeKind_ABC"] = 224;
        values[valuesById[225] = "PhaseCodeKind_ABCN"] = 225;
        values[valuesById[256] = "PhaseCodeKind_s2"] = 256;
        values[valuesById[257] = "PhaseCodeKind_s2N"] = 257;
        values[valuesById[512] = "PhaseCodeKind_s1"] = 512;
        values[valuesById[513] = "PhaseCodeKind_s1N"] = 513;
        values[valuesById[768] = "PhaseCodeKind_s12"] = 768;
        values[valuesById[769] = "PhaseCodeKind_s12N"] = 769;
        return values;
    })();

    commonmodule.Optional_PhaseCodeKind = (function() {

        /**
         * Properties of an Optional_PhaseCodeKind.
         * @memberof commonmodule
         * @interface IOptional_PhaseCodeKind
         * @property {commonmodule.PhaseCodeKind|null} [value] Optional_PhaseCodeKind value
         */

        /**
         * Constructs a new Optional_PhaseCodeKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_PhaseCodeKind.
         * @implements IOptional_PhaseCodeKind
         * @constructor
         * @param {commonmodule.IOptional_PhaseCodeKind=} [properties] Properties to set
         */
        function Optional_PhaseCodeKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_PhaseCodeKind value.
         * @member {commonmodule.PhaseCodeKind} value
         * @memberof commonmodule.Optional_PhaseCodeKind
         * @instance
         */
        Optional_PhaseCodeKind.prototype.value = 0;

        /**
         * Creates a new Optional_PhaseCodeKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_PhaseCodeKind
         * @static
         * @param {commonmodule.IOptional_PhaseCodeKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_PhaseCodeKind} Optional_PhaseCodeKind instance
         */
        Optional_PhaseCodeKind.create = function create(properties) {
            return new Optional_PhaseCodeKind(properties);
        };

        /**
         * Encodes the specified Optional_PhaseCodeKind message. Does not implicitly {@link commonmodule.Optional_PhaseCodeKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_PhaseCodeKind
         * @static
         * @param {commonmodule.IOptional_PhaseCodeKind} message Optional_PhaseCodeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_PhaseCodeKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_PhaseCodeKind message, length delimited. Does not implicitly {@link commonmodule.Optional_PhaseCodeKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_PhaseCodeKind
         * @static
         * @param {commonmodule.IOptional_PhaseCodeKind} message Optional_PhaseCodeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_PhaseCodeKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_PhaseCodeKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_PhaseCodeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_PhaseCodeKind} Optional_PhaseCodeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_PhaseCodeKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_PhaseCodeKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_PhaseCodeKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_PhaseCodeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_PhaseCodeKind} Optional_PhaseCodeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_PhaseCodeKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_PhaseCodeKind message.
         * @function verify
         * @memberof commonmodule.Optional_PhaseCodeKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_PhaseCodeKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                case 16:
                case 32:
                case 33:
                case 40:
                case 41:
                case 64:
                case 65:
                case 66:
                case 97:
                case 128:
                case 129:
                case 132:
                case 193:
                case 224:
                case 225:
                case 256:
                case 257:
                case 512:
                case 513:
                case 768:
                case 769:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_PhaseCodeKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_PhaseCodeKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_PhaseCodeKind} Optional_PhaseCodeKind
         */
        Optional_PhaseCodeKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_PhaseCodeKind)
                return object;
            var message = new $root.commonmodule.Optional_PhaseCodeKind();
            switch (object.value) {
            case "PhaseCodeKind_none":
            case 0:
                message.value = 0;
                break;
            case "PhaseCodeKind_other":
            case 1:
                message.value = 1;
                break;
            case "PhaseCodeKind_N":
            case 16:
                message.value = 16;
                break;
            case "PhaseCodeKind_C":
            case 32:
                message.value = 32;
                break;
            case "PhaseCodeKind_CN":
            case 33:
                message.value = 33;
                break;
            case "PhaseCodeKind_AC":
            case 40:
                message.value = 40;
                break;
            case "PhaseCodeKind_ACN":
            case 41:
                message.value = 41;
                break;
            case "PhaseCodeKind_B":
            case 64:
                message.value = 64;
                break;
            case "PhaseCodeKind_BN":
            case 65:
                message.value = 65;
                break;
            case "PhaseCodeKind_BC":
            case 66:
                message.value = 66;
                break;
            case "PhaseCodeKind_BCN":
            case 97:
                message.value = 97;
                break;
            case "PhaseCodeKind_A":
            case 128:
                message.value = 128;
                break;
            case "PhaseCodeKind_AN":
            case 129:
                message.value = 129;
                break;
            case "PhaseCodeKind_AB":
            case 132:
                message.value = 132;
                break;
            case "PhaseCodeKind_ABN":
            case 193:
                message.value = 193;
                break;
            case "PhaseCodeKind_ABC":
            case 224:
                message.value = 224;
                break;
            case "PhaseCodeKind_ABCN":
            case 225:
                message.value = 225;
                break;
            case "PhaseCodeKind_s2":
            case 256:
                message.value = 256;
                break;
            case "PhaseCodeKind_s2N":
            case 257:
                message.value = 257;
                break;
            case "PhaseCodeKind_s1":
            case 512:
                message.value = 512;
                break;
            case "PhaseCodeKind_s1N":
            case 513:
                message.value = 513;
                break;
            case "PhaseCodeKind_s12":
            case 768:
                message.value = 768;
                break;
            case "PhaseCodeKind_s12N":
            case 769:
                message.value = 769;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_PhaseCodeKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_PhaseCodeKind
         * @static
         * @param {commonmodule.Optional_PhaseCodeKind} message Optional_PhaseCodeKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_PhaseCodeKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "PhaseCodeKind_none" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.PhaseCodeKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_PhaseCodeKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_PhaseCodeKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_PhaseCodeKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_PhaseCodeKind;
    })();

    commonmodule.AnalogueValue = (function() {

        /**
         * Properties of an AnalogueValue.
         * @memberof commonmodule
         * @interface IAnalogueValue
         * @property {google.protobuf.IFloatValue|null} [f] AnalogueValue f
         * @property {google.protobuf.IInt32Value|null} [i] AnalogueValue i
         */

        /**
         * Constructs a new AnalogueValue.
         * @memberof commonmodule
         * @classdesc Represents an AnalogueValue.
         * @implements IAnalogueValue
         * @constructor
         * @param {commonmodule.IAnalogueValue=} [properties] Properties to set
         */
        function AnalogueValue(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AnalogueValue f.
         * @member {google.protobuf.IFloatValue|null|undefined} f
         * @memberof commonmodule.AnalogueValue
         * @instance
         */
        AnalogueValue.prototype.f = null;

        /**
         * AnalogueValue i.
         * @member {google.protobuf.IInt32Value|null|undefined} i
         * @memberof commonmodule.AnalogueValue
         * @instance
         */
        AnalogueValue.prototype.i = null;

        /**
         * Creates a new AnalogueValue instance using the specified properties.
         * @function create
         * @memberof commonmodule.AnalogueValue
         * @static
         * @param {commonmodule.IAnalogueValue=} [properties] Properties to set
         * @returns {commonmodule.AnalogueValue} AnalogueValue instance
         */
        AnalogueValue.create = function create(properties) {
            return new AnalogueValue(properties);
        };

        /**
         * Encodes the specified AnalogueValue message. Does not implicitly {@link commonmodule.AnalogueValue.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.AnalogueValue
         * @static
         * @param {commonmodule.IAnalogueValue} message AnalogueValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AnalogueValue.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.f != null && Object.hasOwnProperty.call(message, "f"))
                $root.google.protobuf.FloatValue.encode(message.f, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.i != null && Object.hasOwnProperty.call(message, "i"))
                $root.google.protobuf.Int32Value.encode(message.i, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified AnalogueValue message, length delimited. Does not implicitly {@link commonmodule.AnalogueValue.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.AnalogueValue
         * @static
         * @param {commonmodule.IAnalogueValue} message AnalogueValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AnalogueValue.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AnalogueValue message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.AnalogueValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.AnalogueValue} AnalogueValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AnalogueValue.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.AnalogueValue();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.f = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.i = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AnalogueValue message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.AnalogueValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.AnalogueValue} AnalogueValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AnalogueValue.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AnalogueValue message.
         * @function verify
         * @memberof commonmodule.AnalogueValue
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AnalogueValue.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.f != null && message.hasOwnProperty("f")) {
                var error = $root.google.protobuf.FloatValue.verify(message.f);
                if (error)
                    return "f." + error;
            }
            if (message.i != null && message.hasOwnProperty("i")) {
                var error = $root.google.protobuf.Int32Value.verify(message.i);
                if (error)
                    return "i." + error;
            }
            return null;
        };

        /**
         * Creates an AnalogueValue message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.AnalogueValue
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.AnalogueValue} AnalogueValue
         */
        AnalogueValue.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.AnalogueValue)
                return object;
            var message = new $root.commonmodule.AnalogueValue();
            if (object.f != null) {
                if (typeof object.f !== "object")
                    throw TypeError(".commonmodule.AnalogueValue.f: object expected");
                message.f = $root.google.protobuf.FloatValue.fromObject(object.f);
            }
            if (object.i != null) {
                if (typeof object.i !== "object")
                    throw TypeError(".commonmodule.AnalogueValue.i: object expected");
                message.i = $root.google.protobuf.Int32Value.fromObject(object.i);
            }
            return message;
        };

        /**
         * Creates a plain object from an AnalogueValue message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.AnalogueValue
         * @static
         * @param {commonmodule.AnalogueValue} message AnalogueValue
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AnalogueValue.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.f = null;
                object.i = null;
            }
            if (message.f != null && message.hasOwnProperty("f"))
                object.f = $root.google.protobuf.FloatValue.toObject(message.f, options);
            if (message.i != null && message.hasOwnProperty("i"))
                object.i = $root.google.protobuf.Int32Value.toObject(message.i, options);
            return object;
        };

        /**
         * Converts this AnalogueValue to JSON.
         * @function toJSON
         * @memberof commonmodule.AnalogueValue
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AnalogueValue.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AnalogueValue;
    })();

    /**
     * ValidityKind enum.
     * @name commonmodule.ValidityKind
     * @enum {number}
     * @property {number} ValidityKind_good=0 ValidityKind_good value
     * @property {number} ValidityKind_invalid=1 ValidityKind_invalid value
     * @property {number} ValidityKind_reserved=2 ValidityKind_reserved value
     * @property {number} ValidityKind_questionable=3 ValidityKind_questionable value
     */
    commonmodule.ValidityKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "ValidityKind_good"] = 0;
        values[valuesById[1] = "ValidityKind_invalid"] = 1;
        values[valuesById[2] = "ValidityKind_reserved"] = 2;
        values[valuesById[3] = "ValidityKind_questionable"] = 3;
        return values;
    })();

    commonmodule.Optional_ValidityKind = (function() {

        /**
         * Properties of an Optional_ValidityKind.
         * @memberof commonmodule
         * @interface IOptional_ValidityKind
         * @property {commonmodule.ValidityKind|null} [value] Optional_ValidityKind value
         */

        /**
         * Constructs a new Optional_ValidityKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_ValidityKind.
         * @implements IOptional_ValidityKind
         * @constructor
         * @param {commonmodule.IOptional_ValidityKind=} [properties] Properties to set
         */
        function Optional_ValidityKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_ValidityKind value.
         * @member {commonmodule.ValidityKind} value
         * @memberof commonmodule.Optional_ValidityKind
         * @instance
         */
        Optional_ValidityKind.prototype.value = 0;

        /**
         * Creates a new Optional_ValidityKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_ValidityKind
         * @static
         * @param {commonmodule.IOptional_ValidityKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_ValidityKind} Optional_ValidityKind instance
         */
        Optional_ValidityKind.create = function create(properties) {
            return new Optional_ValidityKind(properties);
        };

        /**
         * Encodes the specified Optional_ValidityKind message. Does not implicitly {@link commonmodule.Optional_ValidityKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_ValidityKind
         * @static
         * @param {commonmodule.IOptional_ValidityKind} message Optional_ValidityKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_ValidityKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_ValidityKind message, length delimited. Does not implicitly {@link commonmodule.Optional_ValidityKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_ValidityKind
         * @static
         * @param {commonmodule.IOptional_ValidityKind} message Optional_ValidityKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_ValidityKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_ValidityKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_ValidityKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_ValidityKind} Optional_ValidityKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_ValidityKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_ValidityKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_ValidityKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_ValidityKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_ValidityKind} Optional_ValidityKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_ValidityKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_ValidityKind message.
         * @function verify
         * @memberof commonmodule.Optional_ValidityKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_ValidityKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_ValidityKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_ValidityKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_ValidityKind} Optional_ValidityKind
         */
        Optional_ValidityKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_ValidityKind)
                return object;
            var message = new $root.commonmodule.Optional_ValidityKind();
            switch (object.value) {
            case "ValidityKind_good":
            case 0:
                message.value = 0;
                break;
            case "ValidityKind_invalid":
            case 1:
                message.value = 1;
                break;
            case "ValidityKind_reserved":
            case 2:
                message.value = 2;
                break;
            case "ValidityKind_questionable":
            case 3:
                message.value = 3;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_ValidityKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_ValidityKind
         * @static
         * @param {commonmodule.Optional_ValidityKind} message Optional_ValidityKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_ValidityKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "ValidityKind_good" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.ValidityKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_ValidityKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_ValidityKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_ValidityKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_ValidityKind;
    })();

    commonmodule.DetailQual = (function() {

        /**
         * Properties of a DetailQual.
         * @memberof commonmodule
         * @interface IDetailQual
         * @property {boolean|null} [badReference] DetailQual badReference
         * @property {boolean|null} [failure] DetailQual failure
         * @property {boolean|null} [inaccurate] DetailQual inaccurate
         * @property {boolean|null} [inconsistent] DetailQual inconsistent
         * @property {boolean|null} [oldData] DetailQual oldData
         * @property {boolean|null} [oscillatory] DetailQual oscillatory
         * @property {boolean|null} [outOfRange] DetailQual outOfRange
         * @property {boolean|null} [overflow] DetailQual overflow
         */

        /**
         * Constructs a new DetailQual.
         * @memberof commonmodule
         * @classdesc Represents a DetailQual.
         * @implements IDetailQual
         * @constructor
         * @param {commonmodule.IDetailQual=} [properties] Properties to set
         */
        function DetailQual(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DetailQual badReference.
         * @member {boolean} badReference
         * @memberof commonmodule.DetailQual
         * @instance
         */
        DetailQual.prototype.badReference = false;

        /**
         * DetailQual failure.
         * @member {boolean} failure
         * @memberof commonmodule.DetailQual
         * @instance
         */
        DetailQual.prototype.failure = false;

        /**
         * DetailQual inaccurate.
         * @member {boolean} inaccurate
         * @memberof commonmodule.DetailQual
         * @instance
         */
        DetailQual.prototype.inaccurate = false;

        /**
         * DetailQual inconsistent.
         * @member {boolean} inconsistent
         * @memberof commonmodule.DetailQual
         * @instance
         */
        DetailQual.prototype.inconsistent = false;

        /**
         * DetailQual oldData.
         * @member {boolean} oldData
         * @memberof commonmodule.DetailQual
         * @instance
         */
        DetailQual.prototype.oldData = false;

        /**
         * DetailQual oscillatory.
         * @member {boolean} oscillatory
         * @memberof commonmodule.DetailQual
         * @instance
         */
        DetailQual.prototype.oscillatory = false;

        /**
         * DetailQual outOfRange.
         * @member {boolean} outOfRange
         * @memberof commonmodule.DetailQual
         * @instance
         */
        DetailQual.prototype.outOfRange = false;

        /**
         * DetailQual overflow.
         * @member {boolean} overflow
         * @memberof commonmodule.DetailQual
         * @instance
         */
        DetailQual.prototype.overflow = false;

        /**
         * Creates a new DetailQual instance using the specified properties.
         * @function create
         * @memberof commonmodule.DetailQual
         * @static
         * @param {commonmodule.IDetailQual=} [properties] Properties to set
         * @returns {commonmodule.DetailQual} DetailQual instance
         */
        DetailQual.create = function create(properties) {
            return new DetailQual(properties);
        };

        /**
         * Encodes the specified DetailQual message. Does not implicitly {@link commonmodule.DetailQual.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.DetailQual
         * @static
         * @param {commonmodule.IDetailQual} message DetailQual message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DetailQual.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.badReference != null && Object.hasOwnProperty.call(message, "badReference"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.badReference);
            if (message.failure != null && Object.hasOwnProperty.call(message, "failure"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.failure);
            if (message.inaccurate != null && Object.hasOwnProperty.call(message, "inaccurate"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.inaccurate);
            if (message.inconsistent != null && Object.hasOwnProperty.call(message, "inconsistent"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.inconsistent);
            if (message.oldData != null && Object.hasOwnProperty.call(message, "oldData"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.oldData);
            if (message.oscillatory != null && Object.hasOwnProperty.call(message, "oscillatory"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.oscillatory);
            if (message.outOfRange != null && Object.hasOwnProperty.call(message, "outOfRange"))
                writer.uint32(/* id 7, wireType 0 =*/56).bool(message.outOfRange);
            if (message.overflow != null && Object.hasOwnProperty.call(message, "overflow"))
                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.overflow);
            return writer;
        };

        /**
         * Encodes the specified DetailQual message, length delimited. Does not implicitly {@link commonmodule.DetailQual.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.DetailQual
         * @static
         * @param {commonmodule.IDetailQual} message DetailQual message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DetailQual.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DetailQual message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.DetailQual
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.DetailQual} DetailQual
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DetailQual.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.DetailQual();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.badReference = reader.bool();
                    break;
                case 2:
                    message.failure = reader.bool();
                    break;
                case 3:
                    message.inaccurate = reader.bool();
                    break;
                case 4:
                    message.inconsistent = reader.bool();
                    break;
                case 5:
                    message.oldData = reader.bool();
                    break;
                case 6:
                    message.oscillatory = reader.bool();
                    break;
                case 7:
                    message.outOfRange = reader.bool();
                    break;
                case 8:
                    message.overflow = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DetailQual message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.DetailQual
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.DetailQual} DetailQual
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DetailQual.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DetailQual message.
         * @function verify
         * @memberof commonmodule.DetailQual
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DetailQual.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.badReference != null && message.hasOwnProperty("badReference"))
                if (typeof message.badReference !== "boolean")
                    return "badReference: boolean expected";
            if (message.failure != null && message.hasOwnProperty("failure"))
                if (typeof message.failure !== "boolean")
                    return "failure: boolean expected";
            if (message.inaccurate != null && message.hasOwnProperty("inaccurate"))
                if (typeof message.inaccurate !== "boolean")
                    return "inaccurate: boolean expected";
            if (message.inconsistent != null && message.hasOwnProperty("inconsistent"))
                if (typeof message.inconsistent !== "boolean")
                    return "inconsistent: boolean expected";
            if (message.oldData != null && message.hasOwnProperty("oldData"))
                if (typeof message.oldData !== "boolean")
                    return "oldData: boolean expected";
            if (message.oscillatory != null && message.hasOwnProperty("oscillatory"))
                if (typeof message.oscillatory !== "boolean")
                    return "oscillatory: boolean expected";
            if (message.outOfRange != null && message.hasOwnProperty("outOfRange"))
                if (typeof message.outOfRange !== "boolean")
                    return "outOfRange: boolean expected";
            if (message.overflow != null && message.hasOwnProperty("overflow"))
                if (typeof message.overflow !== "boolean")
                    return "overflow: boolean expected";
            return null;
        };

        /**
         * Creates a DetailQual message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.DetailQual
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.DetailQual} DetailQual
         */
        DetailQual.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.DetailQual)
                return object;
            var message = new $root.commonmodule.DetailQual();
            if (object.badReference != null)
                message.badReference = Boolean(object.badReference);
            if (object.failure != null)
                message.failure = Boolean(object.failure);
            if (object.inaccurate != null)
                message.inaccurate = Boolean(object.inaccurate);
            if (object.inconsistent != null)
                message.inconsistent = Boolean(object.inconsistent);
            if (object.oldData != null)
                message.oldData = Boolean(object.oldData);
            if (object.oscillatory != null)
                message.oscillatory = Boolean(object.oscillatory);
            if (object.outOfRange != null)
                message.outOfRange = Boolean(object.outOfRange);
            if (object.overflow != null)
                message.overflow = Boolean(object.overflow);
            return message;
        };

        /**
         * Creates a plain object from a DetailQual message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.DetailQual
         * @static
         * @param {commonmodule.DetailQual} message DetailQual
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DetailQual.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.badReference = false;
                object.failure = false;
                object.inaccurate = false;
                object.inconsistent = false;
                object.oldData = false;
                object.oscillatory = false;
                object.outOfRange = false;
                object.overflow = false;
            }
            if (message.badReference != null && message.hasOwnProperty("badReference"))
                object.badReference = message.badReference;
            if (message.failure != null && message.hasOwnProperty("failure"))
                object.failure = message.failure;
            if (message.inaccurate != null && message.hasOwnProperty("inaccurate"))
                object.inaccurate = message.inaccurate;
            if (message.inconsistent != null && message.hasOwnProperty("inconsistent"))
                object.inconsistent = message.inconsistent;
            if (message.oldData != null && message.hasOwnProperty("oldData"))
                object.oldData = message.oldData;
            if (message.oscillatory != null && message.hasOwnProperty("oscillatory"))
                object.oscillatory = message.oscillatory;
            if (message.outOfRange != null && message.hasOwnProperty("outOfRange"))
                object.outOfRange = message.outOfRange;
            if (message.overflow != null && message.hasOwnProperty("overflow"))
                object.overflow = message.overflow;
            return object;
        };

        /**
         * Converts this DetailQual to JSON.
         * @function toJSON
         * @memberof commonmodule.DetailQual
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DetailQual.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DetailQual;
    })();

    /**
     * SourceKind enum.
     * @name commonmodule.SourceKind
     * @enum {number}
     * @property {number} SourceKind_process=0 SourceKind_process value
     * @property {number} SourceKind_substituted=1 SourceKind_substituted value
     */
    commonmodule.SourceKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "SourceKind_process"] = 0;
        values[valuesById[1] = "SourceKind_substituted"] = 1;
        return values;
    })();

    commonmodule.Optional_SourceKind = (function() {

        /**
         * Properties of an Optional_SourceKind.
         * @memberof commonmodule
         * @interface IOptional_SourceKind
         * @property {commonmodule.SourceKind|null} [value] Optional_SourceKind value
         */

        /**
         * Constructs a new Optional_SourceKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_SourceKind.
         * @implements IOptional_SourceKind
         * @constructor
         * @param {commonmodule.IOptional_SourceKind=} [properties] Properties to set
         */
        function Optional_SourceKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_SourceKind value.
         * @member {commonmodule.SourceKind} value
         * @memberof commonmodule.Optional_SourceKind
         * @instance
         */
        Optional_SourceKind.prototype.value = 0;

        /**
         * Creates a new Optional_SourceKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_SourceKind
         * @static
         * @param {commonmodule.IOptional_SourceKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_SourceKind} Optional_SourceKind instance
         */
        Optional_SourceKind.create = function create(properties) {
            return new Optional_SourceKind(properties);
        };

        /**
         * Encodes the specified Optional_SourceKind message. Does not implicitly {@link commonmodule.Optional_SourceKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_SourceKind
         * @static
         * @param {commonmodule.IOptional_SourceKind} message Optional_SourceKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_SourceKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_SourceKind message, length delimited. Does not implicitly {@link commonmodule.Optional_SourceKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_SourceKind
         * @static
         * @param {commonmodule.IOptional_SourceKind} message Optional_SourceKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_SourceKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_SourceKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_SourceKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_SourceKind} Optional_SourceKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_SourceKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_SourceKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_SourceKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_SourceKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_SourceKind} Optional_SourceKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_SourceKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_SourceKind message.
         * @function verify
         * @memberof commonmodule.Optional_SourceKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_SourceKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_SourceKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_SourceKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_SourceKind} Optional_SourceKind
         */
        Optional_SourceKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_SourceKind)
                return object;
            var message = new $root.commonmodule.Optional_SourceKind();
            switch (object.value) {
            case "SourceKind_process":
            case 0:
                message.value = 0;
                break;
            case "SourceKind_substituted":
            case 1:
                message.value = 1;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_SourceKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_SourceKind
         * @static
         * @param {commonmodule.Optional_SourceKind} message Optional_SourceKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_SourceKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "SourceKind_process" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.SourceKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_SourceKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_SourceKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_SourceKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_SourceKind;
    })();

    commonmodule.Quality = (function() {

        /**
         * Properties of a Quality.
         * @memberof commonmodule
         * @interface IQuality
         * @property {commonmodule.IDetailQual|null} [detailQual] Quality detailQual
         * @property {boolean|null} [operatorBlocked] Quality operatorBlocked
         * @property {commonmodule.SourceKind|null} [source] Quality source
         * @property {boolean|null} [test] Quality test
         * @property {commonmodule.ValidityKind|null} [validity] Quality validity
         */

        /**
         * Constructs a new Quality.
         * @memberof commonmodule
         * @classdesc Represents a Quality.
         * @implements IQuality
         * @constructor
         * @param {commonmodule.IQuality=} [properties] Properties to set
         */
        function Quality(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Quality detailQual.
         * @member {commonmodule.IDetailQual|null|undefined} detailQual
         * @memberof commonmodule.Quality
         * @instance
         */
        Quality.prototype.detailQual = null;

        /**
         * Quality operatorBlocked.
         * @member {boolean} operatorBlocked
         * @memberof commonmodule.Quality
         * @instance
         */
        Quality.prototype.operatorBlocked = false;

        /**
         * Quality source.
         * @member {commonmodule.SourceKind} source
         * @memberof commonmodule.Quality
         * @instance
         */
        Quality.prototype.source = 0;

        /**
         * Quality test.
         * @member {boolean} test
         * @memberof commonmodule.Quality
         * @instance
         */
        Quality.prototype.test = false;

        /**
         * Quality validity.
         * @member {commonmodule.ValidityKind} validity
         * @memberof commonmodule.Quality
         * @instance
         */
        Quality.prototype.validity = 0;

        /**
         * Creates a new Quality instance using the specified properties.
         * @function create
         * @memberof commonmodule.Quality
         * @static
         * @param {commonmodule.IQuality=} [properties] Properties to set
         * @returns {commonmodule.Quality} Quality instance
         */
        Quality.create = function create(properties) {
            return new Quality(properties);
        };

        /**
         * Encodes the specified Quality message. Does not implicitly {@link commonmodule.Quality.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Quality
         * @static
         * @param {commonmodule.IQuality} message Quality message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Quality.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.detailQual != null && Object.hasOwnProperty.call(message, "detailQual"))
                $root.commonmodule.DetailQual.encode(message.detailQual, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.operatorBlocked != null && Object.hasOwnProperty.call(message, "operatorBlocked"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.operatorBlocked);
            if (message.source != null && Object.hasOwnProperty.call(message, "source"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.source);
            if (message.test != null && Object.hasOwnProperty.call(message, "test"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.test);
            if (message.validity != null && Object.hasOwnProperty.call(message, "validity"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.validity);
            return writer;
        };

        /**
         * Encodes the specified Quality message, length delimited. Does not implicitly {@link commonmodule.Quality.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Quality
         * @static
         * @param {commonmodule.IQuality} message Quality message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Quality.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Quality message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Quality
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Quality} Quality
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Quality.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Quality();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.detailQual = $root.commonmodule.DetailQual.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.operatorBlocked = reader.bool();
                    break;
                case 3:
                    message.source = reader.int32();
                    break;
                case 4:
                    message.test = reader.bool();
                    break;
                case 5:
                    message.validity = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Quality message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Quality
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Quality} Quality
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Quality.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Quality message.
         * @function verify
         * @memberof commonmodule.Quality
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Quality.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.detailQual != null && message.hasOwnProperty("detailQual")) {
                var error = $root.commonmodule.DetailQual.verify(message.detailQual);
                if (error)
                    return "detailQual." + error;
            }
            if (message.operatorBlocked != null && message.hasOwnProperty("operatorBlocked"))
                if (typeof message.operatorBlocked !== "boolean")
                    return "operatorBlocked: boolean expected";
            if (message.source != null && message.hasOwnProperty("source"))
                switch (message.source) {
                default:
                    return "source: enum value expected";
                case 0:
                case 1:
                    break;
                }
            if (message.test != null && message.hasOwnProperty("test"))
                if (typeof message.test !== "boolean")
                    return "test: boolean expected";
            if (message.validity != null && message.hasOwnProperty("validity"))
                switch (message.validity) {
                default:
                    return "validity: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };

        /**
         * Creates a Quality message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Quality
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Quality} Quality
         */
        Quality.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Quality)
                return object;
            var message = new $root.commonmodule.Quality();
            if (object.detailQual != null) {
                if (typeof object.detailQual !== "object")
                    throw TypeError(".commonmodule.Quality.detailQual: object expected");
                message.detailQual = $root.commonmodule.DetailQual.fromObject(object.detailQual);
            }
            if (object.operatorBlocked != null)
                message.operatorBlocked = Boolean(object.operatorBlocked);
            switch (object.source) {
            case "SourceKind_process":
            case 0:
                message.source = 0;
                break;
            case "SourceKind_substituted":
            case 1:
                message.source = 1;
                break;
            }
            if (object.test != null)
                message.test = Boolean(object.test);
            switch (object.validity) {
            case "ValidityKind_good":
            case 0:
                message.validity = 0;
                break;
            case "ValidityKind_invalid":
            case 1:
                message.validity = 1;
                break;
            case "ValidityKind_reserved":
            case 2:
                message.validity = 2;
                break;
            case "ValidityKind_questionable":
            case 3:
                message.validity = 3;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a Quality message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Quality
         * @static
         * @param {commonmodule.Quality} message Quality
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Quality.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.detailQual = null;
                object.operatorBlocked = false;
                object.source = options.enums === String ? "SourceKind_process" : 0;
                object.test = false;
                object.validity = options.enums === String ? "ValidityKind_good" : 0;
            }
            if (message.detailQual != null && message.hasOwnProperty("detailQual"))
                object.detailQual = $root.commonmodule.DetailQual.toObject(message.detailQual, options);
            if (message.operatorBlocked != null && message.hasOwnProperty("operatorBlocked"))
                object.operatorBlocked = message.operatorBlocked;
            if (message.source != null && message.hasOwnProperty("source"))
                object.source = options.enums === String ? $root.commonmodule.SourceKind[message.source] : message.source;
            if (message.test != null && message.hasOwnProperty("test"))
                object.test = message.test;
            if (message.validity != null && message.hasOwnProperty("validity"))
                object.validity = options.enums === String ? $root.commonmodule.ValidityKind[message.validity] : message.validity;
            return object;
        };

        /**
         * Converts this Quality to JSON.
         * @function toJSON
         * @memberof commonmodule.Quality
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Quality.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Quality;
    })();

    /**
     * TimeAccuracyKind enum.
     * @name commonmodule.TimeAccuracyKind
     * @enum {number}
     * @property {number} TimeAccuracyKind_UNDEFINED=0 TimeAccuracyKind_UNDEFINED value
     * @property {number} TimeAccuracyKind_T0=7 TimeAccuracyKind_T0 value
     * @property {number} TimeAccuracyKind_T1=10 TimeAccuracyKind_T1 value
     * @property {number} TimeAccuracyKind_T2=14 TimeAccuracyKind_T2 value
     * @property {number} TimeAccuracyKind_T3=16 TimeAccuracyKind_T3 value
     * @property {number} TimeAccuracyKind_T4=18 TimeAccuracyKind_T4 value
     * @property {number} TimeAccuracyKind_T5=20 TimeAccuracyKind_T5 value
     * @property {number} TimeAccuracyKind_unspecified=31 TimeAccuracyKind_unspecified value
     */
    commonmodule.TimeAccuracyKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "TimeAccuracyKind_UNDEFINED"] = 0;
        values[valuesById[7] = "TimeAccuracyKind_T0"] = 7;
        values[valuesById[10] = "TimeAccuracyKind_T1"] = 10;
        values[valuesById[14] = "TimeAccuracyKind_T2"] = 14;
        values[valuesById[16] = "TimeAccuracyKind_T3"] = 16;
        values[valuesById[18] = "TimeAccuracyKind_T4"] = 18;
        values[valuesById[20] = "TimeAccuracyKind_T5"] = 20;
        values[valuesById[31] = "TimeAccuracyKind_unspecified"] = 31;
        return values;
    })();

    commonmodule.Optional_TimeAccuracyKind = (function() {

        /**
         * Properties of an Optional_TimeAccuracyKind.
         * @memberof commonmodule
         * @interface IOptional_TimeAccuracyKind
         * @property {commonmodule.TimeAccuracyKind|null} [value] Optional_TimeAccuracyKind value
         */

        /**
         * Constructs a new Optional_TimeAccuracyKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_TimeAccuracyKind.
         * @implements IOptional_TimeAccuracyKind
         * @constructor
         * @param {commonmodule.IOptional_TimeAccuracyKind=} [properties] Properties to set
         */
        function Optional_TimeAccuracyKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_TimeAccuracyKind value.
         * @member {commonmodule.TimeAccuracyKind} value
         * @memberof commonmodule.Optional_TimeAccuracyKind
         * @instance
         */
        Optional_TimeAccuracyKind.prototype.value = 0;

        /**
         * Creates a new Optional_TimeAccuracyKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_TimeAccuracyKind
         * @static
         * @param {commonmodule.IOptional_TimeAccuracyKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_TimeAccuracyKind} Optional_TimeAccuracyKind instance
         */
        Optional_TimeAccuracyKind.create = function create(properties) {
            return new Optional_TimeAccuracyKind(properties);
        };

        /**
         * Encodes the specified Optional_TimeAccuracyKind message. Does not implicitly {@link commonmodule.Optional_TimeAccuracyKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_TimeAccuracyKind
         * @static
         * @param {commonmodule.IOptional_TimeAccuracyKind} message Optional_TimeAccuracyKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_TimeAccuracyKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_TimeAccuracyKind message, length delimited. Does not implicitly {@link commonmodule.Optional_TimeAccuracyKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_TimeAccuracyKind
         * @static
         * @param {commonmodule.IOptional_TimeAccuracyKind} message Optional_TimeAccuracyKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_TimeAccuracyKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_TimeAccuracyKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_TimeAccuracyKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_TimeAccuracyKind} Optional_TimeAccuracyKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_TimeAccuracyKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_TimeAccuracyKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_TimeAccuracyKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_TimeAccuracyKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_TimeAccuracyKind} Optional_TimeAccuracyKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_TimeAccuracyKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_TimeAccuracyKind message.
         * @function verify
         * @memberof commonmodule.Optional_TimeAccuracyKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_TimeAccuracyKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 7:
                case 10:
                case 14:
                case 16:
                case 18:
                case 20:
                case 31:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_TimeAccuracyKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_TimeAccuracyKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_TimeAccuracyKind} Optional_TimeAccuracyKind
         */
        Optional_TimeAccuracyKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_TimeAccuracyKind)
                return object;
            var message = new $root.commonmodule.Optional_TimeAccuracyKind();
            switch (object.value) {
            case "TimeAccuracyKind_UNDEFINED":
            case 0:
                message.value = 0;
                break;
            case "TimeAccuracyKind_T0":
            case 7:
                message.value = 7;
                break;
            case "TimeAccuracyKind_T1":
            case 10:
                message.value = 10;
                break;
            case "TimeAccuracyKind_T2":
            case 14:
                message.value = 14;
                break;
            case "TimeAccuracyKind_T3":
            case 16:
                message.value = 16;
                break;
            case "TimeAccuracyKind_T4":
            case 18:
                message.value = 18;
                break;
            case "TimeAccuracyKind_T5":
            case 20:
                message.value = 20;
                break;
            case "TimeAccuracyKind_unspecified":
            case 31:
                message.value = 31;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_TimeAccuracyKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_TimeAccuracyKind
         * @static
         * @param {commonmodule.Optional_TimeAccuracyKind} message Optional_TimeAccuracyKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_TimeAccuracyKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "TimeAccuracyKind_UNDEFINED" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.TimeAccuracyKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_TimeAccuracyKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_TimeAccuracyKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_TimeAccuracyKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_TimeAccuracyKind;
    })();

    commonmodule.TimeQuality = (function() {

        /**
         * Properties of a TimeQuality.
         * @memberof commonmodule
         * @interface ITimeQuality
         * @property {boolean|null} [clockFailure] TimeQuality clockFailure
         * @property {boolean|null} [clockNotSynchronized] TimeQuality clockNotSynchronized
         * @property {boolean|null} [leapSecondsKnown] TimeQuality leapSecondsKnown
         * @property {commonmodule.TimeAccuracyKind|null} [timeAccuracy] TimeQuality timeAccuracy
         */

        /**
         * Constructs a new TimeQuality.
         * @memberof commonmodule
         * @classdesc Represents a TimeQuality.
         * @implements ITimeQuality
         * @constructor
         * @param {commonmodule.ITimeQuality=} [properties] Properties to set
         */
        function TimeQuality(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * TimeQuality clockFailure.
         * @member {boolean} clockFailure
         * @memberof commonmodule.TimeQuality
         * @instance
         */
        TimeQuality.prototype.clockFailure = false;

        /**
         * TimeQuality clockNotSynchronized.
         * @member {boolean} clockNotSynchronized
         * @memberof commonmodule.TimeQuality
         * @instance
         */
        TimeQuality.prototype.clockNotSynchronized = false;

        /**
         * TimeQuality leapSecondsKnown.
         * @member {boolean} leapSecondsKnown
         * @memberof commonmodule.TimeQuality
         * @instance
         */
        TimeQuality.prototype.leapSecondsKnown = false;

        /**
         * TimeQuality timeAccuracy.
         * @member {commonmodule.TimeAccuracyKind} timeAccuracy
         * @memberof commonmodule.TimeQuality
         * @instance
         */
        TimeQuality.prototype.timeAccuracy = 0;

        /**
         * Creates a new TimeQuality instance using the specified properties.
         * @function create
         * @memberof commonmodule.TimeQuality
         * @static
         * @param {commonmodule.ITimeQuality=} [properties] Properties to set
         * @returns {commonmodule.TimeQuality} TimeQuality instance
         */
        TimeQuality.create = function create(properties) {
            return new TimeQuality(properties);
        };

        /**
         * Encodes the specified TimeQuality message. Does not implicitly {@link commonmodule.TimeQuality.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.TimeQuality
         * @static
         * @param {commonmodule.ITimeQuality} message TimeQuality message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TimeQuality.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.clockFailure != null && Object.hasOwnProperty.call(message, "clockFailure"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.clockFailure);
            if (message.clockNotSynchronized != null && Object.hasOwnProperty.call(message, "clockNotSynchronized"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.clockNotSynchronized);
            if (message.leapSecondsKnown != null && Object.hasOwnProperty.call(message, "leapSecondsKnown"))
                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.leapSecondsKnown);
            if (message.timeAccuracy != null && Object.hasOwnProperty.call(message, "timeAccuracy"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.timeAccuracy);
            return writer;
        };

        /**
         * Encodes the specified TimeQuality message, length delimited. Does not implicitly {@link commonmodule.TimeQuality.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.TimeQuality
         * @static
         * @param {commonmodule.ITimeQuality} message TimeQuality message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        TimeQuality.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a TimeQuality message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.TimeQuality
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.TimeQuality} TimeQuality
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TimeQuality.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.TimeQuality();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.clockFailure = reader.bool();
                    break;
                case 2:
                    message.clockNotSynchronized = reader.bool();
                    break;
                case 3:
                    message.leapSecondsKnown = reader.bool();
                    break;
                case 4:
                    message.timeAccuracy = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a TimeQuality message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.TimeQuality
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.TimeQuality} TimeQuality
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        TimeQuality.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a TimeQuality message.
         * @function verify
         * @memberof commonmodule.TimeQuality
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        TimeQuality.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.clockFailure != null && message.hasOwnProperty("clockFailure"))
                if (typeof message.clockFailure !== "boolean")
                    return "clockFailure: boolean expected";
            if (message.clockNotSynchronized != null && message.hasOwnProperty("clockNotSynchronized"))
                if (typeof message.clockNotSynchronized !== "boolean")
                    return "clockNotSynchronized: boolean expected";
            if (message.leapSecondsKnown != null && message.hasOwnProperty("leapSecondsKnown"))
                if (typeof message.leapSecondsKnown !== "boolean")
                    return "leapSecondsKnown: boolean expected";
            if (message.timeAccuracy != null && message.hasOwnProperty("timeAccuracy"))
                switch (message.timeAccuracy) {
                default:
                    return "timeAccuracy: enum value expected";
                case 0:
                case 7:
                case 10:
                case 14:
                case 16:
                case 18:
                case 20:
                case 31:
                    break;
                }
            return null;
        };

        /**
         * Creates a TimeQuality message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.TimeQuality
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.TimeQuality} TimeQuality
         */
        TimeQuality.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.TimeQuality)
                return object;
            var message = new $root.commonmodule.TimeQuality();
            if (object.clockFailure != null)
                message.clockFailure = Boolean(object.clockFailure);
            if (object.clockNotSynchronized != null)
                message.clockNotSynchronized = Boolean(object.clockNotSynchronized);
            if (object.leapSecondsKnown != null)
                message.leapSecondsKnown = Boolean(object.leapSecondsKnown);
            switch (object.timeAccuracy) {
            case "TimeAccuracyKind_UNDEFINED":
            case 0:
                message.timeAccuracy = 0;
                break;
            case "TimeAccuracyKind_T0":
            case 7:
                message.timeAccuracy = 7;
                break;
            case "TimeAccuracyKind_T1":
            case 10:
                message.timeAccuracy = 10;
                break;
            case "TimeAccuracyKind_T2":
            case 14:
                message.timeAccuracy = 14;
                break;
            case "TimeAccuracyKind_T3":
            case 16:
                message.timeAccuracy = 16;
                break;
            case "TimeAccuracyKind_T4":
            case 18:
                message.timeAccuracy = 18;
                break;
            case "TimeAccuracyKind_T5":
            case 20:
                message.timeAccuracy = 20;
                break;
            case "TimeAccuracyKind_unspecified":
            case 31:
                message.timeAccuracy = 31;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a TimeQuality message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.TimeQuality
         * @static
         * @param {commonmodule.TimeQuality} message TimeQuality
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        TimeQuality.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.clockFailure = false;
                object.clockNotSynchronized = false;
                object.leapSecondsKnown = false;
                object.timeAccuracy = options.enums === String ? "TimeAccuracyKind_UNDEFINED" : 0;
            }
            if (message.clockFailure != null && message.hasOwnProperty("clockFailure"))
                object.clockFailure = message.clockFailure;
            if (message.clockNotSynchronized != null && message.hasOwnProperty("clockNotSynchronized"))
                object.clockNotSynchronized = message.clockNotSynchronized;
            if (message.leapSecondsKnown != null && message.hasOwnProperty("leapSecondsKnown"))
                object.leapSecondsKnown = message.leapSecondsKnown;
            if (message.timeAccuracy != null && message.hasOwnProperty("timeAccuracy"))
                object.timeAccuracy = options.enums === String ? $root.commonmodule.TimeAccuracyKind[message.timeAccuracy] : message.timeAccuracy;
            return object;
        };

        /**
         * Converts this TimeQuality to JSON.
         * @function toJSON
         * @memberof commonmodule.TimeQuality
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        TimeQuality.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return TimeQuality;
    })();

    commonmodule.Timestamp = (function() {

        /**
         * Properties of a Timestamp.
         * @memberof commonmodule
         * @interface ITimestamp
         * @property {number|null} [fraction] Timestamp fraction
         * @property {number|Long|null} [seconds] Timestamp seconds
         * @property {commonmodule.ITimeQuality|null} [tq] Timestamp tq
         */

        /**
         * Constructs a new Timestamp.
         * @memberof commonmodule
         * @classdesc Represents a Timestamp.
         * @implements ITimestamp
         * @constructor
         * @param {commonmodule.ITimestamp=} [properties] Properties to set
         */
        function Timestamp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Timestamp fraction.
         * @member {number} fraction
         * @memberof commonmodule.Timestamp
         * @instance
         */
        Timestamp.prototype.fraction = 0;

        /**
         * Timestamp seconds.
         * @member {number|Long} seconds
         * @memberof commonmodule.Timestamp
         * @instance
         */
        Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Timestamp tq.
         * @member {commonmodule.ITimeQuality|null|undefined} tq
         * @memberof commonmodule.Timestamp
         * @instance
         */
        Timestamp.prototype.tq = null;

        /**
         * Creates a new Timestamp instance using the specified properties.
         * @function create
         * @memberof commonmodule.Timestamp
         * @static
         * @param {commonmodule.ITimestamp=} [properties] Properties to set
         * @returns {commonmodule.Timestamp} Timestamp instance
         */
        Timestamp.create = function create(properties) {
            return new Timestamp(properties);
        };

        /**
         * Encodes the specified Timestamp message. Does not implicitly {@link commonmodule.Timestamp.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Timestamp
         * @static
         * @param {commonmodule.ITimestamp} message Timestamp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Timestamp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.fraction != null && Object.hasOwnProperty.call(message, "fraction"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.fraction);
            if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.seconds);
            if (message.tq != null && Object.hasOwnProperty.call(message, "tq"))
                $root.commonmodule.TimeQuality.encode(message.tq, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link commonmodule.Timestamp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Timestamp
         * @static
         * @param {commonmodule.ITimestamp} message Timestamp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Timestamp message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Timestamp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Timestamp} Timestamp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Timestamp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Timestamp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.fraction = reader.uint32();
                    break;
                case 2:
                    message.seconds = reader.uint64();
                    break;
                case 3:
                    message.tq = $root.commonmodule.TimeQuality.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Timestamp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Timestamp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Timestamp} Timestamp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Timestamp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Timestamp message.
         * @function verify
         * @memberof commonmodule.Timestamp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Timestamp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.fraction != null && message.hasOwnProperty("fraction"))
                if (!$util.isInteger(message.fraction))
                    return "fraction: integer expected";
            if (message.seconds != null && message.hasOwnProperty("seconds"))
                if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                    return "seconds: integer|Long expected";
            if (message.tq != null && message.hasOwnProperty("tq")) {
                var error = $root.commonmodule.TimeQuality.verify(message.tq);
                if (error)
                    return "tq." + error;
            }
            return null;
        };

        /**
         * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Timestamp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Timestamp} Timestamp
         */
        Timestamp.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Timestamp)
                return object;
            var message = new $root.commonmodule.Timestamp();
            if (object.fraction != null)
                message.fraction = object.fraction >>> 0;
            if (object.seconds != null)
                if ($util.Long)
                    (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = true;
                else if (typeof object.seconds === "string")
                    message.seconds = parseInt(object.seconds, 10);
                else if (typeof object.seconds === "number")
                    message.seconds = object.seconds;
                else if (typeof object.seconds === "object")
                    message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber(true);
            if (object.tq != null) {
                if (typeof object.tq !== "object")
                    throw TypeError(".commonmodule.Timestamp.tq: object expected");
                message.tq = $root.commonmodule.TimeQuality.fromObject(object.tq);
            }
            return message;
        };

        /**
         * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Timestamp
         * @static
         * @param {commonmodule.Timestamp} message Timestamp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Timestamp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.fraction = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.seconds = options.longs === String ? "0" : 0;
                object.tq = null;
            }
            if (message.fraction != null && message.hasOwnProperty("fraction"))
                object.fraction = message.fraction;
            if (message.seconds != null && message.hasOwnProperty("seconds"))
                if (typeof message.seconds === "number")
                    object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                else
                    object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber(true) : message.seconds;
            if (message.tq != null && message.hasOwnProperty("tq"))
                object.tq = $root.commonmodule.TimeQuality.toObject(message.tq, options);
            return object;
        };

        /**
         * Converts this Timestamp to JSON.
         * @function toJSON
         * @memberof commonmodule.Timestamp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Timestamp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Timestamp;
    })();

    commonmodule.Unit = (function() {

        /**
         * Properties of an Unit.
         * @memberof commonmodule
         * @interface IUnit
         * @property {commonmodule.IOptional_UnitMultiplierKind|null} [multiplier] Unit multiplier
         * @property {commonmodule.UnitSymbolKind|null} [SIUnit] Unit SIUnit
         */

        /**
         * Constructs a new Unit.
         * @memberof commonmodule
         * @classdesc Represents an Unit.
         * @implements IUnit
         * @constructor
         * @param {commonmodule.IUnit=} [properties] Properties to set
         */
        function Unit(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Unit multiplier.
         * @member {commonmodule.IOptional_UnitMultiplierKind|null|undefined} multiplier
         * @memberof commonmodule.Unit
         * @instance
         */
        Unit.prototype.multiplier = null;

        /**
         * Unit SIUnit.
         * @member {commonmodule.UnitSymbolKind} SIUnit
         * @memberof commonmodule.Unit
         * @instance
         */
        Unit.prototype.SIUnit = 0;

        /**
         * Creates a new Unit instance using the specified properties.
         * @function create
         * @memberof commonmodule.Unit
         * @static
         * @param {commonmodule.IUnit=} [properties] Properties to set
         * @returns {commonmodule.Unit} Unit instance
         */
        Unit.create = function create(properties) {
            return new Unit(properties);
        };

        /**
         * Encodes the specified Unit message. Does not implicitly {@link commonmodule.Unit.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Unit
         * @static
         * @param {commonmodule.IUnit} message Unit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Unit.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.multiplier != null && Object.hasOwnProperty.call(message, "multiplier"))
                $root.commonmodule.Optional_UnitMultiplierKind.encode(message.multiplier, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.SIUnit != null && Object.hasOwnProperty.call(message, "SIUnit"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.SIUnit);
            return writer;
        };

        /**
         * Encodes the specified Unit message, length delimited. Does not implicitly {@link commonmodule.Unit.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Unit
         * @static
         * @param {commonmodule.IUnit} message Unit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Unit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Unit message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Unit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Unit} Unit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Unit.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Unit();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.multiplier = $root.commonmodule.Optional_UnitMultiplierKind.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.SIUnit = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Unit message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Unit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Unit} Unit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Unit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Unit message.
         * @function verify
         * @memberof commonmodule.Unit
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Unit.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.multiplier != null && message.hasOwnProperty("multiplier")) {
                var error = $root.commonmodule.Optional_UnitMultiplierKind.verify(message.multiplier);
                if (error)
                    return "multiplier." + error;
            }
            if (message.SIUnit != null && message.hasOwnProperty("SIUnit"))
                switch (message.SIUnit) {
                default:
                    return "SIUnit: enum value expected";
                case 0:
                case 2:
                case 3:
                case 5:
                case 9:
                case 10:
                case 23:
                case 25:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 38:
                case 39:
                case 41:
                case 53:
                case 61:
                case 63:
                case 65:
                case 71:
                case 72:
                case 73:
                case 75:
                case 81:
                case 100:
                case 106:
                case 159:
                case 160:
                case 166:
                case 179:
                case 279:
                case 500:
                    break;
                }
            return null;
        };

        /**
         * Creates an Unit message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Unit
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Unit} Unit
         */
        Unit.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Unit)
                return object;
            var message = new $root.commonmodule.Unit();
            if (object.multiplier != null) {
                if (typeof object.multiplier !== "object")
                    throw TypeError(".commonmodule.Unit.multiplier: object expected");
                message.multiplier = $root.commonmodule.Optional_UnitMultiplierKind.fromObject(object.multiplier);
            }
            switch (object.SIUnit) {
            case "UnitSymbolKind_none":
            case 0:
                message.SIUnit = 0;
                break;
            case "UnitSymbolKind_meter":
            case 2:
                message.SIUnit = 2;
                break;
            case "UnitSymbolKind_gram":
            case 3:
                message.SIUnit = 3;
                break;
            case "UnitSymbolKind_Amp":
            case 5:
                message.SIUnit = 5;
                break;
            case "UnitSymbolKind_deg":
            case 9:
                message.SIUnit = 9;
                break;
            case "UnitSymbolKind_rad":
            case 10:
                message.SIUnit = 10;
                break;
            case "UnitSymbolKind_degC":
            case 23:
                message.SIUnit = 23;
                break;
            case "UnitSymbolKind_Farad":
            case 25:
                message.SIUnit = 25;
                break;
            case "UnitSymbolKind_sec":
            case 27:
                message.SIUnit = 27;
                break;
            case "UnitSymbolKind_Henry":
            case 28:
                message.SIUnit = 28;
                break;
            case "UnitSymbolKind_V":
            case 29:
                message.SIUnit = 29;
                break;
            case "UnitSymbolKind_ohm":
            case 30:
                message.SIUnit = 30;
                break;
            case "UnitSymbolKind_Joule":
            case 31:
                message.SIUnit = 31;
                break;
            case "UnitSymbolKind_Newton":
            case 32:
                message.SIUnit = 32;
                break;
            case "UnitSymbolKind_Hz":
            case 33:
                message.SIUnit = 33;
                break;
            case "UnitSymbolKind_W":
            case 38:
                message.SIUnit = 38;
                break;
            case "UnitSymbolKind_Pa":
            case 39:
                message.SIUnit = 39;
                break;
            case "UnitSymbolKind_m2":
            case 41:
                message.SIUnit = 41;
                break;
            case "UnitSymbolKind_Siemens":
            case 53:
                message.SIUnit = 53;
                break;
            case "UnitSymbolKind_VA":
            case 61:
                message.SIUnit = 61;
                break;
            case "UnitSymbolKind_VAr":
            case 63:
                message.SIUnit = 63;
                break;
            case "UnitSymbolKind_wPerVA":
            case 65:
                message.SIUnit = 65;
                break;
            case "UnitSymbolKind_VAh":
            case 71:
                message.SIUnit = 71;
                break;
            case "UnitSymbolKind_Wh":
            case 72:
                message.SIUnit = 72;
                break;
            case "UnitSymbolKind_VArh":
            case 73:
                message.SIUnit = 73;
                break;
            case "UnitSymbolKind_hzPerS":
            case 75:
                message.SIUnit = 75;
                break;
            case "UnitSymbolKind_wPerS":
            case 81:
                message.SIUnit = 81;
                break;
            case "UnitSymbolKind_other":
            case 100:
                message.SIUnit = 100;
                break;
            case "UnitSymbolKind_Ah":
            case 106:
                message.SIUnit = 106;
                break;
            case "UnitSymbolKind_min":
            case 159:
                message.SIUnit = 159;
                break;
            case "UnitSymbolKind_hour":
            case 160:
                message.SIUnit = 160;
                break;
            case "UnitSymbolKind_m3":
            case 166:
                message.SIUnit = 166;
                break;
            case "UnitSymbolKind_wPerM2":
            case 179:
                message.SIUnit = 179;
                break;
            case "UnitSymbolKind_degF":
            case 279:
                message.SIUnit = 279;
                break;
            case "UnitSymbolKind_mph":
            case 500:
                message.SIUnit = 500;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Unit message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Unit
         * @static
         * @param {commonmodule.Unit} message Unit
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Unit.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.multiplier = null;
                object.SIUnit = options.enums === String ? "UnitSymbolKind_none" : 0;
            }
            if (message.multiplier != null && message.hasOwnProperty("multiplier"))
                object.multiplier = $root.commonmodule.Optional_UnitMultiplierKind.toObject(message.multiplier, options);
            if (message.SIUnit != null && message.hasOwnProperty("SIUnit"))
                object.SIUnit = options.enums === String ? $root.commonmodule.UnitSymbolKind[message.SIUnit] : message.SIUnit;
            return object;
        };

        /**
         * Converts this Unit to JSON.
         * @function toJSON
         * @memberof commonmodule.Unit
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Unit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Unit;
    })();

    commonmodule.MV = (function() {

        /**
         * Properties of a MV.
         * @memberof commonmodule
         * @interface IMV
         * @property {commonmodule.IAnalogueValue|null} [mag] MV mag
         * @property {commonmodule.IQuality|null} [q] MV q
         * @property {commonmodule.ITimestamp|null} [t] MV t
         * @property {commonmodule.IUnit|null} [units] MV units
         */

        /**
         * Constructs a new MV.
         * @memberof commonmodule
         * @classdesc Represents a MV.
         * @implements IMV
         * @constructor
         * @param {commonmodule.IMV=} [properties] Properties to set
         */
        function MV(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MV mag.
         * @member {commonmodule.IAnalogueValue|null|undefined} mag
         * @memberof commonmodule.MV
         * @instance
         */
        MV.prototype.mag = null;

        /**
         * MV q.
         * @member {commonmodule.IQuality|null|undefined} q
         * @memberof commonmodule.MV
         * @instance
         */
        MV.prototype.q = null;

        /**
         * MV t.
         * @member {commonmodule.ITimestamp|null|undefined} t
         * @memberof commonmodule.MV
         * @instance
         */
        MV.prototype.t = null;

        /**
         * MV units.
         * @member {commonmodule.IUnit|null|undefined} units
         * @memberof commonmodule.MV
         * @instance
         */
        MV.prototype.units = null;

        /**
         * Creates a new MV instance using the specified properties.
         * @function create
         * @memberof commonmodule.MV
         * @static
         * @param {commonmodule.IMV=} [properties] Properties to set
         * @returns {commonmodule.MV} MV instance
         */
        MV.create = function create(properties) {
            return new MV(properties);
        };

        /**
         * Encodes the specified MV message. Does not implicitly {@link commonmodule.MV.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.MV
         * @static
         * @param {commonmodule.IMV} message MV message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MV.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.mag != null && Object.hasOwnProperty.call(message, "mag"))
                $root.commonmodule.AnalogueValue.encode(message.mag, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.q != null && Object.hasOwnProperty.call(message, "q"))
                $root.commonmodule.Quality.encode(message.q, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.t != null && Object.hasOwnProperty.call(message, "t"))
                $root.commonmodule.Timestamp.encode(message.t, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.units != null && Object.hasOwnProperty.call(message, "units"))
                $root.commonmodule.Unit.encode(message.units, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MV message, length delimited. Does not implicitly {@link commonmodule.MV.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.MV
         * @static
         * @param {commonmodule.IMV} message MV message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MV.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MV message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.MV
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.MV} MV
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MV.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.MV();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.mag = $root.commonmodule.AnalogueValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.q = $root.commonmodule.Quality.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.t = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.units = $root.commonmodule.Unit.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MV message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.MV
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.MV} MV
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MV.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MV message.
         * @function verify
         * @memberof commonmodule.MV
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MV.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.mag != null && message.hasOwnProperty("mag")) {
                var error = $root.commonmodule.AnalogueValue.verify(message.mag);
                if (error)
                    return "mag." + error;
            }
            if (message.q != null && message.hasOwnProperty("q")) {
                var error = $root.commonmodule.Quality.verify(message.q);
                if (error)
                    return "q." + error;
            }
            if (message.t != null && message.hasOwnProperty("t")) {
                var error = $root.commonmodule.Timestamp.verify(message.t);
                if (error)
                    return "t." + error;
            }
            if (message.units != null && message.hasOwnProperty("units")) {
                var error = $root.commonmodule.Unit.verify(message.units);
                if (error)
                    return "units." + error;
            }
            return null;
        };

        /**
         * Creates a MV message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.MV
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.MV} MV
         */
        MV.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.MV)
                return object;
            var message = new $root.commonmodule.MV();
            if (object.mag != null) {
                if (typeof object.mag !== "object")
                    throw TypeError(".commonmodule.MV.mag: object expected");
                message.mag = $root.commonmodule.AnalogueValue.fromObject(object.mag);
            }
            if (object.q != null) {
                if (typeof object.q !== "object")
                    throw TypeError(".commonmodule.MV.q: object expected");
                message.q = $root.commonmodule.Quality.fromObject(object.q);
            }
            if (object.t != null) {
                if (typeof object.t !== "object")
                    throw TypeError(".commonmodule.MV.t: object expected");
                message.t = $root.commonmodule.Timestamp.fromObject(object.t);
            }
            if (object.units != null) {
                if (typeof object.units !== "object")
                    throw TypeError(".commonmodule.MV.units: object expected");
                message.units = $root.commonmodule.Unit.fromObject(object.units);
            }
            return message;
        };

        /**
         * Creates a plain object from a MV message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.MV
         * @static
         * @param {commonmodule.MV} message MV
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MV.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.mag = null;
                object.q = null;
                object.t = null;
                object.units = null;
            }
            if (message.mag != null && message.hasOwnProperty("mag"))
                object.mag = $root.commonmodule.AnalogueValue.toObject(message.mag, options);
            if (message.q != null && message.hasOwnProperty("q"))
                object.q = $root.commonmodule.Quality.toObject(message.q, options);
            if (message.t != null && message.hasOwnProperty("t"))
                object.t = $root.commonmodule.Timestamp.toObject(message.t, options);
            if (message.units != null && message.hasOwnProperty("units"))
                object.units = $root.commonmodule.Unit.toObject(message.units, options);
            return object;
        };

        /**
         * Converts this MV to JSON.
         * @function toJSON
         * @memberof commonmodule.MV
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MV.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MV;
    })();

    commonmodule.LogicalNode = (function() {

        /**
         * Properties of a LogicalNode.
         * @memberof commonmodule
         * @interface ILogicalNode
         * @property {commonmodule.IIdentifiedObject|null} [identifiedObject] LogicalNode identifiedObject
         */

        /**
         * Constructs a new LogicalNode.
         * @memberof commonmodule
         * @classdesc Represents a LogicalNode.
         * @implements ILogicalNode
         * @constructor
         * @param {commonmodule.ILogicalNode=} [properties] Properties to set
         */
        function LogicalNode(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LogicalNode identifiedObject.
         * @member {commonmodule.IIdentifiedObject|null|undefined} identifiedObject
         * @memberof commonmodule.LogicalNode
         * @instance
         */
        LogicalNode.prototype.identifiedObject = null;

        /**
         * Creates a new LogicalNode instance using the specified properties.
         * @function create
         * @memberof commonmodule.LogicalNode
         * @static
         * @param {commonmodule.ILogicalNode=} [properties] Properties to set
         * @returns {commonmodule.LogicalNode} LogicalNode instance
         */
        LogicalNode.create = function create(properties) {
            return new LogicalNode(properties);
        };

        /**
         * Encodes the specified LogicalNode message. Does not implicitly {@link commonmodule.LogicalNode.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.LogicalNode
         * @static
         * @param {commonmodule.ILogicalNode} message LogicalNode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LogicalNode.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.identifiedObject != null && Object.hasOwnProperty.call(message, "identifiedObject"))
                $root.commonmodule.IdentifiedObject.encode(message.identifiedObject, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LogicalNode message, length delimited. Does not implicitly {@link commonmodule.LogicalNode.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.LogicalNode
         * @static
         * @param {commonmodule.ILogicalNode} message LogicalNode message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LogicalNode.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LogicalNode message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.LogicalNode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.LogicalNode} LogicalNode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LogicalNode.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.LogicalNode();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.identifiedObject = $root.commonmodule.IdentifiedObject.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LogicalNode message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.LogicalNode
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.LogicalNode} LogicalNode
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LogicalNode.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LogicalNode message.
         * @function verify
         * @memberof commonmodule.LogicalNode
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LogicalNode.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject")) {
                var error = $root.commonmodule.IdentifiedObject.verify(message.identifiedObject);
                if (error)
                    return "identifiedObject." + error;
            }
            return null;
        };

        /**
         * Creates a LogicalNode message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.LogicalNode
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.LogicalNode} LogicalNode
         */
        LogicalNode.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.LogicalNode)
                return object;
            var message = new $root.commonmodule.LogicalNode();
            if (object.identifiedObject != null) {
                if (typeof object.identifiedObject !== "object")
                    throw TypeError(".commonmodule.LogicalNode.identifiedObject: object expected");
                message.identifiedObject = $root.commonmodule.IdentifiedObject.fromObject(object.identifiedObject);
            }
            return message;
        };

        /**
         * Creates a plain object from a LogicalNode message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.LogicalNode
         * @static
         * @param {commonmodule.LogicalNode} message LogicalNode
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LogicalNode.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.identifiedObject = null;
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject"))
                object.identifiedObject = $root.commonmodule.IdentifiedObject.toObject(message.identifiedObject, options);
            return object;
        };

        /**
         * Converts this LogicalNode to JSON.
         * @function toJSON
         * @memberof commonmodule.LogicalNode
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LogicalNode.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LogicalNode;
    })();

    commonmodule.AnalogStatusGGIO = (function() {

        /**
         * Properties of an AnalogStatusGGIO.
         * @memberof commonmodule
         * @interface IAnalogStatusGGIO
         * @property {commonmodule.ILogicalNode|null} [logicalNode] AnalogStatusGGIO logicalNode
         * @property {commonmodule.IMV|null} [AnIn] AnalogStatusGGIO AnIn
         * @property {commonmodule.IOptional_PhaseCodeKind|null} [Phase] AnalogStatusGGIO Phase
         */

        /**
         * Constructs a new AnalogStatusGGIO.
         * @memberof commonmodule
         * @classdesc Represents an AnalogStatusGGIO.
         * @implements IAnalogStatusGGIO
         * @constructor
         * @param {commonmodule.IAnalogStatusGGIO=} [properties] Properties to set
         */
        function AnalogStatusGGIO(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AnalogStatusGGIO logicalNode.
         * @member {commonmodule.ILogicalNode|null|undefined} logicalNode
         * @memberof commonmodule.AnalogStatusGGIO
         * @instance
         */
        AnalogStatusGGIO.prototype.logicalNode = null;

        /**
         * AnalogStatusGGIO AnIn.
         * @member {commonmodule.IMV|null|undefined} AnIn
         * @memberof commonmodule.AnalogStatusGGIO
         * @instance
         */
        AnalogStatusGGIO.prototype.AnIn = null;

        /**
         * AnalogStatusGGIO Phase.
         * @member {commonmodule.IOptional_PhaseCodeKind|null|undefined} Phase
         * @memberof commonmodule.AnalogStatusGGIO
         * @instance
         */
        AnalogStatusGGIO.prototype.Phase = null;

        /**
         * Creates a new AnalogStatusGGIO instance using the specified properties.
         * @function create
         * @memberof commonmodule.AnalogStatusGGIO
         * @static
         * @param {commonmodule.IAnalogStatusGGIO=} [properties] Properties to set
         * @returns {commonmodule.AnalogStatusGGIO} AnalogStatusGGIO instance
         */
        AnalogStatusGGIO.create = function create(properties) {
            return new AnalogStatusGGIO(properties);
        };

        /**
         * Encodes the specified AnalogStatusGGIO message. Does not implicitly {@link commonmodule.AnalogStatusGGIO.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.AnalogStatusGGIO
         * @static
         * @param {commonmodule.IAnalogStatusGGIO} message AnalogStatusGGIO message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AnalogStatusGGIO.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNode != null && Object.hasOwnProperty.call(message, "logicalNode"))
                $root.commonmodule.LogicalNode.encode(message.logicalNode, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.AnIn != null && Object.hasOwnProperty.call(message, "AnIn"))
                $root.commonmodule.MV.encode(message.AnIn, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.Phase != null && Object.hasOwnProperty.call(message, "Phase"))
                $root.commonmodule.Optional_PhaseCodeKind.encode(message.Phase, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified AnalogStatusGGIO message, length delimited. Does not implicitly {@link commonmodule.AnalogStatusGGIO.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.AnalogStatusGGIO
         * @static
         * @param {commonmodule.IAnalogStatusGGIO} message AnalogStatusGGIO message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AnalogStatusGGIO.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AnalogStatusGGIO message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.AnalogStatusGGIO
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.AnalogStatusGGIO} AnalogStatusGGIO
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AnalogStatusGGIO.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.AnalogStatusGGIO();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNode = $root.commonmodule.LogicalNode.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.AnIn = $root.commonmodule.MV.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.Phase = $root.commonmodule.Optional_PhaseCodeKind.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AnalogStatusGGIO message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.AnalogStatusGGIO
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.AnalogStatusGGIO} AnalogStatusGGIO
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AnalogStatusGGIO.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AnalogStatusGGIO message.
         * @function verify
         * @memberof commonmodule.AnalogStatusGGIO
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AnalogStatusGGIO.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode")) {
                var error = $root.commonmodule.LogicalNode.verify(message.logicalNode);
                if (error)
                    return "logicalNode." + error;
            }
            if (message.AnIn != null && message.hasOwnProperty("AnIn")) {
                var error = $root.commonmodule.MV.verify(message.AnIn);
                if (error)
                    return "AnIn." + error;
            }
            if (message.Phase != null && message.hasOwnProperty("Phase")) {
                var error = $root.commonmodule.Optional_PhaseCodeKind.verify(message.Phase);
                if (error)
                    return "Phase." + error;
            }
            return null;
        };

        /**
         * Creates an AnalogStatusGGIO message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.AnalogStatusGGIO
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.AnalogStatusGGIO} AnalogStatusGGIO
         */
        AnalogStatusGGIO.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.AnalogStatusGGIO)
                return object;
            var message = new $root.commonmodule.AnalogStatusGGIO();
            if (object.logicalNode != null) {
                if (typeof object.logicalNode !== "object")
                    throw TypeError(".commonmodule.AnalogStatusGGIO.logicalNode: object expected");
                message.logicalNode = $root.commonmodule.LogicalNode.fromObject(object.logicalNode);
            }
            if (object.AnIn != null) {
                if (typeof object.AnIn !== "object")
                    throw TypeError(".commonmodule.AnalogStatusGGIO.AnIn: object expected");
                message.AnIn = $root.commonmodule.MV.fromObject(object.AnIn);
            }
            if (object.Phase != null) {
                if (typeof object.Phase !== "object")
                    throw TypeError(".commonmodule.AnalogStatusGGIO.Phase: object expected");
                message.Phase = $root.commonmodule.Optional_PhaseCodeKind.fromObject(object.Phase);
            }
            return message;
        };

        /**
         * Creates a plain object from an AnalogStatusGGIO message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.AnalogStatusGGIO
         * @static
         * @param {commonmodule.AnalogStatusGGIO} message AnalogStatusGGIO
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AnalogStatusGGIO.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNode = null;
                object.AnIn = null;
                object.Phase = null;
            }
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode"))
                object.logicalNode = $root.commonmodule.LogicalNode.toObject(message.logicalNode, options);
            if (message.AnIn != null && message.hasOwnProperty("AnIn"))
                object.AnIn = $root.commonmodule.MV.toObject(message.AnIn, options);
            if (message.Phase != null && message.hasOwnProperty("Phase"))
                object.Phase = $root.commonmodule.Optional_PhaseCodeKind.toObject(message.Phase, options);
            return object;
        };

        /**
         * Converts this AnalogStatusGGIO to JSON.
         * @function toJSON
         * @memberof commonmodule.AnalogStatusGGIO
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AnalogStatusGGIO.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AnalogStatusGGIO;
    })();

    commonmodule.AnalogueValueCtl = (function() {

        /**
         * Properties of an AnalogueValueCtl.
         * @memberof commonmodule
         * @interface IAnalogueValueCtl
         * @property {google.protobuf.IFloatValue|null} [f] AnalogueValueCtl f
         * @property {google.protobuf.IInt32Value|null} [i] AnalogueValueCtl i
         */

        /**
         * Constructs a new AnalogueValueCtl.
         * @memberof commonmodule
         * @classdesc Represents an AnalogueValueCtl.
         * @implements IAnalogueValueCtl
         * @constructor
         * @param {commonmodule.IAnalogueValueCtl=} [properties] Properties to set
         */
        function AnalogueValueCtl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AnalogueValueCtl f.
         * @member {google.protobuf.IFloatValue|null|undefined} f
         * @memberof commonmodule.AnalogueValueCtl
         * @instance
         */
        AnalogueValueCtl.prototype.f = null;

        /**
         * AnalogueValueCtl i.
         * @member {google.protobuf.IInt32Value|null|undefined} i
         * @memberof commonmodule.AnalogueValueCtl
         * @instance
         */
        AnalogueValueCtl.prototype.i = null;

        /**
         * Creates a new AnalogueValueCtl instance using the specified properties.
         * @function create
         * @memberof commonmodule.AnalogueValueCtl
         * @static
         * @param {commonmodule.IAnalogueValueCtl=} [properties] Properties to set
         * @returns {commonmodule.AnalogueValueCtl} AnalogueValueCtl instance
         */
        AnalogueValueCtl.create = function create(properties) {
            return new AnalogueValueCtl(properties);
        };

        /**
         * Encodes the specified AnalogueValueCtl message. Does not implicitly {@link commonmodule.AnalogueValueCtl.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.AnalogueValueCtl
         * @static
         * @param {commonmodule.IAnalogueValueCtl} message AnalogueValueCtl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AnalogueValueCtl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.f != null && Object.hasOwnProperty.call(message, "f"))
                $root.google.protobuf.FloatValue.encode(message.f, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.i != null && Object.hasOwnProperty.call(message, "i"))
                $root.google.protobuf.Int32Value.encode(message.i, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified AnalogueValueCtl message, length delimited. Does not implicitly {@link commonmodule.AnalogueValueCtl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.AnalogueValueCtl
         * @static
         * @param {commonmodule.IAnalogueValueCtl} message AnalogueValueCtl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AnalogueValueCtl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AnalogueValueCtl message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.AnalogueValueCtl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.AnalogueValueCtl} AnalogueValueCtl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AnalogueValueCtl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.AnalogueValueCtl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.f = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.i = $root.google.protobuf.Int32Value.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AnalogueValueCtl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.AnalogueValueCtl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.AnalogueValueCtl} AnalogueValueCtl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AnalogueValueCtl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AnalogueValueCtl message.
         * @function verify
         * @memberof commonmodule.AnalogueValueCtl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AnalogueValueCtl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.f != null && message.hasOwnProperty("f")) {
                var error = $root.google.protobuf.FloatValue.verify(message.f);
                if (error)
                    return "f." + error;
            }
            if (message.i != null && message.hasOwnProperty("i")) {
                var error = $root.google.protobuf.Int32Value.verify(message.i);
                if (error)
                    return "i." + error;
            }
            return null;
        };

        /**
         * Creates an AnalogueValueCtl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.AnalogueValueCtl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.AnalogueValueCtl} AnalogueValueCtl
         */
        AnalogueValueCtl.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.AnalogueValueCtl)
                return object;
            var message = new $root.commonmodule.AnalogueValueCtl();
            if (object.f != null) {
                if (typeof object.f !== "object")
                    throw TypeError(".commonmodule.AnalogueValueCtl.f: object expected");
                message.f = $root.google.protobuf.FloatValue.fromObject(object.f);
            }
            if (object.i != null) {
                if (typeof object.i !== "object")
                    throw TypeError(".commonmodule.AnalogueValueCtl.i: object expected");
                message.i = $root.google.protobuf.Int32Value.fromObject(object.i);
            }
            return message;
        };

        /**
         * Creates a plain object from an AnalogueValueCtl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.AnalogueValueCtl
         * @static
         * @param {commonmodule.AnalogueValueCtl} message AnalogueValueCtl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AnalogueValueCtl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.f = null;
                object.i = null;
            }
            if (message.f != null && message.hasOwnProperty("f"))
                object.f = $root.google.protobuf.FloatValue.toObject(message.f, options);
            if (message.i != null && message.hasOwnProperty("i"))
                object.i = $root.google.protobuf.Int32Value.toObject(message.i, options);
            return object;
        };

        /**
         * Converts this AnalogueValueCtl to JSON.
         * @function toJSON
         * @memberof commonmodule.AnalogueValueCtl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AnalogueValueCtl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AnalogueValueCtl;
    })();

    commonmodule.NamedObject = (function() {

        /**
         * Properties of a NamedObject.
         * @memberof commonmodule
         * @interface INamedObject
         * @property {google.protobuf.IStringValue|null} [description] NamedObject description
         * @property {google.protobuf.IStringValue|null} [name] NamedObject name
         */

        /**
         * Constructs a new NamedObject.
         * @memberof commonmodule
         * @classdesc Represents a NamedObject.
         * @implements INamedObject
         * @constructor
         * @param {commonmodule.INamedObject=} [properties] Properties to set
         */
        function NamedObject(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NamedObject description.
         * @member {google.protobuf.IStringValue|null|undefined} description
         * @memberof commonmodule.NamedObject
         * @instance
         */
        NamedObject.prototype.description = null;

        /**
         * NamedObject name.
         * @member {google.protobuf.IStringValue|null|undefined} name
         * @memberof commonmodule.NamedObject
         * @instance
         */
        NamedObject.prototype.name = null;

        /**
         * Creates a new NamedObject instance using the specified properties.
         * @function create
         * @memberof commonmodule.NamedObject
         * @static
         * @param {commonmodule.INamedObject=} [properties] Properties to set
         * @returns {commonmodule.NamedObject} NamedObject instance
         */
        NamedObject.create = function create(properties) {
            return new NamedObject(properties);
        };

        /**
         * Encodes the specified NamedObject message. Does not implicitly {@link commonmodule.NamedObject.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.NamedObject
         * @static
         * @param {commonmodule.INamedObject} message NamedObject message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NamedObject.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                $root.google.protobuf.StringValue.encode(message.description, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                $root.google.protobuf.StringValue.encode(message.name, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified NamedObject message, length delimited. Does not implicitly {@link commonmodule.NamedObject.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.NamedObject
         * @static
         * @param {commonmodule.INamedObject} message NamedObject message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NamedObject.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NamedObject message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.NamedObject
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.NamedObject} NamedObject
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NamedObject.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.NamedObject();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.description = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.name = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NamedObject message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.NamedObject
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.NamedObject} NamedObject
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NamedObject.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NamedObject message.
         * @function verify
         * @memberof commonmodule.NamedObject
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NamedObject.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.description != null && message.hasOwnProperty("description")) {
                var error = $root.google.protobuf.StringValue.verify(message.description);
                if (error)
                    return "description." + error;
            }
            if (message.name != null && message.hasOwnProperty("name")) {
                var error = $root.google.protobuf.StringValue.verify(message.name);
                if (error)
                    return "name." + error;
            }
            return null;
        };

        /**
         * Creates a NamedObject message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.NamedObject
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.NamedObject} NamedObject
         */
        NamedObject.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.NamedObject)
                return object;
            var message = new $root.commonmodule.NamedObject();
            if (object.description != null) {
                if (typeof object.description !== "object")
                    throw TypeError(".commonmodule.NamedObject.description: object expected");
                message.description = $root.google.protobuf.StringValue.fromObject(object.description);
            }
            if (object.name != null) {
                if (typeof object.name !== "object")
                    throw TypeError(".commonmodule.NamedObject.name: object expected");
                message.name = $root.google.protobuf.StringValue.fromObject(object.name);
            }
            return message;
        };

        /**
         * Creates a plain object from a NamedObject message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.NamedObject
         * @static
         * @param {commonmodule.NamedObject} message NamedObject
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NamedObject.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.description = null;
                object.name = null;
            }
            if (message.description != null && message.hasOwnProperty("description"))
                object.description = $root.google.protobuf.StringValue.toObject(message.description, options);
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = $root.google.protobuf.StringValue.toObject(message.name, options);
            return object;
        };

        /**
         * Converts this NamedObject to JSON.
         * @function toJSON
         * @memberof commonmodule.NamedObject
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NamedObject.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return NamedObject;
    })();

    commonmodule.ApplicationSystem = (function() {

        /**
         * Properties of an ApplicationSystem.
         * @memberof commonmodule
         * @interface IApplicationSystem
         * @property {commonmodule.INamedObject|null} [namedObject] ApplicationSystem namedObject
         * @property {string|null} [mRID] ApplicationSystem mRID
         */

        /**
         * Constructs a new ApplicationSystem.
         * @memberof commonmodule
         * @classdesc Represents an ApplicationSystem.
         * @implements IApplicationSystem
         * @constructor
         * @param {commonmodule.IApplicationSystem=} [properties] Properties to set
         */
        function ApplicationSystem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ApplicationSystem namedObject.
         * @member {commonmodule.INamedObject|null|undefined} namedObject
         * @memberof commonmodule.ApplicationSystem
         * @instance
         */
        ApplicationSystem.prototype.namedObject = null;

        /**
         * ApplicationSystem mRID.
         * @member {string} mRID
         * @memberof commonmodule.ApplicationSystem
         * @instance
         */
        ApplicationSystem.prototype.mRID = "";

        /**
         * Creates a new ApplicationSystem instance using the specified properties.
         * @function create
         * @memberof commonmodule.ApplicationSystem
         * @static
         * @param {commonmodule.IApplicationSystem=} [properties] Properties to set
         * @returns {commonmodule.ApplicationSystem} ApplicationSystem instance
         */
        ApplicationSystem.create = function create(properties) {
            return new ApplicationSystem(properties);
        };

        /**
         * Encodes the specified ApplicationSystem message. Does not implicitly {@link commonmodule.ApplicationSystem.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ApplicationSystem
         * @static
         * @param {commonmodule.IApplicationSystem} message ApplicationSystem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ApplicationSystem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.namedObject != null && Object.hasOwnProperty.call(message, "namedObject"))
                $root.commonmodule.NamedObject.encode(message.namedObject, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.mRID != null && Object.hasOwnProperty.call(message, "mRID"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.mRID);
            return writer;
        };

        /**
         * Encodes the specified ApplicationSystem message, length delimited. Does not implicitly {@link commonmodule.ApplicationSystem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ApplicationSystem
         * @static
         * @param {commonmodule.IApplicationSystem} message ApplicationSystem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ApplicationSystem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an ApplicationSystem message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ApplicationSystem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ApplicationSystem} ApplicationSystem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ApplicationSystem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ApplicationSystem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.namedObject = $root.commonmodule.NamedObject.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.mRID = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an ApplicationSystem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ApplicationSystem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ApplicationSystem} ApplicationSystem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ApplicationSystem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an ApplicationSystem message.
         * @function verify
         * @memberof commonmodule.ApplicationSystem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ApplicationSystem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.namedObject != null && message.hasOwnProperty("namedObject")) {
                var error = $root.commonmodule.NamedObject.verify(message.namedObject);
                if (error)
                    return "namedObject." + error;
            }
            if (message.mRID != null && message.hasOwnProperty("mRID"))
                if (!$util.isString(message.mRID))
                    return "mRID: string expected";
            return null;
        };

        /**
         * Creates an ApplicationSystem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ApplicationSystem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ApplicationSystem} ApplicationSystem
         */
        ApplicationSystem.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ApplicationSystem)
                return object;
            var message = new $root.commonmodule.ApplicationSystem();
            if (object.namedObject != null) {
                if (typeof object.namedObject !== "object")
                    throw TypeError(".commonmodule.ApplicationSystem.namedObject: object expected");
                message.namedObject = $root.commonmodule.NamedObject.fromObject(object.namedObject);
            }
            if (object.mRID != null)
                message.mRID = String(object.mRID);
            return message;
        };

        /**
         * Creates a plain object from an ApplicationSystem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ApplicationSystem
         * @static
         * @param {commonmodule.ApplicationSystem} message ApplicationSystem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ApplicationSystem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.namedObject = null;
                object.mRID = "";
            }
            if (message.namedObject != null && message.hasOwnProperty("namedObject"))
                object.namedObject = $root.commonmodule.NamedObject.toObject(message.namedObject, options);
            if (message.mRID != null && message.hasOwnProperty("mRID"))
                object.mRID = message.mRID;
            return object;
        };

        /**
         * Converts this ApplicationSystem to JSON.
         * @function toJSON
         * @memberof commonmodule.ApplicationSystem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ApplicationSystem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ApplicationSystem;
    })();

    commonmodule.ASG = (function() {

        /**
         * Properties of a ASG.
         * @memberof commonmodule
         * @interface IASG
         * @property {commonmodule.IAnalogueValueCtl|null} [setMag] ASG setMag
         * @property {commonmodule.IUnit|null} [units] ASG units
         */

        /**
         * Constructs a new ASG.
         * @memberof commonmodule
         * @classdesc Represents a ASG.
         * @implements IASG
         * @constructor
         * @param {commonmodule.IASG=} [properties] Properties to set
         */
        function ASG(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ASG setMag.
         * @member {commonmodule.IAnalogueValueCtl|null|undefined} setMag
         * @memberof commonmodule.ASG
         * @instance
         */
        ASG.prototype.setMag = null;

        /**
         * ASG units.
         * @member {commonmodule.IUnit|null|undefined} units
         * @memberof commonmodule.ASG
         * @instance
         */
        ASG.prototype.units = null;

        /**
         * Creates a new ASG instance using the specified properties.
         * @function create
         * @memberof commonmodule.ASG
         * @static
         * @param {commonmodule.IASG=} [properties] Properties to set
         * @returns {commonmodule.ASG} ASG instance
         */
        ASG.create = function create(properties) {
            return new ASG(properties);
        };

        /**
         * Encodes the specified ASG message. Does not implicitly {@link commonmodule.ASG.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ASG
         * @static
         * @param {commonmodule.IASG} message ASG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ASG.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.setMag != null && Object.hasOwnProperty.call(message, "setMag"))
                $root.commonmodule.AnalogueValueCtl.encode(message.setMag, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.units != null && Object.hasOwnProperty.call(message, "units"))
                $root.commonmodule.Unit.encode(message.units, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ASG message, length delimited. Does not implicitly {@link commonmodule.ASG.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ASG
         * @static
         * @param {commonmodule.IASG} message ASG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ASG.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ASG message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ASG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ASG} ASG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ASG.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ASG();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.setMag = $root.commonmodule.AnalogueValueCtl.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.units = $root.commonmodule.Unit.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ASG message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ASG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ASG} ASG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ASG.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ASG message.
         * @function verify
         * @memberof commonmodule.ASG
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ASG.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.setMag != null && message.hasOwnProperty("setMag")) {
                var error = $root.commonmodule.AnalogueValueCtl.verify(message.setMag);
                if (error)
                    return "setMag." + error;
            }
            if (message.units != null && message.hasOwnProperty("units")) {
                var error = $root.commonmodule.Unit.verify(message.units);
                if (error)
                    return "units." + error;
            }
            return null;
        };

        /**
         * Creates a ASG message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ASG
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ASG} ASG
         */
        ASG.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ASG)
                return object;
            var message = new $root.commonmodule.ASG();
            if (object.setMag != null) {
                if (typeof object.setMag !== "object")
                    throw TypeError(".commonmodule.ASG.setMag: object expected");
                message.setMag = $root.commonmodule.AnalogueValueCtl.fromObject(object.setMag);
            }
            if (object.units != null) {
                if (typeof object.units !== "object")
                    throw TypeError(".commonmodule.ASG.units: object expected");
                message.units = $root.commonmodule.Unit.fromObject(object.units);
            }
            return message;
        };

        /**
         * Creates a plain object from a ASG message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ASG
         * @static
         * @param {commonmodule.ASG} message ASG
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ASG.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.setMag = null;
                object.units = null;
            }
            if (message.setMag != null && message.hasOwnProperty("setMag"))
                object.setMag = $root.commonmodule.AnalogueValueCtl.toObject(message.setMag, options);
            if (message.units != null && message.hasOwnProperty("units"))
                object.units = $root.commonmodule.Unit.toObject(message.units, options);
            return object;
        };

        /**
         * Converts this ASG to JSON.
         * @function toJSON
         * @memberof commonmodule.ASG
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ASG.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ASG;
    })();

    commonmodule.BCR = (function() {

        /**
         * Properties of a BCR.
         * @memberof commonmodule
         * @interface IBCR
         * @property {number|Long|null} [actVal] BCR actVal
         * @property {commonmodule.IQuality|null} [q] BCR q
         * @property {commonmodule.ITimestamp|null} [t] BCR t
         * @property {commonmodule.IOptional_UnitSymbolKind|null} [units] BCR units
         */

        /**
         * Constructs a new BCR.
         * @memberof commonmodule
         * @classdesc Represents a BCR.
         * @implements IBCR
         * @constructor
         * @param {commonmodule.IBCR=} [properties] Properties to set
         */
        function BCR(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BCR actVal.
         * @member {number|Long} actVal
         * @memberof commonmodule.BCR
         * @instance
         */
        BCR.prototype.actVal = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * BCR q.
         * @member {commonmodule.IQuality|null|undefined} q
         * @memberof commonmodule.BCR
         * @instance
         */
        BCR.prototype.q = null;

        /**
         * BCR t.
         * @member {commonmodule.ITimestamp|null|undefined} t
         * @memberof commonmodule.BCR
         * @instance
         */
        BCR.prototype.t = null;

        /**
         * BCR units.
         * @member {commonmodule.IOptional_UnitSymbolKind|null|undefined} units
         * @memberof commonmodule.BCR
         * @instance
         */
        BCR.prototype.units = null;

        /**
         * Creates a new BCR instance using the specified properties.
         * @function create
         * @memberof commonmodule.BCR
         * @static
         * @param {commonmodule.IBCR=} [properties] Properties to set
         * @returns {commonmodule.BCR} BCR instance
         */
        BCR.create = function create(properties) {
            return new BCR(properties);
        };

        /**
         * Encodes the specified BCR message. Does not implicitly {@link commonmodule.BCR.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.BCR
         * @static
         * @param {commonmodule.IBCR} message BCR message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BCR.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.actVal != null && Object.hasOwnProperty.call(message, "actVal"))
                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.actVal);
            if (message.q != null && Object.hasOwnProperty.call(message, "q"))
                $root.commonmodule.Quality.encode(message.q, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.t != null && Object.hasOwnProperty.call(message, "t"))
                $root.commonmodule.Timestamp.encode(message.t, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.units != null && Object.hasOwnProperty.call(message, "units"))
                $root.commonmodule.Optional_UnitSymbolKind.encode(message.units, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BCR message, length delimited. Does not implicitly {@link commonmodule.BCR.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.BCR
         * @static
         * @param {commonmodule.IBCR} message BCR message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BCR.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BCR message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.BCR
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.BCR} BCR
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BCR.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.BCR();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.actVal = reader.int64();
                    break;
                case 2:
                    message.q = $root.commonmodule.Quality.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.t = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.units = $root.commonmodule.Optional_UnitSymbolKind.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BCR message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.BCR
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.BCR} BCR
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BCR.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BCR message.
         * @function verify
         * @memberof commonmodule.BCR
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BCR.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.actVal != null && message.hasOwnProperty("actVal"))
                if (!$util.isInteger(message.actVal) && !(message.actVal && $util.isInteger(message.actVal.low) && $util.isInteger(message.actVal.high)))
                    return "actVal: integer|Long expected";
            if (message.q != null && message.hasOwnProperty("q")) {
                var error = $root.commonmodule.Quality.verify(message.q);
                if (error)
                    return "q." + error;
            }
            if (message.t != null && message.hasOwnProperty("t")) {
                var error = $root.commonmodule.Timestamp.verify(message.t);
                if (error)
                    return "t." + error;
            }
            if (message.units != null && message.hasOwnProperty("units")) {
                var error = $root.commonmodule.Optional_UnitSymbolKind.verify(message.units);
                if (error)
                    return "units." + error;
            }
            return null;
        };

        /**
         * Creates a BCR message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.BCR
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.BCR} BCR
         */
        BCR.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.BCR)
                return object;
            var message = new $root.commonmodule.BCR();
            if (object.actVal != null)
                if ($util.Long)
                    (message.actVal = $util.Long.fromValue(object.actVal)).unsigned = false;
                else if (typeof object.actVal === "string")
                    message.actVal = parseInt(object.actVal, 10);
                else if (typeof object.actVal === "number")
                    message.actVal = object.actVal;
                else if (typeof object.actVal === "object")
                    message.actVal = new $util.LongBits(object.actVal.low >>> 0, object.actVal.high >>> 0).toNumber();
            if (object.q != null) {
                if (typeof object.q !== "object")
                    throw TypeError(".commonmodule.BCR.q: object expected");
                message.q = $root.commonmodule.Quality.fromObject(object.q);
            }
            if (object.t != null) {
                if (typeof object.t !== "object")
                    throw TypeError(".commonmodule.BCR.t: object expected");
                message.t = $root.commonmodule.Timestamp.fromObject(object.t);
            }
            if (object.units != null) {
                if (typeof object.units !== "object")
                    throw TypeError(".commonmodule.BCR.units: object expected");
                message.units = $root.commonmodule.Optional_UnitSymbolKind.fromObject(object.units);
            }
            return message;
        };

        /**
         * Creates a plain object from a BCR message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.BCR
         * @static
         * @param {commonmodule.BCR} message BCR
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BCR.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.actVal = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.actVal = options.longs === String ? "0" : 0;
                object.q = null;
                object.t = null;
                object.units = null;
            }
            if (message.actVal != null && message.hasOwnProperty("actVal"))
                if (typeof message.actVal === "number")
                    object.actVal = options.longs === String ? String(message.actVal) : message.actVal;
                else
                    object.actVal = options.longs === String ? $util.Long.prototype.toString.call(message.actVal) : options.longs === Number ? new $util.LongBits(message.actVal.low >>> 0, message.actVal.high >>> 0).toNumber() : message.actVal;
            if (message.q != null && message.hasOwnProperty("q"))
                object.q = $root.commonmodule.Quality.toObject(message.q, options);
            if (message.t != null && message.hasOwnProperty("t"))
                object.t = $root.commonmodule.Timestamp.toObject(message.t, options);
            if (message.units != null && message.hasOwnProperty("units"))
                object.units = $root.commonmodule.Optional_UnitSymbolKind.toObject(message.units, options);
            return object;
        };

        /**
         * Converts this BCR to JSON.
         * @function toJSON
         * @memberof commonmodule.BCR
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BCR.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BCR;
    })();

    commonmodule.StatusSPS = (function() {

        /**
         * Properties of a StatusSPS.
         * @memberof commonmodule
         * @interface IStatusSPS
         * @property {commonmodule.IQuality|null} [q] StatusSPS q
         * @property {boolean|null} [stVal] StatusSPS stVal
         * @property {commonmodule.ITimestamp|null} [t] StatusSPS t
         */

        /**
         * Constructs a new StatusSPS.
         * @memberof commonmodule
         * @classdesc Represents a StatusSPS.
         * @implements IStatusSPS
         * @constructor
         * @param {commonmodule.IStatusSPS=} [properties] Properties to set
         */
        function StatusSPS(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StatusSPS q.
         * @member {commonmodule.IQuality|null|undefined} q
         * @memberof commonmodule.StatusSPS
         * @instance
         */
        StatusSPS.prototype.q = null;

        /**
         * StatusSPS stVal.
         * @member {boolean} stVal
         * @memberof commonmodule.StatusSPS
         * @instance
         */
        StatusSPS.prototype.stVal = false;

        /**
         * StatusSPS t.
         * @member {commonmodule.ITimestamp|null|undefined} t
         * @memberof commonmodule.StatusSPS
         * @instance
         */
        StatusSPS.prototype.t = null;

        /**
         * Creates a new StatusSPS instance using the specified properties.
         * @function create
         * @memberof commonmodule.StatusSPS
         * @static
         * @param {commonmodule.IStatusSPS=} [properties] Properties to set
         * @returns {commonmodule.StatusSPS} StatusSPS instance
         */
        StatusSPS.create = function create(properties) {
            return new StatusSPS(properties);
        };

        /**
         * Encodes the specified StatusSPS message. Does not implicitly {@link commonmodule.StatusSPS.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.StatusSPS
         * @static
         * @param {commonmodule.IStatusSPS} message StatusSPS message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusSPS.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.q != null && Object.hasOwnProperty.call(message, "q"))
                $root.commonmodule.Quality.encode(message.q, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.stVal != null && Object.hasOwnProperty.call(message, "stVal"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.stVal);
            if (message.t != null && Object.hasOwnProperty.call(message, "t"))
                $root.commonmodule.Timestamp.encode(message.t, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified StatusSPS message, length delimited. Does not implicitly {@link commonmodule.StatusSPS.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.StatusSPS
         * @static
         * @param {commonmodule.IStatusSPS} message StatusSPS message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusSPS.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StatusSPS message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.StatusSPS
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.StatusSPS} StatusSPS
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusSPS.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.StatusSPS();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.q = $root.commonmodule.Quality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.stVal = reader.bool();
                    break;
                case 3:
                    message.t = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a StatusSPS message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.StatusSPS
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.StatusSPS} StatusSPS
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusSPS.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StatusSPS message.
         * @function verify
         * @memberof commonmodule.StatusSPS
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StatusSPS.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.q != null && message.hasOwnProperty("q")) {
                var error = $root.commonmodule.Quality.verify(message.q);
                if (error)
                    return "q." + error;
            }
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                if (typeof message.stVal !== "boolean")
                    return "stVal: boolean expected";
            if (message.t != null && message.hasOwnProperty("t")) {
                var error = $root.commonmodule.Timestamp.verify(message.t);
                if (error)
                    return "t." + error;
            }
            return null;
        };

        /**
         * Creates a StatusSPS message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.StatusSPS
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.StatusSPS} StatusSPS
         */
        StatusSPS.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.StatusSPS)
                return object;
            var message = new $root.commonmodule.StatusSPS();
            if (object.q != null) {
                if (typeof object.q !== "object")
                    throw TypeError(".commonmodule.StatusSPS.q: object expected");
                message.q = $root.commonmodule.Quality.fromObject(object.q);
            }
            if (object.stVal != null)
                message.stVal = Boolean(object.stVal);
            if (object.t != null) {
                if (typeof object.t !== "object")
                    throw TypeError(".commonmodule.StatusSPS.t: object expected");
                message.t = $root.commonmodule.Timestamp.fromObject(object.t);
            }
            return message;
        };

        /**
         * Creates a plain object from a StatusSPS message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.StatusSPS
         * @static
         * @param {commonmodule.StatusSPS} message StatusSPS
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StatusSPS.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.q = null;
                object.stVal = false;
                object.t = null;
            }
            if (message.q != null && message.hasOwnProperty("q"))
                object.q = $root.commonmodule.Quality.toObject(message.q, options);
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                object.stVal = message.stVal;
            if (message.t != null && message.hasOwnProperty("t"))
                object.t = $root.commonmodule.Timestamp.toObject(message.t, options);
            return object;
        };

        /**
         * Converts this StatusSPS to JSON.
         * @function toJSON
         * @memberof commonmodule.StatusSPS
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StatusSPS.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StatusSPS;
    })();

    commonmodule.BooleanStatusGGIO = (function() {

        /**
         * Properties of a BooleanStatusGGIO.
         * @memberof commonmodule
         * @interface IBooleanStatusGGIO
         * @property {commonmodule.ILogicalNode|null} [logicalNode] BooleanStatusGGIO logicalNode
         * @property {commonmodule.IStatusSPS|null} [Ind] BooleanStatusGGIO Ind
         * @property {commonmodule.IOptional_PhaseCodeKind|null} [Phase] BooleanStatusGGIO Phase
         */

        /**
         * Constructs a new BooleanStatusGGIO.
         * @memberof commonmodule
         * @classdesc Represents a BooleanStatusGGIO.
         * @implements IBooleanStatusGGIO
         * @constructor
         * @param {commonmodule.IBooleanStatusGGIO=} [properties] Properties to set
         */
        function BooleanStatusGGIO(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BooleanStatusGGIO logicalNode.
         * @member {commonmodule.ILogicalNode|null|undefined} logicalNode
         * @memberof commonmodule.BooleanStatusGGIO
         * @instance
         */
        BooleanStatusGGIO.prototype.logicalNode = null;

        /**
         * BooleanStatusGGIO Ind.
         * @member {commonmodule.IStatusSPS|null|undefined} Ind
         * @memberof commonmodule.BooleanStatusGGIO
         * @instance
         */
        BooleanStatusGGIO.prototype.Ind = null;

        /**
         * BooleanStatusGGIO Phase.
         * @member {commonmodule.IOptional_PhaseCodeKind|null|undefined} Phase
         * @memberof commonmodule.BooleanStatusGGIO
         * @instance
         */
        BooleanStatusGGIO.prototype.Phase = null;

        /**
         * Creates a new BooleanStatusGGIO instance using the specified properties.
         * @function create
         * @memberof commonmodule.BooleanStatusGGIO
         * @static
         * @param {commonmodule.IBooleanStatusGGIO=} [properties] Properties to set
         * @returns {commonmodule.BooleanStatusGGIO} BooleanStatusGGIO instance
         */
        BooleanStatusGGIO.create = function create(properties) {
            return new BooleanStatusGGIO(properties);
        };

        /**
         * Encodes the specified BooleanStatusGGIO message. Does not implicitly {@link commonmodule.BooleanStatusGGIO.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.BooleanStatusGGIO
         * @static
         * @param {commonmodule.IBooleanStatusGGIO} message BooleanStatusGGIO message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BooleanStatusGGIO.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNode != null && Object.hasOwnProperty.call(message, "logicalNode"))
                $root.commonmodule.LogicalNode.encode(message.logicalNode, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.Ind != null && Object.hasOwnProperty.call(message, "Ind"))
                $root.commonmodule.StatusSPS.encode(message.Ind, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.Phase != null && Object.hasOwnProperty.call(message, "Phase"))
                $root.commonmodule.Optional_PhaseCodeKind.encode(message.Phase, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BooleanStatusGGIO message, length delimited. Does not implicitly {@link commonmodule.BooleanStatusGGIO.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.BooleanStatusGGIO
         * @static
         * @param {commonmodule.IBooleanStatusGGIO} message BooleanStatusGGIO message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BooleanStatusGGIO.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BooleanStatusGGIO message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.BooleanStatusGGIO
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.BooleanStatusGGIO} BooleanStatusGGIO
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BooleanStatusGGIO.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.BooleanStatusGGIO();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNode = $root.commonmodule.LogicalNode.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.Ind = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.Phase = $root.commonmodule.Optional_PhaseCodeKind.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BooleanStatusGGIO message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.BooleanStatusGGIO
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.BooleanStatusGGIO} BooleanStatusGGIO
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BooleanStatusGGIO.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BooleanStatusGGIO message.
         * @function verify
         * @memberof commonmodule.BooleanStatusGGIO
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BooleanStatusGGIO.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode")) {
                var error = $root.commonmodule.LogicalNode.verify(message.logicalNode);
                if (error)
                    return "logicalNode." + error;
            }
            if (message.Ind != null && message.hasOwnProperty("Ind")) {
                var error = $root.commonmodule.StatusSPS.verify(message.Ind);
                if (error)
                    return "Ind." + error;
            }
            if (message.Phase != null && message.hasOwnProperty("Phase")) {
                var error = $root.commonmodule.Optional_PhaseCodeKind.verify(message.Phase);
                if (error)
                    return "Phase." + error;
            }
            return null;
        };

        /**
         * Creates a BooleanStatusGGIO message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.BooleanStatusGGIO
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.BooleanStatusGGIO} BooleanStatusGGIO
         */
        BooleanStatusGGIO.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.BooleanStatusGGIO)
                return object;
            var message = new $root.commonmodule.BooleanStatusGGIO();
            if (object.logicalNode != null) {
                if (typeof object.logicalNode !== "object")
                    throw TypeError(".commonmodule.BooleanStatusGGIO.logicalNode: object expected");
                message.logicalNode = $root.commonmodule.LogicalNode.fromObject(object.logicalNode);
            }
            if (object.Ind != null) {
                if (typeof object.Ind !== "object")
                    throw TypeError(".commonmodule.BooleanStatusGGIO.Ind: object expected");
                message.Ind = $root.commonmodule.StatusSPS.fromObject(object.Ind);
            }
            if (object.Phase != null) {
                if (typeof object.Phase !== "object")
                    throw TypeError(".commonmodule.BooleanStatusGGIO.Phase: object expected");
                message.Phase = $root.commonmodule.Optional_PhaseCodeKind.fromObject(object.Phase);
            }
            return message;
        };

        /**
         * Creates a plain object from a BooleanStatusGGIO message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.BooleanStatusGGIO
         * @static
         * @param {commonmodule.BooleanStatusGGIO} message BooleanStatusGGIO
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BooleanStatusGGIO.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNode = null;
                object.Ind = null;
                object.Phase = null;
            }
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode"))
                object.logicalNode = $root.commonmodule.LogicalNode.toObject(message.logicalNode, options);
            if (message.Ind != null && message.hasOwnProperty("Ind"))
                object.Ind = $root.commonmodule.StatusSPS.toObject(message.Ind, options);
            if (message.Phase != null && message.hasOwnProperty("Phase"))
                object.Phase = $root.commonmodule.Optional_PhaseCodeKind.toObject(message.Phase, options);
            return object;
        };

        /**
         * Converts this BooleanStatusGGIO to JSON.
         * @function toJSON
         * @memberof commonmodule.BooleanStatusGGIO
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BooleanStatusGGIO.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BooleanStatusGGIO;
    })();

    commonmodule.CheckConditions = (function() {

        /**
         * Properties of a CheckConditions.
         * @memberof commonmodule
         * @interface ICheckConditions
         * @property {google.protobuf.IBoolValue|null} [interlockCheck] CheckConditions interlockCheck
         * @property {google.protobuf.IBoolValue|null} [synchroCheck] CheckConditions synchroCheck
         */

        /**
         * Constructs a new CheckConditions.
         * @memberof commonmodule
         * @classdesc Represents a CheckConditions.
         * @implements ICheckConditions
         * @constructor
         * @param {commonmodule.ICheckConditions=} [properties] Properties to set
         */
        function CheckConditions(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CheckConditions interlockCheck.
         * @member {google.protobuf.IBoolValue|null|undefined} interlockCheck
         * @memberof commonmodule.CheckConditions
         * @instance
         */
        CheckConditions.prototype.interlockCheck = null;

        /**
         * CheckConditions synchroCheck.
         * @member {google.protobuf.IBoolValue|null|undefined} synchroCheck
         * @memberof commonmodule.CheckConditions
         * @instance
         */
        CheckConditions.prototype.synchroCheck = null;

        /**
         * Creates a new CheckConditions instance using the specified properties.
         * @function create
         * @memberof commonmodule.CheckConditions
         * @static
         * @param {commonmodule.ICheckConditions=} [properties] Properties to set
         * @returns {commonmodule.CheckConditions} CheckConditions instance
         */
        CheckConditions.create = function create(properties) {
            return new CheckConditions(properties);
        };

        /**
         * Encodes the specified CheckConditions message. Does not implicitly {@link commonmodule.CheckConditions.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.CheckConditions
         * @static
         * @param {commonmodule.ICheckConditions} message CheckConditions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CheckConditions.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.interlockCheck != null && Object.hasOwnProperty.call(message, "interlockCheck"))
                $root.google.protobuf.BoolValue.encode(message.interlockCheck, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.synchroCheck != null && Object.hasOwnProperty.call(message, "synchroCheck"))
                $root.google.protobuf.BoolValue.encode(message.synchroCheck, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CheckConditions message, length delimited. Does not implicitly {@link commonmodule.CheckConditions.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.CheckConditions
         * @static
         * @param {commonmodule.ICheckConditions} message CheckConditions message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CheckConditions.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CheckConditions message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.CheckConditions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.CheckConditions} CheckConditions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CheckConditions.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.CheckConditions();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.interlockCheck = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.synchroCheck = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CheckConditions message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.CheckConditions
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.CheckConditions} CheckConditions
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CheckConditions.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CheckConditions message.
         * @function verify
         * @memberof commonmodule.CheckConditions
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CheckConditions.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.interlockCheck != null && message.hasOwnProperty("interlockCheck")) {
                var error = $root.google.protobuf.BoolValue.verify(message.interlockCheck);
                if (error)
                    return "interlockCheck." + error;
            }
            if (message.synchroCheck != null && message.hasOwnProperty("synchroCheck")) {
                var error = $root.google.protobuf.BoolValue.verify(message.synchroCheck);
                if (error)
                    return "synchroCheck." + error;
            }
            return null;
        };

        /**
         * Creates a CheckConditions message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.CheckConditions
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.CheckConditions} CheckConditions
         */
        CheckConditions.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.CheckConditions)
                return object;
            var message = new $root.commonmodule.CheckConditions();
            if (object.interlockCheck != null) {
                if (typeof object.interlockCheck !== "object")
                    throw TypeError(".commonmodule.CheckConditions.interlockCheck: object expected");
                message.interlockCheck = $root.google.protobuf.BoolValue.fromObject(object.interlockCheck);
            }
            if (object.synchroCheck != null) {
                if (typeof object.synchroCheck !== "object")
                    throw TypeError(".commonmodule.CheckConditions.synchroCheck: object expected");
                message.synchroCheck = $root.google.protobuf.BoolValue.fromObject(object.synchroCheck);
            }
            return message;
        };

        /**
         * Creates a plain object from a CheckConditions message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.CheckConditions
         * @static
         * @param {commonmodule.CheckConditions} message CheckConditions
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CheckConditions.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.interlockCheck = null;
                object.synchroCheck = null;
            }
            if (message.interlockCheck != null && message.hasOwnProperty("interlockCheck"))
                object.interlockCheck = $root.google.protobuf.BoolValue.toObject(message.interlockCheck, options);
            if (message.synchroCheck != null && message.hasOwnProperty("synchroCheck"))
                object.synchroCheck = $root.google.protobuf.BoolValue.toObject(message.synchroCheck, options);
            return object;
        };

        /**
         * Converts this CheckConditions to JSON.
         * @function toJSON
         * @memberof commonmodule.CheckConditions
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CheckConditions.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CheckConditions;
    })();

    commonmodule.Vector = (function() {

        /**
         * Properties of a Vector.
         * @memberof commonmodule
         * @interface IVector
         * @property {commonmodule.IAnalogueValue|null} [ang] Vector ang
         * @property {commonmodule.IAnalogueValue|null} [mag] Vector mag
         */

        /**
         * Constructs a new Vector.
         * @memberof commonmodule
         * @classdesc Represents a Vector.
         * @implements IVector
         * @constructor
         * @param {commonmodule.IVector=} [properties] Properties to set
         */
        function Vector(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Vector ang.
         * @member {commonmodule.IAnalogueValue|null|undefined} ang
         * @memberof commonmodule.Vector
         * @instance
         */
        Vector.prototype.ang = null;

        /**
         * Vector mag.
         * @member {commonmodule.IAnalogueValue|null|undefined} mag
         * @memberof commonmodule.Vector
         * @instance
         */
        Vector.prototype.mag = null;

        /**
         * Creates a new Vector instance using the specified properties.
         * @function create
         * @memberof commonmodule.Vector
         * @static
         * @param {commonmodule.IVector=} [properties] Properties to set
         * @returns {commonmodule.Vector} Vector instance
         */
        Vector.create = function create(properties) {
            return new Vector(properties);
        };

        /**
         * Encodes the specified Vector message. Does not implicitly {@link commonmodule.Vector.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Vector
         * @static
         * @param {commonmodule.IVector} message Vector message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Vector.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ang != null && Object.hasOwnProperty.call(message, "ang"))
                $root.commonmodule.AnalogueValue.encode(message.ang, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.mag != null && Object.hasOwnProperty.call(message, "mag"))
                $root.commonmodule.AnalogueValue.encode(message.mag, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Vector message, length delimited. Does not implicitly {@link commonmodule.Vector.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Vector
         * @static
         * @param {commonmodule.IVector} message Vector message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Vector.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Vector message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Vector
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Vector} Vector
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Vector.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Vector();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ang = $root.commonmodule.AnalogueValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.mag = $root.commonmodule.AnalogueValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Vector message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Vector
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Vector} Vector
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Vector.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Vector message.
         * @function verify
         * @memberof commonmodule.Vector
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Vector.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ang != null && message.hasOwnProperty("ang")) {
                var error = $root.commonmodule.AnalogueValue.verify(message.ang);
                if (error)
                    return "ang." + error;
            }
            if (message.mag != null && message.hasOwnProperty("mag")) {
                var error = $root.commonmodule.AnalogueValue.verify(message.mag);
                if (error)
                    return "mag." + error;
            }
            return null;
        };

        /**
         * Creates a Vector message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Vector
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Vector} Vector
         */
        Vector.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Vector)
                return object;
            var message = new $root.commonmodule.Vector();
            if (object.ang != null) {
                if (typeof object.ang !== "object")
                    throw TypeError(".commonmodule.Vector.ang: object expected");
                message.ang = $root.commonmodule.AnalogueValue.fromObject(object.ang);
            }
            if (object.mag != null) {
                if (typeof object.mag !== "object")
                    throw TypeError(".commonmodule.Vector.mag: object expected");
                message.mag = $root.commonmodule.AnalogueValue.fromObject(object.mag);
            }
            return message;
        };

        /**
         * Creates a plain object from a Vector message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Vector
         * @static
         * @param {commonmodule.Vector} message Vector
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Vector.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.ang = null;
                object.mag = null;
            }
            if (message.ang != null && message.hasOwnProperty("ang"))
                object.ang = $root.commonmodule.AnalogueValue.toObject(message.ang, options);
            if (message.mag != null && message.hasOwnProperty("mag"))
                object.mag = $root.commonmodule.AnalogueValue.toObject(message.mag, options);
            return object;
        };

        /**
         * Converts this Vector to JSON.
         * @function toJSON
         * @memberof commonmodule.Vector
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Vector.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Vector;
    })();

    commonmodule.CMV = (function() {

        /**
         * Properties of a CMV.
         * @memberof commonmodule
         * @interface ICMV
         * @property {commonmodule.IVector|null} [cVal] CMV cVal
         * @property {commonmodule.IQuality|null} [q] CMV q
         * @property {commonmodule.ITimestamp|null} [t] CMV t
         * @property {commonmodule.IUnit|null} [units] CMV units
         */

        /**
         * Constructs a new CMV.
         * @memberof commonmodule
         * @classdesc Represents a CMV.
         * @implements ICMV
         * @constructor
         * @param {commonmodule.ICMV=} [properties] Properties to set
         */
        function CMV(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CMV cVal.
         * @member {commonmodule.IVector|null|undefined} cVal
         * @memberof commonmodule.CMV
         * @instance
         */
        CMV.prototype.cVal = null;

        /**
         * CMV q.
         * @member {commonmodule.IQuality|null|undefined} q
         * @memberof commonmodule.CMV
         * @instance
         */
        CMV.prototype.q = null;

        /**
         * CMV t.
         * @member {commonmodule.ITimestamp|null|undefined} t
         * @memberof commonmodule.CMV
         * @instance
         */
        CMV.prototype.t = null;

        /**
         * CMV units.
         * @member {commonmodule.IUnit|null|undefined} units
         * @memberof commonmodule.CMV
         * @instance
         */
        CMV.prototype.units = null;

        /**
         * Creates a new CMV instance using the specified properties.
         * @function create
         * @memberof commonmodule.CMV
         * @static
         * @param {commonmodule.ICMV=} [properties] Properties to set
         * @returns {commonmodule.CMV} CMV instance
         */
        CMV.create = function create(properties) {
            return new CMV(properties);
        };

        /**
         * Encodes the specified CMV message. Does not implicitly {@link commonmodule.CMV.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.CMV
         * @static
         * @param {commonmodule.ICMV} message CMV message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMV.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.cVal != null && Object.hasOwnProperty.call(message, "cVal"))
                $root.commonmodule.Vector.encode(message.cVal, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.q != null && Object.hasOwnProperty.call(message, "q"))
                $root.commonmodule.Quality.encode(message.q, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.t != null && Object.hasOwnProperty.call(message, "t"))
                $root.commonmodule.Timestamp.encode(message.t, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.units != null && Object.hasOwnProperty.call(message, "units"))
                $root.commonmodule.Unit.encode(message.units, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CMV message, length delimited. Does not implicitly {@link commonmodule.CMV.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.CMV
         * @static
         * @param {commonmodule.ICMV} message CMV message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CMV.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CMV message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.CMV
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.CMV} CMV
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMV.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.CMV();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.cVal = $root.commonmodule.Vector.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.q = $root.commonmodule.Quality.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.t = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.units = $root.commonmodule.Unit.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CMV message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.CMV
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.CMV} CMV
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CMV.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CMV message.
         * @function verify
         * @memberof commonmodule.CMV
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CMV.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.cVal != null && message.hasOwnProperty("cVal")) {
                var error = $root.commonmodule.Vector.verify(message.cVal);
                if (error)
                    return "cVal." + error;
            }
            if (message.q != null && message.hasOwnProperty("q")) {
                var error = $root.commonmodule.Quality.verify(message.q);
                if (error)
                    return "q." + error;
            }
            if (message.t != null && message.hasOwnProperty("t")) {
                var error = $root.commonmodule.Timestamp.verify(message.t);
                if (error)
                    return "t." + error;
            }
            if (message.units != null && message.hasOwnProperty("units")) {
                var error = $root.commonmodule.Unit.verify(message.units);
                if (error)
                    return "units." + error;
            }
            return null;
        };

        /**
         * Creates a CMV message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.CMV
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.CMV} CMV
         */
        CMV.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.CMV)
                return object;
            var message = new $root.commonmodule.CMV();
            if (object.cVal != null) {
                if (typeof object.cVal !== "object")
                    throw TypeError(".commonmodule.CMV.cVal: object expected");
                message.cVal = $root.commonmodule.Vector.fromObject(object.cVal);
            }
            if (object.q != null) {
                if (typeof object.q !== "object")
                    throw TypeError(".commonmodule.CMV.q: object expected");
                message.q = $root.commonmodule.Quality.fromObject(object.q);
            }
            if (object.t != null) {
                if (typeof object.t !== "object")
                    throw TypeError(".commonmodule.CMV.t: object expected");
                message.t = $root.commonmodule.Timestamp.fromObject(object.t);
            }
            if (object.units != null) {
                if (typeof object.units !== "object")
                    throw TypeError(".commonmodule.CMV.units: object expected");
                message.units = $root.commonmodule.Unit.fromObject(object.units);
            }
            return message;
        };

        /**
         * Creates a plain object from a CMV message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.CMV
         * @static
         * @param {commonmodule.CMV} message CMV
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CMV.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.cVal = null;
                object.q = null;
                object.t = null;
                object.units = null;
            }
            if (message.cVal != null && message.hasOwnProperty("cVal"))
                object.cVal = $root.commonmodule.Vector.toObject(message.cVal, options);
            if (message.q != null && message.hasOwnProperty("q"))
                object.q = $root.commonmodule.Quality.toObject(message.q, options);
            if (message.t != null && message.hasOwnProperty("t"))
                object.t = $root.commonmodule.Timestamp.toObject(message.t, options);
            if (message.units != null && message.hasOwnProperty("units"))
                object.units = $root.commonmodule.Unit.toObject(message.units, options);
            return object;
        };

        /**
         * Converts this CMV to JSON.
         * @function toJSON
         * @memberof commonmodule.CMV
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CMV.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CMV;
    })();

    commonmodule.ConductingEquipment = (function() {

        /**
         * Properties of a ConductingEquipment.
         * @memberof commonmodule
         * @interface IConductingEquipment
         * @property {commonmodule.INamedObject|null} [namedObject] ConductingEquipment namedObject
         * @property {string|null} [mRID] ConductingEquipment mRID
         */

        /**
         * Constructs a new ConductingEquipment.
         * @memberof commonmodule
         * @classdesc Represents a ConductingEquipment.
         * @implements IConductingEquipment
         * @constructor
         * @param {commonmodule.IConductingEquipment=} [properties] Properties to set
         */
        function ConductingEquipment(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ConductingEquipment namedObject.
         * @member {commonmodule.INamedObject|null|undefined} namedObject
         * @memberof commonmodule.ConductingEquipment
         * @instance
         */
        ConductingEquipment.prototype.namedObject = null;

        /**
         * ConductingEquipment mRID.
         * @member {string} mRID
         * @memberof commonmodule.ConductingEquipment
         * @instance
         */
        ConductingEquipment.prototype.mRID = "";

        /**
         * Creates a new ConductingEquipment instance using the specified properties.
         * @function create
         * @memberof commonmodule.ConductingEquipment
         * @static
         * @param {commonmodule.IConductingEquipment=} [properties] Properties to set
         * @returns {commonmodule.ConductingEquipment} ConductingEquipment instance
         */
        ConductingEquipment.create = function create(properties) {
            return new ConductingEquipment(properties);
        };

        /**
         * Encodes the specified ConductingEquipment message. Does not implicitly {@link commonmodule.ConductingEquipment.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ConductingEquipment
         * @static
         * @param {commonmodule.IConductingEquipment} message ConductingEquipment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ConductingEquipment.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.namedObject != null && Object.hasOwnProperty.call(message, "namedObject"))
                $root.commonmodule.NamedObject.encode(message.namedObject, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.mRID != null && Object.hasOwnProperty.call(message, "mRID"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.mRID);
            return writer;
        };

        /**
         * Encodes the specified ConductingEquipment message, length delimited. Does not implicitly {@link commonmodule.ConductingEquipment.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ConductingEquipment
         * @static
         * @param {commonmodule.IConductingEquipment} message ConductingEquipment message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ConductingEquipment.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ConductingEquipment message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ConductingEquipment
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ConductingEquipment} ConductingEquipment
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ConductingEquipment.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ConductingEquipment();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.namedObject = $root.commonmodule.NamedObject.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.mRID = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ConductingEquipment message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ConductingEquipment
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ConductingEquipment} ConductingEquipment
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ConductingEquipment.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ConductingEquipment message.
         * @function verify
         * @memberof commonmodule.ConductingEquipment
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ConductingEquipment.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.namedObject != null && message.hasOwnProperty("namedObject")) {
                var error = $root.commonmodule.NamedObject.verify(message.namedObject);
                if (error)
                    return "namedObject." + error;
            }
            if (message.mRID != null && message.hasOwnProperty("mRID"))
                if (!$util.isString(message.mRID))
                    return "mRID: string expected";
            return null;
        };

        /**
         * Creates a ConductingEquipment message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ConductingEquipment
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ConductingEquipment} ConductingEquipment
         */
        ConductingEquipment.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ConductingEquipment)
                return object;
            var message = new $root.commonmodule.ConductingEquipment();
            if (object.namedObject != null) {
                if (typeof object.namedObject !== "object")
                    throw TypeError(".commonmodule.ConductingEquipment.namedObject: object expected");
                message.namedObject = $root.commonmodule.NamedObject.fromObject(object.namedObject);
            }
            if (object.mRID != null)
                message.mRID = String(object.mRID);
            return message;
        };

        /**
         * Creates a plain object from a ConductingEquipment message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ConductingEquipment
         * @static
         * @param {commonmodule.ConductingEquipment} message ConductingEquipment
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ConductingEquipment.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.namedObject = null;
                object.mRID = "";
            }
            if (message.namedObject != null && message.hasOwnProperty("namedObject"))
                object.namedObject = $root.commonmodule.NamedObject.toObject(message.namedObject, options);
            if (message.mRID != null && message.hasOwnProperty("mRID"))
                object.mRID = message.mRID;
            return object;
        };

        /**
         * Converts this ConductingEquipment to JSON.
         * @function toJSON
         * @memberof commonmodule.ConductingEquipment
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ConductingEquipment.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ConductingEquipment;
    })();

    commonmodule.Terminal = (function() {

        /**
         * Properties of a Terminal.
         * @memberof commonmodule
         * @interface ITerminal
         * @property {commonmodule.IACDCTerminal|null} [aCDCTerminal] Terminal aCDCTerminal
         * @property {commonmodule.IOptional_PhaseCodeKind|null} [phases] Terminal phases
         */

        /**
         * Constructs a new Terminal.
         * @memberof commonmodule
         * @classdesc Represents a Terminal.
         * @implements ITerminal
         * @constructor
         * @param {commonmodule.ITerminal=} [properties] Properties to set
         */
        function Terminal(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Terminal aCDCTerminal.
         * @member {commonmodule.IACDCTerminal|null|undefined} aCDCTerminal
         * @memberof commonmodule.Terminal
         * @instance
         */
        Terminal.prototype.aCDCTerminal = null;

        /**
         * Terminal phases.
         * @member {commonmodule.IOptional_PhaseCodeKind|null|undefined} phases
         * @memberof commonmodule.Terminal
         * @instance
         */
        Terminal.prototype.phases = null;

        /**
         * Creates a new Terminal instance using the specified properties.
         * @function create
         * @memberof commonmodule.Terminal
         * @static
         * @param {commonmodule.ITerminal=} [properties] Properties to set
         * @returns {commonmodule.Terminal} Terminal instance
         */
        Terminal.create = function create(properties) {
            return new Terminal(properties);
        };

        /**
         * Encodes the specified Terminal message. Does not implicitly {@link commonmodule.Terminal.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Terminal
         * @static
         * @param {commonmodule.ITerminal} message Terminal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Terminal.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.aCDCTerminal != null && Object.hasOwnProperty.call(message, "aCDCTerminal"))
                $root.commonmodule.ACDCTerminal.encode(message.aCDCTerminal, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.phases != null && Object.hasOwnProperty.call(message, "phases"))
                $root.commonmodule.Optional_PhaseCodeKind.encode(message.phases, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Terminal message, length delimited. Does not implicitly {@link commonmodule.Terminal.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Terminal
         * @static
         * @param {commonmodule.ITerminal} message Terminal message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Terminal.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Terminal message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Terminal
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Terminal} Terminal
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Terminal.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Terminal();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.aCDCTerminal = $root.commonmodule.ACDCTerminal.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.phases = $root.commonmodule.Optional_PhaseCodeKind.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Terminal message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Terminal
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Terminal} Terminal
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Terminal.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Terminal message.
         * @function verify
         * @memberof commonmodule.Terminal
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Terminal.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.aCDCTerminal != null && message.hasOwnProperty("aCDCTerminal")) {
                var error = $root.commonmodule.ACDCTerminal.verify(message.aCDCTerminal);
                if (error)
                    return "aCDCTerminal." + error;
            }
            if (message.phases != null && message.hasOwnProperty("phases")) {
                var error = $root.commonmodule.Optional_PhaseCodeKind.verify(message.phases);
                if (error)
                    return "phases." + error;
            }
            return null;
        };

        /**
         * Creates a Terminal message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Terminal
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Terminal} Terminal
         */
        Terminal.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Terminal)
                return object;
            var message = new $root.commonmodule.Terminal();
            if (object.aCDCTerminal != null) {
                if (typeof object.aCDCTerminal !== "object")
                    throw TypeError(".commonmodule.Terminal.aCDCTerminal: object expected");
                message.aCDCTerminal = $root.commonmodule.ACDCTerminal.fromObject(object.aCDCTerminal);
            }
            if (object.phases != null) {
                if (typeof object.phases !== "object")
                    throw TypeError(".commonmodule.Terminal.phases: object expected");
                message.phases = $root.commonmodule.Optional_PhaseCodeKind.fromObject(object.phases);
            }
            return message;
        };

        /**
         * Creates a plain object from a Terminal message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Terminal
         * @static
         * @param {commonmodule.Terminal} message Terminal
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Terminal.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.aCDCTerminal = null;
                object.phases = null;
            }
            if (message.aCDCTerminal != null && message.hasOwnProperty("aCDCTerminal"))
                object.aCDCTerminal = $root.commonmodule.ACDCTerminal.toObject(message.aCDCTerminal, options);
            if (message.phases != null && message.hasOwnProperty("phases"))
                object.phases = $root.commonmodule.Optional_PhaseCodeKind.toObject(message.phases, options);
            return object;
        };

        /**
         * Converts this Terminal to JSON.
         * @function toJSON
         * @memberof commonmodule.Terminal
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Terminal.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Terminal;
    })();

    commonmodule.ConductingEquipmentTerminalReading = (function() {

        /**
         * Properties of a ConductingEquipmentTerminalReading.
         * @memberof commonmodule
         * @interface IConductingEquipmentTerminalReading
         * @property {commonmodule.ITerminal|null} [terminal] ConductingEquipmentTerminalReading terminal
         */

        /**
         * Constructs a new ConductingEquipmentTerminalReading.
         * @memberof commonmodule
         * @classdesc Represents a ConductingEquipmentTerminalReading.
         * @implements IConductingEquipmentTerminalReading
         * @constructor
         * @param {commonmodule.IConductingEquipmentTerminalReading=} [properties] Properties to set
         */
        function ConductingEquipmentTerminalReading(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ConductingEquipmentTerminalReading terminal.
         * @member {commonmodule.ITerminal|null|undefined} terminal
         * @memberof commonmodule.ConductingEquipmentTerminalReading
         * @instance
         */
        ConductingEquipmentTerminalReading.prototype.terminal = null;

        /**
         * Creates a new ConductingEquipmentTerminalReading instance using the specified properties.
         * @function create
         * @memberof commonmodule.ConductingEquipmentTerminalReading
         * @static
         * @param {commonmodule.IConductingEquipmentTerminalReading=} [properties] Properties to set
         * @returns {commonmodule.ConductingEquipmentTerminalReading} ConductingEquipmentTerminalReading instance
         */
        ConductingEquipmentTerminalReading.create = function create(properties) {
            return new ConductingEquipmentTerminalReading(properties);
        };

        /**
         * Encodes the specified ConductingEquipmentTerminalReading message. Does not implicitly {@link commonmodule.ConductingEquipmentTerminalReading.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ConductingEquipmentTerminalReading
         * @static
         * @param {commonmodule.IConductingEquipmentTerminalReading} message ConductingEquipmentTerminalReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ConductingEquipmentTerminalReading.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.terminal != null && Object.hasOwnProperty.call(message, "terminal"))
                $root.commonmodule.Terminal.encode(message.terminal, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ConductingEquipmentTerminalReading message, length delimited. Does not implicitly {@link commonmodule.ConductingEquipmentTerminalReading.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ConductingEquipmentTerminalReading
         * @static
         * @param {commonmodule.IConductingEquipmentTerminalReading} message ConductingEquipmentTerminalReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ConductingEquipmentTerminalReading.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ConductingEquipmentTerminalReading message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ConductingEquipmentTerminalReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ConductingEquipmentTerminalReading} ConductingEquipmentTerminalReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ConductingEquipmentTerminalReading.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ConductingEquipmentTerminalReading();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.terminal = $root.commonmodule.Terminal.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ConductingEquipmentTerminalReading message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ConductingEquipmentTerminalReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ConductingEquipmentTerminalReading} ConductingEquipmentTerminalReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ConductingEquipmentTerminalReading.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ConductingEquipmentTerminalReading message.
         * @function verify
         * @memberof commonmodule.ConductingEquipmentTerminalReading
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ConductingEquipmentTerminalReading.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.terminal != null && message.hasOwnProperty("terminal")) {
                var error = $root.commonmodule.Terminal.verify(message.terminal);
                if (error)
                    return "terminal." + error;
            }
            return null;
        };

        /**
         * Creates a ConductingEquipmentTerminalReading message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ConductingEquipmentTerminalReading
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ConductingEquipmentTerminalReading} ConductingEquipmentTerminalReading
         */
        ConductingEquipmentTerminalReading.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ConductingEquipmentTerminalReading)
                return object;
            var message = new $root.commonmodule.ConductingEquipmentTerminalReading();
            if (object.terminal != null) {
                if (typeof object.terminal !== "object")
                    throw TypeError(".commonmodule.ConductingEquipmentTerminalReading.terminal: object expected");
                message.terminal = $root.commonmodule.Terminal.fromObject(object.terminal);
            }
            return message;
        };

        /**
         * Creates a plain object from a ConductingEquipmentTerminalReading message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ConductingEquipmentTerminalReading
         * @static
         * @param {commonmodule.ConductingEquipmentTerminalReading} message ConductingEquipmentTerminalReading
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ConductingEquipmentTerminalReading.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.terminal = null;
            if (message.terminal != null && message.hasOwnProperty("terminal"))
                object.terminal = $root.commonmodule.Terminal.toObject(message.terminal, options);
            return object;
        };

        /**
         * Converts this ConductingEquipmentTerminalReading to JSON.
         * @function toJSON
         * @memberof commonmodule.ConductingEquipmentTerminalReading
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ConductingEquipmentTerminalReading.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ConductingEquipmentTerminalReading;
    })();

    commonmodule.ControlDPC = (function() {

        /**
         * Properties of a ControlDPC.
         * @memberof commonmodule
         * @interface IControlDPC
         * @property {boolean|null} [ctlVal] ControlDPC ctlVal
         */

        /**
         * Constructs a new ControlDPC.
         * @memberof commonmodule
         * @classdesc Represents a ControlDPC.
         * @implements IControlDPC
         * @constructor
         * @param {commonmodule.IControlDPC=} [properties] Properties to set
         */
        function ControlDPC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ControlDPC ctlVal.
         * @member {boolean} ctlVal
         * @memberof commonmodule.ControlDPC
         * @instance
         */
        ControlDPC.prototype.ctlVal = false;

        /**
         * Creates a new ControlDPC instance using the specified properties.
         * @function create
         * @memberof commonmodule.ControlDPC
         * @static
         * @param {commonmodule.IControlDPC=} [properties] Properties to set
         * @returns {commonmodule.ControlDPC} ControlDPC instance
         */
        ControlDPC.create = function create(properties) {
            return new ControlDPC(properties);
        };

        /**
         * Encodes the specified ControlDPC message. Does not implicitly {@link commonmodule.ControlDPC.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ControlDPC
         * @static
         * @param {commonmodule.IControlDPC} message ControlDPC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlDPC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ctlVal != null && Object.hasOwnProperty.call(message, "ctlVal"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.ctlVal);
            return writer;
        };

        /**
         * Encodes the specified ControlDPC message, length delimited. Does not implicitly {@link commonmodule.ControlDPC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ControlDPC
         * @static
         * @param {commonmodule.IControlDPC} message ControlDPC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlDPC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ControlDPC message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ControlDPC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ControlDPC} ControlDPC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlDPC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ControlDPC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ctlVal = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ControlDPC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ControlDPC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ControlDPC} ControlDPC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlDPC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ControlDPC message.
         * @function verify
         * @memberof commonmodule.ControlDPC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ControlDPC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ctlVal != null && message.hasOwnProperty("ctlVal"))
                if (typeof message.ctlVal !== "boolean")
                    return "ctlVal: boolean expected";
            return null;
        };

        /**
         * Creates a ControlDPC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ControlDPC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ControlDPC} ControlDPC
         */
        ControlDPC.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ControlDPC)
                return object;
            var message = new $root.commonmodule.ControlDPC();
            if (object.ctlVal != null)
                message.ctlVal = Boolean(object.ctlVal);
            return message;
        };

        /**
         * Creates a plain object from a ControlDPC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ControlDPC
         * @static
         * @param {commonmodule.ControlDPC} message ControlDPC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ControlDPC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ctlVal = false;
            if (message.ctlVal != null && message.hasOwnProperty("ctlVal"))
                object.ctlVal = message.ctlVal;
            return object;
        };

        /**
         * Converts this ControlDPC to JSON.
         * @function toJSON
         * @memberof commonmodule.ControlDPC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ControlDPC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ControlDPC;
    })();

    commonmodule.ControlTimestamp = (function() {

        /**
         * Properties of a ControlTimestamp.
         * @memberof commonmodule
         * @interface IControlTimestamp
         * @property {number|null} [fraction] ControlTimestamp fraction
         * @property {number|Long|null} [seconds] ControlTimestamp seconds
         */

        /**
         * Constructs a new ControlTimestamp.
         * @memberof commonmodule
         * @classdesc Represents a ControlTimestamp.
         * @implements IControlTimestamp
         * @constructor
         * @param {commonmodule.IControlTimestamp=} [properties] Properties to set
         */
        function ControlTimestamp(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ControlTimestamp fraction.
         * @member {number} fraction
         * @memberof commonmodule.ControlTimestamp
         * @instance
         */
        ControlTimestamp.prototype.fraction = 0;

        /**
         * ControlTimestamp seconds.
         * @member {number|Long} seconds
         * @memberof commonmodule.ControlTimestamp
         * @instance
         */
        ControlTimestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

        /**
         * Creates a new ControlTimestamp instance using the specified properties.
         * @function create
         * @memberof commonmodule.ControlTimestamp
         * @static
         * @param {commonmodule.IControlTimestamp=} [properties] Properties to set
         * @returns {commonmodule.ControlTimestamp} ControlTimestamp instance
         */
        ControlTimestamp.create = function create(properties) {
            return new ControlTimestamp(properties);
        };

        /**
         * Encodes the specified ControlTimestamp message. Does not implicitly {@link commonmodule.ControlTimestamp.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ControlTimestamp
         * @static
         * @param {commonmodule.IControlTimestamp} message ControlTimestamp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlTimestamp.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.fraction != null && Object.hasOwnProperty.call(message, "fraction"))
                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.fraction);
            if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.seconds);
            return writer;
        };

        /**
         * Encodes the specified ControlTimestamp message, length delimited. Does not implicitly {@link commonmodule.ControlTimestamp.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ControlTimestamp
         * @static
         * @param {commonmodule.IControlTimestamp} message ControlTimestamp message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlTimestamp.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ControlTimestamp message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ControlTimestamp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ControlTimestamp} ControlTimestamp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlTimestamp.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ControlTimestamp();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.fraction = reader.uint32();
                    break;
                case 2:
                    message.seconds = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ControlTimestamp message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ControlTimestamp
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ControlTimestamp} ControlTimestamp
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlTimestamp.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ControlTimestamp message.
         * @function verify
         * @memberof commonmodule.ControlTimestamp
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ControlTimestamp.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.fraction != null && message.hasOwnProperty("fraction"))
                if (!$util.isInteger(message.fraction))
                    return "fraction: integer expected";
            if (message.seconds != null && message.hasOwnProperty("seconds"))
                if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                    return "seconds: integer|Long expected";
            return null;
        };

        /**
         * Creates a ControlTimestamp message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ControlTimestamp
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ControlTimestamp} ControlTimestamp
         */
        ControlTimestamp.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ControlTimestamp)
                return object;
            var message = new $root.commonmodule.ControlTimestamp();
            if (object.fraction != null)
                message.fraction = object.fraction >>> 0;
            if (object.seconds != null)
                if ($util.Long)
                    (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = true;
                else if (typeof object.seconds === "string")
                    message.seconds = parseInt(object.seconds, 10);
                else if (typeof object.seconds === "number")
                    message.seconds = object.seconds;
                else if (typeof object.seconds === "object")
                    message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber(true);
            return message;
        };

        /**
         * Creates a plain object from a ControlTimestamp message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ControlTimestamp
         * @static
         * @param {commonmodule.ControlTimestamp} message ControlTimestamp
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ControlTimestamp.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.fraction = 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, true);
                    object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.seconds = options.longs === String ? "0" : 0;
            }
            if (message.fraction != null && message.hasOwnProperty("fraction"))
                object.fraction = message.fraction;
            if (message.seconds != null && message.hasOwnProperty("seconds"))
                if (typeof message.seconds === "number")
                    object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                else
                    object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber(true) : message.seconds;
            return object;
        };

        /**
         * Converts this ControlTimestamp to JSON.
         * @function toJSON
         * @memberof commonmodule.ControlTimestamp
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ControlTimestamp.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ControlTimestamp;
    })();

    /**
     * ScheduleParameterKind enum.
     * @name commonmodule.ScheduleParameterKind
     * @enum {number}
     * @property {number} ScheduleParameterKind_none=0 ScheduleParameterKind_none value
     * @property {number} ScheduleParameterKind_other=1 ScheduleParameterKind_other value
     * @property {number} ScheduleParameterKind_A_net_mag=2 ScheduleParameterKind_A_net_mag value
     * @property {number} ScheduleParameterKind_A_neut_mag=3 ScheduleParameterKind_A_neut_mag value
     * @property {number} ScheduleParameterKind_A_phsA_mag=4 ScheduleParameterKind_A_phsA_mag value
     * @property {number} ScheduleParameterKind_A_phsB_mag=5 ScheduleParameterKind_A_phsB_mag value
     * @property {number} ScheduleParameterKind_A_phsC_mag=6 ScheduleParameterKind_A_phsC_mag value
     * @property {number} ScheduleParameterKind_Hz_mag=7 ScheduleParameterKind_Hz_mag value
     * @property {number} ScheduleParameterKind_PF_net_mag=8 ScheduleParameterKind_PF_net_mag value
     * @property {number} ScheduleParameterKind_PF_neut_mag=9 ScheduleParameterKind_PF_neut_mag value
     * @property {number} ScheduleParameterKind_PF_phsA_mag=10 ScheduleParameterKind_PF_phsA_mag value
     * @property {number} ScheduleParameterKind_PF_phsB_mag=11 ScheduleParameterKind_PF_phsB_mag value
     * @property {number} ScheduleParameterKind_PF_phsC_mag=12 ScheduleParameterKind_PF_phsC_mag value
     * @property {number} ScheduleParameterKind_PhV_net_ang=13 ScheduleParameterKind_PhV_net_ang value
     * @property {number} ScheduleParameterKind_PhV_net_mag=14 ScheduleParameterKind_PhV_net_mag value
     * @property {number} ScheduleParameterKind_PhV_neut_ang=15 ScheduleParameterKind_PhV_neut_ang value
     * @property {number} ScheduleParameterKind_PhV_neut_mag=16 ScheduleParameterKind_PhV_neut_mag value
     * @property {number} ScheduleParameterKind_PhV_phsA_ang=17 ScheduleParameterKind_PhV_phsA_ang value
     * @property {number} ScheduleParameterKind_PhV_phsA_mag=18 ScheduleParameterKind_PhV_phsA_mag value
     * @property {number} ScheduleParameterKind_PhV_phsB_ang=19 ScheduleParameterKind_PhV_phsB_ang value
     * @property {number} ScheduleParameterKind_PhV_phsB_mag=20 ScheduleParameterKind_PhV_phsB_mag value
     * @property {number} ScheduleParameterKind_PhV_phsC_ang=21 ScheduleParameterKind_PhV_phsC_ang value
     * @property {number} ScheduleParameterKind_PhV_phsC_mag=22 ScheduleParameterKind_PhV_phsC_mag value
     * @property {number} ScheduleParameterKind_PPV_phsAB_ang=23 ScheduleParameterKind_PPV_phsAB_ang value
     * @property {number} ScheduleParameterKind_PPV_phsAB_mag=24 ScheduleParameterKind_PPV_phsAB_mag value
     * @property {number} ScheduleParameterKind_PPV_phsBC_ang=25 ScheduleParameterKind_PPV_phsBC_ang value
     * @property {number} ScheduleParameterKind_PPV_phsBC_mag=26 ScheduleParameterKind_PPV_phsBC_mag value
     * @property {number} ScheduleParameterKind_PPV_phsCA_ang=27 ScheduleParameterKind_PPV_phsCA_ang value
     * @property {number} ScheduleParameterKind_PPV_phsCA_mag=28 ScheduleParameterKind_PPV_phsCA_mag value
     * @property {number} ScheduleParameterKind_VA_net_mag=29 ScheduleParameterKind_VA_net_mag value
     * @property {number} ScheduleParameterKind_VA_neut_mag=30 ScheduleParameterKind_VA_neut_mag value
     * @property {number} ScheduleParameterKind_VA_phsA_mag=31 ScheduleParameterKind_VA_phsA_mag value
     * @property {number} ScheduleParameterKind_VA_phsB_mag=32 ScheduleParameterKind_VA_phsB_mag value
     * @property {number} ScheduleParameterKind_VA_phsC_mag=33 ScheduleParameterKind_VA_phsC_mag value
     * @property {number} ScheduleParameterKind_VAr_net_mag=34 ScheduleParameterKind_VAr_net_mag value
     * @property {number} ScheduleParameterKind_VAr_neut_mag=35 ScheduleParameterKind_VAr_neut_mag value
     * @property {number} ScheduleParameterKind_VAr_phsA_mag=36 ScheduleParameterKind_VAr_phsA_mag value
     * @property {number} ScheduleParameterKind_VAr_phsB_mag=37 ScheduleParameterKind_VAr_phsB_mag value
     * @property {number} ScheduleParameterKind_VAr_phsC_mag=38 ScheduleParameterKind_VAr_phsC_mag value
     * @property {number} ScheduleParameterKind_W_net_mag=39 ScheduleParameterKind_W_net_mag value
     * @property {number} ScheduleParameterKind_W_neut_mag=40 ScheduleParameterKind_W_neut_mag value
     * @property {number} ScheduleParameterKind_W_phsA_mag=41 ScheduleParameterKind_W_phsA_mag value
     * @property {number} ScheduleParameterKind_W_phsB_mag=42 ScheduleParameterKind_W_phsB_mag value
     * @property {number} ScheduleParameterKind_W_phsC_mag=43 ScheduleParameterKind_W_phsC_mag value
     */
    commonmodule.ScheduleParameterKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "ScheduleParameterKind_none"] = 0;
        values[valuesById[1] = "ScheduleParameterKind_other"] = 1;
        values[valuesById[2] = "ScheduleParameterKind_A_net_mag"] = 2;
        values[valuesById[3] = "ScheduleParameterKind_A_neut_mag"] = 3;
        values[valuesById[4] = "ScheduleParameterKind_A_phsA_mag"] = 4;
        values[valuesById[5] = "ScheduleParameterKind_A_phsB_mag"] = 5;
        values[valuesById[6] = "ScheduleParameterKind_A_phsC_mag"] = 6;
        values[valuesById[7] = "ScheduleParameterKind_Hz_mag"] = 7;
        values[valuesById[8] = "ScheduleParameterKind_PF_net_mag"] = 8;
        values[valuesById[9] = "ScheduleParameterKind_PF_neut_mag"] = 9;
        values[valuesById[10] = "ScheduleParameterKind_PF_phsA_mag"] = 10;
        values[valuesById[11] = "ScheduleParameterKind_PF_phsB_mag"] = 11;
        values[valuesById[12] = "ScheduleParameterKind_PF_phsC_mag"] = 12;
        values[valuesById[13] = "ScheduleParameterKind_PhV_net_ang"] = 13;
        values[valuesById[14] = "ScheduleParameterKind_PhV_net_mag"] = 14;
        values[valuesById[15] = "ScheduleParameterKind_PhV_neut_ang"] = 15;
        values[valuesById[16] = "ScheduleParameterKind_PhV_neut_mag"] = 16;
        values[valuesById[17] = "ScheduleParameterKind_PhV_phsA_ang"] = 17;
        values[valuesById[18] = "ScheduleParameterKind_PhV_phsA_mag"] = 18;
        values[valuesById[19] = "ScheduleParameterKind_PhV_phsB_ang"] = 19;
        values[valuesById[20] = "ScheduleParameterKind_PhV_phsB_mag"] = 20;
        values[valuesById[21] = "ScheduleParameterKind_PhV_phsC_ang"] = 21;
        values[valuesById[22] = "ScheduleParameterKind_PhV_phsC_mag"] = 22;
        values[valuesById[23] = "ScheduleParameterKind_PPV_phsAB_ang"] = 23;
        values[valuesById[24] = "ScheduleParameterKind_PPV_phsAB_mag"] = 24;
        values[valuesById[25] = "ScheduleParameterKind_PPV_phsBC_ang"] = 25;
        values[valuesById[26] = "ScheduleParameterKind_PPV_phsBC_mag"] = 26;
        values[valuesById[27] = "ScheduleParameterKind_PPV_phsCA_ang"] = 27;
        values[valuesById[28] = "ScheduleParameterKind_PPV_phsCA_mag"] = 28;
        values[valuesById[29] = "ScheduleParameterKind_VA_net_mag"] = 29;
        values[valuesById[30] = "ScheduleParameterKind_VA_neut_mag"] = 30;
        values[valuesById[31] = "ScheduleParameterKind_VA_phsA_mag"] = 31;
        values[valuesById[32] = "ScheduleParameterKind_VA_phsB_mag"] = 32;
        values[valuesById[33] = "ScheduleParameterKind_VA_phsC_mag"] = 33;
        values[valuesById[34] = "ScheduleParameterKind_VAr_net_mag"] = 34;
        values[valuesById[35] = "ScheduleParameterKind_VAr_neut_mag"] = 35;
        values[valuesById[36] = "ScheduleParameterKind_VAr_phsA_mag"] = 36;
        values[valuesById[37] = "ScheduleParameterKind_VAr_phsB_mag"] = 37;
        values[valuesById[38] = "ScheduleParameterKind_VAr_phsC_mag"] = 38;
        values[valuesById[39] = "ScheduleParameterKind_W_net_mag"] = 39;
        values[valuesById[40] = "ScheduleParameterKind_W_neut_mag"] = 40;
        values[valuesById[41] = "ScheduleParameterKind_W_phsA_mag"] = 41;
        values[valuesById[42] = "ScheduleParameterKind_W_phsB_mag"] = 42;
        values[valuesById[43] = "ScheduleParameterKind_W_phsC_mag"] = 43;
        return values;
    })();

    commonmodule.Optional_ScheduleParameterKind = (function() {

        /**
         * Properties of an Optional_ScheduleParameterKind.
         * @memberof commonmodule
         * @interface IOptional_ScheduleParameterKind
         * @property {commonmodule.ScheduleParameterKind|null} [value] Optional_ScheduleParameterKind value
         */

        /**
         * Constructs a new Optional_ScheduleParameterKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_ScheduleParameterKind.
         * @implements IOptional_ScheduleParameterKind
         * @constructor
         * @param {commonmodule.IOptional_ScheduleParameterKind=} [properties] Properties to set
         */
        function Optional_ScheduleParameterKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_ScheduleParameterKind value.
         * @member {commonmodule.ScheduleParameterKind} value
         * @memberof commonmodule.Optional_ScheduleParameterKind
         * @instance
         */
        Optional_ScheduleParameterKind.prototype.value = 0;

        /**
         * Creates a new Optional_ScheduleParameterKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_ScheduleParameterKind
         * @static
         * @param {commonmodule.IOptional_ScheduleParameterKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_ScheduleParameterKind} Optional_ScheduleParameterKind instance
         */
        Optional_ScheduleParameterKind.create = function create(properties) {
            return new Optional_ScheduleParameterKind(properties);
        };

        /**
         * Encodes the specified Optional_ScheduleParameterKind message. Does not implicitly {@link commonmodule.Optional_ScheduleParameterKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_ScheduleParameterKind
         * @static
         * @param {commonmodule.IOptional_ScheduleParameterKind} message Optional_ScheduleParameterKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_ScheduleParameterKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_ScheduleParameterKind message, length delimited. Does not implicitly {@link commonmodule.Optional_ScheduleParameterKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_ScheduleParameterKind
         * @static
         * @param {commonmodule.IOptional_ScheduleParameterKind} message Optional_ScheduleParameterKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_ScheduleParameterKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_ScheduleParameterKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_ScheduleParameterKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_ScheduleParameterKind} Optional_ScheduleParameterKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_ScheduleParameterKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_ScheduleParameterKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_ScheduleParameterKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_ScheduleParameterKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_ScheduleParameterKind} Optional_ScheduleParameterKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_ScheduleParameterKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_ScheduleParameterKind message.
         * @function verify
         * @memberof commonmodule.Optional_ScheduleParameterKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_ScheduleParameterKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_ScheduleParameterKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_ScheduleParameterKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_ScheduleParameterKind} Optional_ScheduleParameterKind
         */
        Optional_ScheduleParameterKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_ScheduleParameterKind)
                return object;
            var message = new $root.commonmodule.Optional_ScheduleParameterKind();
            switch (object.value) {
            case "ScheduleParameterKind_none":
            case 0:
                message.value = 0;
                break;
            case "ScheduleParameterKind_other":
            case 1:
                message.value = 1;
                break;
            case "ScheduleParameterKind_A_net_mag":
            case 2:
                message.value = 2;
                break;
            case "ScheduleParameterKind_A_neut_mag":
            case 3:
                message.value = 3;
                break;
            case "ScheduleParameterKind_A_phsA_mag":
            case 4:
                message.value = 4;
                break;
            case "ScheduleParameterKind_A_phsB_mag":
            case 5:
                message.value = 5;
                break;
            case "ScheduleParameterKind_A_phsC_mag":
            case 6:
                message.value = 6;
                break;
            case "ScheduleParameterKind_Hz_mag":
            case 7:
                message.value = 7;
                break;
            case "ScheduleParameterKind_PF_net_mag":
            case 8:
                message.value = 8;
                break;
            case "ScheduleParameterKind_PF_neut_mag":
            case 9:
                message.value = 9;
                break;
            case "ScheduleParameterKind_PF_phsA_mag":
            case 10:
                message.value = 10;
                break;
            case "ScheduleParameterKind_PF_phsB_mag":
            case 11:
                message.value = 11;
                break;
            case "ScheduleParameterKind_PF_phsC_mag":
            case 12:
                message.value = 12;
                break;
            case "ScheduleParameterKind_PhV_net_ang":
            case 13:
                message.value = 13;
                break;
            case "ScheduleParameterKind_PhV_net_mag":
            case 14:
                message.value = 14;
                break;
            case "ScheduleParameterKind_PhV_neut_ang":
            case 15:
                message.value = 15;
                break;
            case "ScheduleParameterKind_PhV_neut_mag":
            case 16:
                message.value = 16;
                break;
            case "ScheduleParameterKind_PhV_phsA_ang":
            case 17:
                message.value = 17;
                break;
            case "ScheduleParameterKind_PhV_phsA_mag":
            case 18:
                message.value = 18;
                break;
            case "ScheduleParameterKind_PhV_phsB_ang":
            case 19:
                message.value = 19;
                break;
            case "ScheduleParameterKind_PhV_phsB_mag":
            case 20:
                message.value = 20;
                break;
            case "ScheduleParameterKind_PhV_phsC_ang":
            case 21:
                message.value = 21;
                break;
            case "ScheduleParameterKind_PhV_phsC_mag":
            case 22:
                message.value = 22;
                break;
            case "ScheduleParameterKind_PPV_phsAB_ang":
            case 23:
                message.value = 23;
                break;
            case "ScheduleParameterKind_PPV_phsAB_mag":
            case 24:
                message.value = 24;
                break;
            case "ScheduleParameterKind_PPV_phsBC_ang":
            case 25:
                message.value = 25;
                break;
            case "ScheduleParameterKind_PPV_phsBC_mag":
            case 26:
                message.value = 26;
                break;
            case "ScheduleParameterKind_PPV_phsCA_ang":
            case 27:
                message.value = 27;
                break;
            case "ScheduleParameterKind_PPV_phsCA_mag":
            case 28:
                message.value = 28;
                break;
            case "ScheduleParameterKind_VA_net_mag":
            case 29:
                message.value = 29;
                break;
            case "ScheduleParameterKind_VA_neut_mag":
            case 30:
                message.value = 30;
                break;
            case "ScheduleParameterKind_VA_phsA_mag":
            case 31:
                message.value = 31;
                break;
            case "ScheduleParameterKind_VA_phsB_mag":
            case 32:
                message.value = 32;
                break;
            case "ScheduleParameterKind_VA_phsC_mag":
            case 33:
                message.value = 33;
                break;
            case "ScheduleParameterKind_VAr_net_mag":
            case 34:
                message.value = 34;
                break;
            case "ScheduleParameterKind_VAr_neut_mag":
            case 35:
                message.value = 35;
                break;
            case "ScheduleParameterKind_VAr_phsA_mag":
            case 36:
                message.value = 36;
                break;
            case "ScheduleParameterKind_VAr_phsB_mag":
            case 37:
                message.value = 37;
                break;
            case "ScheduleParameterKind_VAr_phsC_mag":
            case 38:
                message.value = 38;
                break;
            case "ScheduleParameterKind_W_net_mag":
            case 39:
                message.value = 39;
                break;
            case "ScheduleParameterKind_W_neut_mag":
            case 40:
                message.value = 40;
                break;
            case "ScheduleParameterKind_W_phsA_mag":
            case 41:
                message.value = 41;
                break;
            case "ScheduleParameterKind_W_phsB_mag":
            case 42:
                message.value = 42;
                break;
            case "ScheduleParameterKind_W_phsC_mag":
            case 43:
                message.value = 43;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_ScheduleParameterKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_ScheduleParameterKind
         * @static
         * @param {commonmodule.Optional_ScheduleParameterKind} message Optional_ScheduleParameterKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_ScheduleParameterKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "ScheduleParameterKind_none" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.ScheduleParameterKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_ScheduleParameterKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_ScheduleParameterKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_ScheduleParameterKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_ScheduleParameterKind;
    })();

    commonmodule.ENG_ScheduleParameter = (function() {

        /**
         * Properties of a ENG_ScheduleParameter.
         * @memberof commonmodule
         * @interface IENG_ScheduleParameter
         * @property {commonmodule.ScheduleParameterKind|null} [scheduleParameterType] ENG_ScheduleParameter scheduleParameterType
         * @property {number|null} [value] ENG_ScheduleParameter value
         */

        /**
         * Constructs a new ENG_ScheduleParameter.
         * @memberof commonmodule
         * @classdesc Represents a ENG_ScheduleParameter.
         * @implements IENG_ScheduleParameter
         * @constructor
         * @param {commonmodule.IENG_ScheduleParameter=} [properties] Properties to set
         */
        function ENG_ScheduleParameter(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ENG_ScheduleParameter scheduleParameterType.
         * @member {commonmodule.ScheduleParameterKind} scheduleParameterType
         * @memberof commonmodule.ENG_ScheduleParameter
         * @instance
         */
        ENG_ScheduleParameter.prototype.scheduleParameterType = 0;

        /**
         * ENG_ScheduleParameter value.
         * @member {number} value
         * @memberof commonmodule.ENG_ScheduleParameter
         * @instance
         */
        ENG_ScheduleParameter.prototype.value = 0;

        /**
         * Creates a new ENG_ScheduleParameter instance using the specified properties.
         * @function create
         * @memberof commonmodule.ENG_ScheduleParameter
         * @static
         * @param {commonmodule.IENG_ScheduleParameter=} [properties] Properties to set
         * @returns {commonmodule.ENG_ScheduleParameter} ENG_ScheduleParameter instance
         */
        ENG_ScheduleParameter.create = function create(properties) {
            return new ENG_ScheduleParameter(properties);
        };

        /**
         * Encodes the specified ENG_ScheduleParameter message. Does not implicitly {@link commonmodule.ENG_ScheduleParameter.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ENG_ScheduleParameter
         * @static
         * @param {commonmodule.IENG_ScheduleParameter} message ENG_ScheduleParameter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENG_ScheduleParameter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.scheduleParameterType != null && Object.hasOwnProperty.call(message, "scheduleParameterType"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.scheduleParameterType);
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 2, wireType 5 =*/21).float(message.value);
            return writer;
        };

        /**
         * Encodes the specified ENG_ScheduleParameter message, length delimited. Does not implicitly {@link commonmodule.ENG_ScheduleParameter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ENG_ScheduleParameter
         * @static
         * @param {commonmodule.IENG_ScheduleParameter} message ENG_ScheduleParameter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENG_ScheduleParameter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ENG_ScheduleParameter message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ENG_ScheduleParameter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ENG_ScheduleParameter} ENG_ScheduleParameter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENG_ScheduleParameter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ENG_ScheduleParameter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.scheduleParameterType = reader.int32();
                    break;
                case 2:
                    message.value = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ENG_ScheduleParameter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ENG_ScheduleParameter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ENG_ScheduleParameter} ENG_ScheduleParameter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENG_ScheduleParameter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ENG_ScheduleParameter message.
         * @function verify
         * @memberof commonmodule.ENG_ScheduleParameter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENG_ScheduleParameter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.scheduleParameterType != null && message.hasOwnProperty("scheduleParameterType"))
                switch (message.scheduleParameterType) {
                default:
                    return "scheduleParameterType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 38:
                case 39:
                case 40:
                case 41:
                case 42:
                case 43:
                    break;
                }
            if (message.value != null && message.hasOwnProperty("value"))
                if (typeof message.value !== "number")
                    return "value: number expected";
            return null;
        };

        /**
         * Creates a ENG_ScheduleParameter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ENG_ScheduleParameter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ENG_ScheduleParameter} ENG_ScheduleParameter
         */
        ENG_ScheduleParameter.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ENG_ScheduleParameter)
                return object;
            var message = new $root.commonmodule.ENG_ScheduleParameter();
            switch (object.scheduleParameterType) {
            case "ScheduleParameterKind_none":
            case 0:
                message.scheduleParameterType = 0;
                break;
            case "ScheduleParameterKind_other":
            case 1:
                message.scheduleParameterType = 1;
                break;
            case "ScheduleParameterKind_A_net_mag":
            case 2:
                message.scheduleParameterType = 2;
                break;
            case "ScheduleParameterKind_A_neut_mag":
            case 3:
                message.scheduleParameterType = 3;
                break;
            case "ScheduleParameterKind_A_phsA_mag":
            case 4:
                message.scheduleParameterType = 4;
                break;
            case "ScheduleParameterKind_A_phsB_mag":
            case 5:
                message.scheduleParameterType = 5;
                break;
            case "ScheduleParameterKind_A_phsC_mag":
            case 6:
                message.scheduleParameterType = 6;
                break;
            case "ScheduleParameterKind_Hz_mag":
            case 7:
                message.scheduleParameterType = 7;
                break;
            case "ScheduleParameterKind_PF_net_mag":
            case 8:
                message.scheduleParameterType = 8;
                break;
            case "ScheduleParameterKind_PF_neut_mag":
            case 9:
                message.scheduleParameterType = 9;
                break;
            case "ScheduleParameterKind_PF_phsA_mag":
            case 10:
                message.scheduleParameterType = 10;
                break;
            case "ScheduleParameterKind_PF_phsB_mag":
            case 11:
                message.scheduleParameterType = 11;
                break;
            case "ScheduleParameterKind_PF_phsC_mag":
            case 12:
                message.scheduleParameterType = 12;
                break;
            case "ScheduleParameterKind_PhV_net_ang":
            case 13:
                message.scheduleParameterType = 13;
                break;
            case "ScheduleParameterKind_PhV_net_mag":
            case 14:
                message.scheduleParameterType = 14;
                break;
            case "ScheduleParameterKind_PhV_neut_ang":
            case 15:
                message.scheduleParameterType = 15;
                break;
            case "ScheduleParameterKind_PhV_neut_mag":
            case 16:
                message.scheduleParameterType = 16;
                break;
            case "ScheduleParameterKind_PhV_phsA_ang":
            case 17:
                message.scheduleParameterType = 17;
                break;
            case "ScheduleParameterKind_PhV_phsA_mag":
            case 18:
                message.scheduleParameterType = 18;
                break;
            case "ScheduleParameterKind_PhV_phsB_ang":
            case 19:
                message.scheduleParameterType = 19;
                break;
            case "ScheduleParameterKind_PhV_phsB_mag":
            case 20:
                message.scheduleParameterType = 20;
                break;
            case "ScheduleParameterKind_PhV_phsC_ang":
            case 21:
                message.scheduleParameterType = 21;
                break;
            case "ScheduleParameterKind_PhV_phsC_mag":
            case 22:
                message.scheduleParameterType = 22;
                break;
            case "ScheduleParameterKind_PPV_phsAB_ang":
            case 23:
                message.scheduleParameterType = 23;
                break;
            case "ScheduleParameterKind_PPV_phsAB_mag":
            case 24:
                message.scheduleParameterType = 24;
                break;
            case "ScheduleParameterKind_PPV_phsBC_ang":
            case 25:
                message.scheduleParameterType = 25;
                break;
            case "ScheduleParameterKind_PPV_phsBC_mag":
            case 26:
                message.scheduleParameterType = 26;
                break;
            case "ScheduleParameterKind_PPV_phsCA_ang":
            case 27:
                message.scheduleParameterType = 27;
                break;
            case "ScheduleParameterKind_PPV_phsCA_mag":
            case 28:
                message.scheduleParameterType = 28;
                break;
            case "ScheduleParameterKind_VA_net_mag":
            case 29:
                message.scheduleParameterType = 29;
                break;
            case "ScheduleParameterKind_VA_neut_mag":
            case 30:
                message.scheduleParameterType = 30;
                break;
            case "ScheduleParameterKind_VA_phsA_mag":
            case 31:
                message.scheduleParameterType = 31;
                break;
            case "ScheduleParameterKind_VA_phsB_mag":
            case 32:
                message.scheduleParameterType = 32;
                break;
            case "ScheduleParameterKind_VA_phsC_mag":
            case 33:
                message.scheduleParameterType = 33;
                break;
            case "ScheduleParameterKind_VAr_net_mag":
            case 34:
                message.scheduleParameterType = 34;
                break;
            case "ScheduleParameterKind_VAr_neut_mag":
            case 35:
                message.scheduleParameterType = 35;
                break;
            case "ScheduleParameterKind_VAr_phsA_mag":
            case 36:
                message.scheduleParameterType = 36;
                break;
            case "ScheduleParameterKind_VAr_phsB_mag":
            case 37:
                message.scheduleParameterType = 37;
                break;
            case "ScheduleParameterKind_VAr_phsC_mag":
            case 38:
                message.scheduleParameterType = 38;
                break;
            case "ScheduleParameterKind_W_net_mag":
            case 39:
                message.scheduleParameterType = 39;
                break;
            case "ScheduleParameterKind_W_neut_mag":
            case 40:
                message.scheduleParameterType = 40;
                break;
            case "ScheduleParameterKind_W_phsA_mag":
            case 41:
                message.scheduleParameterType = 41;
                break;
            case "ScheduleParameterKind_W_phsB_mag":
            case 42:
                message.scheduleParameterType = 42;
                break;
            case "ScheduleParameterKind_W_phsC_mag":
            case 43:
                message.scheduleParameterType = 43;
                break;
            }
            if (object.value != null)
                message.value = Number(object.value);
            return message;
        };

        /**
         * Creates a plain object from a ENG_ScheduleParameter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ENG_ScheduleParameter
         * @static
         * @param {commonmodule.ENG_ScheduleParameter} message ENG_ScheduleParameter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENG_ScheduleParameter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.scheduleParameterType = options.enums === String ? "ScheduleParameterKind_none" : 0;
                object.value = 0;
            }
            if (message.scheduleParameterType != null && message.hasOwnProperty("scheduleParameterType"))
                object.scheduleParameterType = options.enums === String ? $root.commonmodule.ScheduleParameterKind[message.scheduleParameterType] : message.scheduleParameterType;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.json && !isFinite(message.value) ? String(message.value) : message.value;
            return object;
        };

        /**
         * Converts this ENG_ScheduleParameter to JSON.
         * @function toJSON
         * @memberof commonmodule.ENG_ScheduleParameter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENG_ScheduleParameter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ENG_ScheduleParameter;
    })();

    commonmodule.SchedulePoint = (function() {

        /**
         * Properties of a SchedulePoint.
         * @memberof commonmodule
         * @interface ISchedulePoint
         * @property {Array.<commonmodule.IENG_ScheduleParameter>|null} [scheduleParameter] SchedulePoint scheduleParameter
         * @property {commonmodule.IControlTimestamp|null} [startTime] SchedulePoint startTime
         */

        /**
         * Constructs a new SchedulePoint.
         * @memberof commonmodule
         * @classdesc Represents a SchedulePoint.
         * @implements ISchedulePoint
         * @constructor
         * @param {commonmodule.ISchedulePoint=} [properties] Properties to set
         */
        function SchedulePoint(properties) {
            this.scheduleParameter = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SchedulePoint scheduleParameter.
         * @member {Array.<commonmodule.IENG_ScheduleParameter>} scheduleParameter
         * @memberof commonmodule.SchedulePoint
         * @instance
         */
        SchedulePoint.prototype.scheduleParameter = $util.emptyArray;

        /**
         * SchedulePoint startTime.
         * @member {commonmodule.IControlTimestamp|null|undefined} startTime
         * @memberof commonmodule.SchedulePoint
         * @instance
         */
        SchedulePoint.prototype.startTime = null;

        /**
         * Creates a new SchedulePoint instance using the specified properties.
         * @function create
         * @memberof commonmodule.SchedulePoint
         * @static
         * @param {commonmodule.ISchedulePoint=} [properties] Properties to set
         * @returns {commonmodule.SchedulePoint} SchedulePoint instance
         */
        SchedulePoint.create = function create(properties) {
            return new SchedulePoint(properties);
        };

        /**
         * Encodes the specified SchedulePoint message. Does not implicitly {@link commonmodule.SchedulePoint.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.SchedulePoint
         * @static
         * @param {commonmodule.ISchedulePoint} message SchedulePoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SchedulePoint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.scheduleParameter != null && message.scheduleParameter.length)
                for (var i = 0; i < message.scheduleParameter.length; ++i)
                    $root.commonmodule.ENG_ScheduleParameter.encode(message.scheduleParameter[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                $root.commonmodule.ControlTimestamp.encode(message.startTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SchedulePoint message, length delimited. Does not implicitly {@link commonmodule.SchedulePoint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.SchedulePoint
         * @static
         * @param {commonmodule.ISchedulePoint} message SchedulePoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SchedulePoint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SchedulePoint message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.SchedulePoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.SchedulePoint} SchedulePoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SchedulePoint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.SchedulePoint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.scheduleParameter && message.scheduleParameter.length))
                        message.scheduleParameter = [];
                    message.scheduleParameter.push($root.commonmodule.ENG_ScheduleParameter.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.startTime = $root.commonmodule.ControlTimestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SchedulePoint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.SchedulePoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.SchedulePoint} SchedulePoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SchedulePoint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SchedulePoint message.
         * @function verify
         * @memberof commonmodule.SchedulePoint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SchedulePoint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.scheduleParameter != null && message.hasOwnProperty("scheduleParameter")) {
                if (!Array.isArray(message.scheduleParameter))
                    return "scheduleParameter: array expected";
                for (var i = 0; i < message.scheduleParameter.length; ++i) {
                    var error = $root.commonmodule.ENG_ScheduleParameter.verify(message.scheduleParameter[i]);
                    if (error)
                        return "scheduleParameter." + error;
                }
            }
            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                var error = $root.commonmodule.ControlTimestamp.verify(message.startTime);
                if (error)
                    return "startTime." + error;
            }
            return null;
        };

        /**
         * Creates a SchedulePoint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.SchedulePoint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.SchedulePoint} SchedulePoint
         */
        SchedulePoint.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.SchedulePoint)
                return object;
            var message = new $root.commonmodule.SchedulePoint();
            if (object.scheduleParameter) {
                if (!Array.isArray(object.scheduleParameter))
                    throw TypeError(".commonmodule.SchedulePoint.scheduleParameter: array expected");
                message.scheduleParameter = [];
                for (var i = 0; i < object.scheduleParameter.length; ++i) {
                    if (typeof object.scheduleParameter[i] !== "object")
                        throw TypeError(".commonmodule.SchedulePoint.scheduleParameter: object expected");
                    message.scheduleParameter[i] = $root.commonmodule.ENG_ScheduleParameter.fromObject(object.scheduleParameter[i]);
                }
            }
            if (object.startTime != null) {
                if (typeof object.startTime !== "object")
                    throw TypeError(".commonmodule.SchedulePoint.startTime: object expected");
                message.startTime = $root.commonmodule.ControlTimestamp.fromObject(object.startTime);
            }
            return message;
        };

        /**
         * Creates a plain object from a SchedulePoint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.SchedulePoint
         * @static
         * @param {commonmodule.SchedulePoint} message SchedulePoint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SchedulePoint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.scheduleParameter = [];
            if (options.defaults)
                object.startTime = null;
            if (message.scheduleParameter && message.scheduleParameter.length) {
                object.scheduleParameter = [];
                for (var j = 0; j < message.scheduleParameter.length; ++j)
                    object.scheduleParameter[j] = $root.commonmodule.ENG_ScheduleParameter.toObject(message.scheduleParameter[j], options);
            }
            if (message.startTime != null && message.hasOwnProperty("startTime"))
                object.startTime = $root.commonmodule.ControlTimestamp.toObject(message.startTime, options);
            return object;
        };

        /**
         * Converts this SchedulePoint to JSON.
         * @function toJSON
         * @memberof commonmodule.SchedulePoint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SchedulePoint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SchedulePoint;
    })();

    commonmodule.ScheduleCSG = (function() {

        /**
         * Properties of a ScheduleCSG.
         * @memberof commonmodule
         * @interface IScheduleCSG
         * @property {Array.<commonmodule.ISchedulePoint>|null} [schPts] ScheduleCSG schPts
         */

        /**
         * Constructs a new ScheduleCSG.
         * @memberof commonmodule
         * @classdesc Represents a ScheduleCSG.
         * @implements IScheduleCSG
         * @constructor
         * @param {commonmodule.IScheduleCSG=} [properties] Properties to set
         */
        function ScheduleCSG(properties) {
            this.schPts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ScheduleCSG schPts.
         * @member {Array.<commonmodule.ISchedulePoint>} schPts
         * @memberof commonmodule.ScheduleCSG
         * @instance
         */
        ScheduleCSG.prototype.schPts = $util.emptyArray;

        /**
         * Creates a new ScheduleCSG instance using the specified properties.
         * @function create
         * @memberof commonmodule.ScheduleCSG
         * @static
         * @param {commonmodule.IScheduleCSG=} [properties] Properties to set
         * @returns {commonmodule.ScheduleCSG} ScheduleCSG instance
         */
        ScheduleCSG.create = function create(properties) {
            return new ScheduleCSG(properties);
        };

        /**
         * Encodes the specified ScheduleCSG message. Does not implicitly {@link commonmodule.ScheduleCSG.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ScheduleCSG
         * @static
         * @param {commonmodule.IScheduleCSG} message ScheduleCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ScheduleCSG.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.schPts != null && message.schPts.length)
                for (var i = 0; i < message.schPts.length; ++i)
                    $root.commonmodule.SchedulePoint.encode(message.schPts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ScheduleCSG message, length delimited. Does not implicitly {@link commonmodule.ScheduleCSG.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ScheduleCSG
         * @static
         * @param {commonmodule.IScheduleCSG} message ScheduleCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ScheduleCSG.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ScheduleCSG message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ScheduleCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ScheduleCSG} ScheduleCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ScheduleCSG.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ScheduleCSG();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.schPts && message.schPts.length))
                        message.schPts = [];
                    message.schPts.push($root.commonmodule.SchedulePoint.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ScheduleCSG message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ScheduleCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ScheduleCSG} ScheduleCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ScheduleCSG.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ScheduleCSG message.
         * @function verify
         * @memberof commonmodule.ScheduleCSG
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ScheduleCSG.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.schPts != null && message.hasOwnProperty("schPts")) {
                if (!Array.isArray(message.schPts))
                    return "schPts: array expected";
                for (var i = 0; i < message.schPts.length; ++i) {
                    var error = $root.commonmodule.SchedulePoint.verify(message.schPts[i]);
                    if (error)
                        return "schPts." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ScheduleCSG message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ScheduleCSG
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ScheduleCSG} ScheduleCSG
         */
        ScheduleCSG.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ScheduleCSG)
                return object;
            var message = new $root.commonmodule.ScheduleCSG();
            if (object.schPts) {
                if (!Array.isArray(object.schPts))
                    throw TypeError(".commonmodule.ScheduleCSG.schPts: array expected");
                message.schPts = [];
                for (var i = 0; i < object.schPts.length; ++i) {
                    if (typeof object.schPts[i] !== "object")
                        throw TypeError(".commonmodule.ScheduleCSG.schPts: object expected");
                    message.schPts[i] = $root.commonmodule.SchedulePoint.fromObject(object.schPts[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ScheduleCSG message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ScheduleCSG
         * @static
         * @param {commonmodule.ScheduleCSG} message ScheduleCSG
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ScheduleCSG.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.schPts = [];
            if (message.schPts && message.schPts.length) {
                object.schPts = [];
                for (var j = 0; j < message.schPts.length; ++j)
                    object.schPts[j] = $root.commonmodule.SchedulePoint.toObject(message.schPts[j], options);
            }
            return object;
        };

        /**
         * Converts this ScheduleCSG to JSON.
         * @function toJSON
         * @memberof commonmodule.ScheduleCSG
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ScheduleCSG.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ScheduleCSG;
    })();

    commonmodule.ControlScheduleFSCH = (function() {

        /**
         * Properties of a ControlScheduleFSCH.
         * @memberof commonmodule
         * @interface IControlScheduleFSCH
         * @property {commonmodule.IScheduleCSG|null} [ValACSG] ControlScheduleFSCH ValACSG
         */

        /**
         * Constructs a new ControlScheduleFSCH.
         * @memberof commonmodule
         * @classdesc Represents a ControlScheduleFSCH.
         * @implements IControlScheduleFSCH
         * @constructor
         * @param {commonmodule.IControlScheduleFSCH=} [properties] Properties to set
         */
        function ControlScheduleFSCH(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ControlScheduleFSCH ValACSG.
         * @member {commonmodule.IScheduleCSG|null|undefined} ValACSG
         * @memberof commonmodule.ControlScheduleFSCH
         * @instance
         */
        ControlScheduleFSCH.prototype.ValACSG = null;

        /**
         * Creates a new ControlScheduleFSCH instance using the specified properties.
         * @function create
         * @memberof commonmodule.ControlScheduleFSCH
         * @static
         * @param {commonmodule.IControlScheduleFSCH=} [properties] Properties to set
         * @returns {commonmodule.ControlScheduleFSCH} ControlScheduleFSCH instance
         */
        ControlScheduleFSCH.create = function create(properties) {
            return new ControlScheduleFSCH(properties);
        };

        /**
         * Encodes the specified ControlScheduleFSCH message. Does not implicitly {@link commonmodule.ControlScheduleFSCH.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ControlScheduleFSCH
         * @static
         * @param {commonmodule.IControlScheduleFSCH} message ControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlScheduleFSCH.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ValACSG != null && Object.hasOwnProperty.call(message, "ValACSG"))
                $root.commonmodule.ScheduleCSG.encode(message.ValACSG, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ControlScheduleFSCH message, length delimited. Does not implicitly {@link commonmodule.ControlScheduleFSCH.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ControlScheduleFSCH
         * @static
         * @param {commonmodule.IControlScheduleFSCH} message ControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlScheduleFSCH.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ControlScheduleFSCH message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ControlScheduleFSCH} ControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlScheduleFSCH.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ControlScheduleFSCH();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ValACSG = $root.commonmodule.ScheduleCSG.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ControlScheduleFSCH message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ControlScheduleFSCH} ControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlScheduleFSCH.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ControlScheduleFSCH message.
         * @function verify
         * @memberof commonmodule.ControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ControlScheduleFSCH.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ValACSG != null && message.hasOwnProperty("ValACSG")) {
                var error = $root.commonmodule.ScheduleCSG.verify(message.ValACSG);
                if (error)
                    return "ValACSG." + error;
            }
            return null;
        };

        /**
         * Creates a ControlScheduleFSCH message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ControlScheduleFSCH} ControlScheduleFSCH
         */
        ControlScheduleFSCH.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ControlScheduleFSCH)
                return object;
            var message = new $root.commonmodule.ControlScheduleFSCH();
            if (object.ValACSG != null) {
                if (typeof object.ValACSG !== "object")
                    throw TypeError(".commonmodule.ControlScheduleFSCH.ValACSG: object expected");
                message.ValACSG = $root.commonmodule.ScheduleCSG.fromObject(object.ValACSG);
            }
            return message;
        };

        /**
         * Creates a plain object from a ControlScheduleFSCH message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ControlScheduleFSCH
         * @static
         * @param {commonmodule.ControlScheduleFSCH} message ControlScheduleFSCH
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ControlScheduleFSCH.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ValACSG = null;
            if (message.ValACSG != null && message.hasOwnProperty("ValACSG"))
                object.ValACSG = $root.commonmodule.ScheduleCSG.toObject(message.ValACSG, options);
            return object;
        };

        /**
         * Converts this ControlScheduleFSCH to JSON.
         * @function toJSON
         * @memberof commonmodule.ControlScheduleFSCH
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ControlScheduleFSCH.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ControlScheduleFSCH;
    })();

    commonmodule.LogicalNodeForControl = (function() {

        /**
         * Properties of a LogicalNodeForControl.
         * @memberof commonmodule
         * @interface ILogicalNodeForControl
         * @property {commonmodule.ILogicalNode|null} [logicalNode] LogicalNodeForControl logicalNode
         */

        /**
         * Constructs a new LogicalNodeForControl.
         * @memberof commonmodule
         * @classdesc Represents a LogicalNodeForControl.
         * @implements ILogicalNodeForControl
         * @constructor
         * @param {commonmodule.ILogicalNodeForControl=} [properties] Properties to set
         */
        function LogicalNodeForControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LogicalNodeForControl logicalNode.
         * @member {commonmodule.ILogicalNode|null|undefined} logicalNode
         * @memberof commonmodule.LogicalNodeForControl
         * @instance
         */
        LogicalNodeForControl.prototype.logicalNode = null;

        /**
         * Creates a new LogicalNodeForControl instance using the specified properties.
         * @function create
         * @memberof commonmodule.LogicalNodeForControl
         * @static
         * @param {commonmodule.ILogicalNodeForControl=} [properties] Properties to set
         * @returns {commonmodule.LogicalNodeForControl} LogicalNodeForControl instance
         */
        LogicalNodeForControl.create = function create(properties) {
            return new LogicalNodeForControl(properties);
        };

        /**
         * Encodes the specified LogicalNodeForControl message. Does not implicitly {@link commonmodule.LogicalNodeForControl.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.LogicalNodeForControl
         * @static
         * @param {commonmodule.ILogicalNodeForControl} message LogicalNodeForControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LogicalNodeForControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNode != null && Object.hasOwnProperty.call(message, "logicalNode"))
                $root.commonmodule.LogicalNode.encode(message.logicalNode, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LogicalNodeForControl message, length delimited. Does not implicitly {@link commonmodule.LogicalNodeForControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.LogicalNodeForControl
         * @static
         * @param {commonmodule.ILogicalNodeForControl} message LogicalNodeForControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LogicalNodeForControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LogicalNodeForControl message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.LogicalNodeForControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.LogicalNodeForControl} LogicalNodeForControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LogicalNodeForControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.LogicalNodeForControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNode = $root.commonmodule.LogicalNode.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LogicalNodeForControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.LogicalNodeForControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.LogicalNodeForControl} LogicalNodeForControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LogicalNodeForControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LogicalNodeForControl message.
         * @function verify
         * @memberof commonmodule.LogicalNodeForControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LogicalNodeForControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode")) {
                var error = $root.commonmodule.LogicalNode.verify(message.logicalNode);
                if (error)
                    return "logicalNode." + error;
            }
            return null;
        };

        /**
         * Creates a LogicalNodeForControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.LogicalNodeForControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.LogicalNodeForControl} LogicalNodeForControl
         */
        LogicalNodeForControl.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.LogicalNodeForControl)
                return object;
            var message = new $root.commonmodule.LogicalNodeForControl();
            if (object.logicalNode != null) {
                if (typeof object.logicalNode !== "object")
                    throw TypeError(".commonmodule.LogicalNodeForControl.logicalNode: object expected");
                message.logicalNode = $root.commonmodule.LogicalNode.fromObject(object.logicalNode);
            }
            return message;
        };

        /**
         * Creates a plain object from a LogicalNodeForControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.LogicalNodeForControl
         * @static
         * @param {commonmodule.LogicalNodeForControl} message LogicalNodeForControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LogicalNodeForControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.logicalNode = null;
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode"))
                object.logicalNode = $root.commonmodule.LogicalNode.toObject(message.logicalNode, options);
            return object;
        };

        /**
         * Converts this LogicalNodeForControl to JSON.
         * @function toJSON
         * @memberof commonmodule.LogicalNodeForControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LogicalNodeForControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LogicalNodeForControl;
    })();

    commonmodule.ControlFSCC = (function() {

        /**
         * Properties of a ControlFSCC.
         * @memberof commonmodule
         * @interface IControlFSCC
         * @property {commonmodule.ILogicalNodeForControl|null} [logicalNodeForControl] ControlFSCC logicalNodeForControl
         * @property {commonmodule.IControlScheduleFSCH|null} [controlScheduleFSCH] ControlFSCC controlScheduleFSCH
         * @property {commonmodule.IControlScheduleFSCH|null} [islandControlScheduleFSCH] ControlFSCC islandControlScheduleFSCH
         */

        /**
         * Constructs a new ControlFSCC.
         * @memberof commonmodule
         * @classdesc Represents a ControlFSCC.
         * @implements IControlFSCC
         * @constructor
         * @param {commonmodule.IControlFSCC=} [properties] Properties to set
         */
        function ControlFSCC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ControlFSCC logicalNodeForControl.
         * @member {commonmodule.ILogicalNodeForControl|null|undefined} logicalNodeForControl
         * @memberof commonmodule.ControlFSCC
         * @instance
         */
        ControlFSCC.prototype.logicalNodeForControl = null;

        /**
         * ControlFSCC controlScheduleFSCH.
         * @member {commonmodule.IControlScheduleFSCH|null|undefined} controlScheduleFSCH
         * @memberof commonmodule.ControlFSCC
         * @instance
         */
        ControlFSCC.prototype.controlScheduleFSCH = null;

        /**
         * ControlFSCC islandControlScheduleFSCH.
         * @member {commonmodule.IControlScheduleFSCH|null|undefined} islandControlScheduleFSCH
         * @memberof commonmodule.ControlFSCC
         * @instance
         */
        ControlFSCC.prototype.islandControlScheduleFSCH = null;

        /**
         * Creates a new ControlFSCC instance using the specified properties.
         * @function create
         * @memberof commonmodule.ControlFSCC
         * @static
         * @param {commonmodule.IControlFSCC=} [properties] Properties to set
         * @returns {commonmodule.ControlFSCC} ControlFSCC instance
         */
        ControlFSCC.create = function create(properties) {
            return new ControlFSCC(properties);
        };

        /**
         * Encodes the specified ControlFSCC message. Does not implicitly {@link commonmodule.ControlFSCC.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ControlFSCC
         * @static
         * @param {commonmodule.IControlFSCC} message ControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlFSCC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForControl != null && Object.hasOwnProperty.call(message, "logicalNodeForControl"))
                $root.commonmodule.LogicalNodeForControl.encode(message.logicalNodeForControl, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.controlScheduleFSCH != null && Object.hasOwnProperty.call(message, "controlScheduleFSCH"))
                $root.commonmodule.ControlScheduleFSCH.encode(message.controlScheduleFSCH, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.islandControlScheduleFSCH != null && Object.hasOwnProperty.call(message, "islandControlScheduleFSCH"))
                $root.commonmodule.ControlScheduleFSCH.encode(message.islandControlScheduleFSCH, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ControlFSCC message, length delimited. Does not implicitly {@link commonmodule.ControlFSCC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ControlFSCC
         * @static
         * @param {commonmodule.IControlFSCC} message ControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlFSCC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ControlFSCC message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ControlFSCC} ControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlFSCC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ControlFSCC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.controlScheduleFSCH = $root.commonmodule.ControlScheduleFSCH.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.islandControlScheduleFSCH = $root.commonmodule.ControlScheduleFSCH.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ControlFSCC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ControlFSCC} ControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlFSCC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ControlFSCC message.
         * @function verify
         * @memberof commonmodule.ControlFSCC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ControlFSCC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl")) {
                var error = $root.commonmodule.LogicalNodeForControl.verify(message.logicalNodeForControl);
                if (error)
                    return "logicalNodeForControl." + error;
            }
            if (message.controlScheduleFSCH != null && message.hasOwnProperty("controlScheduleFSCH")) {
                var error = $root.commonmodule.ControlScheduleFSCH.verify(message.controlScheduleFSCH);
                if (error)
                    return "controlScheduleFSCH." + error;
            }
            if (message.islandControlScheduleFSCH != null && message.hasOwnProperty("islandControlScheduleFSCH")) {
                var error = $root.commonmodule.ControlScheduleFSCH.verify(message.islandControlScheduleFSCH);
                if (error)
                    return "islandControlScheduleFSCH." + error;
            }
            return null;
        };

        /**
         * Creates a ControlFSCC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ControlFSCC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ControlFSCC} ControlFSCC
         */
        ControlFSCC.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ControlFSCC)
                return object;
            var message = new $root.commonmodule.ControlFSCC();
            if (object.logicalNodeForControl != null) {
                if (typeof object.logicalNodeForControl !== "object")
                    throw TypeError(".commonmodule.ControlFSCC.logicalNodeForControl: object expected");
                message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.fromObject(object.logicalNodeForControl);
            }
            if (object.controlScheduleFSCH != null) {
                if (typeof object.controlScheduleFSCH !== "object")
                    throw TypeError(".commonmodule.ControlFSCC.controlScheduleFSCH: object expected");
                message.controlScheduleFSCH = $root.commonmodule.ControlScheduleFSCH.fromObject(object.controlScheduleFSCH);
            }
            if (object.islandControlScheduleFSCH != null) {
                if (typeof object.islandControlScheduleFSCH !== "object")
                    throw TypeError(".commonmodule.ControlFSCC.islandControlScheduleFSCH: object expected");
                message.islandControlScheduleFSCH = $root.commonmodule.ControlScheduleFSCH.fromObject(object.islandControlScheduleFSCH);
            }
            return message;
        };

        /**
         * Creates a plain object from a ControlFSCC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ControlFSCC
         * @static
         * @param {commonmodule.ControlFSCC} message ControlFSCC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ControlFSCC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForControl = null;
                object.controlScheduleFSCH = null;
                object.islandControlScheduleFSCH = null;
            }
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl"))
                object.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.toObject(message.logicalNodeForControl, options);
            if (message.controlScheduleFSCH != null && message.hasOwnProperty("controlScheduleFSCH"))
                object.controlScheduleFSCH = $root.commonmodule.ControlScheduleFSCH.toObject(message.controlScheduleFSCH, options);
            if (message.islandControlScheduleFSCH != null && message.hasOwnProperty("islandControlScheduleFSCH"))
                object.islandControlScheduleFSCH = $root.commonmodule.ControlScheduleFSCH.toObject(message.islandControlScheduleFSCH, options);
            return object;
        };

        /**
         * Converts this ControlFSCC to JSON.
         * @function toJSON
         * @memberof commonmodule.ControlFSCC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ControlFSCC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ControlFSCC;
    })();

    commonmodule.ControlING = (function() {

        /**
         * Properties of a ControlING.
         * @memberof commonmodule
         * @interface IControlING
         * @property {number|null} [setVal] ControlING setVal
         * @property {commonmodule.IUnit|null} [units] ControlING units
         */

        /**
         * Constructs a new ControlING.
         * @memberof commonmodule
         * @classdesc Represents a ControlING.
         * @implements IControlING
         * @constructor
         * @param {commonmodule.IControlING=} [properties] Properties to set
         */
        function ControlING(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ControlING setVal.
         * @member {number} setVal
         * @memberof commonmodule.ControlING
         * @instance
         */
        ControlING.prototype.setVal = 0;

        /**
         * ControlING units.
         * @member {commonmodule.IUnit|null|undefined} units
         * @memberof commonmodule.ControlING
         * @instance
         */
        ControlING.prototype.units = null;

        /**
         * Creates a new ControlING instance using the specified properties.
         * @function create
         * @memberof commonmodule.ControlING
         * @static
         * @param {commonmodule.IControlING=} [properties] Properties to set
         * @returns {commonmodule.ControlING} ControlING instance
         */
        ControlING.create = function create(properties) {
            return new ControlING(properties);
        };

        /**
         * Encodes the specified ControlING message. Does not implicitly {@link commonmodule.ControlING.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ControlING
         * @static
         * @param {commonmodule.IControlING} message ControlING message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlING.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.setVal != null && Object.hasOwnProperty.call(message, "setVal"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.setVal);
            if (message.units != null && Object.hasOwnProperty.call(message, "units"))
                $root.commonmodule.Unit.encode(message.units, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ControlING message, length delimited. Does not implicitly {@link commonmodule.ControlING.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ControlING
         * @static
         * @param {commonmodule.IControlING} message ControlING message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlING.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ControlING message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ControlING
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ControlING} ControlING
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlING.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ControlING();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.setVal = reader.int32();
                    break;
                case 2:
                    message.units = $root.commonmodule.Unit.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ControlING message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ControlING
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ControlING} ControlING
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlING.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ControlING message.
         * @function verify
         * @memberof commonmodule.ControlING
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ControlING.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.setVal != null && message.hasOwnProperty("setVal"))
                if (!$util.isInteger(message.setVal))
                    return "setVal: integer expected";
            if (message.units != null && message.hasOwnProperty("units")) {
                var error = $root.commonmodule.Unit.verify(message.units);
                if (error)
                    return "units." + error;
            }
            return null;
        };

        /**
         * Creates a ControlING message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ControlING
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ControlING} ControlING
         */
        ControlING.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ControlING)
                return object;
            var message = new $root.commonmodule.ControlING();
            if (object.setVal != null)
                message.setVal = object.setVal | 0;
            if (object.units != null) {
                if (typeof object.units !== "object")
                    throw TypeError(".commonmodule.ControlING.units: object expected");
                message.units = $root.commonmodule.Unit.fromObject(object.units);
            }
            return message;
        };

        /**
         * Creates a plain object from a ControlING message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ControlING
         * @static
         * @param {commonmodule.ControlING} message ControlING
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ControlING.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.setVal = 0;
                object.units = null;
            }
            if (message.setVal != null && message.hasOwnProperty("setVal"))
                object.setVal = message.setVal;
            if (message.units != null && message.hasOwnProperty("units"))
                object.units = $root.commonmodule.Unit.toObject(message.units, options);
            return object;
        };

        /**
         * Converts this ControlING to JSON.
         * @function toJSON
         * @memberof commonmodule.ControlING
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ControlING.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ControlING;
    })();

    commonmodule.ControlISC = (function() {

        /**
         * Properties of a ControlISC.
         * @memberof commonmodule
         * @interface IControlISC
         * @property {number|null} [ctlVal] ControlISC ctlVal
         */

        /**
         * Constructs a new ControlISC.
         * @memberof commonmodule
         * @classdesc Represents a ControlISC.
         * @implements IControlISC
         * @constructor
         * @param {commonmodule.IControlISC=} [properties] Properties to set
         */
        function ControlISC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ControlISC ctlVal.
         * @member {number} ctlVal
         * @memberof commonmodule.ControlISC
         * @instance
         */
        ControlISC.prototype.ctlVal = 0;

        /**
         * Creates a new ControlISC instance using the specified properties.
         * @function create
         * @memberof commonmodule.ControlISC
         * @static
         * @param {commonmodule.IControlISC=} [properties] Properties to set
         * @returns {commonmodule.ControlISC} ControlISC instance
         */
        ControlISC.create = function create(properties) {
            return new ControlISC(properties);
        };

        /**
         * Encodes the specified ControlISC message. Does not implicitly {@link commonmodule.ControlISC.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ControlISC
         * @static
         * @param {commonmodule.IControlISC} message ControlISC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlISC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ctlVal != null && Object.hasOwnProperty.call(message, "ctlVal"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctlVal);
            return writer;
        };

        /**
         * Encodes the specified ControlISC message, length delimited. Does not implicitly {@link commonmodule.ControlISC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ControlISC
         * @static
         * @param {commonmodule.IControlISC} message ControlISC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlISC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ControlISC message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ControlISC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ControlISC} ControlISC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlISC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ControlISC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ctlVal = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ControlISC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ControlISC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ControlISC} ControlISC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlISC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ControlISC message.
         * @function verify
         * @memberof commonmodule.ControlISC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ControlISC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ctlVal != null && message.hasOwnProperty("ctlVal"))
                if (!$util.isInteger(message.ctlVal))
                    return "ctlVal: integer expected";
            return null;
        };

        /**
         * Creates a ControlISC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ControlISC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ControlISC} ControlISC
         */
        ControlISC.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ControlISC)
                return object;
            var message = new $root.commonmodule.ControlISC();
            if (object.ctlVal != null)
                message.ctlVal = object.ctlVal | 0;
            return message;
        };

        /**
         * Creates a plain object from a ControlISC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ControlISC
         * @static
         * @param {commonmodule.ControlISC} message ControlISC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ControlISC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ctlVal = 0;
            if (message.ctlVal != null && message.hasOwnProperty("ctlVal"))
                object.ctlVal = message.ctlVal;
            return object;
        };

        /**
         * Converts this ControlISC to JSON.
         * @function toJSON
         * @memberof commonmodule.ControlISC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ControlISC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ControlISC;
    })();

    commonmodule.MessageInfo = (function() {

        /**
         * Properties of a MessageInfo.
         * @memberof commonmodule
         * @interface IMessageInfo
         * @property {commonmodule.IIdentifiedObject|null} [identifiedObject] MessageInfo identifiedObject
         * @property {commonmodule.ITimestamp|null} [messageTimeStamp] MessageInfo messageTimeStamp
         */

        /**
         * Constructs a new MessageInfo.
         * @memberof commonmodule
         * @classdesc Represents a MessageInfo.
         * @implements IMessageInfo
         * @constructor
         * @param {commonmodule.IMessageInfo=} [properties] Properties to set
         */
        function MessageInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MessageInfo identifiedObject.
         * @member {commonmodule.IIdentifiedObject|null|undefined} identifiedObject
         * @memberof commonmodule.MessageInfo
         * @instance
         */
        MessageInfo.prototype.identifiedObject = null;

        /**
         * MessageInfo messageTimeStamp.
         * @member {commonmodule.ITimestamp|null|undefined} messageTimeStamp
         * @memberof commonmodule.MessageInfo
         * @instance
         */
        MessageInfo.prototype.messageTimeStamp = null;

        /**
         * Creates a new MessageInfo instance using the specified properties.
         * @function create
         * @memberof commonmodule.MessageInfo
         * @static
         * @param {commonmodule.IMessageInfo=} [properties] Properties to set
         * @returns {commonmodule.MessageInfo} MessageInfo instance
         */
        MessageInfo.create = function create(properties) {
            return new MessageInfo(properties);
        };

        /**
         * Encodes the specified MessageInfo message. Does not implicitly {@link commonmodule.MessageInfo.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.MessageInfo
         * @static
         * @param {commonmodule.IMessageInfo} message MessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.identifiedObject != null && Object.hasOwnProperty.call(message, "identifiedObject"))
                $root.commonmodule.IdentifiedObject.encode(message.identifiedObject, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.messageTimeStamp != null && Object.hasOwnProperty.call(message, "messageTimeStamp"))
                $root.commonmodule.Timestamp.encode(message.messageTimeStamp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MessageInfo message, length delimited. Does not implicitly {@link commonmodule.MessageInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.MessageInfo
         * @static
         * @param {commonmodule.IMessageInfo} message MessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MessageInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MessageInfo message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.MessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.MessageInfo} MessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.MessageInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.identifiedObject = $root.commonmodule.IdentifiedObject.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.messageTimeStamp = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MessageInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.MessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.MessageInfo} MessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MessageInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MessageInfo message.
         * @function verify
         * @memberof commonmodule.MessageInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MessageInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject")) {
                var error = $root.commonmodule.IdentifiedObject.verify(message.identifiedObject);
                if (error)
                    return "identifiedObject." + error;
            }
            if (message.messageTimeStamp != null && message.hasOwnProperty("messageTimeStamp")) {
                var error = $root.commonmodule.Timestamp.verify(message.messageTimeStamp);
                if (error)
                    return "messageTimeStamp." + error;
            }
            return null;
        };

        /**
         * Creates a MessageInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.MessageInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.MessageInfo} MessageInfo
         */
        MessageInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.MessageInfo)
                return object;
            var message = new $root.commonmodule.MessageInfo();
            if (object.identifiedObject != null) {
                if (typeof object.identifiedObject !== "object")
                    throw TypeError(".commonmodule.MessageInfo.identifiedObject: object expected");
                message.identifiedObject = $root.commonmodule.IdentifiedObject.fromObject(object.identifiedObject);
            }
            if (object.messageTimeStamp != null) {
                if (typeof object.messageTimeStamp !== "object")
                    throw TypeError(".commonmodule.MessageInfo.messageTimeStamp: object expected");
                message.messageTimeStamp = $root.commonmodule.Timestamp.fromObject(object.messageTimeStamp);
            }
            return message;
        };

        /**
         * Creates a plain object from a MessageInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.MessageInfo
         * @static
         * @param {commonmodule.MessageInfo} message MessageInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MessageInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.identifiedObject = null;
                object.messageTimeStamp = null;
            }
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject"))
                object.identifiedObject = $root.commonmodule.IdentifiedObject.toObject(message.identifiedObject, options);
            if (message.messageTimeStamp != null && message.hasOwnProperty("messageTimeStamp"))
                object.messageTimeStamp = $root.commonmodule.Timestamp.toObject(message.messageTimeStamp, options);
            return object;
        };

        /**
         * Converts this MessageInfo to JSON.
         * @function toJSON
         * @memberof commonmodule.MessageInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MessageInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MessageInfo;
    })();

    commonmodule.ControlMessageInfo = (function() {

        /**
         * Properties of a ControlMessageInfo.
         * @memberof commonmodule
         * @interface IControlMessageInfo
         * @property {commonmodule.IMessageInfo|null} [messageInfo] ControlMessageInfo messageInfo
         */

        /**
         * Constructs a new ControlMessageInfo.
         * @memberof commonmodule
         * @classdesc Represents a ControlMessageInfo.
         * @implements IControlMessageInfo
         * @constructor
         * @param {commonmodule.IControlMessageInfo=} [properties] Properties to set
         */
        function ControlMessageInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ControlMessageInfo messageInfo.
         * @member {commonmodule.IMessageInfo|null|undefined} messageInfo
         * @memberof commonmodule.ControlMessageInfo
         * @instance
         */
        ControlMessageInfo.prototype.messageInfo = null;

        /**
         * Creates a new ControlMessageInfo instance using the specified properties.
         * @function create
         * @memberof commonmodule.ControlMessageInfo
         * @static
         * @param {commonmodule.IControlMessageInfo=} [properties] Properties to set
         * @returns {commonmodule.ControlMessageInfo} ControlMessageInfo instance
         */
        ControlMessageInfo.create = function create(properties) {
            return new ControlMessageInfo(properties);
        };

        /**
         * Encodes the specified ControlMessageInfo message. Does not implicitly {@link commonmodule.ControlMessageInfo.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ControlMessageInfo
         * @static
         * @param {commonmodule.IControlMessageInfo} message ControlMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlMessageInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messageInfo != null && Object.hasOwnProperty.call(message, "messageInfo"))
                $root.commonmodule.MessageInfo.encode(message.messageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ControlMessageInfo message, length delimited. Does not implicitly {@link commonmodule.ControlMessageInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ControlMessageInfo
         * @static
         * @param {commonmodule.IControlMessageInfo} message ControlMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlMessageInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ControlMessageInfo message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ControlMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ControlMessageInfo} ControlMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlMessageInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ControlMessageInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.messageInfo = $root.commonmodule.MessageInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ControlMessageInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ControlMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ControlMessageInfo} ControlMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlMessageInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ControlMessageInfo message.
         * @function verify
         * @memberof commonmodule.ControlMessageInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ControlMessageInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messageInfo != null && message.hasOwnProperty("messageInfo")) {
                var error = $root.commonmodule.MessageInfo.verify(message.messageInfo);
                if (error)
                    return "messageInfo." + error;
            }
            return null;
        };

        /**
         * Creates a ControlMessageInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ControlMessageInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ControlMessageInfo} ControlMessageInfo
         */
        ControlMessageInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ControlMessageInfo)
                return object;
            var message = new $root.commonmodule.ControlMessageInfo();
            if (object.messageInfo != null) {
                if (typeof object.messageInfo !== "object")
                    throw TypeError(".commonmodule.ControlMessageInfo.messageInfo: object expected");
                message.messageInfo = $root.commonmodule.MessageInfo.fromObject(object.messageInfo);
            }
            return message;
        };

        /**
         * Creates a plain object from a ControlMessageInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ControlMessageInfo
         * @static
         * @param {commonmodule.ControlMessageInfo} message ControlMessageInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ControlMessageInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.messageInfo = null;
            if (message.messageInfo != null && message.hasOwnProperty("messageInfo"))
                object.messageInfo = $root.commonmodule.MessageInfo.toObject(message.messageInfo, options);
            return object;
        };

        /**
         * Converts this ControlMessageInfo to JSON.
         * @function toJSON
         * @memberof commonmodule.ControlMessageInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ControlMessageInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ControlMessageInfo;
    })();

    commonmodule.ControlSPC = (function() {

        /**
         * Properties of a ControlSPC.
         * @memberof commonmodule
         * @interface IControlSPC
         * @property {boolean|null} [ctlVal] ControlSPC ctlVal
         */

        /**
         * Constructs a new ControlSPC.
         * @memberof commonmodule
         * @classdesc Represents a ControlSPC.
         * @implements IControlSPC
         * @constructor
         * @param {commonmodule.IControlSPC=} [properties] Properties to set
         */
        function ControlSPC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ControlSPC ctlVal.
         * @member {boolean} ctlVal
         * @memberof commonmodule.ControlSPC
         * @instance
         */
        ControlSPC.prototype.ctlVal = false;

        /**
         * Creates a new ControlSPC instance using the specified properties.
         * @function create
         * @memberof commonmodule.ControlSPC
         * @static
         * @param {commonmodule.IControlSPC=} [properties] Properties to set
         * @returns {commonmodule.ControlSPC} ControlSPC instance
         */
        ControlSPC.create = function create(properties) {
            return new ControlSPC(properties);
        };

        /**
         * Encodes the specified ControlSPC message. Does not implicitly {@link commonmodule.ControlSPC.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ControlSPC
         * @static
         * @param {commonmodule.IControlSPC} message ControlSPC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlSPC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ctlVal != null && Object.hasOwnProperty.call(message, "ctlVal"))
                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.ctlVal);
            return writer;
        };

        /**
         * Encodes the specified ControlSPC message, length delimited. Does not implicitly {@link commonmodule.ControlSPC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ControlSPC
         * @static
         * @param {commonmodule.IControlSPC} message ControlSPC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlSPC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ControlSPC message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ControlSPC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ControlSPC} ControlSPC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlSPC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ControlSPC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ctlVal = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ControlSPC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ControlSPC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ControlSPC} ControlSPC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlSPC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ControlSPC message.
         * @function verify
         * @memberof commonmodule.ControlSPC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ControlSPC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ctlVal != null && message.hasOwnProperty("ctlVal"))
                if (typeof message.ctlVal !== "boolean")
                    return "ctlVal: boolean expected";
            return null;
        };

        /**
         * Creates a ControlSPC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ControlSPC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ControlSPC} ControlSPC
         */
        ControlSPC.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ControlSPC)
                return object;
            var message = new $root.commonmodule.ControlSPC();
            if (object.ctlVal != null)
                message.ctlVal = Boolean(object.ctlVal);
            return message;
        };

        /**
         * Creates a plain object from a ControlSPC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ControlSPC
         * @static
         * @param {commonmodule.ControlSPC} message ControlSPC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ControlSPC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ctlVal = false;
            if (message.ctlVal != null && message.hasOwnProperty("ctlVal"))
                object.ctlVal = message.ctlVal;
            return object;
        };

        /**
         * Converts this ControlSPC to JSON.
         * @function toJSON
         * @memberof commonmodule.ControlSPC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ControlSPC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ControlSPC;
    })();

    commonmodule.ControlValue = (function() {

        /**
         * Properties of a ControlValue.
         * @memberof commonmodule
         * @interface IControlValue
         * @property {commonmodule.IIdentifiedObject|null} [identifiedObject] ControlValue identifiedObject
         * @property {google.protobuf.IBoolValue|null} [modBlk] ControlValue modBlk
         */

        /**
         * Constructs a new ControlValue.
         * @memberof commonmodule
         * @classdesc Represents a ControlValue.
         * @implements IControlValue
         * @constructor
         * @param {commonmodule.IControlValue=} [properties] Properties to set
         */
        function ControlValue(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ControlValue identifiedObject.
         * @member {commonmodule.IIdentifiedObject|null|undefined} identifiedObject
         * @memberof commonmodule.ControlValue
         * @instance
         */
        ControlValue.prototype.identifiedObject = null;

        /**
         * ControlValue modBlk.
         * @member {google.protobuf.IBoolValue|null|undefined} modBlk
         * @memberof commonmodule.ControlValue
         * @instance
         */
        ControlValue.prototype.modBlk = null;

        /**
         * Creates a new ControlValue instance using the specified properties.
         * @function create
         * @memberof commonmodule.ControlValue
         * @static
         * @param {commonmodule.IControlValue=} [properties] Properties to set
         * @returns {commonmodule.ControlValue} ControlValue instance
         */
        ControlValue.create = function create(properties) {
            return new ControlValue(properties);
        };

        /**
         * Encodes the specified ControlValue message. Does not implicitly {@link commonmodule.ControlValue.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ControlValue
         * @static
         * @param {commonmodule.IControlValue} message ControlValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlValue.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.identifiedObject != null && Object.hasOwnProperty.call(message, "identifiedObject"))
                $root.commonmodule.IdentifiedObject.encode(message.identifiedObject, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.modBlk != null && Object.hasOwnProperty.call(message, "modBlk"))
                $root.google.protobuf.BoolValue.encode(message.modBlk, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ControlValue message, length delimited. Does not implicitly {@link commonmodule.ControlValue.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ControlValue
         * @static
         * @param {commonmodule.IControlValue} message ControlValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ControlValue.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ControlValue message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ControlValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ControlValue} ControlValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlValue.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ControlValue();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.identifiedObject = $root.commonmodule.IdentifiedObject.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.modBlk = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ControlValue message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ControlValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ControlValue} ControlValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ControlValue.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ControlValue message.
         * @function verify
         * @memberof commonmodule.ControlValue
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ControlValue.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject")) {
                var error = $root.commonmodule.IdentifiedObject.verify(message.identifiedObject);
                if (error)
                    return "identifiedObject." + error;
            }
            if (message.modBlk != null && message.hasOwnProperty("modBlk")) {
                var error = $root.google.protobuf.BoolValue.verify(message.modBlk);
                if (error)
                    return "modBlk." + error;
            }
            return null;
        };

        /**
         * Creates a ControlValue message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ControlValue
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ControlValue} ControlValue
         */
        ControlValue.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ControlValue)
                return object;
            var message = new $root.commonmodule.ControlValue();
            if (object.identifiedObject != null) {
                if (typeof object.identifiedObject !== "object")
                    throw TypeError(".commonmodule.ControlValue.identifiedObject: object expected");
                message.identifiedObject = $root.commonmodule.IdentifiedObject.fromObject(object.identifiedObject);
            }
            if (object.modBlk != null) {
                if (typeof object.modBlk !== "object")
                    throw TypeError(".commonmodule.ControlValue.modBlk: object expected");
                message.modBlk = $root.google.protobuf.BoolValue.fromObject(object.modBlk);
            }
            return message;
        };

        /**
         * Creates a plain object from a ControlValue message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ControlValue
         * @static
         * @param {commonmodule.ControlValue} message ControlValue
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ControlValue.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.identifiedObject = null;
                object.modBlk = null;
            }
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject"))
                object.identifiedObject = $root.commonmodule.IdentifiedObject.toObject(message.identifiedObject, options);
            if (message.modBlk != null && message.hasOwnProperty("modBlk"))
                object.modBlk = $root.google.protobuf.BoolValue.toObject(message.modBlk, options);
            return object;
        };

        /**
         * Converts this ControlValue to JSON.
         * @function toJSON
         * @memberof commonmodule.ControlValue
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ControlValue.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ControlValue;
    })();

    commonmodule.DateTimeInterval = (function() {

        /**
         * Properties of a DateTimeInterval.
         * @memberof commonmodule
         * @interface IDateTimeInterval
         * @property {google.protobuf.IInt64Value|null} [end] DateTimeInterval end
         * @property {google.protobuf.IInt64Value|null} [start] DateTimeInterval start
         */

        /**
         * Constructs a new DateTimeInterval.
         * @memberof commonmodule
         * @classdesc Represents a DateTimeInterval.
         * @implements IDateTimeInterval
         * @constructor
         * @param {commonmodule.IDateTimeInterval=} [properties] Properties to set
         */
        function DateTimeInterval(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DateTimeInterval end.
         * @member {google.protobuf.IInt64Value|null|undefined} end
         * @memberof commonmodule.DateTimeInterval
         * @instance
         */
        DateTimeInterval.prototype.end = null;

        /**
         * DateTimeInterval start.
         * @member {google.protobuf.IInt64Value|null|undefined} start
         * @memberof commonmodule.DateTimeInterval
         * @instance
         */
        DateTimeInterval.prototype.start = null;

        /**
         * Creates a new DateTimeInterval instance using the specified properties.
         * @function create
         * @memberof commonmodule.DateTimeInterval
         * @static
         * @param {commonmodule.IDateTimeInterval=} [properties] Properties to set
         * @returns {commonmodule.DateTimeInterval} DateTimeInterval instance
         */
        DateTimeInterval.create = function create(properties) {
            return new DateTimeInterval(properties);
        };

        /**
         * Encodes the specified DateTimeInterval message. Does not implicitly {@link commonmodule.DateTimeInterval.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.DateTimeInterval
         * @static
         * @param {commonmodule.IDateTimeInterval} message DateTimeInterval message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DateTimeInterval.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                $root.google.protobuf.Int64Value.encode(message.end, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                $root.google.protobuf.Int64Value.encode(message.start, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified DateTimeInterval message, length delimited. Does not implicitly {@link commonmodule.DateTimeInterval.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.DateTimeInterval
         * @static
         * @param {commonmodule.IDateTimeInterval} message DateTimeInterval message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DateTimeInterval.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DateTimeInterval message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.DateTimeInterval
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.DateTimeInterval} DateTimeInterval
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DateTimeInterval.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.DateTimeInterval();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.end = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.start = $root.google.protobuf.Int64Value.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DateTimeInterval message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.DateTimeInterval
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.DateTimeInterval} DateTimeInterval
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DateTimeInterval.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DateTimeInterval message.
         * @function verify
         * @memberof commonmodule.DateTimeInterval
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DateTimeInterval.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.end != null && message.hasOwnProperty("end")) {
                var error = $root.google.protobuf.Int64Value.verify(message.end);
                if (error)
                    return "end." + error;
            }
            if (message.start != null && message.hasOwnProperty("start")) {
                var error = $root.google.protobuf.Int64Value.verify(message.start);
                if (error)
                    return "start." + error;
            }
            return null;
        };

        /**
         * Creates a DateTimeInterval message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.DateTimeInterval
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.DateTimeInterval} DateTimeInterval
         */
        DateTimeInterval.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.DateTimeInterval)
                return object;
            var message = new $root.commonmodule.DateTimeInterval();
            if (object.end != null) {
                if (typeof object.end !== "object")
                    throw TypeError(".commonmodule.DateTimeInterval.end: object expected");
                message.end = $root.google.protobuf.Int64Value.fromObject(object.end);
            }
            if (object.start != null) {
                if (typeof object.start !== "object")
                    throw TypeError(".commonmodule.DateTimeInterval.start: object expected");
                message.start = $root.google.protobuf.Int64Value.fromObject(object.start);
            }
            return message;
        };

        /**
         * Creates a plain object from a DateTimeInterval message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.DateTimeInterval
         * @static
         * @param {commonmodule.DateTimeInterval} message DateTimeInterval
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DateTimeInterval.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.end = null;
                object.start = null;
            }
            if (message.end != null && message.hasOwnProperty("end"))
                object.end = $root.google.protobuf.Int64Value.toObject(message.end, options);
            if (message.start != null && message.hasOwnProperty("start"))
                object.start = $root.google.protobuf.Int64Value.toObject(message.start, options);
            return object;
        };

        /**
         * Converts this DateTimeInterval to JSON.
         * @function toJSON
         * @memberof commonmodule.DateTimeInterval
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DateTimeInterval.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DateTimeInterval;
    })();

    commonmodule.DEL = (function() {

        /**
         * Properties of a DEL.
         * @memberof commonmodule
         * @interface IDEL
         * @property {commonmodule.ICMV|null} [phsAB] DEL phsAB
         * @property {commonmodule.ICMV|null} [phsBC] DEL phsBC
         * @property {commonmodule.ICMV|null} [phsCA] DEL phsCA
         */

        /**
         * Constructs a new DEL.
         * @memberof commonmodule
         * @classdesc Represents a DEL.
         * @implements IDEL
         * @constructor
         * @param {commonmodule.IDEL=} [properties] Properties to set
         */
        function DEL(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DEL phsAB.
         * @member {commonmodule.ICMV|null|undefined} phsAB
         * @memberof commonmodule.DEL
         * @instance
         */
        DEL.prototype.phsAB = null;

        /**
         * DEL phsBC.
         * @member {commonmodule.ICMV|null|undefined} phsBC
         * @memberof commonmodule.DEL
         * @instance
         */
        DEL.prototype.phsBC = null;

        /**
         * DEL phsCA.
         * @member {commonmodule.ICMV|null|undefined} phsCA
         * @memberof commonmodule.DEL
         * @instance
         */
        DEL.prototype.phsCA = null;

        /**
         * Creates a new DEL instance using the specified properties.
         * @function create
         * @memberof commonmodule.DEL
         * @static
         * @param {commonmodule.IDEL=} [properties] Properties to set
         * @returns {commonmodule.DEL} DEL instance
         */
        DEL.create = function create(properties) {
            return new DEL(properties);
        };

        /**
         * Encodes the specified DEL message. Does not implicitly {@link commonmodule.DEL.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.DEL
         * @static
         * @param {commonmodule.IDEL} message DEL message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DEL.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.phsAB != null && Object.hasOwnProperty.call(message, "phsAB"))
                $root.commonmodule.CMV.encode(message.phsAB, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.phsBC != null && Object.hasOwnProperty.call(message, "phsBC"))
                $root.commonmodule.CMV.encode(message.phsBC, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.phsCA != null && Object.hasOwnProperty.call(message, "phsCA"))
                $root.commonmodule.CMV.encode(message.phsCA, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified DEL message, length delimited. Does not implicitly {@link commonmodule.DEL.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.DEL
         * @static
         * @param {commonmodule.IDEL} message DEL message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DEL.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DEL message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.DEL
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.DEL} DEL
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DEL.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.DEL();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.phsAB = $root.commonmodule.CMV.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.phsBC = $root.commonmodule.CMV.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.phsCA = $root.commonmodule.CMV.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DEL message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.DEL
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.DEL} DEL
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DEL.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DEL message.
         * @function verify
         * @memberof commonmodule.DEL
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DEL.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.phsAB != null && message.hasOwnProperty("phsAB")) {
                var error = $root.commonmodule.CMV.verify(message.phsAB);
                if (error)
                    return "phsAB." + error;
            }
            if (message.phsBC != null && message.hasOwnProperty("phsBC")) {
                var error = $root.commonmodule.CMV.verify(message.phsBC);
                if (error)
                    return "phsBC." + error;
            }
            if (message.phsCA != null && message.hasOwnProperty("phsCA")) {
                var error = $root.commonmodule.CMV.verify(message.phsCA);
                if (error)
                    return "phsCA." + error;
            }
            return null;
        };

        /**
         * Creates a DEL message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.DEL
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.DEL} DEL
         */
        DEL.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.DEL)
                return object;
            var message = new $root.commonmodule.DEL();
            if (object.phsAB != null) {
                if (typeof object.phsAB !== "object")
                    throw TypeError(".commonmodule.DEL.phsAB: object expected");
                message.phsAB = $root.commonmodule.CMV.fromObject(object.phsAB);
            }
            if (object.phsBC != null) {
                if (typeof object.phsBC !== "object")
                    throw TypeError(".commonmodule.DEL.phsBC: object expected");
                message.phsBC = $root.commonmodule.CMV.fromObject(object.phsBC);
            }
            if (object.phsCA != null) {
                if (typeof object.phsCA !== "object")
                    throw TypeError(".commonmodule.DEL.phsCA: object expected");
                message.phsCA = $root.commonmodule.CMV.fromObject(object.phsCA);
            }
            return message;
        };

        /**
         * Creates a plain object from a DEL message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.DEL
         * @static
         * @param {commonmodule.DEL} message DEL
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DEL.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.phsAB = null;
                object.phsBC = null;
                object.phsCA = null;
            }
            if (message.phsAB != null && message.hasOwnProperty("phsAB"))
                object.phsAB = $root.commonmodule.CMV.toObject(message.phsAB, options);
            if (message.phsBC != null && message.hasOwnProperty("phsBC"))
                object.phsBC = $root.commonmodule.CMV.toObject(message.phsBC, options);
            if (message.phsCA != null && message.hasOwnProperty("phsCA"))
                object.phsCA = $root.commonmodule.CMV.toObject(message.phsCA, options);
            return object;
        };

        /**
         * Converts this DEL to JSON.
         * @function toJSON
         * @memberof commonmodule.DEL
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DEL.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DEL;
    })();

    commonmodule.DeviceControl = (function() {

        /**
         * Properties of a DeviceControl.
         * @memberof commonmodule
         * @interface IDeviceControl
         * @property {commonmodule.ILogicalNodeForControl|null} [logicalNodeForControl] DeviceControl logicalNodeForControl
         * @property {commonmodule.IControlSPC|null} [ANSI79LO] DeviceControl ANSI79LO
         * @property {commonmodule.IControlSPC|null} [FaultLatch] DeviceControl FaultLatch
         * @property {commonmodule.IControlSPC|null} [HotLineTag] DeviceControl HotLineTag
         * @property {commonmodule.IControlSPC|null} [IEDTrouble] DeviceControl IEDTrouble
         * @property {commonmodule.IControlSPC|null} [RecloseEnabled] DeviceControl RecloseEnabled
         */

        /**
         * Constructs a new DeviceControl.
         * @memberof commonmodule
         * @classdesc Represents a DeviceControl.
         * @implements IDeviceControl
         * @constructor
         * @param {commonmodule.IDeviceControl=} [properties] Properties to set
         */
        function DeviceControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DeviceControl logicalNodeForControl.
         * @member {commonmodule.ILogicalNodeForControl|null|undefined} logicalNodeForControl
         * @memberof commonmodule.DeviceControl
         * @instance
         */
        DeviceControl.prototype.logicalNodeForControl = null;

        /**
         * DeviceControl ANSI79LO.
         * @member {commonmodule.IControlSPC|null|undefined} ANSI79LO
         * @memberof commonmodule.DeviceControl
         * @instance
         */
        DeviceControl.prototype.ANSI79LO = null;

        /**
         * DeviceControl FaultLatch.
         * @member {commonmodule.IControlSPC|null|undefined} FaultLatch
         * @memberof commonmodule.DeviceControl
         * @instance
         */
        DeviceControl.prototype.FaultLatch = null;

        /**
         * DeviceControl HotLineTag.
         * @member {commonmodule.IControlSPC|null|undefined} HotLineTag
         * @memberof commonmodule.DeviceControl
         * @instance
         */
        DeviceControl.prototype.HotLineTag = null;

        /**
         * DeviceControl IEDTrouble.
         * @member {commonmodule.IControlSPC|null|undefined} IEDTrouble
         * @memberof commonmodule.DeviceControl
         * @instance
         */
        DeviceControl.prototype.IEDTrouble = null;

        /**
         * DeviceControl RecloseEnabled.
         * @member {commonmodule.IControlSPC|null|undefined} RecloseEnabled
         * @memberof commonmodule.DeviceControl
         * @instance
         */
        DeviceControl.prototype.RecloseEnabled = null;

        /**
         * Creates a new DeviceControl instance using the specified properties.
         * @function create
         * @memberof commonmodule.DeviceControl
         * @static
         * @param {commonmodule.IDeviceControl=} [properties] Properties to set
         * @returns {commonmodule.DeviceControl} DeviceControl instance
         */
        DeviceControl.create = function create(properties) {
            return new DeviceControl(properties);
        };

        /**
         * Encodes the specified DeviceControl message. Does not implicitly {@link commonmodule.DeviceControl.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.DeviceControl
         * @static
         * @param {commonmodule.IDeviceControl} message DeviceControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeviceControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForControl != null && Object.hasOwnProperty.call(message, "logicalNodeForControl"))
                $root.commonmodule.LogicalNodeForControl.encode(message.logicalNodeForControl, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ANSI79LO != null && Object.hasOwnProperty.call(message, "ANSI79LO"))
                $root.commonmodule.ControlSPC.encode(message.ANSI79LO, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.FaultLatch != null && Object.hasOwnProperty.call(message, "FaultLatch"))
                $root.commonmodule.ControlSPC.encode(message.FaultLatch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.HotLineTag != null && Object.hasOwnProperty.call(message, "HotLineTag"))
                $root.commonmodule.ControlSPC.encode(message.HotLineTag, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.IEDTrouble != null && Object.hasOwnProperty.call(message, "IEDTrouble"))
                $root.commonmodule.ControlSPC.encode(message.IEDTrouble, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.RecloseEnabled != null && Object.hasOwnProperty.call(message, "RecloseEnabled"))
                $root.commonmodule.ControlSPC.encode(message.RecloseEnabled, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified DeviceControl message, length delimited. Does not implicitly {@link commonmodule.DeviceControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.DeviceControl
         * @static
         * @param {commonmodule.IDeviceControl} message DeviceControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeviceControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DeviceControl message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.DeviceControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.DeviceControl} DeviceControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeviceControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.DeviceControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ANSI79LO = $root.commonmodule.ControlSPC.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.FaultLatch = $root.commonmodule.ControlSPC.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.HotLineTag = $root.commonmodule.ControlSPC.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.IEDTrouble = $root.commonmodule.ControlSPC.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.RecloseEnabled = $root.commonmodule.ControlSPC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DeviceControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.DeviceControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.DeviceControl} DeviceControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeviceControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DeviceControl message.
         * @function verify
         * @memberof commonmodule.DeviceControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeviceControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl")) {
                var error = $root.commonmodule.LogicalNodeForControl.verify(message.logicalNodeForControl);
                if (error)
                    return "logicalNodeForControl." + error;
            }
            if (message.ANSI79LO != null && message.hasOwnProperty("ANSI79LO")) {
                var error = $root.commonmodule.ControlSPC.verify(message.ANSI79LO);
                if (error)
                    return "ANSI79LO." + error;
            }
            if (message.FaultLatch != null && message.hasOwnProperty("FaultLatch")) {
                var error = $root.commonmodule.ControlSPC.verify(message.FaultLatch);
                if (error)
                    return "FaultLatch." + error;
            }
            if (message.HotLineTag != null && message.hasOwnProperty("HotLineTag")) {
                var error = $root.commonmodule.ControlSPC.verify(message.HotLineTag);
                if (error)
                    return "HotLineTag." + error;
            }
            if (message.IEDTrouble != null && message.hasOwnProperty("IEDTrouble")) {
                var error = $root.commonmodule.ControlSPC.verify(message.IEDTrouble);
                if (error)
                    return "IEDTrouble." + error;
            }
            if (message.RecloseEnabled != null && message.hasOwnProperty("RecloseEnabled")) {
                var error = $root.commonmodule.ControlSPC.verify(message.RecloseEnabled);
                if (error)
                    return "RecloseEnabled." + error;
            }
            return null;
        };

        /**
         * Creates a DeviceControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.DeviceControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.DeviceControl} DeviceControl
         */
        DeviceControl.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.DeviceControl)
                return object;
            var message = new $root.commonmodule.DeviceControl();
            if (object.logicalNodeForControl != null) {
                if (typeof object.logicalNodeForControl !== "object")
                    throw TypeError(".commonmodule.DeviceControl.logicalNodeForControl: object expected");
                message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.fromObject(object.logicalNodeForControl);
            }
            if (object.ANSI79LO != null) {
                if (typeof object.ANSI79LO !== "object")
                    throw TypeError(".commonmodule.DeviceControl.ANSI79LO: object expected");
                message.ANSI79LO = $root.commonmodule.ControlSPC.fromObject(object.ANSI79LO);
            }
            if (object.FaultLatch != null) {
                if (typeof object.FaultLatch !== "object")
                    throw TypeError(".commonmodule.DeviceControl.FaultLatch: object expected");
                message.FaultLatch = $root.commonmodule.ControlSPC.fromObject(object.FaultLatch);
            }
            if (object.HotLineTag != null) {
                if (typeof object.HotLineTag !== "object")
                    throw TypeError(".commonmodule.DeviceControl.HotLineTag: object expected");
                message.HotLineTag = $root.commonmodule.ControlSPC.fromObject(object.HotLineTag);
            }
            if (object.IEDTrouble != null) {
                if (typeof object.IEDTrouble !== "object")
                    throw TypeError(".commonmodule.DeviceControl.IEDTrouble: object expected");
                message.IEDTrouble = $root.commonmodule.ControlSPC.fromObject(object.IEDTrouble);
            }
            if (object.RecloseEnabled != null) {
                if (typeof object.RecloseEnabled !== "object")
                    throw TypeError(".commonmodule.DeviceControl.RecloseEnabled: object expected");
                message.RecloseEnabled = $root.commonmodule.ControlSPC.fromObject(object.RecloseEnabled);
            }
            return message;
        };

        /**
         * Creates a plain object from a DeviceControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.DeviceControl
         * @static
         * @param {commonmodule.DeviceControl} message DeviceControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeviceControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForControl = null;
                object.ANSI79LO = null;
                object.FaultLatch = null;
                object.HotLineTag = null;
                object.IEDTrouble = null;
                object.RecloseEnabled = null;
            }
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl"))
                object.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.toObject(message.logicalNodeForControl, options);
            if (message.ANSI79LO != null && message.hasOwnProperty("ANSI79LO"))
                object.ANSI79LO = $root.commonmodule.ControlSPC.toObject(message.ANSI79LO, options);
            if (message.FaultLatch != null && message.hasOwnProperty("FaultLatch"))
                object.FaultLatch = $root.commonmodule.ControlSPC.toObject(message.FaultLatch, options);
            if (message.HotLineTag != null && message.hasOwnProperty("HotLineTag"))
                object.HotLineTag = $root.commonmodule.ControlSPC.toObject(message.HotLineTag, options);
            if (message.IEDTrouble != null && message.hasOwnProperty("IEDTrouble"))
                object.IEDTrouble = $root.commonmodule.ControlSPC.toObject(message.IEDTrouble, options);
            if (message.RecloseEnabled != null && message.hasOwnProperty("RecloseEnabled"))
                object.RecloseEnabled = $root.commonmodule.ControlSPC.toObject(message.RecloseEnabled, options);
            return object;
        };

        /**
         * Converts this DeviceControl to JSON.
         * @function toJSON
         * @memberof commonmodule.DeviceControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeviceControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DeviceControl;
    })();

    /**
     * BehaviourModeKind enum.
     * @name commonmodule.BehaviourModeKind
     * @enum {number}
     * @property {number} BehaviourModeKind_UNDEFINED=0 BehaviourModeKind_UNDEFINED value
     * @property {number} BehaviourModeKind_on=1 BehaviourModeKind_on value
     * @property {number} BehaviourModeKind_blocked=2 BehaviourModeKind_blocked value
     * @property {number} BehaviourModeKind_test=3 BehaviourModeKind_test value
     * @property {number} BehaviourModeKind_test_blocked=4 BehaviourModeKind_test_blocked value
     * @property {number} BehaviourModeKind_off=5 BehaviourModeKind_off value
     */
    commonmodule.BehaviourModeKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "BehaviourModeKind_UNDEFINED"] = 0;
        values[valuesById[1] = "BehaviourModeKind_on"] = 1;
        values[valuesById[2] = "BehaviourModeKind_blocked"] = 2;
        values[valuesById[3] = "BehaviourModeKind_test"] = 3;
        values[valuesById[4] = "BehaviourModeKind_test_blocked"] = 4;
        values[valuesById[5] = "BehaviourModeKind_off"] = 5;
        return values;
    })();

    commonmodule.Optional_BehaviourModeKind = (function() {

        /**
         * Properties of an Optional_BehaviourModeKind.
         * @memberof commonmodule
         * @interface IOptional_BehaviourModeKind
         * @property {commonmodule.BehaviourModeKind|null} [value] Optional_BehaviourModeKind value
         */

        /**
         * Constructs a new Optional_BehaviourModeKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_BehaviourModeKind.
         * @implements IOptional_BehaviourModeKind
         * @constructor
         * @param {commonmodule.IOptional_BehaviourModeKind=} [properties] Properties to set
         */
        function Optional_BehaviourModeKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_BehaviourModeKind value.
         * @member {commonmodule.BehaviourModeKind} value
         * @memberof commonmodule.Optional_BehaviourModeKind
         * @instance
         */
        Optional_BehaviourModeKind.prototype.value = 0;

        /**
         * Creates a new Optional_BehaviourModeKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_BehaviourModeKind
         * @static
         * @param {commonmodule.IOptional_BehaviourModeKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_BehaviourModeKind} Optional_BehaviourModeKind instance
         */
        Optional_BehaviourModeKind.create = function create(properties) {
            return new Optional_BehaviourModeKind(properties);
        };

        /**
         * Encodes the specified Optional_BehaviourModeKind message. Does not implicitly {@link commonmodule.Optional_BehaviourModeKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_BehaviourModeKind
         * @static
         * @param {commonmodule.IOptional_BehaviourModeKind} message Optional_BehaviourModeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_BehaviourModeKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_BehaviourModeKind message, length delimited. Does not implicitly {@link commonmodule.Optional_BehaviourModeKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_BehaviourModeKind
         * @static
         * @param {commonmodule.IOptional_BehaviourModeKind} message Optional_BehaviourModeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_BehaviourModeKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_BehaviourModeKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_BehaviourModeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_BehaviourModeKind} Optional_BehaviourModeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_BehaviourModeKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_BehaviourModeKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_BehaviourModeKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_BehaviourModeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_BehaviourModeKind} Optional_BehaviourModeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_BehaviourModeKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_BehaviourModeKind message.
         * @function verify
         * @memberof commonmodule.Optional_BehaviourModeKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_BehaviourModeKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_BehaviourModeKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_BehaviourModeKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_BehaviourModeKind} Optional_BehaviourModeKind
         */
        Optional_BehaviourModeKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_BehaviourModeKind)
                return object;
            var message = new $root.commonmodule.Optional_BehaviourModeKind();
            switch (object.value) {
            case "BehaviourModeKind_UNDEFINED":
            case 0:
                message.value = 0;
                break;
            case "BehaviourModeKind_on":
            case 1:
                message.value = 1;
                break;
            case "BehaviourModeKind_blocked":
            case 2:
                message.value = 2;
                break;
            case "BehaviourModeKind_test":
            case 3:
                message.value = 3;
                break;
            case "BehaviourModeKind_test_blocked":
            case 4:
                message.value = 4;
                break;
            case "BehaviourModeKind_off":
            case 5:
                message.value = 5;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_BehaviourModeKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_BehaviourModeKind
         * @static
         * @param {commonmodule.Optional_BehaviourModeKind} message Optional_BehaviourModeKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_BehaviourModeKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "BehaviourModeKind_UNDEFINED" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.BehaviourModeKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_BehaviourModeKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_BehaviourModeKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_BehaviourModeKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_BehaviourModeKind;
    })();

    commonmodule.ENS_BehaviourModeKind = (function() {

        /**
         * Properties of a ENS_BehaviourModeKind.
         * @memberof commonmodule
         * @interface IENS_BehaviourModeKind
         * @property {commonmodule.IQuality|null} [q] ENS_BehaviourModeKind q
         * @property {commonmodule.BehaviourModeKind|null} [stVal] ENS_BehaviourModeKind stVal
         * @property {commonmodule.ITimestamp|null} [t] ENS_BehaviourModeKind t
         */

        /**
         * Constructs a new ENS_BehaviourModeKind.
         * @memberof commonmodule
         * @classdesc Represents a ENS_BehaviourModeKind.
         * @implements IENS_BehaviourModeKind
         * @constructor
         * @param {commonmodule.IENS_BehaviourModeKind=} [properties] Properties to set
         */
        function ENS_BehaviourModeKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ENS_BehaviourModeKind q.
         * @member {commonmodule.IQuality|null|undefined} q
         * @memberof commonmodule.ENS_BehaviourModeKind
         * @instance
         */
        ENS_BehaviourModeKind.prototype.q = null;

        /**
         * ENS_BehaviourModeKind stVal.
         * @member {commonmodule.BehaviourModeKind} stVal
         * @memberof commonmodule.ENS_BehaviourModeKind
         * @instance
         */
        ENS_BehaviourModeKind.prototype.stVal = 0;

        /**
         * ENS_BehaviourModeKind t.
         * @member {commonmodule.ITimestamp|null|undefined} t
         * @memberof commonmodule.ENS_BehaviourModeKind
         * @instance
         */
        ENS_BehaviourModeKind.prototype.t = null;

        /**
         * Creates a new ENS_BehaviourModeKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.ENS_BehaviourModeKind
         * @static
         * @param {commonmodule.IENS_BehaviourModeKind=} [properties] Properties to set
         * @returns {commonmodule.ENS_BehaviourModeKind} ENS_BehaviourModeKind instance
         */
        ENS_BehaviourModeKind.create = function create(properties) {
            return new ENS_BehaviourModeKind(properties);
        };

        /**
         * Encodes the specified ENS_BehaviourModeKind message. Does not implicitly {@link commonmodule.ENS_BehaviourModeKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ENS_BehaviourModeKind
         * @static
         * @param {commonmodule.IENS_BehaviourModeKind} message ENS_BehaviourModeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENS_BehaviourModeKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.q != null && Object.hasOwnProperty.call(message, "q"))
                $root.commonmodule.Quality.encode(message.q, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.stVal != null && Object.hasOwnProperty.call(message, "stVal"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.stVal);
            if (message.t != null && Object.hasOwnProperty.call(message, "t"))
                $root.commonmodule.Timestamp.encode(message.t, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ENS_BehaviourModeKind message, length delimited. Does not implicitly {@link commonmodule.ENS_BehaviourModeKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ENS_BehaviourModeKind
         * @static
         * @param {commonmodule.IENS_BehaviourModeKind} message ENS_BehaviourModeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENS_BehaviourModeKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ENS_BehaviourModeKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ENS_BehaviourModeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ENS_BehaviourModeKind} ENS_BehaviourModeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENS_BehaviourModeKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ENS_BehaviourModeKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.q = $root.commonmodule.Quality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.stVal = reader.int32();
                    break;
                case 3:
                    message.t = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ENS_BehaviourModeKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ENS_BehaviourModeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ENS_BehaviourModeKind} ENS_BehaviourModeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENS_BehaviourModeKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ENS_BehaviourModeKind message.
         * @function verify
         * @memberof commonmodule.ENS_BehaviourModeKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENS_BehaviourModeKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.q != null && message.hasOwnProperty("q")) {
                var error = $root.commonmodule.Quality.verify(message.q);
                if (error)
                    return "q." + error;
            }
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                switch (message.stVal) {
                default:
                    return "stVal: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            if (message.t != null && message.hasOwnProperty("t")) {
                var error = $root.commonmodule.Timestamp.verify(message.t);
                if (error)
                    return "t." + error;
            }
            return null;
        };

        /**
         * Creates a ENS_BehaviourModeKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ENS_BehaviourModeKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ENS_BehaviourModeKind} ENS_BehaviourModeKind
         */
        ENS_BehaviourModeKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ENS_BehaviourModeKind)
                return object;
            var message = new $root.commonmodule.ENS_BehaviourModeKind();
            if (object.q != null) {
                if (typeof object.q !== "object")
                    throw TypeError(".commonmodule.ENS_BehaviourModeKind.q: object expected");
                message.q = $root.commonmodule.Quality.fromObject(object.q);
            }
            switch (object.stVal) {
            case "BehaviourModeKind_UNDEFINED":
            case 0:
                message.stVal = 0;
                break;
            case "BehaviourModeKind_on":
            case 1:
                message.stVal = 1;
                break;
            case "BehaviourModeKind_blocked":
            case 2:
                message.stVal = 2;
                break;
            case "BehaviourModeKind_test":
            case 3:
                message.stVal = 3;
                break;
            case "BehaviourModeKind_test_blocked":
            case 4:
                message.stVal = 4;
                break;
            case "BehaviourModeKind_off":
            case 5:
                message.stVal = 5;
                break;
            }
            if (object.t != null) {
                if (typeof object.t !== "object")
                    throw TypeError(".commonmodule.ENS_BehaviourModeKind.t: object expected");
                message.t = $root.commonmodule.Timestamp.fromObject(object.t);
            }
            return message;
        };

        /**
         * Creates a plain object from a ENS_BehaviourModeKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ENS_BehaviourModeKind
         * @static
         * @param {commonmodule.ENS_BehaviourModeKind} message ENS_BehaviourModeKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENS_BehaviourModeKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.q = null;
                object.stVal = options.enums === String ? "BehaviourModeKind_UNDEFINED" : 0;
                object.t = null;
            }
            if (message.q != null && message.hasOwnProperty("q"))
                object.q = $root.commonmodule.Quality.toObject(message.q, options);
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                object.stVal = options.enums === String ? $root.commonmodule.BehaviourModeKind[message.stVal] : message.stVal;
            if (message.t != null && message.hasOwnProperty("t"))
                object.t = $root.commonmodule.Timestamp.toObject(message.t, options);
            return object;
        };

        /**
         * Converts this ENS_BehaviourModeKind to JSON.
         * @function toJSON
         * @memberof commonmodule.ENS_BehaviourModeKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENS_BehaviourModeKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ENS_BehaviourModeKind;
    })();

    /**
     * HealthKind enum.
     * @name commonmodule.HealthKind
     * @enum {number}
     * @property {number} HealthKind_none=0 HealthKind_none value
     * @property {number} HealthKind_OK=1 HealthKind_OK value
     * @property {number} HealthKind_Warning=2 HealthKind_Warning value
     * @property {number} HealthKind_Alarm=3 HealthKind_Alarm value
     */
    commonmodule.HealthKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "HealthKind_none"] = 0;
        values[valuesById[1] = "HealthKind_OK"] = 1;
        values[valuesById[2] = "HealthKind_Warning"] = 2;
        values[valuesById[3] = "HealthKind_Alarm"] = 3;
        return values;
    })();

    commonmodule.Optional_HealthKind = (function() {

        /**
         * Properties of an Optional_HealthKind.
         * @memberof commonmodule
         * @interface IOptional_HealthKind
         * @property {commonmodule.HealthKind|null} [value] Optional_HealthKind value
         */

        /**
         * Constructs a new Optional_HealthKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_HealthKind.
         * @implements IOptional_HealthKind
         * @constructor
         * @param {commonmodule.IOptional_HealthKind=} [properties] Properties to set
         */
        function Optional_HealthKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_HealthKind value.
         * @member {commonmodule.HealthKind} value
         * @memberof commonmodule.Optional_HealthKind
         * @instance
         */
        Optional_HealthKind.prototype.value = 0;

        /**
         * Creates a new Optional_HealthKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_HealthKind
         * @static
         * @param {commonmodule.IOptional_HealthKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_HealthKind} Optional_HealthKind instance
         */
        Optional_HealthKind.create = function create(properties) {
            return new Optional_HealthKind(properties);
        };

        /**
         * Encodes the specified Optional_HealthKind message. Does not implicitly {@link commonmodule.Optional_HealthKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_HealthKind
         * @static
         * @param {commonmodule.IOptional_HealthKind} message Optional_HealthKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_HealthKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_HealthKind message, length delimited. Does not implicitly {@link commonmodule.Optional_HealthKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_HealthKind
         * @static
         * @param {commonmodule.IOptional_HealthKind} message Optional_HealthKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_HealthKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_HealthKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_HealthKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_HealthKind} Optional_HealthKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_HealthKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_HealthKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_HealthKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_HealthKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_HealthKind} Optional_HealthKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_HealthKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_HealthKind message.
         * @function verify
         * @memberof commonmodule.Optional_HealthKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_HealthKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_HealthKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_HealthKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_HealthKind} Optional_HealthKind
         */
        Optional_HealthKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_HealthKind)
                return object;
            var message = new $root.commonmodule.Optional_HealthKind();
            switch (object.value) {
            case "HealthKind_none":
            case 0:
                message.value = 0;
                break;
            case "HealthKind_OK":
            case 1:
                message.value = 1;
                break;
            case "HealthKind_Warning":
            case 2:
                message.value = 2;
                break;
            case "HealthKind_Alarm":
            case 3:
                message.value = 3;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_HealthKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_HealthKind
         * @static
         * @param {commonmodule.Optional_HealthKind} message Optional_HealthKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_HealthKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "HealthKind_none" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.HealthKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_HealthKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_HealthKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_HealthKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_HealthKind;
    })();

    commonmodule.ENS_HealthKind = (function() {

        /**
         * Properties of a ENS_HealthKind.
         * @memberof commonmodule
         * @interface IENS_HealthKind
         * @property {google.protobuf.IStringValue|null} [d] ENS_HealthKind d
         * @property {commonmodule.HealthKind|null} [stVal] ENS_HealthKind stVal
         */

        /**
         * Constructs a new ENS_HealthKind.
         * @memberof commonmodule
         * @classdesc Represents a ENS_HealthKind.
         * @implements IENS_HealthKind
         * @constructor
         * @param {commonmodule.IENS_HealthKind=} [properties] Properties to set
         */
        function ENS_HealthKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ENS_HealthKind d.
         * @member {google.protobuf.IStringValue|null|undefined} d
         * @memberof commonmodule.ENS_HealthKind
         * @instance
         */
        ENS_HealthKind.prototype.d = null;

        /**
         * ENS_HealthKind stVal.
         * @member {commonmodule.HealthKind} stVal
         * @memberof commonmodule.ENS_HealthKind
         * @instance
         */
        ENS_HealthKind.prototype.stVal = 0;

        /**
         * Creates a new ENS_HealthKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.ENS_HealthKind
         * @static
         * @param {commonmodule.IENS_HealthKind=} [properties] Properties to set
         * @returns {commonmodule.ENS_HealthKind} ENS_HealthKind instance
         */
        ENS_HealthKind.create = function create(properties) {
            return new ENS_HealthKind(properties);
        };

        /**
         * Encodes the specified ENS_HealthKind message. Does not implicitly {@link commonmodule.ENS_HealthKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ENS_HealthKind
         * @static
         * @param {commonmodule.IENS_HealthKind} message ENS_HealthKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENS_HealthKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.d != null && Object.hasOwnProperty.call(message, "d"))
                $root.google.protobuf.StringValue.encode(message.d, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.stVal != null && Object.hasOwnProperty.call(message, "stVal"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.stVal);
            return writer;
        };

        /**
         * Encodes the specified ENS_HealthKind message, length delimited. Does not implicitly {@link commonmodule.ENS_HealthKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ENS_HealthKind
         * @static
         * @param {commonmodule.IENS_HealthKind} message ENS_HealthKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENS_HealthKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ENS_HealthKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ENS_HealthKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ENS_HealthKind} ENS_HealthKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENS_HealthKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ENS_HealthKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.d = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.stVal = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ENS_HealthKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ENS_HealthKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ENS_HealthKind} ENS_HealthKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENS_HealthKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ENS_HealthKind message.
         * @function verify
         * @memberof commonmodule.ENS_HealthKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENS_HealthKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.d != null && message.hasOwnProperty("d")) {
                var error = $root.google.protobuf.StringValue.verify(message.d);
                if (error)
                    return "d." + error;
            }
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                switch (message.stVal) {
                default:
                    return "stVal: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };

        /**
         * Creates a ENS_HealthKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ENS_HealthKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ENS_HealthKind} ENS_HealthKind
         */
        ENS_HealthKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ENS_HealthKind)
                return object;
            var message = new $root.commonmodule.ENS_HealthKind();
            if (object.d != null) {
                if (typeof object.d !== "object")
                    throw TypeError(".commonmodule.ENS_HealthKind.d: object expected");
                message.d = $root.google.protobuf.StringValue.fromObject(object.d);
            }
            switch (object.stVal) {
            case "HealthKind_none":
            case 0:
                message.stVal = 0;
                break;
            case "HealthKind_OK":
            case 1:
                message.stVal = 1;
                break;
            case "HealthKind_Warning":
            case 2:
                message.stVal = 2;
                break;
            case "HealthKind_Alarm":
            case 3:
                message.stVal = 3;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a ENS_HealthKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ENS_HealthKind
         * @static
         * @param {commonmodule.ENS_HealthKind} message ENS_HealthKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENS_HealthKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.d = null;
                object.stVal = options.enums === String ? "HealthKind_none" : 0;
            }
            if (message.d != null && message.hasOwnProperty("d"))
                object.d = $root.google.protobuf.StringValue.toObject(message.d, options);
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                object.stVal = options.enums === String ? $root.commonmodule.HealthKind[message.stVal] : message.stVal;
            return object;
        };

        /**
         * Converts this ENS_HealthKind to JSON.
         * @function toJSON
         * @memberof commonmodule.ENS_HealthKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENS_HealthKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ENS_HealthKind;
    })();

    commonmodule.LogicalNodeForEventAndStatus = (function() {

        /**
         * Properties of a LogicalNodeForEventAndStatus.
         * @memberof commonmodule
         * @interface ILogicalNodeForEventAndStatus
         * @property {commonmodule.ILogicalNode|null} [logicalNode] LogicalNodeForEventAndStatus logicalNode
         * @property {commonmodule.IENS_BehaviourModeKind|null} [Beh] LogicalNodeForEventAndStatus Beh
         * @property {commonmodule.IENS_HealthKind|null} [EEHealth] LogicalNodeForEventAndStatus EEHealth
         */

        /**
         * Constructs a new LogicalNodeForEventAndStatus.
         * @memberof commonmodule
         * @classdesc Represents a LogicalNodeForEventAndStatus.
         * @implements ILogicalNodeForEventAndStatus
         * @constructor
         * @param {commonmodule.ILogicalNodeForEventAndStatus=} [properties] Properties to set
         */
        function LogicalNodeForEventAndStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LogicalNodeForEventAndStatus logicalNode.
         * @member {commonmodule.ILogicalNode|null|undefined} logicalNode
         * @memberof commonmodule.LogicalNodeForEventAndStatus
         * @instance
         */
        LogicalNodeForEventAndStatus.prototype.logicalNode = null;

        /**
         * LogicalNodeForEventAndStatus Beh.
         * @member {commonmodule.IENS_BehaviourModeKind|null|undefined} Beh
         * @memberof commonmodule.LogicalNodeForEventAndStatus
         * @instance
         */
        LogicalNodeForEventAndStatus.prototype.Beh = null;

        /**
         * LogicalNodeForEventAndStatus EEHealth.
         * @member {commonmodule.IENS_HealthKind|null|undefined} EEHealth
         * @memberof commonmodule.LogicalNodeForEventAndStatus
         * @instance
         */
        LogicalNodeForEventAndStatus.prototype.EEHealth = null;

        /**
         * Creates a new LogicalNodeForEventAndStatus instance using the specified properties.
         * @function create
         * @memberof commonmodule.LogicalNodeForEventAndStatus
         * @static
         * @param {commonmodule.ILogicalNodeForEventAndStatus=} [properties] Properties to set
         * @returns {commonmodule.LogicalNodeForEventAndStatus} LogicalNodeForEventAndStatus instance
         */
        LogicalNodeForEventAndStatus.create = function create(properties) {
            return new LogicalNodeForEventAndStatus(properties);
        };

        /**
         * Encodes the specified LogicalNodeForEventAndStatus message. Does not implicitly {@link commonmodule.LogicalNodeForEventAndStatus.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.LogicalNodeForEventAndStatus
         * @static
         * @param {commonmodule.ILogicalNodeForEventAndStatus} message LogicalNodeForEventAndStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LogicalNodeForEventAndStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNode != null && Object.hasOwnProperty.call(message, "logicalNode"))
                $root.commonmodule.LogicalNode.encode(message.logicalNode, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.Beh != null && Object.hasOwnProperty.call(message, "Beh"))
                $root.commonmodule.ENS_BehaviourModeKind.encode(message.Beh, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.EEHealth != null && Object.hasOwnProperty.call(message, "EEHealth"))
                $root.commonmodule.ENS_HealthKind.encode(message.EEHealth, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LogicalNodeForEventAndStatus message, length delimited. Does not implicitly {@link commonmodule.LogicalNodeForEventAndStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.LogicalNodeForEventAndStatus
         * @static
         * @param {commonmodule.ILogicalNodeForEventAndStatus} message LogicalNodeForEventAndStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LogicalNodeForEventAndStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LogicalNodeForEventAndStatus message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.LogicalNodeForEventAndStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.LogicalNodeForEventAndStatus} LogicalNodeForEventAndStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LogicalNodeForEventAndStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.LogicalNodeForEventAndStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNode = $root.commonmodule.LogicalNode.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.Beh = $root.commonmodule.ENS_BehaviourModeKind.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.EEHealth = $root.commonmodule.ENS_HealthKind.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LogicalNodeForEventAndStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.LogicalNodeForEventAndStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.LogicalNodeForEventAndStatus} LogicalNodeForEventAndStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LogicalNodeForEventAndStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LogicalNodeForEventAndStatus message.
         * @function verify
         * @memberof commonmodule.LogicalNodeForEventAndStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LogicalNodeForEventAndStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode")) {
                var error = $root.commonmodule.LogicalNode.verify(message.logicalNode);
                if (error)
                    return "logicalNode." + error;
            }
            if (message.Beh != null && message.hasOwnProperty("Beh")) {
                var error = $root.commonmodule.ENS_BehaviourModeKind.verify(message.Beh);
                if (error)
                    return "Beh." + error;
            }
            if (message.EEHealth != null && message.hasOwnProperty("EEHealth")) {
                var error = $root.commonmodule.ENS_HealthKind.verify(message.EEHealth);
                if (error)
                    return "EEHealth." + error;
            }
            return null;
        };

        /**
         * Creates a LogicalNodeForEventAndStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.LogicalNodeForEventAndStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.LogicalNodeForEventAndStatus} LogicalNodeForEventAndStatus
         */
        LogicalNodeForEventAndStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.LogicalNodeForEventAndStatus)
                return object;
            var message = new $root.commonmodule.LogicalNodeForEventAndStatus();
            if (object.logicalNode != null) {
                if (typeof object.logicalNode !== "object")
                    throw TypeError(".commonmodule.LogicalNodeForEventAndStatus.logicalNode: object expected");
                message.logicalNode = $root.commonmodule.LogicalNode.fromObject(object.logicalNode);
            }
            if (object.Beh != null) {
                if (typeof object.Beh !== "object")
                    throw TypeError(".commonmodule.LogicalNodeForEventAndStatus.Beh: object expected");
                message.Beh = $root.commonmodule.ENS_BehaviourModeKind.fromObject(object.Beh);
            }
            if (object.EEHealth != null) {
                if (typeof object.EEHealth !== "object")
                    throw TypeError(".commonmodule.LogicalNodeForEventAndStatus.EEHealth: object expected");
                message.EEHealth = $root.commonmodule.ENS_HealthKind.fromObject(object.EEHealth);
            }
            return message;
        };

        /**
         * Creates a plain object from a LogicalNodeForEventAndStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.LogicalNodeForEventAndStatus
         * @static
         * @param {commonmodule.LogicalNodeForEventAndStatus} message LogicalNodeForEventAndStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LogicalNodeForEventAndStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNode = null;
                object.Beh = null;
                object.EEHealth = null;
            }
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode"))
                object.logicalNode = $root.commonmodule.LogicalNode.toObject(message.logicalNode, options);
            if (message.Beh != null && message.hasOwnProperty("Beh"))
                object.Beh = $root.commonmodule.ENS_BehaviourModeKind.toObject(message.Beh, options);
            if (message.EEHealth != null && message.hasOwnProperty("EEHealth"))
                object.EEHealth = $root.commonmodule.ENS_HealthKind.toObject(message.EEHealth, options);
            return object;
        };

        /**
         * Converts this LogicalNodeForEventAndStatus to JSON.
         * @function toJSON
         * @memberof commonmodule.LogicalNodeForEventAndStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LogicalNodeForEventAndStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LogicalNodeForEventAndStatus;
    })();

    commonmodule.DeviceStatus = (function() {

        /**
         * Properties of a DeviceStatus.
         * @memberof commonmodule
         * @interface IDeviceStatus
         * @property {commonmodule.ILogicalNodeForEventAndStatus|null} [logicalNodeForEventAndStatus] DeviceStatus logicalNodeForEventAndStatus
         * @property {commonmodule.IStatusSPS|null} [ANSI79LO] DeviceStatus ANSI79LO
         * @property {commonmodule.IStatusSPS|null} [FaultLatch] DeviceStatus FaultLatch
         * @property {commonmodule.IStatusSPS|null} [HotLineTag] DeviceStatus HotLineTag
         * @property {commonmodule.IStatusSPS|null} [IEDTrouble] DeviceStatus IEDTrouble
         * @property {commonmodule.IStatusSPS|null} [RecloseEnabled] DeviceStatus RecloseEnabled
         * @property {commonmodule.IStatusSPS|null} [RemoteEnabled] DeviceStatus RemoteEnabled
         */

        /**
         * Constructs a new DeviceStatus.
         * @memberof commonmodule
         * @classdesc Represents a DeviceStatus.
         * @implements IDeviceStatus
         * @constructor
         * @param {commonmodule.IDeviceStatus=} [properties] Properties to set
         */
        function DeviceStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DeviceStatus logicalNodeForEventAndStatus.
         * @member {commonmodule.ILogicalNodeForEventAndStatus|null|undefined} logicalNodeForEventAndStatus
         * @memberof commonmodule.DeviceStatus
         * @instance
         */
        DeviceStatus.prototype.logicalNodeForEventAndStatus = null;

        /**
         * DeviceStatus ANSI79LO.
         * @member {commonmodule.IStatusSPS|null|undefined} ANSI79LO
         * @memberof commonmodule.DeviceStatus
         * @instance
         */
        DeviceStatus.prototype.ANSI79LO = null;

        /**
         * DeviceStatus FaultLatch.
         * @member {commonmodule.IStatusSPS|null|undefined} FaultLatch
         * @memberof commonmodule.DeviceStatus
         * @instance
         */
        DeviceStatus.prototype.FaultLatch = null;

        /**
         * DeviceStatus HotLineTag.
         * @member {commonmodule.IStatusSPS|null|undefined} HotLineTag
         * @memberof commonmodule.DeviceStatus
         * @instance
         */
        DeviceStatus.prototype.HotLineTag = null;

        /**
         * DeviceStatus IEDTrouble.
         * @member {commonmodule.IStatusSPS|null|undefined} IEDTrouble
         * @memberof commonmodule.DeviceStatus
         * @instance
         */
        DeviceStatus.prototype.IEDTrouble = null;

        /**
         * DeviceStatus RecloseEnabled.
         * @member {commonmodule.IStatusSPS|null|undefined} RecloseEnabled
         * @memberof commonmodule.DeviceStatus
         * @instance
         */
        DeviceStatus.prototype.RecloseEnabled = null;

        /**
         * DeviceStatus RemoteEnabled.
         * @member {commonmodule.IStatusSPS|null|undefined} RemoteEnabled
         * @memberof commonmodule.DeviceStatus
         * @instance
         */
        DeviceStatus.prototype.RemoteEnabled = null;

        /**
         * Creates a new DeviceStatus instance using the specified properties.
         * @function create
         * @memberof commonmodule.DeviceStatus
         * @static
         * @param {commonmodule.IDeviceStatus=} [properties] Properties to set
         * @returns {commonmodule.DeviceStatus} DeviceStatus instance
         */
        DeviceStatus.create = function create(properties) {
            return new DeviceStatus(properties);
        };

        /**
         * Encodes the specified DeviceStatus message. Does not implicitly {@link commonmodule.DeviceStatus.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.DeviceStatus
         * @static
         * @param {commonmodule.IDeviceStatus} message DeviceStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeviceStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForEventAndStatus != null && Object.hasOwnProperty.call(message, "logicalNodeForEventAndStatus"))
                $root.commonmodule.LogicalNodeForEventAndStatus.encode(message.logicalNodeForEventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ANSI79LO != null && Object.hasOwnProperty.call(message, "ANSI79LO"))
                $root.commonmodule.StatusSPS.encode(message.ANSI79LO, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.FaultLatch != null && Object.hasOwnProperty.call(message, "FaultLatch"))
                $root.commonmodule.StatusSPS.encode(message.FaultLatch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.HotLineTag != null && Object.hasOwnProperty.call(message, "HotLineTag"))
                $root.commonmodule.StatusSPS.encode(message.HotLineTag, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.IEDTrouble != null && Object.hasOwnProperty.call(message, "IEDTrouble"))
                $root.commonmodule.StatusSPS.encode(message.IEDTrouble, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.RecloseEnabled != null && Object.hasOwnProperty.call(message, "RecloseEnabled"))
                $root.commonmodule.StatusSPS.encode(message.RecloseEnabled, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.RemoteEnabled != null && Object.hasOwnProperty.call(message, "RemoteEnabled"))
                $root.commonmodule.StatusSPS.encode(message.RemoteEnabled, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified DeviceStatus message, length delimited. Does not implicitly {@link commonmodule.DeviceStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.DeviceStatus
         * @static
         * @param {commonmodule.IDeviceStatus} message DeviceStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DeviceStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DeviceStatus message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.DeviceStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.DeviceStatus} DeviceStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeviceStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.DeviceStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ANSI79LO = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.FaultLatch = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.HotLineTag = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.IEDTrouble = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.RecloseEnabled = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.RemoteEnabled = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DeviceStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.DeviceStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.DeviceStatus} DeviceStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DeviceStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DeviceStatus message.
         * @function verify
         * @memberof commonmodule.DeviceStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DeviceStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus")) {
                var error = $root.commonmodule.LogicalNodeForEventAndStatus.verify(message.logicalNodeForEventAndStatus);
                if (error)
                    return "logicalNodeForEventAndStatus." + error;
            }
            if (message.ANSI79LO != null && message.hasOwnProperty("ANSI79LO")) {
                var error = $root.commonmodule.StatusSPS.verify(message.ANSI79LO);
                if (error)
                    return "ANSI79LO." + error;
            }
            if (message.FaultLatch != null && message.hasOwnProperty("FaultLatch")) {
                var error = $root.commonmodule.StatusSPS.verify(message.FaultLatch);
                if (error)
                    return "FaultLatch." + error;
            }
            if (message.HotLineTag != null && message.hasOwnProperty("HotLineTag")) {
                var error = $root.commonmodule.StatusSPS.verify(message.HotLineTag);
                if (error)
                    return "HotLineTag." + error;
            }
            if (message.IEDTrouble != null && message.hasOwnProperty("IEDTrouble")) {
                var error = $root.commonmodule.StatusSPS.verify(message.IEDTrouble);
                if (error)
                    return "IEDTrouble." + error;
            }
            if (message.RecloseEnabled != null && message.hasOwnProperty("RecloseEnabled")) {
                var error = $root.commonmodule.StatusSPS.verify(message.RecloseEnabled);
                if (error)
                    return "RecloseEnabled." + error;
            }
            if (message.RemoteEnabled != null && message.hasOwnProperty("RemoteEnabled")) {
                var error = $root.commonmodule.StatusSPS.verify(message.RemoteEnabled);
                if (error)
                    return "RemoteEnabled." + error;
            }
            return null;
        };

        /**
         * Creates a DeviceStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.DeviceStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.DeviceStatus} DeviceStatus
         */
        DeviceStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.DeviceStatus)
                return object;
            var message = new $root.commonmodule.DeviceStatus();
            if (object.logicalNodeForEventAndStatus != null) {
                if (typeof object.logicalNodeForEventAndStatus !== "object")
                    throw TypeError(".commonmodule.DeviceStatus.logicalNodeForEventAndStatus: object expected");
                message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.fromObject(object.logicalNodeForEventAndStatus);
            }
            if (object.ANSI79LO != null) {
                if (typeof object.ANSI79LO !== "object")
                    throw TypeError(".commonmodule.DeviceStatus.ANSI79LO: object expected");
                message.ANSI79LO = $root.commonmodule.StatusSPS.fromObject(object.ANSI79LO);
            }
            if (object.FaultLatch != null) {
                if (typeof object.FaultLatch !== "object")
                    throw TypeError(".commonmodule.DeviceStatus.FaultLatch: object expected");
                message.FaultLatch = $root.commonmodule.StatusSPS.fromObject(object.FaultLatch);
            }
            if (object.HotLineTag != null) {
                if (typeof object.HotLineTag !== "object")
                    throw TypeError(".commonmodule.DeviceStatus.HotLineTag: object expected");
                message.HotLineTag = $root.commonmodule.StatusSPS.fromObject(object.HotLineTag);
            }
            if (object.IEDTrouble != null) {
                if (typeof object.IEDTrouble !== "object")
                    throw TypeError(".commonmodule.DeviceStatus.IEDTrouble: object expected");
                message.IEDTrouble = $root.commonmodule.StatusSPS.fromObject(object.IEDTrouble);
            }
            if (object.RecloseEnabled != null) {
                if (typeof object.RecloseEnabled !== "object")
                    throw TypeError(".commonmodule.DeviceStatus.RecloseEnabled: object expected");
                message.RecloseEnabled = $root.commonmodule.StatusSPS.fromObject(object.RecloseEnabled);
            }
            if (object.RemoteEnabled != null) {
                if (typeof object.RemoteEnabled !== "object")
                    throw TypeError(".commonmodule.DeviceStatus.RemoteEnabled: object expected");
                message.RemoteEnabled = $root.commonmodule.StatusSPS.fromObject(object.RemoteEnabled);
            }
            return message;
        };

        /**
         * Creates a plain object from a DeviceStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.DeviceStatus
         * @static
         * @param {commonmodule.DeviceStatus} message DeviceStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DeviceStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForEventAndStatus = null;
                object.ANSI79LO = null;
                object.FaultLatch = null;
                object.HotLineTag = null;
                object.IEDTrouble = null;
                object.RecloseEnabled = null;
                object.RemoteEnabled = null;
            }
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus"))
                object.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.toObject(message.logicalNodeForEventAndStatus, options);
            if (message.ANSI79LO != null && message.hasOwnProperty("ANSI79LO"))
                object.ANSI79LO = $root.commonmodule.StatusSPS.toObject(message.ANSI79LO, options);
            if (message.FaultLatch != null && message.hasOwnProperty("FaultLatch"))
                object.FaultLatch = $root.commonmodule.StatusSPS.toObject(message.FaultLatch, options);
            if (message.HotLineTag != null && message.hasOwnProperty("HotLineTag"))
                object.HotLineTag = $root.commonmodule.StatusSPS.toObject(message.HotLineTag, options);
            if (message.IEDTrouble != null && message.hasOwnProperty("IEDTrouble"))
                object.IEDTrouble = $root.commonmodule.StatusSPS.toObject(message.IEDTrouble, options);
            if (message.RecloseEnabled != null && message.hasOwnProperty("RecloseEnabled"))
                object.RecloseEnabled = $root.commonmodule.StatusSPS.toObject(message.RecloseEnabled, options);
            if (message.RemoteEnabled != null && message.hasOwnProperty("RemoteEnabled"))
                object.RemoteEnabled = $root.commonmodule.StatusSPS.toObject(message.RemoteEnabled, options);
            return object;
        };

        /**
         * Converts this DeviceStatus to JSON.
         * @function toJSON
         * @memberof commonmodule.DeviceStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DeviceStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return DeviceStatus;
    })();

    commonmodule.EnergyConsumer = (function() {

        /**
         * Properties of an EnergyConsumer.
         * @memberof commonmodule
         * @interface IEnergyConsumer
         * @property {commonmodule.IConductingEquipment|null} [conductingEquipment] EnergyConsumer conductingEquipment
         * @property {google.protobuf.IStringValue|null} [operatingLimit] EnergyConsumer operatingLimit
         */

        /**
         * Constructs a new EnergyConsumer.
         * @memberof commonmodule
         * @classdesc Represents an EnergyConsumer.
         * @implements IEnergyConsumer
         * @constructor
         * @param {commonmodule.IEnergyConsumer=} [properties] Properties to set
         */
        function EnergyConsumer(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EnergyConsumer conductingEquipment.
         * @member {commonmodule.IConductingEquipment|null|undefined} conductingEquipment
         * @memberof commonmodule.EnergyConsumer
         * @instance
         */
        EnergyConsumer.prototype.conductingEquipment = null;

        /**
         * EnergyConsumer operatingLimit.
         * @member {google.protobuf.IStringValue|null|undefined} operatingLimit
         * @memberof commonmodule.EnergyConsumer
         * @instance
         */
        EnergyConsumer.prototype.operatingLimit = null;

        /**
         * Creates a new EnergyConsumer instance using the specified properties.
         * @function create
         * @memberof commonmodule.EnergyConsumer
         * @static
         * @param {commonmodule.IEnergyConsumer=} [properties] Properties to set
         * @returns {commonmodule.EnergyConsumer} EnergyConsumer instance
         */
        EnergyConsumer.create = function create(properties) {
            return new EnergyConsumer(properties);
        };

        /**
         * Encodes the specified EnergyConsumer message. Does not implicitly {@link commonmodule.EnergyConsumer.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.EnergyConsumer
         * @static
         * @param {commonmodule.IEnergyConsumer} message EnergyConsumer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EnergyConsumer.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipment != null && Object.hasOwnProperty.call(message, "conductingEquipment"))
                $root.commonmodule.ConductingEquipment.encode(message.conductingEquipment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.operatingLimit != null && Object.hasOwnProperty.call(message, "operatingLimit"))
                $root.google.protobuf.StringValue.encode(message.operatingLimit, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EnergyConsumer message, length delimited. Does not implicitly {@link commonmodule.EnergyConsumer.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.EnergyConsumer
         * @static
         * @param {commonmodule.IEnergyConsumer} message EnergyConsumer message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EnergyConsumer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EnergyConsumer message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.EnergyConsumer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.EnergyConsumer} EnergyConsumer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EnergyConsumer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.EnergyConsumer();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipment = $root.commonmodule.ConductingEquipment.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.operatingLimit = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EnergyConsumer message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.EnergyConsumer
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.EnergyConsumer} EnergyConsumer
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EnergyConsumer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EnergyConsumer message.
         * @function verify
         * @memberof commonmodule.EnergyConsumer
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EnergyConsumer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment")) {
                var error = $root.commonmodule.ConductingEquipment.verify(message.conductingEquipment);
                if (error)
                    return "conductingEquipment." + error;
            }
            if (message.operatingLimit != null && message.hasOwnProperty("operatingLimit")) {
                var error = $root.google.protobuf.StringValue.verify(message.operatingLimit);
                if (error)
                    return "operatingLimit." + error;
            }
            return null;
        };

        /**
         * Creates an EnergyConsumer message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.EnergyConsumer
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.EnergyConsumer} EnergyConsumer
         */
        EnergyConsumer.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.EnergyConsumer)
                return object;
            var message = new $root.commonmodule.EnergyConsumer();
            if (object.conductingEquipment != null) {
                if (typeof object.conductingEquipment !== "object")
                    throw TypeError(".commonmodule.EnergyConsumer.conductingEquipment: object expected");
                message.conductingEquipment = $root.commonmodule.ConductingEquipment.fromObject(object.conductingEquipment);
            }
            if (object.operatingLimit != null) {
                if (typeof object.operatingLimit !== "object")
                    throw TypeError(".commonmodule.EnergyConsumer.operatingLimit: object expected");
                message.operatingLimit = $root.google.protobuf.StringValue.fromObject(object.operatingLimit);
            }
            return message;
        };

        /**
         * Creates a plain object from an EnergyConsumer message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.EnergyConsumer
         * @static
         * @param {commonmodule.EnergyConsumer} message EnergyConsumer
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EnergyConsumer.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conductingEquipment = null;
                object.operatingLimit = null;
            }
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment"))
                object.conductingEquipment = $root.commonmodule.ConductingEquipment.toObject(message.conductingEquipment, options);
            if (message.operatingLimit != null && message.hasOwnProperty("operatingLimit"))
                object.operatingLimit = $root.google.protobuf.StringValue.toObject(message.operatingLimit, options);
            return object;
        };

        /**
         * Converts this EnergyConsumer to JSON.
         * @function toJSON
         * @memberof commonmodule.EnergyConsumer
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EnergyConsumer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EnergyConsumer;
    })();

    /**
     * CalcMethodKind enum.
     * @name commonmodule.CalcMethodKind
     * @enum {number}
     * @property {number} CalcMethodKind_UNDEFINED=0 CalcMethodKind_UNDEFINED value
     * @property {number} CalcMethodKind_P_CLASS=11 CalcMethodKind_P_CLASS value
     * @property {number} CalcMethodKind_M_CLASS=12 CalcMethodKind_M_CLASS value
     * @property {number} CalcMethodKind_DIFF=13 CalcMethodKind_DIFF value
     */
    commonmodule.CalcMethodKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "CalcMethodKind_UNDEFINED"] = 0;
        values[valuesById[11] = "CalcMethodKind_P_CLASS"] = 11;
        values[valuesById[12] = "CalcMethodKind_M_CLASS"] = 12;
        values[valuesById[13] = "CalcMethodKind_DIFF"] = 13;
        return values;
    })();

    commonmodule.Optional_CalcMethodKind = (function() {

        /**
         * Properties of an Optional_CalcMethodKind.
         * @memberof commonmodule
         * @interface IOptional_CalcMethodKind
         * @property {commonmodule.CalcMethodKind|null} [value] Optional_CalcMethodKind value
         */

        /**
         * Constructs a new Optional_CalcMethodKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_CalcMethodKind.
         * @implements IOptional_CalcMethodKind
         * @constructor
         * @param {commonmodule.IOptional_CalcMethodKind=} [properties] Properties to set
         */
        function Optional_CalcMethodKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_CalcMethodKind value.
         * @member {commonmodule.CalcMethodKind} value
         * @memberof commonmodule.Optional_CalcMethodKind
         * @instance
         */
        Optional_CalcMethodKind.prototype.value = 0;

        /**
         * Creates a new Optional_CalcMethodKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_CalcMethodKind
         * @static
         * @param {commonmodule.IOptional_CalcMethodKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_CalcMethodKind} Optional_CalcMethodKind instance
         */
        Optional_CalcMethodKind.create = function create(properties) {
            return new Optional_CalcMethodKind(properties);
        };

        /**
         * Encodes the specified Optional_CalcMethodKind message. Does not implicitly {@link commonmodule.Optional_CalcMethodKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_CalcMethodKind
         * @static
         * @param {commonmodule.IOptional_CalcMethodKind} message Optional_CalcMethodKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_CalcMethodKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_CalcMethodKind message, length delimited. Does not implicitly {@link commonmodule.Optional_CalcMethodKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_CalcMethodKind
         * @static
         * @param {commonmodule.IOptional_CalcMethodKind} message Optional_CalcMethodKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_CalcMethodKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_CalcMethodKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_CalcMethodKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_CalcMethodKind} Optional_CalcMethodKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_CalcMethodKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_CalcMethodKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_CalcMethodKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_CalcMethodKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_CalcMethodKind} Optional_CalcMethodKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_CalcMethodKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_CalcMethodKind message.
         * @function verify
         * @memberof commonmodule.Optional_CalcMethodKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_CalcMethodKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 11:
                case 12:
                case 13:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_CalcMethodKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_CalcMethodKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_CalcMethodKind} Optional_CalcMethodKind
         */
        Optional_CalcMethodKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_CalcMethodKind)
                return object;
            var message = new $root.commonmodule.Optional_CalcMethodKind();
            switch (object.value) {
            case "CalcMethodKind_UNDEFINED":
            case 0:
                message.value = 0;
                break;
            case "CalcMethodKind_P_CLASS":
            case 11:
                message.value = 11;
                break;
            case "CalcMethodKind_M_CLASS":
            case 12:
                message.value = 12;
                break;
            case "CalcMethodKind_DIFF":
            case 13:
                message.value = 13;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_CalcMethodKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_CalcMethodKind
         * @static
         * @param {commonmodule.Optional_CalcMethodKind} message Optional_CalcMethodKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_CalcMethodKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "CalcMethodKind_UNDEFINED" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.CalcMethodKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_CalcMethodKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_CalcMethodKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_CalcMethodKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_CalcMethodKind;
    })();

    commonmodule.ENG_CalcMethodKind = (function() {

        /**
         * Properties of a ENG_CalcMethodKind.
         * @memberof commonmodule
         * @interface IENG_CalcMethodKind
         * @property {commonmodule.CalcMethodKind|null} [setVal] ENG_CalcMethodKind setVal
         */

        /**
         * Constructs a new ENG_CalcMethodKind.
         * @memberof commonmodule
         * @classdesc Represents a ENG_CalcMethodKind.
         * @implements IENG_CalcMethodKind
         * @constructor
         * @param {commonmodule.IENG_CalcMethodKind=} [properties] Properties to set
         */
        function ENG_CalcMethodKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ENG_CalcMethodKind setVal.
         * @member {commonmodule.CalcMethodKind} setVal
         * @memberof commonmodule.ENG_CalcMethodKind
         * @instance
         */
        ENG_CalcMethodKind.prototype.setVal = 0;

        /**
         * Creates a new ENG_CalcMethodKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.ENG_CalcMethodKind
         * @static
         * @param {commonmodule.IENG_CalcMethodKind=} [properties] Properties to set
         * @returns {commonmodule.ENG_CalcMethodKind} ENG_CalcMethodKind instance
         */
        ENG_CalcMethodKind.create = function create(properties) {
            return new ENG_CalcMethodKind(properties);
        };

        /**
         * Encodes the specified ENG_CalcMethodKind message. Does not implicitly {@link commonmodule.ENG_CalcMethodKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ENG_CalcMethodKind
         * @static
         * @param {commonmodule.IENG_CalcMethodKind} message ENG_CalcMethodKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENG_CalcMethodKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.setVal != null && Object.hasOwnProperty.call(message, "setVal"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.setVal);
            return writer;
        };

        /**
         * Encodes the specified ENG_CalcMethodKind message, length delimited. Does not implicitly {@link commonmodule.ENG_CalcMethodKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ENG_CalcMethodKind
         * @static
         * @param {commonmodule.IENG_CalcMethodKind} message ENG_CalcMethodKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENG_CalcMethodKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ENG_CalcMethodKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ENG_CalcMethodKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ENG_CalcMethodKind} ENG_CalcMethodKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENG_CalcMethodKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ENG_CalcMethodKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.setVal = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ENG_CalcMethodKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ENG_CalcMethodKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ENG_CalcMethodKind} ENG_CalcMethodKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENG_CalcMethodKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ENG_CalcMethodKind message.
         * @function verify
         * @memberof commonmodule.ENG_CalcMethodKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENG_CalcMethodKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.setVal != null && message.hasOwnProperty("setVal"))
                switch (message.setVal) {
                default:
                    return "setVal: enum value expected";
                case 0:
                case 11:
                case 12:
                case 13:
                    break;
                }
            return null;
        };

        /**
         * Creates a ENG_CalcMethodKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ENG_CalcMethodKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ENG_CalcMethodKind} ENG_CalcMethodKind
         */
        ENG_CalcMethodKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ENG_CalcMethodKind)
                return object;
            var message = new $root.commonmodule.ENG_CalcMethodKind();
            switch (object.setVal) {
            case "CalcMethodKind_UNDEFINED":
            case 0:
                message.setVal = 0;
                break;
            case "CalcMethodKind_P_CLASS":
            case 11:
                message.setVal = 11;
                break;
            case "CalcMethodKind_M_CLASS":
            case 12:
                message.setVal = 12;
                break;
            case "CalcMethodKind_DIFF":
            case 13:
                message.setVal = 13;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a ENG_CalcMethodKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ENG_CalcMethodKind
         * @static
         * @param {commonmodule.ENG_CalcMethodKind} message ENG_CalcMethodKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENG_CalcMethodKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.setVal = options.enums === String ? "CalcMethodKind_UNDEFINED" : 0;
            if (message.setVal != null && message.hasOwnProperty("setVal"))
                object.setVal = options.enums === String ? $root.commonmodule.CalcMethodKind[message.setVal] : message.setVal;
            return object;
        };

        /**
         * Converts this ENG_CalcMethodKind to JSON.
         * @function toJSON
         * @memberof commonmodule.ENG_CalcMethodKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENG_CalcMethodKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ENG_CalcMethodKind;
    })();

    /**
     * GridConnectModeKind enum.
     * @name commonmodule.GridConnectModeKind
     * @enum {number}
     * @property {number} GridConnectModeKind_UNDEFINED=0 GridConnectModeKind_UNDEFINED value
     * @property {number} GridConnectModeKind_CSI=1 GridConnectModeKind_CSI value
     * @property {number} GridConnectModeKind_VC_VSI=2 GridConnectModeKind_VC_VSI value
     * @property {number} GridConnectModeKind_CC_VSI=3 GridConnectModeKind_CC_VSI value
     * @property {number} GridConnectModeKind_none=98 GridConnectModeKind_none value
     * @property {number} GridConnectModeKind_other=99 GridConnectModeKind_other value
     * @property {number} GridConnectModeKind_VSI_PQ=2000 GridConnectModeKind_VSI_PQ value
     * @property {number} GridConnectModeKind_VSI_VF=2001 GridConnectModeKind_VSI_VF value
     * @property {number} GridConnectModeKind_VSI_ISO=2002 GridConnectModeKind_VSI_ISO value
     */
    commonmodule.GridConnectModeKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "GridConnectModeKind_UNDEFINED"] = 0;
        values[valuesById[1] = "GridConnectModeKind_CSI"] = 1;
        values[valuesById[2] = "GridConnectModeKind_VC_VSI"] = 2;
        values[valuesById[3] = "GridConnectModeKind_CC_VSI"] = 3;
        values[valuesById[98] = "GridConnectModeKind_none"] = 98;
        values[valuesById[99] = "GridConnectModeKind_other"] = 99;
        values[valuesById[2000] = "GridConnectModeKind_VSI_PQ"] = 2000;
        values[valuesById[2001] = "GridConnectModeKind_VSI_VF"] = 2001;
        values[valuesById[2002] = "GridConnectModeKind_VSI_ISO"] = 2002;
        return values;
    })();

    commonmodule.Optional_GridConnectModeKind = (function() {

        /**
         * Properties of an Optional_GridConnectModeKind.
         * @memberof commonmodule
         * @interface IOptional_GridConnectModeKind
         * @property {commonmodule.GridConnectModeKind|null} [value] Optional_GridConnectModeKind value
         */

        /**
         * Constructs a new Optional_GridConnectModeKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_GridConnectModeKind.
         * @implements IOptional_GridConnectModeKind
         * @constructor
         * @param {commonmodule.IOptional_GridConnectModeKind=} [properties] Properties to set
         */
        function Optional_GridConnectModeKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_GridConnectModeKind value.
         * @member {commonmodule.GridConnectModeKind} value
         * @memberof commonmodule.Optional_GridConnectModeKind
         * @instance
         */
        Optional_GridConnectModeKind.prototype.value = 0;

        /**
         * Creates a new Optional_GridConnectModeKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_GridConnectModeKind
         * @static
         * @param {commonmodule.IOptional_GridConnectModeKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_GridConnectModeKind} Optional_GridConnectModeKind instance
         */
        Optional_GridConnectModeKind.create = function create(properties) {
            return new Optional_GridConnectModeKind(properties);
        };

        /**
         * Encodes the specified Optional_GridConnectModeKind message. Does not implicitly {@link commonmodule.Optional_GridConnectModeKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_GridConnectModeKind
         * @static
         * @param {commonmodule.IOptional_GridConnectModeKind} message Optional_GridConnectModeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_GridConnectModeKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_GridConnectModeKind message, length delimited. Does not implicitly {@link commonmodule.Optional_GridConnectModeKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_GridConnectModeKind
         * @static
         * @param {commonmodule.IOptional_GridConnectModeKind} message Optional_GridConnectModeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_GridConnectModeKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_GridConnectModeKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_GridConnectModeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_GridConnectModeKind} Optional_GridConnectModeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_GridConnectModeKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_GridConnectModeKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_GridConnectModeKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_GridConnectModeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_GridConnectModeKind} Optional_GridConnectModeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_GridConnectModeKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_GridConnectModeKind message.
         * @function verify
         * @memberof commonmodule.Optional_GridConnectModeKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_GridConnectModeKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 98:
                case 99:
                case 2000:
                case 2001:
                case 2002:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_GridConnectModeKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_GridConnectModeKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_GridConnectModeKind} Optional_GridConnectModeKind
         */
        Optional_GridConnectModeKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_GridConnectModeKind)
                return object;
            var message = new $root.commonmodule.Optional_GridConnectModeKind();
            switch (object.value) {
            case "GridConnectModeKind_UNDEFINED":
            case 0:
                message.value = 0;
                break;
            case "GridConnectModeKind_CSI":
            case 1:
                message.value = 1;
                break;
            case "GridConnectModeKind_VC_VSI":
            case 2:
                message.value = 2;
                break;
            case "GridConnectModeKind_CC_VSI":
            case 3:
                message.value = 3;
                break;
            case "GridConnectModeKind_none":
            case 98:
                message.value = 98;
                break;
            case "GridConnectModeKind_other":
            case 99:
                message.value = 99;
                break;
            case "GridConnectModeKind_VSI_PQ":
            case 2000:
                message.value = 2000;
                break;
            case "GridConnectModeKind_VSI_VF":
            case 2001:
                message.value = 2001;
                break;
            case "GridConnectModeKind_VSI_ISO":
            case 2002:
                message.value = 2002;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_GridConnectModeKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_GridConnectModeKind
         * @static
         * @param {commonmodule.Optional_GridConnectModeKind} message Optional_GridConnectModeKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_GridConnectModeKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "GridConnectModeKind_UNDEFINED" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.GridConnectModeKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_GridConnectModeKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_GridConnectModeKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_GridConnectModeKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_GridConnectModeKind;
    })();

    commonmodule.ENG_GridConnectModeKind = (function() {

        /**
         * Properties of a ENG_GridConnectModeKind.
         * @memberof commonmodule
         * @interface IENG_GridConnectModeKind
         * @property {commonmodule.GridConnectModeKind|null} [setVal] ENG_GridConnectModeKind setVal
         * @property {google.protobuf.IStringValue|null} [setValExtension] ENG_GridConnectModeKind setValExtension
         */

        /**
         * Constructs a new ENG_GridConnectModeKind.
         * @memberof commonmodule
         * @classdesc Represents a ENG_GridConnectModeKind.
         * @implements IENG_GridConnectModeKind
         * @constructor
         * @param {commonmodule.IENG_GridConnectModeKind=} [properties] Properties to set
         */
        function ENG_GridConnectModeKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ENG_GridConnectModeKind setVal.
         * @member {commonmodule.GridConnectModeKind} setVal
         * @memberof commonmodule.ENG_GridConnectModeKind
         * @instance
         */
        ENG_GridConnectModeKind.prototype.setVal = 0;

        /**
         * ENG_GridConnectModeKind setValExtension.
         * @member {google.protobuf.IStringValue|null|undefined} setValExtension
         * @memberof commonmodule.ENG_GridConnectModeKind
         * @instance
         */
        ENG_GridConnectModeKind.prototype.setValExtension = null;

        /**
         * Creates a new ENG_GridConnectModeKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.ENG_GridConnectModeKind
         * @static
         * @param {commonmodule.IENG_GridConnectModeKind=} [properties] Properties to set
         * @returns {commonmodule.ENG_GridConnectModeKind} ENG_GridConnectModeKind instance
         */
        ENG_GridConnectModeKind.create = function create(properties) {
            return new ENG_GridConnectModeKind(properties);
        };

        /**
         * Encodes the specified ENG_GridConnectModeKind message. Does not implicitly {@link commonmodule.ENG_GridConnectModeKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ENG_GridConnectModeKind
         * @static
         * @param {commonmodule.IENG_GridConnectModeKind} message ENG_GridConnectModeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENG_GridConnectModeKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.setVal != null && Object.hasOwnProperty.call(message, "setVal"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.setVal);
            if (message.setValExtension != null && Object.hasOwnProperty.call(message, "setValExtension"))
                $root.google.protobuf.StringValue.encode(message.setValExtension, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ENG_GridConnectModeKind message, length delimited. Does not implicitly {@link commonmodule.ENG_GridConnectModeKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ENG_GridConnectModeKind
         * @static
         * @param {commonmodule.IENG_GridConnectModeKind} message ENG_GridConnectModeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENG_GridConnectModeKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ENG_GridConnectModeKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ENG_GridConnectModeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ENG_GridConnectModeKind} ENG_GridConnectModeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENG_GridConnectModeKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ENG_GridConnectModeKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.setVal = reader.int32();
                    break;
                case 2:
                    message.setValExtension = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ENG_GridConnectModeKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ENG_GridConnectModeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ENG_GridConnectModeKind} ENG_GridConnectModeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENG_GridConnectModeKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ENG_GridConnectModeKind message.
         * @function verify
         * @memberof commonmodule.ENG_GridConnectModeKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENG_GridConnectModeKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.setVal != null && message.hasOwnProperty("setVal"))
                switch (message.setVal) {
                default:
                    return "setVal: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 98:
                case 99:
                case 2000:
                case 2001:
                case 2002:
                    break;
                }
            if (message.setValExtension != null && message.hasOwnProperty("setValExtension")) {
                var error = $root.google.protobuf.StringValue.verify(message.setValExtension);
                if (error)
                    return "setValExtension." + error;
            }
            return null;
        };

        /**
         * Creates a ENG_GridConnectModeKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ENG_GridConnectModeKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ENG_GridConnectModeKind} ENG_GridConnectModeKind
         */
        ENG_GridConnectModeKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ENG_GridConnectModeKind)
                return object;
            var message = new $root.commonmodule.ENG_GridConnectModeKind();
            switch (object.setVal) {
            case "GridConnectModeKind_UNDEFINED":
            case 0:
                message.setVal = 0;
                break;
            case "GridConnectModeKind_CSI":
            case 1:
                message.setVal = 1;
                break;
            case "GridConnectModeKind_VC_VSI":
            case 2:
                message.setVal = 2;
                break;
            case "GridConnectModeKind_CC_VSI":
            case 3:
                message.setVal = 3;
                break;
            case "GridConnectModeKind_none":
            case 98:
                message.setVal = 98;
                break;
            case "GridConnectModeKind_other":
            case 99:
                message.setVal = 99;
                break;
            case "GridConnectModeKind_VSI_PQ":
            case 2000:
                message.setVal = 2000;
                break;
            case "GridConnectModeKind_VSI_VF":
            case 2001:
                message.setVal = 2001;
                break;
            case "GridConnectModeKind_VSI_ISO":
            case 2002:
                message.setVal = 2002;
                break;
            }
            if (object.setValExtension != null) {
                if (typeof object.setValExtension !== "object")
                    throw TypeError(".commonmodule.ENG_GridConnectModeKind.setValExtension: object expected");
                message.setValExtension = $root.google.protobuf.StringValue.fromObject(object.setValExtension);
            }
            return message;
        };

        /**
         * Creates a plain object from a ENG_GridConnectModeKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ENG_GridConnectModeKind
         * @static
         * @param {commonmodule.ENG_GridConnectModeKind} message ENG_GridConnectModeKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENG_GridConnectModeKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.setVal = options.enums === String ? "GridConnectModeKind_UNDEFINED" : 0;
                object.setValExtension = null;
            }
            if (message.setVal != null && message.hasOwnProperty("setVal"))
                object.setVal = options.enums === String ? $root.commonmodule.GridConnectModeKind[message.setVal] : message.setVal;
            if (message.setValExtension != null && message.hasOwnProperty("setValExtension"))
                object.setValExtension = $root.google.protobuf.StringValue.toObject(message.setValExtension, options);
            return object;
        };

        /**
         * Converts this ENG_GridConnectModeKind to JSON.
         * @function toJSON
         * @memberof commonmodule.ENG_GridConnectModeKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENG_GridConnectModeKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ENG_GridConnectModeKind;
    })();

    /**
     * PFSignKind enum.
     * @name commonmodule.PFSignKind
     * @enum {number}
     * @property {number} PFSignKind_UNDEFINED=0 PFSignKind_UNDEFINED value
     * @property {number} PFSignKind_IEC=1 PFSignKind_IEC value
     * @property {number} PFSignKind_EEI=2 PFSignKind_EEI value
     */
    commonmodule.PFSignKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "PFSignKind_UNDEFINED"] = 0;
        values[valuesById[1] = "PFSignKind_IEC"] = 1;
        values[valuesById[2] = "PFSignKind_EEI"] = 2;
        return values;
    })();

    commonmodule.Optional_PFSignKind = (function() {

        /**
         * Properties of an Optional_PFSignKind.
         * @memberof commonmodule
         * @interface IOptional_PFSignKind
         * @property {commonmodule.PFSignKind|null} [value] Optional_PFSignKind value
         */

        /**
         * Constructs a new Optional_PFSignKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_PFSignKind.
         * @implements IOptional_PFSignKind
         * @constructor
         * @param {commonmodule.IOptional_PFSignKind=} [properties] Properties to set
         */
        function Optional_PFSignKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_PFSignKind value.
         * @member {commonmodule.PFSignKind} value
         * @memberof commonmodule.Optional_PFSignKind
         * @instance
         */
        Optional_PFSignKind.prototype.value = 0;

        /**
         * Creates a new Optional_PFSignKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_PFSignKind
         * @static
         * @param {commonmodule.IOptional_PFSignKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_PFSignKind} Optional_PFSignKind instance
         */
        Optional_PFSignKind.create = function create(properties) {
            return new Optional_PFSignKind(properties);
        };

        /**
         * Encodes the specified Optional_PFSignKind message. Does not implicitly {@link commonmodule.Optional_PFSignKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_PFSignKind
         * @static
         * @param {commonmodule.IOptional_PFSignKind} message Optional_PFSignKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_PFSignKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_PFSignKind message, length delimited. Does not implicitly {@link commonmodule.Optional_PFSignKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_PFSignKind
         * @static
         * @param {commonmodule.IOptional_PFSignKind} message Optional_PFSignKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_PFSignKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_PFSignKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_PFSignKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_PFSignKind} Optional_PFSignKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_PFSignKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_PFSignKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_PFSignKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_PFSignKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_PFSignKind} Optional_PFSignKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_PFSignKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_PFSignKind message.
         * @function verify
         * @memberof commonmodule.Optional_PFSignKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_PFSignKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_PFSignKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_PFSignKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_PFSignKind} Optional_PFSignKind
         */
        Optional_PFSignKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_PFSignKind)
                return object;
            var message = new $root.commonmodule.Optional_PFSignKind();
            switch (object.value) {
            case "PFSignKind_UNDEFINED":
            case 0:
                message.value = 0;
                break;
            case "PFSignKind_IEC":
            case 1:
                message.value = 1;
                break;
            case "PFSignKind_EEI":
            case 2:
                message.value = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_PFSignKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_PFSignKind
         * @static
         * @param {commonmodule.Optional_PFSignKind} message Optional_PFSignKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_PFSignKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "PFSignKind_UNDEFINED" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.PFSignKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_PFSignKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_PFSignKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_PFSignKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_PFSignKind;
    })();

    commonmodule.ENG_PFSignKind = (function() {

        /**
         * Properties of a ENG_PFSignKind.
         * @memberof commonmodule
         * @interface IENG_PFSignKind
         * @property {commonmodule.PFSignKind|null} [setVal] ENG_PFSignKind setVal
         */

        /**
         * Constructs a new ENG_PFSignKind.
         * @memberof commonmodule
         * @classdesc Represents a ENG_PFSignKind.
         * @implements IENG_PFSignKind
         * @constructor
         * @param {commonmodule.IENG_PFSignKind=} [properties] Properties to set
         */
        function ENG_PFSignKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ENG_PFSignKind setVal.
         * @member {commonmodule.PFSignKind} setVal
         * @memberof commonmodule.ENG_PFSignKind
         * @instance
         */
        ENG_PFSignKind.prototype.setVal = 0;

        /**
         * Creates a new ENG_PFSignKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.ENG_PFSignKind
         * @static
         * @param {commonmodule.IENG_PFSignKind=} [properties] Properties to set
         * @returns {commonmodule.ENG_PFSignKind} ENG_PFSignKind instance
         */
        ENG_PFSignKind.create = function create(properties) {
            return new ENG_PFSignKind(properties);
        };

        /**
         * Encodes the specified ENG_PFSignKind message. Does not implicitly {@link commonmodule.ENG_PFSignKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ENG_PFSignKind
         * @static
         * @param {commonmodule.IENG_PFSignKind} message ENG_PFSignKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENG_PFSignKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.setVal != null && Object.hasOwnProperty.call(message, "setVal"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.setVal);
            return writer;
        };

        /**
         * Encodes the specified ENG_PFSignKind message, length delimited. Does not implicitly {@link commonmodule.ENG_PFSignKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ENG_PFSignKind
         * @static
         * @param {commonmodule.IENG_PFSignKind} message ENG_PFSignKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENG_PFSignKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ENG_PFSignKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ENG_PFSignKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ENG_PFSignKind} ENG_PFSignKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENG_PFSignKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ENG_PFSignKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.setVal = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ENG_PFSignKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ENG_PFSignKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ENG_PFSignKind} ENG_PFSignKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENG_PFSignKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ENG_PFSignKind message.
         * @function verify
         * @memberof commonmodule.ENG_PFSignKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENG_PFSignKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.setVal != null && message.hasOwnProperty("setVal"))
                switch (message.setVal) {
                default:
                    return "setVal: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a ENG_PFSignKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ENG_PFSignKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ENG_PFSignKind} ENG_PFSignKind
         */
        ENG_PFSignKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ENG_PFSignKind)
                return object;
            var message = new $root.commonmodule.ENG_PFSignKind();
            switch (object.setVal) {
            case "PFSignKind_UNDEFINED":
            case 0:
                message.setVal = 0;
                break;
            case "PFSignKind_IEC":
            case 1:
                message.setVal = 1;
                break;
            case "PFSignKind_EEI":
            case 2:
                message.setVal = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a ENG_PFSignKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ENG_PFSignKind
         * @static
         * @param {commonmodule.ENG_PFSignKind} message ENG_PFSignKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENG_PFSignKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.setVal = options.enums === String ? "PFSignKind_UNDEFINED" : 0;
            if (message.setVal != null && message.hasOwnProperty("setVal"))
                object.setVal = options.enums === String ? $root.commonmodule.PFSignKind[message.setVal] : message.setVal;
            return object;
        };

        /**
         * Converts this ENG_PFSignKind to JSON.
         * @function toJSON
         * @memberof commonmodule.ENG_PFSignKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENG_PFSignKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ENG_PFSignKind;
    })();

    /**
     * DERGeneratorStateKind enum.
     * @name commonmodule.DERGeneratorStateKind
     * @enum {number}
     * @property {number} DERGeneratorStateKind_UNDEFINED=0 DERGeneratorStateKind_UNDEFINED value
     * @property {number} DERGeneratorStateKind_Not_operating=1 DERGeneratorStateKind_Not_operating value
     * @property {number} DERGeneratorStateKind_Operating=2 DERGeneratorStateKind_Operating value
     * @property {number} DERGeneratorStateKind_Starting_up=3 DERGeneratorStateKind_Starting_up value
     * @property {number} DERGeneratorStateKind_Shutting_down=4 DERGeneratorStateKind_Shutting_down value
     * @property {number} DERGeneratorStateKind_At_disconnect_level=5 DERGeneratorStateKind_At_disconnect_level value
     * @property {number} DERGeneratorStateKind_Ramping_in_power=6 DERGeneratorStateKind_Ramping_in_power value
     * @property {number} DERGeneratorStateKind_Ramping_in_reactive_power=7 DERGeneratorStateKind_Ramping_in_reactive_power value
     * @property {number} DERGeneratorStateKind_Standby=8 DERGeneratorStateKind_Standby value
     * @property {number} DERGeneratorStateKind_Not_applicable_Unknown=98 DERGeneratorStateKind_Not_applicable_Unknown value
     * @property {number} DERGeneratorStateKind_Other=99 DERGeneratorStateKind_Other value
     */
    commonmodule.DERGeneratorStateKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "DERGeneratorStateKind_UNDEFINED"] = 0;
        values[valuesById[1] = "DERGeneratorStateKind_Not_operating"] = 1;
        values[valuesById[2] = "DERGeneratorStateKind_Operating"] = 2;
        values[valuesById[3] = "DERGeneratorStateKind_Starting_up"] = 3;
        values[valuesById[4] = "DERGeneratorStateKind_Shutting_down"] = 4;
        values[valuesById[5] = "DERGeneratorStateKind_At_disconnect_level"] = 5;
        values[valuesById[6] = "DERGeneratorStateKind_Ramping_in_power"] = 6;
        values[valuesById[7] = "DERGeneratorStateKind_Ramping_in_reactive_power"] = 7;
        values[valuesById[8] = "DERGeneratorStateKind_Standby"] = 8;
        values[valuesById[98] = "DERGeneratorStateKind_Not_applicable_Unknown"] = 98;
        values[valuesById[99] = "DERGeneratorStateKind_Other"] = 99;
        return values;
    })();

    commonmodule.Optional_DERGeneratorStateKind = (function() {

        /**
         * Properties of an Optional_DERGeneratorStateKind.
         * @memberof commonmodule
         * @interface IOptional_DERGeneratorStateKind
         * @property {commonmodule.DERGeneratorStateKind|null} [value] Optional_DERGeneratorStateKind value
         */

        /**
         * Constructs a new Optional_DERGeneratorStateKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_DERGeneratorStateKind.
         * @implements IOptional_DERGeneratorStateKind
         * @constructor
         * @param {commonmodule.IOptional_DERGeneratorStateKind=} [properties] Properties to set
         */
        function Optional_DERGeneratorStateKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_DERGeneratorStateKind value.
         * @member {commonmodule.DERGeneratorStateKind} value
         * @memberof commonmodule.Optional_DERGeneratorStateKind
         * @instance
         */
        Optional_DERGeneratorStateKind.prototype.value = 0;

        /**
         * Creates a new Optional_DERGeneratorStateKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_DERGeneratorStateKind
         * @static
         * @param {commonmodule.IOptional_DERGeneratorStateKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_DERGeneratorStateKind} Optional_DERGeneratorStateKind instance
         */
        Optional_DERGeneratorStateKind.create = function create(properties) {
            return new Optional_DERGeneratorStateKind(properties);
        };

        /**
         * Encodes the specified Optional_DERGeneratorStateKind message. Does not implicitly {@link commonmodule.Optional_DERGeneratorStateKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_DERGeneratorStateKind
         * @static
         * @param {commonmodule.IOptional_DERGeneratorStateKind} message Optional_DERGeneratorStateKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_DERGeneratorStateKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_DERGeneratorStateKind message, length delimited. Does not implicitly {@link commonmodule.Optional_DERGeneratorStateKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_DERGeneratorStateKind
         * @static
         * @param {commonmodule.IOptional_DERGeneratorStateKind} message Optional_DERGeneratorStateKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_DERGeneratorStateKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_DERGeneratorStateKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_DERGeneratorStateKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_DERGeneratorStateKind} Optional_DERGeneratorStateKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_DERGeneratorStateKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_DERGeneratorStateKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_DERGeneratorStateKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_DERGeneratorStateKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_DERGeneratorStateKind} Optional_DERGeneratorStateKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_DERGeneratorStateKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_DERGeneratorStateKind message.
         * @function verify
         * @memberof commonmodule.Optional_DERGeneratorStateKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_DERGeneratorStateKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 98:
                case 99:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_DERGeneratorStateKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_DERGeneratorStateKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_DERGeneratorStateKind} Optional_DERGeneratorStateKind
         */
        Optional_DERGeneratorStateKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_DERGeneratorStateKind)
                return object;
            var message = new $root.commonmodule.Optional_DERGeneratorStateKind();
            switch (object.value) {
            case "DERGeneratorStateKind_UNDEFINED":
            case 0:
                message.value = 0;
                break;
            case "DERGeneratorStateKind_Not_operating":
            case 1:
                message.value = 1;
                break;
            case "DERGeneratorStateKind_Operating":
            case 2:
                message.value = 2;
                break;
            case "DERGeneratorStateKind_Starting_up":
            case 3:
                message.value = 3;
                break;
            case "DERGeneratorStateKind_Shutting_down":
            case 4:
                message.value = 4;
                break;
            case "DERGeneratorStateKind_At_disconnect_level":
            case 5:
                message.value = 5;
                break;
            case "DERGeneratorStateKind_Ramping_in_power":
            case 6:
                message.value = 6;
                break;
            case "DERGeneratorStateKind_Ramping_in_reactive_power":
            case 7:
                message.value = 7;
                break;
            case "DERGeneratorStateKind_Standby":
            case 8:
                message.value = 8;
                break;
            case "DERGeneratorStateKind_Not_applicable_Unknown":
            case 98:
                message.value = 98;
                break;
            case "DERGeneratorStateKind_Other":
            case 99:
                message.value = 99;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_DERGeneratorStateKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_DERGeneratorStateKind
         * @static
         * @param {commonmodule.Optional_DERGeneratorStateKind} message Optional_DERGeneratorStateKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_DERGeneratorStateKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "DERGeneratorStateKind_UNDEFINED" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.DERGeneratorStateKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_DERGeneratorStateKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_DERGeneratorStateKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_DERGeneratorStateKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_DERGeneratorStateKind;
    })();

    commonmodule.ENS_DERGeneratorStateKind = (function() {

        /**
         * Properties of a ENS_DERGeneratorStateKind.
         * @memberof commonmodule
         * @interface IENS_DERGeneratorStateKind
         * @property {commonmodule.IQuality|null} [q] ENS_DERGeneratorStateKind q
         * @property {commonmodule.DERGeneratorStateKind|null} [stVal] ENS_DERGeneratorStateKind stVal
         * @property {commonmodule.ITimestamp|null} [t] ENS_DERGeneratorStateKind t
         */

        /**
         * Constructs a new ENS_DERGeneratorStateKind.
         * @memberof commonmodule
         * @classdesc Represents a ENS_DERGeneratorStateKind.
         * @implements IENS_DERGeneratorStateKind
         * @constructor
         * @param {commonmodule.IENS_DERGeneratorStateKind=} [properties] Properties to set
         */
        function ENS_DERGeneratorStateKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ENS_DERGeneratorStateKind q.
         * @member {commonmodule.IQuality|null|undefined} q
         * @memberof commonmodule.ENS_DERGeneratorStateKind
         * @instance
         */
        ENS_DERGeneratorStateKind.prototype.q = null;

        /**
         * ENS_DERGeneratorStateKind stVal.
         * @member {commonmodule.DERGeneratorStateKind} stVal
         * @memberof commonmodule.ENS_DERGeneratorStateKind
         * @instance
         */
        ENS_DERGeneratorStateKind.prototype.stVal = 0;

        /**
         * ENS_DERGeneratorStateKind t.
         * @member {commonmodule.ITimestamp|null|undefined} t
         * @memberof commonmodule.ENS_DERGeneratorStateKind
         * @instance
         */
        ENS_DERGeneratorStateKind.prototype.t = null;

        /**
         * Creates a new ENS_DERGeneratorStateKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.ENS_DERGeneratorStateKind
         * @static
         * @param {commonmodule.IENS_DERGeneratorStateKind=} [properties] Properties to set
         * @returns {commonmodule.ENS_DERGeneratorStateKind} ENS_DERGeneratorStateKind instance
         */
        ENS_DERGeneratorStateKind.create = function create(properties) {
            return new ENS_DERGeneratorStateKind(properties);
        };

        /**
         * Encodes the specified ENS_DERGeneratorStateKind message. Does not implicitly {@link commonmodule.ENS_DERGeneratorStateKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ENS_DERGeneratorStateKind
         * @static
         * @param {commonmodule.IENS_DERGeneratorStateKind} message ENS_DERGeneratorStateKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENS_DERGeneratorStateKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.q != null && Object.hasOwnProperty.call(message, "q"))
                $root.commonmodule.Quality.encode(message.q, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.stVal != null && Object.hasOwnProperty.call(message, "stVal"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.stVal);
            if (message.t != null && Object.hasOwnProperty.call(message, "t"))
                $root.commonmodule.Timestamp.encode(message.t, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ENS_DERGeneratorStateKind message, length delimited. Does not implicitly {@link commonmodule.ENS_DERGeneratorStateKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ENS_DERGeneratorStateKind
         * @static
         * @param {commonmodule.IENS_DERGeneratorStateKind} message ENS_DERGeneratorStateKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENS_DERGeneratorStateKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ENS_DERGeneratorStateKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ENS_DERGeneratorStateKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ENS_DERGeneratorStateKind} ENS_DERGeneratorStateKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENS_DERGeneratorStateKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ENS_DERGeneratorStateKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.q = $root.commonmodule.Quality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.stVal = reader.int32();
                    break;
                case 3:
                    message.t = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ENS_DERGeneratorStateKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ENS_DERGeneratorStateKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ENS_DERGeneratorStateKind} ENS_DERGeneratorStateKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENS_DERGeneratorStateKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ENS_DERGeneratorStateKind message.
         * @function verify
         * @memberof commonmodule.ENS_DERGeneratorStateKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENS_DERGeneratorStateKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.q != null && message.hasOwnProperty("q")) {
                var error = $root.commonmodule.Quality.verify(message.q);
                if (error)
                    return "q." + error;
            }
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                switch (message.stVal) {
                default:
                    return "stVal: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 98:
                case 99:
                    break;
                }
            if (message.t != null && message.hasOwnProperty("t")) {
                var error = $root.commonmodule.Timestamp.verify(message.t);
                if (error)
                    return "t." + error;
            }
            return null;
        };

        /**
         * Creates a ENS_DERGeneratorStateKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ENS_DERGeneratorStateKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ENS_DERGeneratorStateKind} ENS_DERGeneratorStateKind
         */
        ENS_DERGeneratorStateKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ENS_DERGeneratorStateKind)
                return object;
            var message = new $root.commonmodule.ENS_DERGeneratorStateKind();
            if (object.q != null) {
                if (typeof object.q !== "object")
                    throw TypeError(".commonmodule.ENS_DERGeneratorStateKind.q: object expected");
                message.q = $root.commonmodule.Quality.fromObject(object.q);
            }
            switch (object.stVal) {
            case "DERGeneratorStateKind_UNDEFINED":
            case 0:
                message.stVal = 0;
                break;
            case "DERGeneratorStateKind_Not_operating":
            case 1:
                message.stVal = 1;
                break;
            case "DERGeneratorStateKind_Operating":
            case 2:
                message.stVal = 2;
                break;
            case "DERGeneratorStateKind_Starting_up":
            case 3:
                message.stVal = 3;
                break;
            case "DERGeneratorStateKind_Shutting_down":
            case 4:
                message.stVal = 4;
                break;
            case "DERGeneratorStateKind_At_disconnect_level":
            case 5:
                message.stVal = 5;
                break;
            case "DERGeneratorStateKind_Ramping_in_power":
            case 6:
                message.stVal = 6;
                break;
            case "DERGeneratorStateKind_Ramping_in_reactive_power":
            case 7:
                message.stVal = 7;
                break;
            case "DERGeneratorStateKind_Standby":
            case 8:
                message.stVal = 8;
                break;
            case "DERGeneratorStateKind_Not_applicable_Unknown":
            case 98:
                message.stVal = 98;
                break;
            case "DERGeneratorStateKind_Other":
            case 99:
                message.stVal = 99;
                break;
            }
            if (object.t != null) {
                if (typeof object.t !== "object")
                    throw TypeError(".commonmodule.ENS_DERGeneratorStateKind.t: object expected");
                message.t = $root.commonmodule.Timestamp.fromObject(object.t);
            }
            return message;
        };

        /**
         * Creates a plain object from a ENS_DERGeneratorStateKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ENS_DERGeneratorStateKind
         * @static
         * @param {commonmodule.ENS_DERGeneratorStateKind} message ENS_DERGeneratorStateKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENS_DERGeneratorStateKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.q = null;
                object.stVal = options.enums === String ? "DERGeneratorStateKind_UNDEFINED" : 0;
                object.t = null;
            }
            if (message.q != null && message.hasOwnProperty("q"))
                object.q = $root.commonmodule.Quality.toObject(message.q, options);
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                object.stVal = options.enums === String ? $root.commonmodule.DERGeneratorStateKind[message.stVal] : message.stVal;
            if (message.t != null && message.hasOwnProperty("t"))
                object.t = $root.commonmodule.Timestamp.toObject(message.t, options);
            return object;
        };

        /**
         * Converts this ENS_DERGeneratorStateKind to JSON.
         * @function toJSON
         * @memberof commonmodule.ENS_DERGeneratorStateKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENS_DERGeneratorStateKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ENS_DERGeneratorStateKind;
    })();

    /**
     * DynamicTestKind enum.
     * @name commonmodule.DynamicTestKind
     * @enum {number}
     * @property {number} DynamicTestKind_none=0 DynamicTestKind_none value
     * @property {number} DynamicTestKind_testing=1 DynamicTestKind_testing value
     * @property {number} DynamicTestKind_operating=2 DynamicTestKind_operating value
     * @property {number} DynamicTestKind_failed=3 DynamicTestKind_failed value
     */
    commonmodule.DynamicTestKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "DynamicTestKind_none"] = 0;
        values[valuesById[1] = "DynamicTestKind_testing"] = 1;
        values[valuesById[2] = "DynamicTestKind_operating"] = 2;
        values[valuesById[3] = "DynamicTestKind_failed"] = 3;
        return values;
    })();

    commonmodule.Optional_DynamicTestKind = (function() {

        /**
         * Properties of an Optional_DynamicTestKind.
         * @memberof commonmodule
         * @interface IOptional_DynamicTestKind
         * @property {commonmodule.DynamicTestKind|null} [value] Optional_DynamicTestKind value
         */

        /**
         * Constructs a new Optional_DynamicTestKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_DynamicTestKind.
         * @implements IOptional_DynamicTestKind
         * @constructor
         * @param {commonmodule.IOptional_DynamicTestKind=} [properties] Properties to set
         */
        function Optional_DynamicTestKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_DynamicTestKind value.
         * @member {commonmodule.DynamicTestKind} value
         * @memberof commonmodule.Optional_DynamicTestKind
         * @instance
         */
        Optional_DynamicTestKind.prototype.value = 0;

        /**
         * Creates a new Optional_DynamicTestKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_DynamicTestKind
         * @static
         * @param {commonmodule.IOptional_DynamicTestKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_DynamicTestKind} Optional_DynamicTestKind instance
         */
        Optional_DynamicTestKind.create = function create(properties) {
            return new Optional_DynamicTestKind(properties);
        };

        /**
         * Encodes the specified Optional_DynamicTestKind message. Does not implicitly {@link commonmodule.Optional_DynamicTestKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_DynamicTestKind
         * @static
         * @param {commonmodule.IOptional_DynamicTestKind} message Optional_DynamicTestKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_DynamicTestKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_DynamicTestKind message, length delimited. Does not implicitly {@link commonmodule.Optional_DynamicTestKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_DynamicTestKind
         * @static
         * @param {commonmodule.IOptional_DynamicTestKind} message Optional_DynamicTestKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_DynamicTestKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_DynamicTestKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_DynamicTestKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_DynamicTestKind} Optional_DynamicTestKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_DynamicTestKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_DynamicTestKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_DynamicTestKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_DynamicTestKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_DynamicTestKind} Optional_DynamicTestKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_DynamicTestKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_DynamicTestKind message.
         * @function verify
         * @memberof commonmodule.Optional_DynamicTestKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_DynamicTestKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_DynamicTestKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_DynamicTestKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_DynamicTestKind} Optional_DynamicTestKind
         */
        Optional_DynamicTestKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_DynamicTestKind)
                return object;
            var message = new $root.commonmodule.Optional_DynamicTestKind();
            switch (object.value) {
            case "DynamicTestKind_none":
            case 0:
                message.value = 0;
                break;
            case "DynamicTestKind_testing":
            case 1:
                message.value = 1;
                break;
            case "DynamicTestKind_operating":
            case 2:
                message.value = 2;
                break;
            case "DynamicTestKind_failed":
            case 3:
                message.value = 3;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_DynamicTestKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_DynamicTestKind
         * @static
         * @param {commonmodule.Optional_DynamicTestKind} message Optional_DynamicTestKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_DynamicTestKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "DynamicTestKind_none" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.DynamicTestKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_DynamicTestKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_DynamicTestKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_DynamicTestKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_DynamicTestKind;
    })();

    commonmodule.ENS_DynamicTestKind = (function() {

        /**
         * Properties of a ENS_DynamicTestKind.
         * @memberof commonmodule
         * @interface IENS_DynamicTestKind
         * @property {commonmodule.IQuality|null} [q] ENS_DynamicTestKind q
         * @property {commonmodule.DynamicTestKind|null} [stVal] ENS_DynamicTestKind stVal
         * @property {commonmodule.ITimestamp|null} [t] ENS_DynamicTestKind t
         */

        /**
         * Constructs a new ENS_DynamicTestKind.
         * @memberof commonmodule
         * @classdesc Represents a ENS_DynamicTestKind.
         * @implements IENS_DynamicTestKind
         * @constructor
         * @param {commonmodule.IENS_DynamicTestKind=} [properties] Properties to set
         */
        function ENS_DynamicTestKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ENS_DynamicTestKind q.
         * @member {commonmodule.IQuality|null|undefined} q
         * @memberof commonmodule.ENS_DynamicTestKind
         * @instance
         */
        ENS_DynamicTestKind.prototype.q = null;

        /**
         * ENS_DynamicTestKind stVal.
         * @member {commonmodule.DynamicTestKind} stVal
         * @memberof commonmodule.ENS_DynamicTestKind
         * @instance
         */
        ENS_DynamicTestKind.prototype.stVal = 0;

        /**
         * ENS_DynamicTestKind t.
         * @member {commonmodule.ITimestamp|null|undefined} t
         * @memberof commonmodule.ENS_DynamicTestKind
         * @instance
         */
        ENS_DynamicTestKind.prototype.t = null;

        /**
         * Creates a new ENS_DynamicTestKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.ENS_DynamicTestKind
         * @static
         * @param {commonmodule.IENS_DynamicTestKind=} [properties] Properties to set
         * @returns {commonmodule.ENS_DynamicTestKind} ENS_DynamicTestKind instance
         */
        ENS_DynamicTestKind.create = function create(properties) {
            return new ENS_DynamicTestKind(properties);
        };

        /**
         * Encodes the specified ENS_DynamicTestKind message. Does not implicitly {@link commonmodule.ENS_DynamicTestKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ENS_DynamicTestKind
         * @static
         * @param {commonmodule.IENS_DynamicTestKind} message ENS_DynamicTestKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENS_DynamicTestKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.q != null && Object.hasOwnProperty.call(message, "q"))
                $root.commonmodule.Quality.encode(message.q, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.stVal != null && Object.hasOwnProperty.call(message, "stVal"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.stVal);
            if (message.t != null && Object.hasOwnProperty.call(message, "t"))
                $root.commonmodule.Timestamp.encode(message.t, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ENS_DynamicTestKind message, length delimited. Does not implicitly {@link commonmodule.ENS_DynamicTestKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ENS_DynamicTestKind
         * @static
         * @param {commonmodule.IENS_DynamicTestKind} message ENS_DynamicTestKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENS_DynamicTestKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ENS_DynamicTestKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ENS_DynamicTestKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ENS_DynamicTestKind} ENS_DynamicTestKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENS_DynamicTestKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ENS_DynamicTestKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.q = $root.commonmodule.Quality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.stVal = reader.int32();
                    break;
                case 3:
                    message.t = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ENS_DynamicTestKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ENS_DynamicTestKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ENS_DynamicTestKind} ENS_DynamicTestKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENS_DynamicTestKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ENS_DynamicTestKind message.
         * @function verify
         * @memberof commonmodule.ENS_DynamicTestKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENS_DynamicTestKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.q != null && message.hasOwnProperty("q")) {
                var error = $root.commonmodule.Quality.verify(message.q);
                if (error)
                    return "q." + error;
            }
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                switch (message.stVal) {
                default:
                    return "stVal: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.t != null && message.hasOwnProperty("t")) {
                var error = $root.commonmodule.Timestamp.verify(message.t);
                if (error)
                    return "t." + error;
            }
            return null;
        };

        /**
         * Creates a ENS_DynamicTestKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ENS_DynamicTestKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ENS_DynamicTestKind} ENS_DynamicTestKind
         */
        ENS_DynamicTestKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ENS_DynamicTestKind)
                return object;
            var message = new $root.commonmodule.ENS_DynamicTestKind();
            if (object.q != null) {
                if (typeof object.q !== "object")
                    throw TypeError(".commonmodule.ENS_DynamicTestKind.q: object expected");
                message.q = $root.commonmodule.Quality.fromObject(object.q);
            }
            switch (object.stVal) {
            case "DynamicTestKind_none":
            case 0:
                message.stVal = 0;
                break;
            case "DynamicTestKind_testing":
            case 1:
                message.stVal = 1;
                break;
            case "DynamicTestKind_operating":
            case 2:
                message.stVal = 2;
                break;
            case "DynamicTestKind_failed":
            case 3:
                message.stVal = 3;
                break;
            }
            if (object.t != null) {
                if (typeof object.t !== "object")
                    throw TypeError(".commonmodule.ENS_DynamicTestKind.t: object expected");
                message.t = $root.commonmodule.Timestamp.fromObject(object.t);
            }
            return message;
        };

        /**
         * Creates a plain object from a ENS_DynamicTestKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ENS_DynamicTestKind
         * @static
         * @param {commonmodule.ENS_DynamicTestKind} message ENS_DynamicTestKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENS_DynamicTestKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.q = null;
                object.stVal = options.enums === String ? "DynamicTestKind_none" : 0;
                object.t = null;
            }
            if (message.q != null && message.hasOwnProperty("q"))
                object.q = $root.commonmodule.Quality.toObject(message.q, options);
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                object.stVal = options.enums === String ? $root.commonmodule.DynamicTestKind[message.stVal] : message.stVal;
            if (message.t != null && message.hasOwnProperty("t"))
                object.t = $root.commonmodule.Timestamp.toObject(message.t, options);
            return object;
        };

        /**
         * Converts this ENS_DynamicTestKind to JSON.
         * @function toJSON
         * @memberof commonmodule.ENS_DynamicTestKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENS_DynamicTestKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ENS_DynamicTestKind;
    })();

    commonmodule.ENS_GridConnectModeKind = (function() {

        /**
         * Properties of a ENS_GridConnectModeKind.
         * @memberof commonmodule
         * @interface IENS_GridConnectModeKind
         * @property {commonmodule.GridConnectModeKind|null} [stVal] ENS_GridConnectModeKind stVal
         * @property {string|null} [stValExtension] ENS_GridConnectModeKind stValExtension
         */

        /**
         * Constructs a new ENS_GridConnectModeKind.
         * @memberof commonmodule
         * @classdesc Represents a ENS_GridConnectModeKind.
         * @implements IENS_GridConnectModeKind
         * @constructor
         * @param {commonmodule.IENS_GridConnectModeKind=} [properties] Properties to set
         */
        function ENS_GridConnectModeKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ENS_GridConnectModeKind stVal.
         * @member {commonmodule.GridConnectModeKind} stVal
         * @memberof commonmodule.ENS_GridConnectModeKind
         * @instance
         */
        ENS_GridConnectModeKind.prototype.stVal = 0;

        /**
         * ENS_GridConnectModeKind stValExtension.
         * @member {string} stValExtension
         * @memberof commonmodule.ENS_GridConnectModeKind
         * @instance
         */
        ENS_GridConnectModeKind.prototype.stValExtension = "";

        /**
         * Creates a new ENS_GridConnectModeKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.ENS_GridConnectModeKind
         * @static
         * @param {commonmodule.IENS_GridConnectModeKind=} [properties] Properties to set
         * @returns {commonmodule.ENS_GridConnectModeKind} ENS_GridConnectModeKind instance
         */
        ENS_GridConnectModeKind.create = function create(properties) {
            return new ENS_GridConnectModeKind(properties);
        };

        /**
         * Encodes the specified ENS_GridConnectModeKind message. Does not implicitly {@link commonmodule.ENS_GridConnectModeKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ENS_GridConnectModeKind
         * @static
         * @param {commonmodule.IENS_GridConnectModeKind} message ENS_GridConnectModeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENS_GridConnectModeKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.stVal != null && Object.hasOwnProperty.call(message, "stVal"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.stVal);
            if (message.stValExtension != null && Object.hasOwnProperty.call(message, "stValExtension"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.stValExtension);
            return writer;
        };

        /**
         * Encodes the specified ENS_GridConnectModeKind message, length delimited. Does not implicitly {@link commonmodule.ENS_GridConnectModeKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ENS_GridConnectModeKind
         * @static
         * @param {commonmodule.IENS_GridConnectModeKind} message ENS_GridConnectModeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENS_GridConnectModeKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ENS_GridConnectModeKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ENS_GridConnectModeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ENS_GridConnectModeKind} ENS_GridConnectModeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENS_GridConnectModeKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ENS_GridConnectModeKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.stVal = reader.int32();
                    break;
                case 2:
                    message.stValExtension = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ENS_GridConnectModeKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ENS_GridConnectModeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ENS_GridConnectModeKind} ENS_GridConnectModeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENS_GridConnectModeKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ENS_GridConnectModeKind message.
         * @function verify
         * @memberof commonmodule.ENS_GridConnectModeKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENS_GridConnectModeKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                switch (message.stVal) {
                default:
                    return "stVal: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 98:
                case 99:
                case 2000:
                case 2001:
                case 2002:
                    break;
                }
            if (message.stValExtension != null && message.hasOwnProperty("stValExtension"))
                if (!$util.isString(message.stValExtension))
                    return "stValExtension: string expected";
            return null;
        };

        /**
         * Creates a ENS_GridConnectModeKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ENS_GridConnectModeKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ENS_GridConnectModeKind} ENS_GridConnectModeKind
         */
        ENS_GridConnectModeKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ENS_GridConnectModeKind)
                return object;
            var message = new $root.commonmodule.ENS_GridConnectModeKind();
            switch (object.stVal) {
            case "GridConnectModeKind_UNDEFINED":
            case 0:
                message.stVal = 0;
                break;
            case "GridConnectModeKind_CSI":
            case 1:
                message.stVal = 1;
                break;
            case "GridConnectModeKind_VC_VSI":
            case 2:
                message.stVal = 2;
                break;
            case "GridConnectModeKind_CC_VSI":
            case 3:
                message.stVal = 3;
                break;
            case "GridConnectModeKind_none":
            case 98:
                message.stVal = 98;
                break;
            case "GridConnectModeKind_other":
            case 99:
                message.stVal = 99;
                break;
            case "GridConnectModeKind_VSI_PQ":
            case 2000:
                message.stVal = 2000;
                break;
            case "GridConnectModeKind_VSI_VF":
            case 2001:
                message.stVal = 2001;
                break;
            case "GridConnectModeKind_VSI_ISO":
            case 2002:
                message.stVal = 2002;
                break;
            }
            if (object.stValExtension != null)
                message.stValExtension = String(object.stValExtension);
            return message;
        };

        /**
         * Creates a plain object from a ENS_GridConnectModeKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ENS_GridConnectModeKind
         * @static
         * @param {commonmodule.ENS_GridConnectModeKind} message ENS_GridConnectModeKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENS_GridConnectModeKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.stVal = options.enums === String ? "GridConnectModeKind_UNDEFINED" : 0;
                object.stValExtension = "";
            }
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                object.stVal = options.enums === String ? $root.commonmodule.GridConnectModeKind[message.stVal] : message.stVal;
            if (message.stValExtension != null && message.hasOwnProperty("stValExtension"))
                object.stValExtension = message.stValExtension;
            return object;
        };

        /**
         * Converts this ENS_GridConnectModeKind to JSON.
         * @function toJSON
         * @memberof commonmodule.ENS_GridConnectModeKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENS_GridConnectModeKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ENS_GridConnectModeKind;
    })();

    commonmodule.ESS = (function() {

        /**
         * Properties of a ESS.
         * @memberof commonmodule
         * @interface IESS
         * @property {commonmodule.IConductingEquipment|null} [conductingEquipment] ESS conductingEquipment
         */

        /**
         * Constructs a new ESS.
         * @memberof commonmodule
         * @classdesc Represents a ESS.
         * @implements IESS
         * @constructor
         * @param {commonmodule.IESS=} [properties] Properties to set
         */
        function ESS(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESS conductingEquipment.
         * @member {commonmodule.IConductingEquipment|null|undefined} conductingEquipment
         * @memberof commonmodule.ESS
         * @instance
         */
        ESS.prototype.conductingEquipment = null;

        /**
         * Creates a new ESS instance using the specified properties.
         * @function create
         * @memberof commonmodule.ESS
         * @static
         * @param {commonmodule.IESS=} [properties] Properties to set
         * @returns {commonmodule.ESS} ESS instance
         */
        ESS.create = function create(properties) {
            return new ESS(properties);
        };

        /**
         * Encodes the specified ESS message. Does not implicitly {@link commonmodule.ESS.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ESS
         * @static
         * @param {commonmodule.IESS} message ESS message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESS.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipment != null && Object.hasOwnProperty.call(message, "conductingEquipment"))
                $root.commonmodule.ConductingEquipment.encode(message.conductingEquipment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESS message, length delimited. Does not implicitly {@link commonmodule.ESS.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ESS
         * @static
         * @param {commonmodule.IESS} message ESS message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESS.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESS message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ESS
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ESS} ESS
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESS.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ESS();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipment = $root.commonmodule.ConductingEquipment.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESS message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ESS
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ESS} ESS
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESS.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESS message.
         * @function verify
         * @memberof commonmodule.ESS
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESS.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment")) {
                var error = $root.commonmodule.ConductingEquipment.verify(message.conductingEquipment);
                if (error)
                    return "conductingEquipment." + error;
            }
            return null;
        };

        /**
         * Creates a ESS message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ESS
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ESS} ESS
         */
        ESS.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ESS)
                return object;
            var message = new $root.commonmodule.ESS();
            if (object.conductingEquipment != null) {
                if (typeof object.conductingEquipment !== "object")
                    throw TypeError(".commonmodule.ESS.conductingEquipment: object expected");
                message.conductingEquipment = $root.commonmodule.ConductingEquipment.fromObject(object.conductingEquipment);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESS message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ESS
         * @static
         * @param {commonmodule.ESS} message ESS
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESS.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.conductingEquipment = null;
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment"))
                object.conductingEquipment = $root.commonmodule.ConductingEquipment.toObject(message.conductingEquipment, options);
            return object;
        };

        /**
         * Converts this ESS to JSON.
         * @function toJSON
         * @memberof commonmodule.ESS
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESS.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESS;
    })();

    commonmodule.EventMessageInfo = (function() {

        /**
         * Properties of an EventMessageInfo.
         * @memberof commonmodule
         * @interface IEventMessageInfo
         * @property {commonmodule.IMessageInfo|null} [messageInfo] EventMessageInfo messageInfo
         */

        /**
         * Constructs a new EventMessageInfo.
         * @memberof commonmodule
         * @classdesc Represents an EventMessageInfo.
         * @implements IEventMessageInfo
         * @constructor
         * @param {commonmodule.IEventMessageInfo=} [properties] Properties to set
         */
        function EventMessageInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EventMessageInfo messageInfo.
         * @member {commonmodule.IMessageInfo|null|undefined} messageInfo
         * @memberof commonmodule.EventMessageInfo
         * @instance
         */
        EventMessageInfo.prototype.messageInfo = null;

        /**
         * Creates a new EventMessageInfo instance using the specified properties.
         * @function create
         * @memberof commonmodule.EventMessageInfo
         * @static
         * @param {commonmodule.IEventMessageInfo=} [properties] Properties to set
         * @returns {commonmodule.EventMessageInfo} EventMessageInfo instance
         */
        EventMessageInfo.create = function create(properties) {
            return new EventMessageInfo(properties);
        };

        /**
         * Encodes the specified EventMessageInfo message. Does not implicitly {@link commonmodule.EventMessageInfo.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.EventMessageInfo
         * @static
         * @param {commonmodule.IEventMessageInfo} message EventMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventMessageInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messageInfo != null && Object.hasOwnProperty.call(message, "messageInfo"))
                $root.commonmodule.MessageInfo.encode(message.messageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EventMessageInfo message, length delimited. Does not implicitly {@link commonmodule.EventMessageInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.EventMessageInfo
         * @static
         * @param {commonmodule.IEventMessageInfo} message EventMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventMessageInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EventMessageInfo message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.EventMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.EventMessageInfo} EventMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventMessageInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.EventMessageInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.messageInfo = $root.commonmodule.MessageInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EventMessageInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.EventMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.EventMessageInfo} EventMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventMessageInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EventMessageInfo message.
         * @function verify
         * @memberof commonmodule.EventMessageInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EventMessageInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messageInfo != null && message.hasOwnProperty("messageInfo")) {
                var error = $root.commonmodule.MessageInfo.verify(message.messageInfo);
                if (error)
                    return "messageInfo." + error;
            }
            return null;
        };

        /**
         * Creates an EventMessageInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.EventMessageInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.EventMessageInfo} EventMessageInfo
         */
        EventMessageInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.EventMessageInfo)
                return object;
            var message = new $root.commonmodule.EventMessageInfo();
            if (object.messageInfo != null) {
                if (typeof object.messageInfo !== "object")
                    throw TypeError(".commonmodule.EventMessageInfo.messageInfo: object expected");
                message.messageInfo = $root.commonmodule.MessageInfo.fromObject(object.messageInfo);
            }
            return message;
        };

        /**
         * Creates a plain object from an EventMessageInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.EventMessageInfo
         * @static
         * @param {commonmodule.EventMessageInfo} message EventMessageInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EventMessageInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.messageInfo = null;
            if (message.messageInfo != null && message.hasOwnProperty("messageInfo"))
                object.messageInfo = $root.commonmodule.MessageInfo.toObject(message.messageInfo, options);
            return object;
        };

        /**
         * Converts this EventMessageInfo to JSON.
         * @function toJSON
         * @memberof commonmodule.EventMessageInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EventMessageInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EventMessageInfo;
    })();

    commonmodule.EventValue = (function() {

        /**
         * Properties of an EventValue.
         * @memberof commonmodule
         * @interface IEventValue
         * @property {commonmodule.IIdentifiedObject|null} [identifiedObject] EventValue identifiedObject
         */

        /**
         * Constructs a new EventValue.
         * @memberof commonmodule
         * @classdesc Represents an EventValue.
         * @implements IEventValue
         * @constructor
         * @param {commonmodule.IEventValue=} [properties] Properties to set
         */
        function EventValue(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EventValue identifiedObject.
         * @member {commonmodule.IIdentifiedObject|null|undefined} identifiedObject
         * @memberof commonmodule.EventValue
         * @instance
         */
        EventValue.prototype.identifiedObject = null;

        /**
         * Creates a new EventValue instance using the specified properties.
         * @function create
         * @memberof commonmodule.EventValue
         * @static
         * @param {commonmodule.IEventValue=} [properties] Properties to set
         * @returns {commonmodule.EventValue} EventValue instance
         */
        EventValue.create = function create(properties) {
            return new EventValue(properties);
        };

        /**
         * Encodes the specified EventValue message. Does not implicitly {@link commonmodule.EventValue.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.EventValue
         * @static
         * @param {commonmodule.IEventValue} message EventValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventValue.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.identifiedObject != null && Object.hasOwnProperty.call(message, "identifiedObject"))
                $root.commonmodule.IdentifiedObject.encode(message.identifiedObject, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EventValue message, length delimited. Does not implicitly {@link commonmodule.EventValue.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.EventValue
         * @static
         * @param {commonmodule.IEventValue} message EventValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EventValue.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EventValue message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.EventValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.EventValue} EventValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventValue.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.EventValue();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.identifiedObject = $root.commonmodule.IdentifiedObject.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EventValue message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.EventValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.EventValue} EventValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EventValue.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EventValue message.
         * @function verify
         * @memberof commonmodule.EventValue
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EventValue.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject")) {
                var error = $root.commonmodule.IdentifiedObject.verify(message.identifiedObject);
                if (error)
                    return "identifiedObject." + error;
            }
            return null;
        };

        /**
         * Creates an EventValue message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.EventValue
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.EventValue} EventValue
         */
        EventValue.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.EventValue)
                return object;
            var message = new $root.commonmodule.EventValue();
            if (object.identifiedObject != null) {
                if (typeof object.identifiedObject !== "object")
                    throw TypeError(".commonmodule.EventValue.identifiedObject: object expected");
                message.identifiedObject = $root.commonmodule.IdentifiedObject.fromObject(object.identifiedObject);
            }
            return message;
        };

        /**
         * Creates a plain object from an EventValue message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.EventValue
         * @static
         * @param {commonmodule.EventValue} message EventValue
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EventValue.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.identifiedObject = null;
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject"))
                object.identifiedObject = $root.commonmodule.IdentifiedObject.toObject(message.identifiedObject, options);
            return object;
        };

        /**
         * Converts this EventValue to JSON.
         * @function toJSON
         * @memberof commonmodule.EventValue
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EventValue.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EventValue;
    })();

    commonmodule.ForecastValueSource = (function() {

        /**
         * Properties of a ForecastValueSource.
         * @memberof commonmodule
         * @interface IForecastValueSource
         * @property {commonmodule.IIdentifiedObject|null} [identifiedObject] ForecastValueSource identifiedObject
         */

        /**
         * Constructs a new ForecastValueSource.
         * @memberof commonmodule
         * @classdesc Represents a ForecastValueSource.
         * @implements IForecastValueSource
         * @constructor
         * @param {commonmodule.IForecastValueSource=} [properties] Properties to set
         */
        function ForecastValueSource(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ForecastValueSource identifiedObject.
         * @member {commonmodule.IIdentifiedObject|null|undefined} identifiedObject
         * @memberof commonmodule.ForecastValueSource
         * @instance
         */
        ForecastValueSource.prototype.identifiedObject = null;

        /**
         * Creates a new ForecastValueSource instance using the specified properties.
         * @function create
         * @memberof commonmodule.ForecastValueSource
         * @static
         * @param {commonmodule.IForecastValueSource=} [properties] Properties to set
         * @returns {commonmodule.ForecastValueSource} ForecastValueSource instance
         */
        ForecastValueSource.create = function create(properties) {
            return new ForecastValueSource(properties);
        };

        /**
         * Encodes the specified ForecastValueSource message. Does not implicitly {@link commonmodule.ForecastValueSource.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ForecastValueSource
         * @static
         * @param {commonmodule.IForecastValueSource} message ForecastValueSource message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ForecastValueSource.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.identifiedObject != null && Object.hasOwnProperty.call(message, "identifiedObject"))
                $root.commonmodule.IdentifiedObject.encode(message.identifiedObject, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ForecastValueSource message, length delimited. Does not implicitly {@link commonmodule.ForecastValueSource.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ForecastValueSource
         * @static
         * @param {commonmodule.IForecastValueSource} message ForecastValueSource message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ForecastValueSource.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ForecastValueSource message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ForecastValueSource
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ForecastValueSource} ForecastValueSource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ForecastValueSource.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ForecastValueSource();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.identifiedObject = $root.commonmodule.IdentifiedObject.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ForecastValueSource message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ForecastValueSource
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ForecastValueSource} ForecastValueSource
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ForecastValueSource.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ForecastValueSource message.
         * @function verify
         * @memberof commonmodule.ForecastValueSource
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ForecastValueSource.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject")) {
                var error = $root.commonmodule.IdentifiedObject.verify(message.identifiedObject);
                if (error)
                    return "identifiedObject." + error;
            }
            return null;
        };

        /**
         * Creates a ForecastValueSource message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ForecastValueSource
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ForecastValueSource} ForecastValueSource
         */
        ForecastValueSource.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ForecastValueSource)
                return object;
            var message = new $root.commonmodule.ForecastValueSource();
            if (object.identifiedObject != null) {
                if (typeof object.identifiedObject !== "object")
                    throw TypeError(".commonmodule.ForecastValueSource.identifiedObject: object expected");
                message.identifiedObject = $root.commonmodule.IdentifiedObject.fromObject(object.identifiedObject);
            }
            return message;
        };

        /**
         * Creates a plain object from a ForecastValueSource message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ForecastValueSource
         * @static
         * @param {commonmodule.ForecastValueSource} message ForecastValueSource
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ForecastValueSource.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.identifiedObject = null;
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject"))
                object.identifiedObject = $root.commonmodule.IdentifiedObject.toObject(message.identifiedObject, options);
            return object;
        };

        /**
         * Converts this ForecastValueSource to JSON.
         * @function toJSON
         * @memberof commonmodule.ForecastValueSource
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ForecastValueSource.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ForecastValueSource;
    })();

    commonmodule.ForecastIED = (function() {

        /**
         * Properties of a ForecastIED.
         * @memberof commonmodule
         * @interface IForecastIED
         * @property {commonmodule.IForecastValueSource|null} [forecastValueSource] ForecastIED forecastValueSource
         * @property {string|null} [sourceApplicationID] ForecastIED sourceApplicationID
         * @property {number|Long|null} [sourceDateTime] ForecastIED sourceDateTime
         */

        /**
         * Constructs a new ForecastIED.
         * @memberof commonmodule
         * @classdesc Represents a ForecastIED.
         * @implements IForecastIED
         * @constructor
         * @param {commonmodule.IForecastIED=} [properties] Properties to set
         */
        function ForecastIED(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ForecastIED forecastValueSource.
         * @member {commonmodule.IForecastValueSource|null|undefined} forecastValueSource
         * @memberof commonmodule.ForecastIED
         * @instance
         */
        ForecastIED.prototype.forecastValueSource = null;

        /**
         * ForecastIED sourceApplicationID.
         * @member {string} sourceApplicationID
         * @memberof commonmodule.ForecastIED
         * @instance
         */
        ForecastIED.prototype.sourceApplicationID = "";

        /**
         * ForecastIED sourceDateTime.
         * @member {number|Long} sourceDateTime
         * @memberof commonmodule.ForecastIED
         * @instance
         */
        ForecastIED.prototype.sourceDateTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new ForecastIED instance using the specified properties.
         * @function create
         * @memberof commonmodule.ForecastIED
         * @static
         * @param {commonmodule.IForecastIED=} [properties] Properties to set
         * @returns {commonmodule.ForecastIED} ForecastIED instance
         */
        ForecastIED.create = function create(properties) {
            return new ForecastIED(properties);
        };

        /**
         * Encodes the specified ForecastIED message. Does not implicitly {@link commonmodule.ForecastIED.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ForecastIED
         * @static
         * @param {commonmodule.IForecastIED} message ForecastIED message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ForecastIED.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.forecastValueSource != null && Object.hasOwnProperty.call(message, "forecastValueSource"))
                $root.commonmodule.ForecastValueSource.encode(message.forecastValueSource, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.sourceApplicationID != null && Object.hasOwnProperty.call(message, "sourceApplicationID"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceApplicationID);
            if (message.sourceDateTime != null && Object.hasOwnProperty.call(message, "sourceDateTime"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.sourceDateTime);
            return writer;
        };

        /**
         * Encodes the specified ForecastIED message, length delimited. Does not implicitly {@link commonmodule.ForecastIED.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ForecastIED
         * @static
         * @param {commonmodule.IForecastIED} message ForecastIED message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ForecastIED.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ForecastIED message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ForecastIED
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ForecastIED} ForecastIED
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ForecastIED.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ForecastIED();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.forecastValueSource = $root.commonmodule.ForecastValueSource.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.sourceApplicationID = reader.string();
                    break;
                case 3:
                    message.sourceDateTime = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ForecastIED message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ForecastIED
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ForecastIED} ForecastIED
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ForecastIED.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ForecastIED message.
         * @function verify
         * @memberof commonmodule.ForecastIED
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ForecastIED.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.forecastValueSource != null && message.hasOwnProperty("forecastValueSource")) {
                var error = $root.commonmodule.ForecastValueSource.verify(message.forecastValueSource);
                if (error)
                    return "forecastValueSource." + error;
            }
            if (message.sourceApplicationID != null && message.hasOwnProperty("sourceApplicationID"))
                if (!$util.isString(message.sourceApplicationID))
                    return "sourceApplicationID: string expected";
            if (message.sourceDateTime != null && message.hasOwnProperty("sourceDateTime"))
                if (!$util.isInteger(message.sourceDateTime) && !(message.sourceDateTime && $util.isInteger(message.sourceDateTime.low) && $util.isInteger(message.sourceDateTime.high)))
                    return "sourceDateTime: integer|Long expected";
            return null;
        };

        /**
         * Creates a ForecastIED message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ForecastIED
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ForecastIED} ForecastIED
         */
        ForecastIED.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ForecastIED)
                return object;
            var message = new $root.commonmodule.ForecastIED();
            if (object.forecastValueSource != null) {
                if (typeof object.forecastValueSource !== "object")
                    throw TypeError(".commonmodule.ForecastIED.forecastValueSource: object expected");
                message.forecastValueSource = $root.commonmodule.ForecastValueSource.fromObject(object.forecastValueSource);
            }
            if (object.sourceApplicationID != null)
                message.sourceApplicationID = String(object.sourceApplicationID);
            if (object.sourceDateTime != null)
                if ($util.Long)
                    (message.sourceDateTime = $util.Long.fromValue(object.sourceDateTime)).unsigned = false;
                else if (typeof object.sourceDateTime === "string")
                    message.sourceDateTime = parseInt(object.sourceDateTime, 10);
                else if (typeof object.sourceDateTime === "number")
                    message.sourceDateTime = object.sourceDateTime;
                else if (typeof object.sourceDateTime === "object")
                    message.sourceDateTime = new $util.LongBits(object.sourceDateTime.low >>> 0, object.sourceDateTime.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a ForecastIED message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ForecastIED
         * @static
         * @param {commonmodule.ForecastIED} message ForecastIED
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ForecastIED.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.forecastValueSource = null;
                object.sourceApplicationID = "";
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.sourceDateTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.sourceDateTime = options.longs === String ? "0" : 0;
            }
            if (message.forecastValueSource != null && message.hasOwnProperty("forecastValueSource"))
                object.forecastValueSource = $root.commonmodule.ForecastValueSource.toObject(message.forecastValueSource, options);
            if (message.sourceApplicationID != null && message.hasOwnProperty("sourceApplicationID"))
                object.sourceApplicationID = message.sourceApplicationID;
            if (message.sourceDateTime != null && message.hasOwnProperty("sourceDateTime"))
                if (typeof message.sourceDateTime === "number")
                    object.sourceDateTime = options.longs === String ? String(message.sourceDateTime) : message.sourceDateTime;
                else
                    object.sourceDateTime = options.longs === String ? $util.Long.prototype.toString.call(message.sourceDateTime) : options.longs === Number ? new $util.LongBits(message.sourceDateTime.low >>> 0, message.sourceDateTime.high >>> 0).toNumber() : message.sourceDateTime;
            return object;
        };

        /**
         * Converts this ForecastIED to JSON.
         * @function toJSON
         * @memberof commonmodule.ForecastIED
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ForecastIED.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ForecastIED;
    })();

    commonmodule.ForecastValue = (function() {

        /**
         * Properties of a ForecastValue.
         * @memberof commonmodule
         * @interface IForecastValue
         * @property {commonmodule.IIdentifiedObject|null} [identifiedObject] ForecastValue identifiedObject
         */

        /**
         * Constructs a new ForecastValue.
         * @memberof commonmodule
         * @classdesc Represents a ForecastValue.
         * @implements IForecastValue
         * @constructor
         * @param {commonmodule.IForecastValue=} [properties] Properties to set
         */
        function ForecastValue(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ForecastValue identifiedObject.
         * @member {commonmodule.IIdentifiedObject|null|undefined} identifiedObject
         * @memberof commonmodule.ForecastValue
         * @instance
         */
        ForecastValue.prototype.identifiedObject = null;

        /**
         * Creates a new ForecastValue instance using the specified properties.
         * @function create
         * @memberof commonmodule.ForecastValue
         * @static
         * @param {commonmodule.IForecastValue=} [properties] Properties to set
         * @returns {commonmodule.ForecastValue} ForecastValue instance
         */
        ForecastValue.create = function create(properties) {
            return new ForecastValue(properties);
        };

        /**
         * Encodes the specified ForecastValue message. Does not implicitly {@link commonmodule.ForecastValue.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ForecastValue
         * @static
         * @param {commonmodule.IForecastValue} message ForecastValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ForecastValue.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.identifiedObject != null && Object.hasOwnProperty.call(message, "identifiedObject"))
                $root.commonmodule.IdentifiedObject.encode(message.identifiedObject, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ForecastValue message, length delimited. Does not implicitly {@link commonmodule.ForecastValue.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ForecastValue
         * @static
         * @param {commonmodule.IForecastValue} message ForecastValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ForecastValue.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ForecastValue message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ForecastValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ForecastValue} ForecastValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ForecastValue.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ForecastValue();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.identifiedObject = $root.commonmodule.IdentifiedObject.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ForecastValue message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ForecastValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ForecastValue} ForecastValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ForecastValue.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ForecastValue message.
         * @function verify
         * @memberof commonmodule.ForecastValue
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ForecastValue.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject")) {
                var error = $root.commonmodule.IdentifiedObject.verify(message.identifiedObject);
                if (error)
                    return "identifiedObject." + error;
            }
            return null;
        };

        /**
         * Creates a ForecastValue message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ForecastValue
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ForecastValue} ForecastValue
         */
        ForecastValue.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ForecastValue)
                return object;
            var message = new $root.commonmodule.ForecastValue();
            if (object.identifiedObject != null) {
                if (typeof object.identifiedObject !== "object")
                    throw TypeError(".commonmodule.ForecastValue.identifiedObject: object expected");
                message.identifiedObject = $root.commonmodule.IdentifiedObject.fromObject(object.identifiedObject);
            }
            return message;
        };

        /**
         * Creates a plain object from a ForecastValue message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ForecastValue
         * @static
         * @param {commonmodule.ForecastValue} message ForecastValue
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ForecastValue.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.identifiedObject = null;
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject"))
                object.identifiedObject = $root.commonmodule.IdentifiedObject.toObject(message.identifiedObject, options);
            return object;
        };

        /**
         * Converts this ForecastValue to JSON.
         * @function toJSON
         * @memberof commonmodule.ForecastValue
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ForecastValue.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ForecastValue;
    })();

    commonmodule.IED = (function() {

        /**
         * Properties of a IED.
         * @memberof commonmodule
         * @interface IIED
         * @property {commonmodule.IIdentifiedObject|null} [identifiedObject] IED identifiedObject
         */

        /**
         * Constructs a new IED.
         * @memberof commonmodule
         * @classdesc Represents a IED.
         * @implements IIED
         * @constructor
         * @param {commonmodule.IIED=} [properties] Properties to set
         */
        function IED(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * IED identifiedObject.
         * @member {commonmodule.IIdentifiedObject|null|undefined} identifiedObject
         * @memberof commonmodule.IED
         * @instance
         */
        IED.prototype.identifiedObject = null;

        /**
         * Creates a new IED instance using the specified properties.
         * @function create
         * @memberof commonmodule.IED
         * @static
         * @param {commonmodule.IIED=} [properties] Properties to set
         * @returns {commonmodule.IED} IED instance
         */
        IED.create = function create(properties) {
            return new IED(properties);
        };

        /**
         * Encodes the specified IED message. Does not implicitly {@link commonmodule.IED.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.IED
         * @static
         * @param {commonmodule.IIED} message IED message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IED.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.identifiedObject != null && Object.hasOwnProperty.call(message, "identifiedObject"))
                $root.commonmodule.IdentifiedObject.encode(message.identifiedObject, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified IED message, length delimited. Does not implicitly {@link commonmodule.IED.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.IED
         * @static
         * @param {commonmodule.IIED} message IED message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IED.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a IED message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.IED
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.IED} IED
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IED.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.IED();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.identifiedObject = $root.commonmodule.IdentifiedObject.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a IED message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.IED
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.IED} IED
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IED.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a IED message.
         * @function verify
         * @memberof commonmodule.IED
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        IED.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject")) {
                var error = $root.commonmodule.IdentifiedObject.verify(message.identifiedObject);
                if (error)
                    return "identifiedObject." + error;
            }
            return null;
        };

        /**
         * Creates a IED message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.IED
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.IED} IED
         */
        IED.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.IED)
                return object;
            var message = new $root.commonmodule.IED();
            if (object.identifiedObject != null) {
                if (typeof object.identifiedObject !== "object")
                    throw TypeError(".commonmodule.IED.identifiedObject: object expected");
                message.identifiedObject = $root.commonmodule.IdentifiedObject.fromObject(object.identifiedObject);
            }
            return message;
        };

        /**
         * Creates a plain object from a IED message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.IED
         * @static
         * @param {commonmodule.IED} message IED
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        IED.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.identifiedObject = null;
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject"))
                object.identifiedObject = $root.commonmodule.IdentifiedObject.toObject(message.identifiedObject, options);
            return object;
        };

        /**
         * Converts this IED to JSON.
         * @function toJSON
         * @memberof commonmodule.IED
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        IED.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return IED;
    })();

    commonmodule.StatusINS = (function() {

        /**
         * Properties of a StatusINS.
         * @memberof commonmodule
         * @interface IStatusINS
         * @property {commonmodule.IQuality|null} [q] StatusINS q
         * @property {number|null} [stVal] StatusINS stVal
         * @property {commonmodule.ITimestamp|null} [t] StatusINS t
         * @property {commonmodule.IUnit|null} [units] StatusINS units
         */

        /**
         * Constructs a new StatusINS.
         * @memberof commonmodule
         * @classdesc Represents a StatusINS.
         * @implements IStatusINS
         * @constructor
         * @param {commonmodule.IStatusINS=} [properties] Properties to set
         */
        function StatusINS(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StatusINS q.
         * @member {commonmodule.IQuality|null|undefined} q
         * @memberof commonmodule.StatusINS
         * @instance
         */
        StatusINS.prototype.q = null;

        /**
         * StatusINS stVal.
         * @member {number} stVal
         * @memberof commonmodule.StatusINS
         * @instance
         */
        StatusINS.prototype.stVal = 0;

        /**
         * StatusINS t.
         * @member {commonmodule.ITimestamp|null|undefined} t
         * @memberof commonmodule.StatusINS
         * @instance
         */
        StatusINS.prototype.t = null;

        /**
         * StatusINS units.
         * @member {commonmodule.IUnit|null|undefined} units
         * @memberof commonmodule.StatusINS
         * @instance
         */
        StatusINS.prototype.units = null;

        /**
         * Creates a new StatusINS instance using the specified properties.
         * @function create
         * @memberof commonmodule.StatusINS
         * @static
         * @param {commonmodule.IStatusINS=} [properties] Properties to set
         * @returns {commonmodule.StatusINS} StatusINS instance
         */
        StatusINS.create = function create(properties) {
            return new StatusINS(properties);
        };

        /**
         * Encodes the specified StatusINS message. Does not implicitly {@link commonmodule.StatusINS.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.StatusINS
         * @static
         * @param {commonmodule.IStatusINS} message StatusINS message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusINS.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.q != null && Object.hasOwnProperty.call(message, "q"))
                $root.commonmodule.Quality.encode(message.q, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.stVal != null && Object.hasOwnProperty.call(message, "stVal"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.stVal);
            if (message.t != null && Object.hasOwnProperty.call(message, "t"))
                $root.commonmodule.Timestamp.encode(message.t, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.units != null && Object.hasOwnProperty.call(message, "units"))
                $root.commonmodule.Unit.encode(message.units, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified StatusINS message, length delimited. Does not implicitly {@link commonmodule.StatusINS.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.StatusINS
         * @static
         * @param {commonmodule.IStatusINS} message StatusINS message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusINS.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StatusINS message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.StatusINS
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.StatusINS} StatusINS
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusINS.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.StatusINS();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.q = $root.commonmodule.Quality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.stVal = reader.int32();
                    break;
                case 3:
                    message.t = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.units = $root.commonmodule.Unit.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a StatusINS message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.StatusINS
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.StatusINS} StatusINS
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusINS.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StatusINS message.
         * @function verify
         * @memberof commonmodule.StatusINS
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StatusINS.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.q != null && message.hasOwnProperty("q")) {
                var error = $root.commonmodule.Quality.verify(message.q);
                if (error)
                    return "q." + error;
            }
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                if (!$util.isInteger(message.stVal))
                    return "stVal: integer expected";
            if (message.t != null && message.hasOwnProperty("t")) {
                var error = $root.commonmodule.Timestamp.verify(message.t);
                if (error)
                    return "t." + error;
            }
            if (message.units != null && message.hasOwnProperty("units")) {
                var error = $root.commonmodule.Unit.verify(message.units);
                if (error)
                    return "units." + error;
            }
            return null;
        };

        /**
         * Creates a StatusINS message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.StatusINS
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.StatusINS} StatusINS
         */
        StatusINS.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.StatusINS)
                return object;
            var message = new $root.commonmodule.StatusINS();
            if (object.q != null) {
                if (typeof object.q !== "object")
                    throw TypeError(".commonmodule.StatusINS.q: object expected");
                message.q = $root.commonmodule.Quality.fromObject(object.q);
            }
            if (object.stVal != null)
                message.stVal = object.stVal | 0;
            if (object.t != null) {
                if (typeof object.t !== "object")
                    throw TypeError(".commonmodule.StatusINS.t: object expected");
                message.t = $root.commonmodule.Timestamp.fromObject(object.t);
            }
            if (object.units != null) {
                if (typeof object.units !== "object")
                    throw TypeError(".commonmodule.StatusINS.units: object expected");
                message.units = $root.commonmodule.Unit.fromObject(object.units);
            }
            return message;
        };

        /**
         * Creates a plain object from a StatusINS message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.StatusINS
         * @static
         * @param {commonmodule.StatusINS} message StatusINS
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StatusINS.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.q = null;
                object.stVal = 0;
                object.t = null;
                object.units = null;
            }
            if (message.q != null && message.hasOwnProperty("q"))
                object.q = $root.commonmodule.Quality.toObject(message.q, options);
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                object.stVal = message.stVal;
            if (message.t != null && message.hasOwnProperty("t"))
                object.t = $root.commonmodule.Timestamp.toObject(message.t, options);
            if (message.units != null && message.hasOwnProperty("units"))
                object.units = $root.commonmodule.Unit.toObject(message.units, options);
            return object;
        };

        /**
         * Converts this StatusINS to JSON.
         * @function toJSON
         * @memberof commonmodule.StatusINS
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StatusINS.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StatusINS;
    })();

    commonmodule.IntegerStatusGGIO = (function() {

        /**
         * Properties of an IntegerStatusGGIO.
         * @memberof commonmodule
         * @interface IIntegerStatusGGIO
         * @property {commonmodule.ILogicalNode|null} [logicalNode] IntegerStatusGGIO logicalNode
         * @property {commonmodule.IStatusINS|null} [IntIn] IntegerStatusGGIO IntIn
         * @property {commonmodule.IOptional_PhaseCodeKind|null} [Phase] IntegerStatusGGIO Phase
         */

        /**
         * Constructs a new IntegerStatusGGIO.
         * @memberof commonmodule
         * @classdesc Represents an IntegerStatusGGIO.
         * @implements IIntegerStatusGGIO
         * @constructor
         * @param {commonmodule.IIntegerStatusGGIO=} [properties] Properties to set
         */
        function IntegerStatusGGIO(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * IntegerStatusGGIO logicalNode.
         * @member {commonmodule.ILogicalNode|null|undefined} logicalNode
         * @memberof commonmodule.IntegerStatusGGIO
         * @instance
         */
        IntegerStatusGGIO.prototype.logicalNode = null;

        /**
         * IntegerStatusGGIO IntIn.
         * @member {commonmodule.IStatusINS|null|undefined} IntIn
         * @memberof commonmodule.IntegerStatusGGIO
         * @instance
         */
        IntegerStatusGGIO.prototype.IntIn = null;

        /**
         * IntegerStatusGGIO Phase.
         * @member {commonmodule.IOptional_PhaseCodeKind|null|undefined} Phase
         * @memberof commonmodule.IntegerStatusGGIO
         * @instance
         */
        IntegerStatusGGIO.prototype.Phase = null;

        /**
         * Creates a new IntegerStatusGGIO instance using the specified properties.
         * @function create
         * @memberof commonmodule.IntegerStatusGGIO
         * @static
         * @param {commonmodule.IIntegerStatusGGIO=} [properties] Properties to set
         * @returns {commonmodule.IntegerStatusGGIO} IntegerStatusGGIO instance
         */
        IntegerStatusGGIO.create = function create(properties) {
            return new IntegerStatusGGIO(properties);
        };

        /**
         * Encodes the specified IntegerStatusGGIO message. Does not implicitly {@link commonmodule.IntegerStatusGGIO.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.IntegerStatusGGIO
         * @static
         * @param {commonmodule.IIntegerStatusGGIO} message IntegerStatusGGIO message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IntegerStatusGGIO.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNode != null && Object.hasOwnProperty.call(message, "logicalNode"))
                $root.commonmodule.LogicalNode.encode(message.logicalNode, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.IntIn != null && Object.hasOwnProperty.call(message, "IntIn"))
                $root.commonmodule.StatusINS.encode(message.IntIn, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.Phase != null && Object.hasOwnProperty.call(message, "Phase"))
                $root.commonmodule.Optional_PhaseCodeKind.encode(message.Phase, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified IntegerStatusGGIO message, length delimited. Does not implicitly {@link commonmodule.IntegerStatusGGIO.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.IntegerStatusGGIO
         * @static
         * @param {commonmodule.IIntegerStatusGGIO} message IntegerStatusGGIO message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        IntegerStatusGGIO.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an IntegerStatusGGIO message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.IntegerStatusGGIO
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.IntegerStatusGGIO} IntegerStatusGGIO
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IntegerStatusGGIO.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.IntegerStatusGGIO();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNode = $root.commonmodule.LogicalNode.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.IntIn = $root.commonmodule.StatusINS.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.Phase = $root.commonmodule.Optional_PhaseCodeKind.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an IntegerStatusGGIO message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.IntegerStatusGGIO
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.IntegerStatusGGIO} IntegerStatusGGIO
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        IntegerStatusGGIO.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an IntegerStatusGGIO message.
         * @function verify
         * @memberof commonmodule.IntegerStatusGGIO
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        IntegerStatusGGIO.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode")) {
                var error = $root.commonmodule.LogicalNode.verify(message.logicalNode);
                if (error)
                    return "logicalNode." + error;
            }
            if (message.IntIn != null && message.hasOwnProperty("IntIn")) {
                var error = $root.commonmodule.StatusINS.verify(message.IntIn);
                if (error)
                    return "IntIn." + error;
            }
            if (message.Phase != null && message.hasOwnProperty("Phase")) {
                var error = $root.commonmodule.Optional_PhaseCodeKind.verify(message.Phase);
                if (error)
                    return "Phase." + error;
            }
            return null;
        };

        /**
         * Creates an IntegerStatusGGIO message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.IntegerStatusGGIO
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.IntegerStatusGGIO} IntegerStatusGGIO
         */
        IntegerStatusGGIO.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.IntegerStatusGGIO)
                return object;
            var message = new $root.commonmodule.IntegerStatusGGIO();
            if (object.logicalNode != null) {
                if (typeof object.logicalNode !== "object")
                    throw TypeError(".commonmodule.IntegerStatusGGIO.logicalNode: object expected");
                message.logicalNode = $root.commonmodule.LogicalNode.fromObject(object.logicalNode);
            }
            if (object.IntIn != null) {
                if (typeof object.IntIn !== "object")
                    throw TypeError(".commonmodule.IntegerStatusGGIO.IntIn: object expected");
                message.IntIn = $root.commonmodule.StatusINS.fromObject(object.IntIn);
            }
            if (object.Phase != null) {
                if (typeof object.Phase !== "object")
                    throw TypeError(".commonmodule.IntegerStatusGGIO.Phase: object expected");
                message.Phase = $root.commonmodule.Optional_PhaseCodeKind.fromObject(object.Phase);
            }
            return message;
        };

        /**
         * Creates a plain object from an IntegerStatusGGIO message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.IntegerStatusGGIO
         * @static
         * @param {commonmodule.IntegerStatusGGIO} message IntegerStatusGGIO
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        IntegerStatusGGIO.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNode = null;
                object.IntIn = null;
                object.Phase = null;
            }
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode"))
                object.logicalNode = $root.commonmodule.LogicalNode.toObject(message.logicalNode, options);
            if (message.IntIn != null && message.hasOwnProperty("IntIn"))
                object.IntIn = $root.commonmodule.StatusINS.toObject(message.IntIn, options);
            if (message.Phase != null && message.hasOwnProperty("Phase"))
                object.Phase = $root.commonmodule.Optional_PhaseCodeKind.toObject(message.Phase, options);
            return object;
        };

        /**
         * Converts this IntegerStatusGGIO to JSON.
         * @function toJSON
         * @memberof commonmodule.IntegerStatusGGIO
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        IntegerStatusGGIO.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return IntegerStatusGGIO;
    })();

    commonmodule.MeasurementValue = (function() {

        /**
         * Properties of a MeasurementValue.
         * @memberof commonmodule
         * @interface IMeasurementValue
         * @property {commonmodule.IIdentifiedObject|null} [identifiedObject] MeasurementValue identifiedObject
         */

        /**
         * Constructs a new MeasurementValue.
         * @memberof commonmodule
         * @classdesc Represents a MeasurementValue.
         * @implements IMeasurementValue
         * @constructor
         * @param {commonmodule.IMeasurementValue=} [properties] Properties to set
         */
        function MeasurementValue(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MeasurementValue identifiedObject.
         * @member {commonmodule.IIdentifiedObject|null|undefined} identifiedObject
         * @memberof commonmodule.MeasurementValue
         * @instance
         */
        MeasurementValue.prototype.identifiedObject = null;

        /**
         * Creates a new MeasurementValue instance using the specified properties.
         * @function create
         * @memberof commonmodule.MeasurementValue
         * @static
         * @param {commonmodule.IMeasurementValue=} [properties] Properties to set
         * @returns {commonmodule.MeasurementValue} MeasurementValue instance
         */
        MeasurementValue.create = function create(properties) {
            return new MeasurementValue(properties);
        };

        /**
         * Encodes the specified MeasurementValue message. Does not implicitly {@link commonmodule.MeasurementValue.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.MeasurementValue
         * @static
         * @param {commonmodule.IMeasurementValue} message MeasurementValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MeasurementValue.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.identifiedObject != null && Object.hasOwnProperty.call(message, "identifiedObject"))
                $root.commonmodule.IdentifiedObject.encode(message.identifiedObject, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MeasurementValue message, length delimited. Does not implicitly {@link commonmodule.MeasurementValue.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.MeasurementValue
         * @static
         * @param {commonmodule.IMeasurementValue} message MeasurementValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MeasurementValue.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MeasurementValue message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.MeasurementValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.MeasurementValue} MeasurementValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MeasurementValue.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.MeasurementValue();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.identifiedObject = $root.commonmodule.IdentifiedObject.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MeasurementValue message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.MeasurementValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.MeasurementValue} MeasurementValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MeasurementValue.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MeasurementValue message.
         * @function verify
         * @memberof commonmodule.MeasurementValue
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MeasurementValue.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject")) {
                var error = $root.commonmodule.IdentifiedObject.verify(message.identifiedObject);
                if (error)
                    return "identifiedObject." + error;
            }
            return null;
        };

        /**
         * Creates a MeasurementValue message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.MeasurementValue
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.MeasurementValue} MeasurementValue
         */
        MeasurementValue.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.MeasurementValue)
                return object;
            var message = new $root.commonmodule.MeasurementValue();
            if (object.identifiedObject != null) {
                if (typeof object.identifiedObject !== "object")
                    throw TypeError(".commonmodule.MeasurementValue.identifiedObject: object expected");
                message.identifiedObject = $root.commonmodule.IdentifiedObject.fromObject(object.identifiedObject);
            }
            return message;
        };

        /**
         * Creates a plain object from a MeasurementValue message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.MeasurementValue
         * @static
         * @param {commonmodule.MeasurementValue} message MeasurementValue
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MeasurementValue.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.identifiedObject = null;
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject"))
                object.identifiedObject = $root.commonmodule.IdentifiedObject.toObject(message.identifiedObject, options);
            return object;
        };

        /**
         * Converts this MeasurementValue to JSON.
         * @function toJSON
         * @memberof commonmodule.MeasurementValue
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MeasurementValue.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MeasurementValue;
    })();

    commonmodule.Meter = (function() {

        /**
         * Properties of a Meter.
         * @memberof commonmodule
         * @interface IMeter
         * @property {commonmodule.IConductingEquipment|null} [conductingEquipment] Meter conductingEquipment
         */

        /**
         * Constructs a new Meter.
         * @memberof commonmodule
         * @classdesc Represents a Meter.
         * @implements IMeter
         * @constructor
         * @param {commonmodule.IMeter=} [properties] Properties to set
         */
        function Meter(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Meter conductingEquipment.
         * @member {commonmodule.IConductingEquipment|null|undefined} conductingEquipment
         * @memberof commonmodule.Meter
         * @instance
         */
        Meter.prototype.conductingEquipment = null;

        /**
         * Creates a new Meter instance using the specified properties.
         * @function create
         * @memberof commonmodule.Meter
         * @static
         * @param {commonmodule.IMeter=} [properties] Properties to set
         * @returns {commonmodule.Meter} Meter instance
         */
        Meter.create = function create(properties) {
            return new Meter(properties);
        };

        /**
         * Encodes the specified Meter message. Does not implicitly {@link commonmodule.Meter.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Meter
         * @static
         * @param {commonmodule.IMeter} message Meter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Meter.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipment != null && Object.hasOwnProperty.call(message, "conductingEquipment"))
                $root.commonmodule.ConductingEquipment.encode(message.conductingEquipment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Meter message, length delimited. Does not implicitly {@link commonmodule.Meter.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Meter
         * @static
         * @param {commonmodule.IMeter} message Meter message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Meter.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Meter message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Meter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Meter} Meter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Meter.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Meter();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipment = $root.commonmodule.ConductingEquipment.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Meter message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Meter
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Meter} Meter
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Meter.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Meter message.
         * @function verify
         * @memberof commonmodule.Meter
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Meter.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment")) {
                var error = $root.commonmodule.ConductingEquipment.verify(message.conductingEquipment);
                if (error)
                    return "conductingEquipment." + error;
            }
            return null;
        };

        /**
         * Creates a Meter message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Meter
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Meter} Meter
         */
        Meter.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Meter)
                return object;
            var message = new $root.commonmodule.Meter();
            if (object.conductingEquipment != null) {
                if (typeof object.conductingEquipment !== "object")
                    throw TypeError(".commonmodule.Meter.conductingEquipment: object expected");
                message.conductingEquipment = $root.commonmodule.ConductingEquipment.fromObject(object.conductingEquipment);
            }
            return message;
        };

        /**
         * Creates a plain object from a Meter message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Meter
         * @static
         * @param {commonmodule.Meter} message Meter
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Meter.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.conductingEquipment = null;
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment"))
                object.conductingEquipment = $root.commonmodule.ConductingEquipment.toObject(message.conductingEquipment, options);
            return object;
        };

        /**
         * Converts this Meter to JSON.
         * @function toJSON
         * @memberof commonmodule.Meter
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Meter.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Meter;
    })();

    commonmodule.OptimizationMessageInfo = (function() {

        /**
         * Properties of an OptimizationMessageInfo.
         * @memberof commonmodule
         * @interface IOptimizationMessageInfo
         * @property {commonmodule.IMessageInfo|null} [messageInfo] OptimizationMessageInfo messageInfo
         */

        /**
         * Constructs a new OptimizationMessageInfo.
         * @memberof commonmodule
         * @classdesc Represents an OptimizationMessageInfo.
         * @implements IOptimizationMessageInfo
         * @constructor
         * @param {commonmodule.IOptimizationMessageInfo=} [properties] Properties to set
         */
        function OptimizationMessageInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * OptimizationMessageInfo messageInfo.
         * @member {commonmodule.IMessageInfo|null|undefined} messageInfo
         * @memberof commonmodule.OptimizationMessageInfo
         * @instance
         */
        OptimizationMessageInfo.prototype.messageInfo = null;

        /**
         * Creates a new OptimizationMessageInfo instance using the specified properties.
         * @function create
         * @memberof commonmodule.OptimizationMessageInfo
         * @static
         * @param {commonmodule.IOptimizationMessageInfo=} [properties] Properties to set
         * @returns {commonmodule.OptimizationMessageInfo} OptimizationMessageInfo instance
         */
        OptimizationMessageInfo.create = function create(properties) {
            return new OptimizationMessageInfo(properties);
        };

        /**
         * Encodes the specified OptimizationMessageInfo message. Does not implicitly {@link commonmodule.OptimizationMessageInfo.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.OptimizationMessageInfo
         * @static
         * @param {commonmodule.IOptimizationMessageInfo} message OptimizationMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        OptimizationMessageInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messageInfo != null && Object.hasOwnProperty.call(message, "messageInfo"))
                $root.commonmodule.MessageInfo.encode(message.messageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified OptimizationMessageInfo message, length delimited. Does not implicitly {@link commonmodule.OptimizationMessageInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.OptimizationMessageInfo
         * @static
         * @param {commonmodule.IOptimizationMessageInfo} message OptimizationMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        OptimizationMessageInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an OptimizationMessageInfo message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.OptimizationMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.OptimizationMessageInfo} OptimizationMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        OptimizationMessageInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.OptimizationMessageInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.messageInfo = $root.commonmodule.MessageInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an OptimizationMessageInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.OptimizationMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.OptimizationMessageInfo} OptimizationMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        OptimizationMessageInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an OptimizationMessageInfo message.
         * @function verify
         * @memberof commonmodule.OptimizationMessageInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        OptimizationMessageInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messageInfo != null && message.hasOwnProperty("messageInfo")) {
                var error = $root.commonmodule.MessageInfo.verify(message.messageInfo);
                if (error)
                    return "messageInfo." + error;
            }
            return null;
        };

        /**
         * Creates an OptimizationMessageInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.OptimizationMessageInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.OptimizationMessageInfo} OptimizationMessageInfo
         */
        OptimizationMessageInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.OptimizationMessageInfo)
                return object;
            var message = new $root.commonmodule.OptimizationMessageInfo();
            if (object.messageInfo != null) {
                if (typeof object.messageInfo !== "object")
                    throw TypeError(".commonmodule.OptimizationMessageInfo.messageInfo: object expected");
                message.messageInfo = $root.commonmodule.MessageInfo.fromObject(object.messageInfo);
            }
            return message;
        };

        /**
         * Creates a plain object from an OptimizationMessageInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.OptimizationMessageInfo
         * @static
         * @param {commonmodule.OptimizationMessageInfo} message OptimizationMessageInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        OptimizationMessageInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.messageInfo = null;
            if (message.messageInfo != null && message.hasOwnProperty("messageInfo"))
                object.messageInfo = $root.commonmodule.MessageInfo.toObject(message.messageInfo, options);
            return object;
        };

        /**
         * Converts this OptimizationMessageInfo to JSON.
         * @function toJSON
         * @memberof commonmodule.OptimizationMessageInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        OptimizationMessageInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return OptimizationMessageInfo;
    })();

    commonmodule.ReadingMMTN = (function() {

        /**
         * Properties of a ReadingMMTN.
         * @memberof commonmodule
         * @interface IReadingMMTN
         * @property {commonmodule.ILogicalNode|null} [logicalNode] ReadingMMTN logicalNode
         * @property {commonmodule.IBCR|null} [DmdVAh] ReadingMMTN DmdVAh
         * @property {commonmodule.IBCR|null} [DmdVArh] ReadingMMTN DmdVArh
         * @property {commonmodule.IBCR|null} [DmdWh] ReadingMMTN DmdWh
         * @property {commonmodule.IBCR|null} [SupVAh] ReadingMMTN SupVAh
         * @property {commonmodule.IBCR|null} [SupVArh] ReadingMMTN SupVArh
         * @property {commonmodule.IBCR|null} [SupWh] ReadingMMTN SupWh
         * @property {commonmodule.IBCR|null} [TotVAh] ReadingMMTN TotVAh
         * @property {commonmodule.IBCR|null} [TotVArh] ReadingMMTN TotVArh
         * @property {commonmodule.IBCR|null} [TotWh] ReadingMMTN TotWh
         */

        /**
         * Constructs a new ReadingMMTN.
         * @memberof commonmodule
         * @classdesc Represents a ReadingMMTN.
         * @implements IReadingMMTN
         * @constructor
         * @param {commonmodule.IReadingMMTN=} [properties] Properties to set
         */
        function ReadingMMTN(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ReadingMMTN logicalNode.
         * @member {commonmodule.ILogicalNode|null|undefined} logicalNode
         * @memberof commonmodule.ReadingMMTN
         * @instance
         */
        ReadingMMTN.prototype.logicalNode = null;

        /**
         * ReadingMMTN DmdVAh.
         * @member {commonmodule.IBCR|null|undefined} DmdVAh
         * @memberof commonmodule.ReadingMMTN
         * @instance
         */
        ReadingMMTN.prototype.DmdVAh = null;

        /**
         * ReadingMMTN DmdVArh.
         * @member {commonmodule.IBCR|null|undefined} DmdVArh
         * @memberof commonmodule.ReadingMMTN
         * @instance
         */
        ReadingMMTN.prototype.DmdVArh = null;

        /**
         * ReadingMMTN DmdWh.
         * @member {commonmodule.IBCR|null|undefined} DmdWh
         * @memberof commonmodule.ReadingMMTN
         * @instance
         */
        ReadingMMTN.prototype.DmdWh = null;

        /**
         * ReadingMMTN SupVAh.
         * @member {commonmodule.IBCR|null|undefined} SupVAh
         * @memberof commonmodule.ReadingMMTN
         * @instance
         */
        ReadingMMTN.prototype.SupVAh = null;

        /**
         * ReadingMMTN SupVArh.
         * @member {commonmodule.IBCR|null|undefined} SupVArh
         * @memberof commonmodule.ReadingMMTN
         * @instance
         */
        ReadingMMTN.prototype.SupVArh = null;

        /**
         * ReadingMMTN SupWh.
         * @member {commonmodule.IBCR|null|undefined} SupWh
         * @memberof commonmodule.ReadingMMTN
         * @instance
         */
        ReadingMMTN.prototype.SupWh = null;

        /**
         * ReadingMMTN TotVAh.
         * @member {commonmodule.IBCR|null|undefined} TotVAh
         * @memberof commonmodule.ReadingMMTN
         * @instance
         */
        ReadingMMTN.prototype.TotVAh = null;

        /**
         * ReadingMMTN TotVArh.
         * @member {commonmodule.IBCR|null|undefined} TotVArh
         * @memberof commonmodule.ReadingMMTN
         * @instance
         */
        ReadingMMTN.prototype.TotVArh = null;

        /**
         * ReadingMMTN TotWh.
         * @member {commonmodule.IBCR|null|undefined} TotWh
         * @memberof commonmodule.ReadingMMTN
         * @instance
         */
        ReadingMMTN.prototype.TotWh = null;

        /**
         * Creates a new ReadingMMTN instance using the specified properties.
         * @function create
         * @memberof commonmodule.ReadingMMTN
         * @static
         * @param {commonmodule.IReadingMMTN=} [properties] Properties to set
         * @returns {commonmodule.ReadingMMTN} ReadingMMTN instance
         */
        ReadingMMTN.create = function create(properties) {
            return new ReadingMMTN(properties);
        };

        /**
         * Encodes the specified ReadingMMTN message. Does not implicitly {@link commonmodule.ReadingMMTN.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ReadingMMTN
         * @static
         * @param {commonmodule.IReadingMMTN} message ReadingMMTN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReadingMMTN.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNode != null && Object.hasOwnProperty.call(message, "logicalNode"))
                $root.commonmodule.LogicalNode.encode(message.logicalNode, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.DmdVAh != null && Object.hasOwnProperty.call(message, "DmdVAh"))
                $root.commonmodule.BCR.encode(message.DmdVAh, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.DmdVArh != null && Object.hasOwnProperty.call(message, "DmdVArh"))
                $root.commonmodule.BCR.encode(message.DmdVArh, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.DmdWh != null && Object.hasOwnProperty.call(message, "DmdWh"))
                $root.commonmodule.BCR.encode(message.DmdWh, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.SupVAh != null && Object.hasOwnProperty.call(message, "SupVAh"))
                $root.commonmodule.BCR.encode(message.SupVAh, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.SupVArh != null && Object.hasOwnProperty.call(message, "SupVArh"))
                $root.commonmodule.BCR.encode(message.SupVArh, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.SupWh != null && Object.hasOwnProperty.call(message, "SupWh"))
                $root.commonmodule.BCR.encode(message.SupWh, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.TotVAh != null && Object.hasOwnProperty.call(message, "TotVAh"))
                $root.commonmodule.BCR.encode(message.TotVAh, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.TotVArh != null && Object.hasOwnProperty.call(message, "TotVArh"))
                $root.commonmodule.BCR.encode(message.TotVArh, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.TotWh != null && Object.hasOwnProperty.call(message, "TotWh"))
                $root.commonmodule.BCR.encode(message.TotWh, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ReadingMMTN message, length delimited. Does not implicitly {@link commonmodule.ReadingMMTN.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ReadingMMTN
         * @static
         * @param {commonmodule.IReadingMMTN} message ReadingMMTN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReadingMMTN.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ReadingMMTN message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ReadingMMTN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ReadingMMTN} ReadingMMTN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReadingMMTN.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ReadingMMTN();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNode = $root.commonmodule.LogicalNode.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.DmdVAh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.DmdVArh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.DmdWh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.SupVAh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.SupVArh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.SupWh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.TotVAh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.TotVArh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.TotWh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ReadingMMTN message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ReadingMMTN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ReadingMMTN} ReadingMMTN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReadingMMTN.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ReadingMMTN message.
         * @function verify
         * @memberof commonmodule.ReadingMMTN
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ReadingMMTN.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode")) {
                var error = $root.commonmodule.LogicalNode.verify(message.logicalNode);
                if (error)
                    return "logicalNode." + error;
            }
            if (message.DmdVAh != null && message.hasOwnProperty("DmdVAh")) {
                var error = $root.commonmodule.BCR.verify(message.DmdVAh);
                if (error)
                    return "DmdVAh." + error;
            }
            if (message.DmdVArh != null && message.hasOwnProperty("DmdVArh")) {
                var error = $root.commonmodule.BCR.verify(message.DmdVArh);
                if (error)
                    return "DmdVArh." + error;
            }
            if (message.DmdWh != null && message.hasOwnProperty("DmdWh")) {
                var error = $root.commonmodule.BCR.verify(message.DmdWh);
                if (error)
                    return "DmdWh." + error;
            }
            if (message.SupVAh != null && message.hasOwnProperty("SupVAh")) {
                var error = $root.commonmodule.BCR.verify(message.SupVAh);
                if (error)
                    return "SupVAh." + error;
            }
            if (message.SupVArh != null && message.hasOwnProperty("SupVArh")) {
                var error = $root.commonmodule.BCR.verify(message.SupVArh);
                if (error)
                    return "SupVArh." + error;
            }
            if (message.SupWh != null && message.hasOwnProperty("SupWh")) {
                var error = $root.commonmodule.BCR.verify(message.SupWh);
                if (error)
                    return "SupWh." + error;
            }
            if (message.TotVAh != null && message.hasOwnProperty("TotVAh")) {
                var error = $root.commonmodule.BCR.verify(message.TotVAh);
                if (error)
                    return "TotVAh." + error;
            }
            if (message.TotVArh != null && message.hasOwnProperty("TotVArh")) {
                var error = $root.commonmodule.BCR.verify(message.TotVArh);
                if (error)
                    return "TotVArh." + error;
            }
            if (message.TotWh != null && message.hasOwnProperty("TotWh")) {
                var error = $root.commonmodule.BCR.verify(message.TotWh);
                if (error)
                    return "TotWh." + error;
            }
            return null;
        };

        /**
         * Creates a ReadingMMTN message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ReadingMMTN
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ReadingMMTN} ReadingMMTN
         */
        ReadingMMTN.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ReadingMMTN)
                return object;
            var message = new $root.commonmodule.ReadingMMTN();
            if (object.logicalNode != null) {
                if (typeof object.logicalNode !== "object")
                    throw TypeError(".commonmodule.ReadingMMTN.logicalNode: object expected");
                message.logicalNode = $root.commonmodule.LogicalNode.fromObject(object.logicalNode);
            }
            if (object.DmdVAh != null) {
                if (typeof object.DmdVAh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTN.DmdVAh: object expected");
                message.DmdVAh = $root.commonmodule.BCR.fromObject(object.DmdVAh);
            }
            if (object.DmdVArh != null) {
                if (typeof object.DmdVArh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTN.DmdVArh: object expected");
                message.DmdVArh = $root.commonmodule.BCR.fromObject(object.DmdVArh);
            }
            if (object.DmdWh != null) {
                if (typeof object.DmdWh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTN.DmdWh: object expected");
                message.DmdWh = $root.commonmodule.BCR.fromObject(object.DmdWh);
            }
            if (object.SupVAh != null) {
                if (typeof object.SupVAh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTN.SupVAh: object expected");
                message.SupVAh = $root.commonmodule.BCR.fromObject(object.SupVAh);
            }
            if (object.SupVArh != null) {
                if (typeof object.SupVArh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTN.SupVArh: object expected");
                message.SupVArh = $root.commonmodule.BCR.fromObject(object.SupVArh);
            }
            if (object.SupWh != null) {
                if (typeof object.SupWh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTN.SupWh: object expected");
                message.SupWh = $root.commonmodule.BCR.fromObject(object.SupWh);
            }
            if (object.TotVAh != null) {
                if (typeof object.TotVAh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTN.TotVAh: object expected");
                message.TotVAh = $root.commonmodule.BCR.fromObject(object.TotVAh);
            }
            if (object.TotVArh != null) {
                if (typeof object.TotVArh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTN.TotVArh: object expected");
                message.TotVArh = $root.commonmodule.BCR.fromObject(object.TotVArh);
            }
            if (object.TotWh != null) {
                if (typeof object.TotWh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTN.TotWh: object expected");
                message.TotWh = $root.commonmodule.BCR.fromObject(object.TotWh);
            }
            return message;
        };

        /**
         * Creates a plain object from a ReadingMMTN message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ReadingMMTN
         * @static
         * @param {commonmodule.ReadingMMTN} message ReadingMMTN
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ReadingMMTN.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNode = null;
                object.DmdVAh = null;
                object.DmdVArh = null;
                object.DmdWh = null;
                object.SupVAh = null;
                object.SupVArh = null;
                object.SupWh = null;
                object.TotVAh = null;
                object.TotVArh = null;
                object.TotWh = null;
            }
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode"))
                object.logicalNode = $root.commonmodule.LogicalNode.toObject(message.logicalNode, options);
            if (message.DmdVAh != null && message.hasOwnProperty("DmdVAh"))
                object.DmdVAh = $root.commonmodule.BCR.toObject(message.DmdVAh, options);
            if (message.DmdVArh != null && message.hasOwnProperty("DmdVArh"))
                object.DmdVArh = $root.commonmodule.BCR.toObject(message.DmdVArh, options);
            if (message.DmdWh != null && message.hasOwnProperty("DmdWh"))
                object.DmdWh = $root.commonmodule.BCR.toObject(message.DmdWh, options);
            if (message.SupVAh != null && message.hasOwnProperty("SupVAh"))
                object.SupVAh = $root.commonmodule.BCR.toObject(message.SupVAh, options);
            if (message.SupVArh != null && message.hasOwnProperty("SupVArh"))
                object.SupVArh = $root.commonmodule.BCR.toObject(message.SupVArh, options);
            if (message.SupWh != null && message.hasOwnProperty("SupWh"))
                object.SupWh = $root.commonmodule.BCR.toObject(message.SupWh, options);
            if (message.TotVAh != null && message.hasOwnProperty("TotVAh"))
                object.TotVAh = $root.commonmodule.BCR.toObject(message.TotVAh, options);
            if (message.TotVArh != null && message.hasOwnProperty("TotVArh"))
                object.TotVArh = $root.commonmodule.BCR.toObject(message.TotVArh, options);
            if (message.TotWh != null && message.hasOwnProperty("TotWh"))
                object.TotWh = $root.commonmodule.BCR.toObject(message.TotWh, options);
            return object;
        };

        /**
         * Converts this ReadingMMTN to JSON.
         * @function toJSON
         * @memberof commonmodule.ReadingMMTN
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ReadingMMTN.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ReadingMMTN;
    })();

    commonmodule.PhaseMMTN = (function() {

        /**
         * Properties of a PhaseMMTN.
         * @memberof commonmodule
         * @interface IPhaseMMTN
         * @property {commonmodule.IReadingMMTN|null} [phsA] PhaseMMTN phsA
         * @property {commonmodule.IReadingMMTN|null} [phsAB] PhaseMMTN phsAB
         * @property {commonmodule.IReadingMMTN|null} [phsB] PhaseMMTN phsB
         * @property {commonmodule.IReadingMMTN|null} [phsBC] PhaseMMTN phsBC
         * @property {commonmodule.IReadingMMTN|null} [phsC] PhaseMMTN phsC
         * @property {commonmodule.IReadingMMTN|null} [phsCA] PhaseMMTN phsCA
         */

        /**
         * Constructs a new PhaseMMTN.
         * @memberof commonmodule
         * @classdesc Represents a PhaseMMTN.
         * @implements IPhaseMMTN
         * @constructor
         * @param {commonmodule.IPhaseMMTN=} [properties] Properties to set
         */
        function PhaseMMTN(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PhaseMMTN phsA.
         * @member {commonmodule.IReadingMMTN|null|undefined} phsA
         * @memberof commonmodule.PhaseMMTN
         * @instance
         */
        PhaseMMTN.prototype.phsA = null;

        /**
         * PhaseMMTN phsAB.
         * @member {commonmodule.IReadingMMTN|null|undefined} phsAB
         * @memberof commonmodule.PhaseMMTN
         * @instance
         */
        PhaseMMTN.prototype.phsAB = null;

        /**
         * PhaseMMTN phsB.
         * @member {commonmodule.IReadingMMTN|null|undefined} phsB
         * @memberof commonmodule.PhaseMMTN
         * @instance
         */
        PhaseMMTN.prototype.phsB = null;

        /**
         * PhaseMMTN phsBC.
         * @member {commonmodule.IReadingMMTN|null|undefined} phsBC
         * @memberof commonmodule.PhaseMMTN
         * @instance
         */
        PhaseMMTN.prototype.phsBC = null;

        /**
         * PhaseMMTN phsC.
         * @member {commonmodule.IReadingMMTN|null|undefined} phsC
         * @memberof commonmodule.PhaseMMTN
         * @instance
         */
        PhaseMMTN.prototype.phsC = null;

        /**
         * PhaseMMTN phsCA.
         * @member {commonmodule.IReadingMMTN|null|undefined} phsCA
         * @memberof commonmodule.PhaseMMTN
         * @instance
         */
        PhaseMMTN.prototype.phsCA = null;

        /**
         * Creates a new PhaseMMTN instance using the specified properties.
         * @function create
         * @memberof commonmodule.PhaseMMTN
         * @static
         * @param {commonmodule.IPhaseMMTN=} [properties] Properties to set
         * @returns {commonmodule.PhaseMMTN} PhaseMMTN instance
         */
        PhaseMMTN.create = function create(properties) {
            return new PhaseMMTN(properties);
        };

        /**
         * Encodes the specified PhaseMMTN message. Does not implicitly {@link commonmodule.PhaseMMTN.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.PhaseMMTN
         * @static
         * @param {commonmodule.IPhaseMMTN} message PhaseMMTN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PhaseMMTN.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.phsA != null && Object.hasOwnProperty.call(message, "phsA"))
                $root.commonmodule.ReadingMMTN.encode(message.phsA, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.phsAB != null && Object.hasOwnProperty.call(message, "phsAB"))
                $root.commonmodule.ReadingMMTN.encode(message.phsAB, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.phsB != null && Object.hasOwnProperty.call(message, "phsB"))
                $root.commonmodule.ReadingMMTN.encode(message.phsB, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.phsBC != null && Object.hasOwnProperty.call(message, "phsBC"))
                $root.commonmodule.ReadingMMTN.encode(message.phsBC, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.phsC != null && Object.hasOwnProperty.call(message, "phsC"))
                $root.commonmodule.ReadingMMTN.encode(message.phsC, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.phsCA != null && Object.hasOwnProperty.call(message, "phsCA"))
                $root.commonmodule.ReadingMMTN.encode(message.phsCA, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified PhaseMMTN message, length delimited. Does not implicitly {@link commonmodule.PhaseMMTN.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.PhaseMMTN
         * @static
         * @param {commonmodule.IPhaseMMTN} message PhaseMMTN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PhaseMMTN.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PhaseMMTN message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.PhaseMMTN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.PhaseMMTN} PhaseMMTN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PhaseMMTN.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.PhaseMMTN();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.phsA = $root.commonmodule.ReadingMMTN.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.phsAB = $root.commonmodule.ReadingMMTN.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.phsB = $root.commonmodule.ReadingMMTN.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.phsBC = $root.commonmodule.ReadingMMTN.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.phsC = $root.commonmodule.ReadingMMTN.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.phsCA = $root.commonmodule.ReadingMMTN.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PhaseMMTN message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.PhaseMMTN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.PhaseMMTN} PhaseMMTN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PhaseMMTN.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PhaseMMTN message.
         * @function verify
         * @memberof commonmodule.PhaseMMTN
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PhaseMMTN.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.phsA != null && message.hasOwnProperty("phsA")) {
                var error = $root.commonmodule.ReadingMMTN.verify(message.phsA);
                if (error)
                    return "phsA." + error;
            }
            if (message.phsAB != null && message.hasOwnProperty("phsAB")) {
                var error = $root.commonmodule.ReadingMMTN.verify(message.phsAB);
                if (error)
                    return "phsAB." + error;
            }
            if (message.phsB != null && message.hasOwnProperty("phsB")) {
                var error = $root.commonmodule.ReadingMMTN.verify(message.phsB);
                if (error)
                    return "phsB." + error;
            }
            if (message.phsBC != null && message.hasOwnProperty("phsBC")) {
                var error = $root.commonmodule.ReadingMMTN.verify(message.phsBC);
                if (error)
                    return "phsBC." + error;
            }
            if (message.phsC != null && message.hasOwnProperty("phsC")) {
                var error = $root.commonmodule.ReadingMMTN.verify(message.phsC);
                if (error)
                    return "phsC." + error;
            }
            if (message.phsCA != null && message.hasOwnProperty("phsCA")) {
                var error = $root.commonmodule.ReadingMMTN.verify(message.phsCA);
                if (error)
                    return "phsCA." + error;
            }
            return null;
        };

        /**
         * Creates a PhaseMMTN message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.PhaseMMTN
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.PhaseMMTN} PhaseMMTN
         */
        PhaseMMTN.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.PhaseMMTN)
                return object;
            var message = new $root.commonmodule.PhaseMMTN();
            if (object.phsA != null) {
                if (typeof object.phsA !== "object")
                    throw TypeError(".commonmodule.PhaseMMTN.phsA: object expected");
                message.phsA = $root.commonmodule.ReadingMMTN.fromObject(object.phsA);
            }
            if (object.phsAB != null) {
                if (typeof object.phsAB !== "object")
                    throw TypeError(".commonmodule.PhaseMMTN.phsAB: object expected");
                message.phsAB = $root.commonmodule.ReadingMMTN.fromObject(object.phsAB);
            }
            if (object.phsB != null) {
                if (typeof object.phsB !== "object")
                    throw TypeError(".commonmodule.PhaseMMTN.phsB: object expected");
                message.phsB = $root.commonmodule.ReadingMMTN.fromObject(object.phsB);
            }
            if (object.phsBC != null) {
                if (typeof object.phsBC !== "object")
                    throw TypeError(".commonmodule.PhaseMMTN.phsBC: object expected");
                message.phsBC = $root.commonmodule.ReadingMMTN.fromObject(object.phsBC);
            }
            if (object.phsC != null) {
                if (typeof object.phsC !== "object")
                    throw TypeError(".commonmodule.PhaseMMTN.phsC: object expected");
                message.phsC = $root.commonmodule.ReadingMMTN.fromObject(object.phsC);
            }
            if (object.phsCA != null) {
                if (typeof object.phsCA !== "object")
                    throw TypeError(".commonmodule.PhaseMMTN.phsCA: object expected");
                message.phsCA = $root.commonmodule.ReadingMMTN.fromObject(object.phsCA);
            }
            return message;
        };

        /**
         * Creates a plain object from a PhaseMMTN message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.PhaseMMTN
         * @static
         * @param {commonmodule.PhaseMMTN} message PhaseMMTN
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PhaseMMTN.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.phsA = null;
                object.phsAB = null;
                object.phsB = null;
                object.phsBC = null;
                object.phsC = null;
                object.phsCA = null;
            }
            if (message.phsA != null && message.hasOwnProperty("phsA"))
                object.phsA = $root.commonmodule.ReadingMMTN.toObject(message.phsA, options);
            if (message.phsAB != null && message.hasOwnProperty("phsAB"))
                object.phsAB = $root.commonmodule.ReadingMMTN.toObject(message.phsAB, options);
            if (message.phsB != null && message.hasOwnProperty("phsB"))
                object.phsB = $root.commonmodule.ReadingMMTN.toObject(message.phsB, options);
            if (message.phsBC != null && message.hasOwnProperty("phsBC"))
                object.phsBC = $root.commonmodule.ReadingMMTN.toObject(message.phsBC, options);
            if (message.phsC != null && message.hasOwnProperty("phsC"))
                object.phsC = $root.commonmodule.ReadingMMTN.toObject(message.phsC, options);
            if (message.phsCA != null && message.hasOwnProperty("phsCA"))
                object.phsCA = $root.commonmodule.ReadingMMTN.toObject(message.phsCA, options);
            return object;
        };

        /**
         * Converts this PhaseMMTN to JSON.
         * @function toJSON
         * @memberof commonmodule.PhaseMMTN
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PhaseMMTN.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PhaseMMTN;
    })();

    commonmodule.RampRate = (function() {

        /**
         * Properties of a RampRate.
         * @memberof commonmodule
         * @interface IRampRate
         * @property {google.protobuf.IFloatValue|null} [negativeReactivePowerKVArPerMin] RampRate negativeReactivePowerKVArPerMin
         * @property {google.protobuf.IFloatValue|null} [negativeRealPowerKWPerMin] RampRate negativeRealPowerKWPerMin
         * @property {google.protobuf.IFloatValue|null} [positiveReactivePowerKVArPerMin] RampRate positiveReactivePowerKVArPerMin
         * @property {google.protobuf.IFloatValue|null} [positiveRealPowerKWPerMin] RampRate positiveRealPowerKWPerMin
         */

        /**
         * Constructs a new RampRate.
         * @memberof commonmodule
         * @classdesc Represents a RampRate.
         * @implements IRampRate
         * @constructor
         * @param {commonmodule.IRampRate=} [properties] Properties to set
         */
        function RampRate(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RampRate negativeReactivePowerKVArPerMin.
         * @member {google.protobuf.IFloatValue|null|undefined} negativeReactivePowerKVArPerMin
         * @memberof commonmodule.RampRate
         * @instance
         */
        RampRate.prototype.negativeReactivePowerKVArPerMin = null;

        /**
         * RampRate negativeRealPowerKWPerMin.
         * @member {google.protobuf.IFloatValue|null|undefined} negativeRealPowerKWPerMin
         * @memberof commonmodule.RampRate
         * @instance
         */
        RampRate.prototype.negativeRealPowerKWPerMin = null;

        /**
         * RampRate positiveReactivePowerKVArPerMin.
         * @member {google.protobuf.IFloatValue|null|undefined} positiveReactivePowerKVArPerMin
         * @memberof commonmodule.RampRate
         * @instance
         */
        RampRate.prototype.positiveReactivePowerKVArPerMin = null;

        /**
         * RampRate positiveRealPowerKWPerMin.
         * @member {google.protobuf.IFloatValue|null|undefined} positiveRealPowerKWPerMin
         * @memberof commonmodule.RampRate
         * @instance
         */
        RampRate.prototype.positiveRealPowerKWPerMin = null;

        /**
         * Creates a new RampRate instance using the specified properties.
         * @function create
         * @memberof commonmodule.RampRate
         * @static
         * @param {commonmodule.IRampRate=} [properties] Properties to set
         * @returns {commonmodule.RampRate} RampRate instance
         */
        RampRate.create = function create(properties) {
            return new RampRate(properties);
        };

        /**
         * Encodes the specified RampRate message. Does not implicitly {@link commonmodule.RampRate.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.RampRate
         * @static
         * @param {commonmodule.IRampRate} message RampRate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RampRate.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.negativeReactivePowerKVArPerMin != null && Object.hasOwnProperty.call(message, "negativeReactivePowerKVArPerMin"))
                $root.google.protobuf.FloatValue.encode(message.negativeReactivePowerKVArPerMin, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.negativeRealPowerKWPerMin != null && Object.hasOwnProperty.call(message, "negativeRealPowerKWPerMin"))
                $root.google.protobuf.FloatValue.encode(message.negativeRealPowerKWPerMin, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.positiveReactivePowerKVArPerMin != null && Object.hasOwnProperty.call(message, "positiveReactivePowerKVArPerMin"))
                $root.google.protobuf.FloatValue.encode(message.positiveReactivePowerKVArPerMin, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.positiveRealPowerKWPerMin != null && Object.hasOwnProperty.call(message, "positiveRealPowerKWPerMin"))
                $root.google.protobuf.FloatValue.encode(message.positiveRealPowerKWPerMin, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RampRate message, length delimited. Does not implicitly {@link commonmodule.RampRate.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.RampRate
         * @static
         * @param {commonmodule.IRampRate} message RampRate message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RampRate.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RampRate message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.RampRate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.RampRate} RampRate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RampRate.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.RampRate();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.negativeReactivePowerKVArPerMin = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.negativeRealPowerKWPerMin = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.positiveReactivePowerKVArPerMin = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.positiveRealPowerKWPerMin = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RampRate message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.RampRate
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.RampRate} RampRate
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RampRate.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RampRate message.
         * @function verify
         * @memberof commonmodule.RampRate
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RampRate.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.negativeReactivePowerKVArPerMin != null && message.hasOwnProperty("negativeReactivePowerKVArPerMin")) {
                var error = $root.google.protobuf.FloatValue.verify(message.negativeReactivePowerKVArPerMin);
                if (error)
                    return "negativeReactivePowerKVArPerMin." + error;
            }
            if (message.negativeRealPowerKWPerMin != null && message.hasOwnProperty("negativeRealPowerKWPerMin")) {
                var error = $root.google.protobuf.FloatValue.verify(message.negativeRealPowerKWPerMin);
                if (error)
                    return "negativeRealPowerKWPerMin." + error;
            }
            if (message.positiveReactivePowerKVArPerMin != null && message.hasOwnProperty("positiveReactivePowerKVArPerMin")) {
                var error = $root.google.protobuf.FloatValue.verify(message.positiveReactivePowerKVArPerMin);
                if (error)
                    return "positiveReactivePowerKVArPerMin." + error;
            }
            if (message.positiveRealPowerKWPerMin != null && message.hasOwnProperty("positiveRealPowerKWPerMin")) {
                var error = $root.google.protobuf.FloatValue.verify(message.positiveRealPowerKWPerMin);
                if (error)
                    return "positiveRealPowerKWPerMin." + error;
            }
            return null;
        };

        /**
         * Creates a RampRate message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.RampRate
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.RampRate} RampRate
         */
        RampRate.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.RampRate)
                return object;
            var message = new $root.commonmodule.RampRate();
            if (object.negativeReactivePowerKVArPerMin != null) {
                if (typeof object.negativeReactivePowerKVArPerMin !== "object")
                    throw TypeError(".commonmodule.RampRate.negativeReactivePowerKVArPerMin: object expected");
                message.negativeReactivePowerKVArPerMin = $root.google.protobuf.FloatValue.fromObject(object.negativeReactivePowerKVArPerMin);
            }
            if (object.negativeRealPowerKWPerMin != null) {
                if (typeof object.negativeRealPowerKWPerMin !== "object")
                    throw TypeError(".commonmodule.RampRate.negativeRealPowerKWPerMin: object expected");
                message.negativeRealPowerKWPerMin = $root.google.protobuf.FloatValue.fromObject(object.negativeRealPowerKWPerMin);
            }
            if (object.positiveReactivePowerKVArPerMin != null) {
                if (typeof object.positiveReactivePowerKVArPerMin !== "object")
                    throw TypeError(".commonmodule.RampRate.positiveReactivePowerKVArPerMin: object expected");
                message.positiveReactivePowerKVArPerMin = $root.google.protobuf.FloatValue.fromObject(object.positiveReactivePowerKVArPerMin);
            }
            if (object.positiveRealPowerKWPerMin != null) {
                if (typeof object.positiveRealPowerKWPerMin !== "object")
                    throw TypeError(".commonmodule.RampRate.positiveRealPowerKWPerMin: object expected");
                message.positiveRealPowerKWPerMin = $root.google.protobuf.FloatValue.fromObject(object.positiveRealPowerKWPerMin);
            }
            return message;
        };

        /**
         * Creates a plain object from a RampRate message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.RampRate
         * @static
         * @param {commonmodule.RampRate} message RampRate
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RampRate.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.negativeReactivePowerKVArPerMin = null;
                object.negativeRealPowerKWPerMin = null;
                object.positiveReactivePowerKVArPerMin = null;
                object.positiveRealPowerKWPerMin = null;
            }
            if (message.negativeReactivePowerKVArPerMin != null && message.hasOwnProperty("negativeReactivePowerKVArPerMin"))
                object.negativeReactivePowerKVArPerMin = $root.google.protobuf.FloatValue.toObject(message.negativeReactivePowerKVArPerMin, options);
            if (message.negativeRealPowerKWPerMin != null && message.hasOwnProperty("negativeRealPowerKWPerMin"))
                object.negativeRealPowerKWPerMin = $root.google.protobuf.FloatValue.toObject(message.negativeRealPowerKWPerMin, options);
            if (message.positiveReactivePowerKVArPerMin != null && message.hasOwnProperty("positiveReactivePowerKVArPerMin"))
                object.positiveReactivePowerKVArPerMin = $root.google.protobuf.FloatValue.toObject(message.positiveReactivePowerKVArPerMin, options);
            if (message.positiveRealPowerKWPerMin != null && message.hasOwnProperty("positiveRealPowerKWPerMin"))
                object.positiveRealPowerKWPerMin = $root.google.protobuf.FloatValue.toObject(message.positiveRealPowerKWPerMin, options);
            return object;
        };

        /**
         * Converts this RampRate to JSON.
         * @function toJSON
         * @memberof commonmodule.RampRate
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RampRate.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RampRate;
    })();

    commonmodule.ReadingMessageInfo = (function() {

        /**
         * Properties of a ReadingMessageInfo.
         * @memberof commonmodule
         * @interface IReadingMessageInfo
         * @property {commonmodule.IMessageInfo|null} [messageInfo] ReadingMessageInfo messageInfo
         */

        /**
         * Constructs a new ReadingMessageInfo.
         * @memberof commonmodule
         * @classdesc Represents a ReadingMessageInfo.
         * @implements IReadingMessageInfo
         * @constructor
         * @param {commonmodule.IReadingMessageInfo=} [properties] Properties to set
         */
        function ReadingMessageInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ReadingMessageInfo messageInfo.
         * @member {commonmodule.IMessageInfo|null|undefined} messageInfo
         * @memberof commonmodule.ReadingMessageInfo
         * @instance
         */
        ReadingMessageInfo.prototype.messageInfo = null;

        /**
         * Creates a new ReadingMessageInfo instance using the specified properties.
         * @function create
         * @memberof commonmodule.ReadingMessageInfo
         * @static
         * @param {commonmodule.IReadingMessageInfo=} [properties] Properties to set
         * @returns {commonmodule.ReadingMessageInfo} ReadingMessageInfo instance
         */
        ReadingMessageInfo.create = function create(properties) {
            return new ReadingMessageInfo(properties);
        };

        /**
         * Encodes the specified ReadingMessageInfo message. Does not implicitly {@link commonmodule.ReadingMessageInfo.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ReadingMessageInfo
         * @static
         * @param {commonmodule.IReadingMessageInfo} message ReadingMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReadingMessageInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messageInfo != null && Object.hasOwnProperty.call(message, "messageInfo"))
                $root.commonmodule.MessageInfo.encode(message.messageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ReadingMessageInfo message, length delimited. Does not implicitly {@link commonmodule.ReadingMessageInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ReadingMessageInfo
         * @static
         * @param {commonmodule.IReadingMessageInfo} message ReadingMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReadingMessageInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ReadingMessageInfo message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ReadingMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ReadingMessageInfo} ReadingMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReadingMessageInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ReadingMessageInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.messageInfo = $root.commonmodule.MessageInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ReadingMessageInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ReadingMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ReadingMessageInfo} ReadingMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReadingMessageInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ReadingMessageInfo message.
         * @function verify
         * @memberof commonmodule.ReadingMessageInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ReadingMessageInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messageInfo != null && message.hasOwnProperty("messageInfo")) {
                var error = $root.commonmodule.MessageInfo.verify(message.messageInfo);
                if (error)
                    return "messageInfo." + error;
            }
            return null;
        };

        /**
         * Creates a ReadingMessageInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ReadingMessageInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ReadingMessageInfo} ReadingMessageInfo
         */
        ReadingMessageInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ReadingMessageInfo)
                return object;
            var message = new $root.commonmodule.ReadingMessageInfo();
            if (object.messageInfo != null) {
                if (typeof object.messageInfo !== "object")
                    throw TypeError(".commonmodule.ReadingMessageInfo.messageInfo: object expected");
                message.messageInfo = $root.commonmodule.MessageInfo.fromObject(object.messageInfo);
            }
            return message;
        };

        /**
         * Creates a plain object from a ReadingMessageInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ReadingMessageInfo
         * @static
         * @param {commonmodule.ReadingMessageInfo} message ReadingMessageInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ReadingMessageInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.messageInfo = null;
            if (message.messageInfo != null && message.hasOwnProperty("messageInfo"))
                object.messageInfo = $root.commonmodule.MessageInfo.toObject(message.messageInfo, options);
            return object;
        };

        /**
         * Converts this ReadingMessageInfo to JSON.
         * @function toJSON
         * @memberof commonmodule.ReadingMessageInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ReadingMessageInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ReadingMessageInfo;
    })();

    commonmodule.ReadingMMTR = (function() {

        /**
         * Properties of a ReadingMMTR.
         * @memberof commonmodule
         * @interface IReadingMMTR
         * @property {commonmodule.ILogicalNode|null} [logicalNode] ReadingMMTR logicalNode
         * @property {commonmodule.IBCR|null} [DmdVAh] ReadingMMTR DmdVAh
         * @property {commonmodule.IBCR|null} [DmdVArh] ReadingMMTR DmdVArh
         * @property {commonmodule.IBCR|null} [DmdWh] ReadingMMTR DmdWh
         * @property {commonmodule.IBCR|null} [SupVAh] ReadingMMTR SupVAh
         * @property {commonmodule.IBCR|null} [SupVArh] ReadingMMTR SupVArh
         * @property {commonmodule.IBCR|null} [SupWh] ReadingMMTR SupWh
         * @property {commonmodule.IBCR|null} [TotVAh] ReadingMMTR TotVAh
         * @property {commonmodule.IBCR|null} [TotVArh] ReadingMMTR TotVArh
         * @property {commonmodule.IBCR|null} [TotWh] ReadingMMTR TotWh
         */

        /**
         * Constructs a new ReadingMMTR.
         * @memberof commonmodule
         * @classdesc Represents a ReadingMMTR.
         * @implements IReadingMMTR
         * @constructor
         * @param {commonmodule.IReadingMMTR=} [properties] Properties to set
         */
        function ReadingMMTR(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ReadingMMTR logicalNode.
         * @member {commonmodule.ILogicalNode|null|undefined} logicalNode
         * @memberof commonmodule.ReadingMMTR
         * @instance
         */
        ReadingMMTR.prototype.logicalNode = null;

        /**
         * ReadingMMTR DmdVAh.
         * @member {commonmodule.IBCR|null|undefined} DmdVAh
         * @memberof commonmodule.ReadingMMTR
         * @instance
         */
        ReadingMMTR.prototype.DmdVAh = null;

        /**
         * ReadingMMTR DmdVArh.
         * @member {commonmodule.IBCR|null|undefined} DmdVArh
         * @memberof commonmodule.ReadingMMTR
         * @instance
         */
        ReadingMMTR.prototype.DmdVArh = null;

        /**
         * ReadingMMTR DmdWh.
         * @member {commonmodule.IBCR|null|undefined} DmdWh
         * @memberof commonmodule.ReadingMMTR
         * @instance
         */
        ReadingMMTR.prototype.DmdWh = null;

        /**
         * ReadingMMTR SupVAh.
         * @member {commonmodule.IBCR|null|undefined} SupVAh
         * @memberof commonmodule.ReadingMMTR
         * @instance
         */
        ReadingMMTR.prototype.SupVAh = null;

        /**
         * ReadingMMTR SupVArh.
         * @member {commonmodule.IBCR|null|undefined} SupVArh
         * @memberof commonmodule.ReadingMMTR
         * @instance
         */
        ReadingMMTR.prototype.SupVArh = null;

        /**
         * ReadingMMTR SupWh.
         * @member {commonmodule.IBCR|null|undefined} SupWh
         * @memberof commonmodule.ReadingMMTR
         * @instance
         */
        ReadingMMTR.prototype.SupWh = null;

        /**
         * ReadingMMTR TotVAh.
         * @member {commonmodule.IBCR|null|undefined} TotVAh
         * @memberof commonmodule.ReadingMMTR
         * @instance
         */
        ReadingMMTR.prototype.TotVAh = null;

        /**
         * ReadingMMTR TotVArh.
         * @member {commonmodule.IBCR|null|undefined} TotVArh
         * @memberof commonmodule.ReadingMMTR
         * @instance
         */
        ReadingMMTR.prototype.TotVArh = null;

        /**
         * ReadingMMTR TotWh.
         * @member {commonmodule.IBCR|null|undefined} TotWh
         * @memberof commonmodule.ReadingMMTR
         * @instance
         */
        ReadingMMTR.prototype.TotWh = null;

        /**
         * Creates a new ReadingMMTR instance using the specified properties.
         * @function create
         * @memberof commonmodule.ReadingMMTR
         * @static
         * @param {commonmodule.IReadingMMTR=} [properties] Properties to set
         * @returns {commonmodule.ReadingMMTR} ReadingMMTR instance
         */
        ReadingMMTR.create = function create(properties) {
            return new ReadingMMTR(properties);
        };

        /**
         * Encodes the specified ReadingMMTR message. Does not implicitly {@link commonmodule.ReadingMMTR.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ReadingMMTR
         * @static
         * @param {commonmodule.IReadingMMTR} message ReadingMMTR message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReadingMMTR.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNode != null && Object.hasOwnProperty.call(message, "logicalNode"))
                $root.commonmodule.LogicalNode.encode(message.logicalNode, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.DmdVAh != null && Object.hasOwnProperty.call(message, "DmdVAh"))
                $root.commonmodule.BCR.encode(message.DmdVAh, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.DmdVArh != null && Object.hasOwnProperty.call(message, "DmdVArh"))
                $root.commonmodule.BCR.encode(message.DmdVArh, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.DmdWh != null && Object.hasOwnProperty.call(message, "DmdWh"))
                $root.commonmodule.BCR.encode(message.DmdWh, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.SupVAh != null && Object.hasOwnProperty.call(message, "SupVAh"))
                $root.commonmodule.BCR.encode(message.SupVAh, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.SupVArh != null && Object.hasOwnProperty.call(message, "SupVArh"))
                $root.commonmodule.BCR.encode(message.SupVArh, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.SupWh != null && Object.hasOwnProperty.call(message, "SupWh"))
                $root.commonmodule.BCR.encode(message.SupWh, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.TotVAh != null && Object.hasOwnProperty.call(message, "TotVAh"))
                $root.commonmodule.BCR.encode(message.TotVAh, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.TotVArh != null && Object.hasOwnProperty.call(message, "TotVArh"))
                $root.commonmodule.BCR.encode(message.TotVArh, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.TotWh != null && Object.hasOwnProperty.call(message, "TotWh"))
                $root.commonmodule.BCR.encode(message.TotWh, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ReadingMMTR message, length delimited. Does not implicitly {@link commonmodule.ReadingMMTR.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ReadingMMTR
         * @static
         * @param {commonmodule.IReadingMMTR} message ReadingMMTR message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReadingMMTR.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ReadingMMTR message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ReadingMMTR
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ReadingMMTR} ReadingMMTR
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReadingMMTR.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ReadingMMTR();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNode = $root.commonmodule.LogicalNode.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.DmdVAh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.DmdVArh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.DmdWh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.SupVAh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.SupVArh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.SupWh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.TotVAh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.TotVArh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.TotWh = $root.commonmodule.BCR.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ReadingMMTR message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ReadingMMTR
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ReadingMMTR} ReadingMMTR
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReadingMMTR.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ReadingMMTR message.
         * @function verify
         * @memberof commonmodule.ReadingMMTR
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ReadingMMTR.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode")) {
                var error = $root.commonmodule.LogicalNode.verify(message.logicalNode);
                if (error)
                    return "logicalNode." + error;
            }
            if (message.DmdVAh != null && message.hasOwnProperty("DmdVAh")) {
                var error = $root.commonmodule.BCR.verify(message.DmdVAh);
                if (error)
                    return "DmdVAh." + error;
            }
            if (message.DmdVArh != null && message.hasOwnProperty("DmdVArh")) {
                var error = $root.commonmodule.BCR.verify(message.DmdVArh);
                if (error)
                    return "DmdVArh." + error;
            }
            if (message.DmdWh != null && message.hasOwnProperty("DmdWh")) {
                var error = $root.commonmodule.BCR.verify(message.DmdWh);
                if (error)
                    return "DmdWh." + error;
            }
            if (message.SupVAh != null && message.hasOwnProperty("SupVAh")) {
                var error = $root.commonmodule.BCR.verify(message.SupVAh);
                if (error)
                    return "SupVAh." + error;
            }
            if (message.SupVArh != null && message.hasOwnProperty("SupVArh")) {
                var error = $root.commonmodule.BCR.verify(message.SupVArh);
                if (error)
                    return "SupVArh." + error;
            }
            if (message.SupWh != null && message.hasOwnProperty("SupWh")) {
                var error = $root.commonmodule.BCR.verify(message.SupWh);
                if (error)
                    return "SupWh." + error;
            }
            if (message.TotVAh != null && message.hasOwnProperty("TotVAh")) {
                var error = $root.commonmodule.BCR.verify(message.TotVAh);
                if (error)
                    return "TotVAh." + error;
            }
            if (message.TotVArh != null && message.hasOwnProperty("TotVArh")) {
                var error = $root.commonmodule.BCR.verify(message.TotVArh);
                if (error)
                    return "TotVArh." + error;
            }
            if (message.TotWh != null && message.hasOwnProperty("TotWh")) {
                var error = $root.commonmodule.BCR.verify(message.TotWh);
                if (error)
                    return "TotWh." + error;
            }
            return null;
        };

        /**
         * Creates a ReadingMMTR message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ReadingMMTR
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ReadingMMTR} ReadingMMTR
         */
        ReadingMMTR.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ReadingMMTR)
                return object;
            var message = new $root.commonmodule.ReadingMMTR();
            if (object.logicalNode != null) {
                if (typeof object.logicalNode !== "object")
                    throw TypeError(".commonmodule.ReadingMMTR.logicalNode: object expected");
                message.logicalNode = $root.commonmodule.LogicalNode.fromObject(object.logicalNode);
            }
            if (object.DmdVAh != null) {
                if (typeof object.DmdVAh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTR.DmdVAh: object expected");
                message.DmdVAh = $root.commonmodule.BCR.fromObject(object.DmdVAh);
            }
            if (object.DmdVArh != null) {
                if (typeof object.DmdVArh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTR.DmdVArh: object expected");
                message.DmdVArh = $root.commonmodule.BCR.fromObject(object.DmdVArh);
            }
            if (object.DmdWh != null) {
                if (typeof object.DmdWh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTR.DmdWh: object expected");
                message.DmdWh = $root.commonmodule.BCR.fromObject(object.DmdWh);
            }
            if (object.SupVAh != null) {
                if (typeof object.SupVAh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTR.SupVAh: object expected");
                message.SupVAh = $root.commonmodule.BCR.fromObject(object.SupVAh);
            }
            if (object.SupVArh != null) {
                if (typeof object.SupVArh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTR.SupVArh: object expected");
                message.SupVArh = $root.commonmodule.BCR.fromObject(object.SupVArh);
            }
            if (object.SupWh != null) {
                if (typeof object.SupWh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTR.SupWh: object expected");
                message.SupWh = $root.commonmodule.BCR.fromObject(object.SupWh);
            }
            if (object.TotVAh != null) {
                if (typeof object.TotVAh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTR.TotVAh: object expected");
                message.TotVAh = $root.commonmodule.BCR.fromObject(object.TotVAh);
            }
            if (object.TotVArh != null) {
                if (typeof object.TotVArh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTR.TotVArh: object expected");
                message.TotVArh = $root.commonmodule.BCR.fromObject(object.TotVArh);
            }
            if (object.TotWh != null) {
                if (typeof object.TotWh !== "object")
                    throw TypeError(".commonmodule.ReadingMMTR.TotWh: object expected");
                message.TotWh = $root.commonmodule.BCR.fromObject(object.TotWh);
            }
            return message;
        };

        /**
         * Creates a plain object from a ReadingMMTR message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ReadingMMTR
         * @static
         * @param {commonmodule.ReadingMMTR} message ReadingMMTR
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ReadingMMTR.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNode = null;
                object.DmdVAh = null;
                object.DmdVArh = null;
                object.DmdWh = null;
                object.SupVAh = null;
                object.SupVArh = null;
                object.SupWh = null;
                object.TotVAh = null;
                object.TotVArh = null;
                object.TotWh = null;
            }
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode"))
                object.logicalNode = $root.commonmodule.LogicalNode.toObject(message.logicalNode, options);
            if (message.DmdVAh != null && message.hasOwnProperty("DmdVAh"))
                object.DmdVAh = $root.commonmodule.BCR.toObject(message.DmdVAh, options);
            if (message.DmdVArh != null && message.hasOwnProperty("DmdVArh"))
                object.DmdVArh = $root.commonmodule.BCR.toObject(message.DmdVArh, options);
            if (message.DmdWh != null && message.hasOwnProperty("DmdWh"))
                object.DmdWh = $root.commonmodule.BCR.toObject(message.DmdWh, options);
            if (message.SupVAh != null && message.hasOwnProperty("SupVAh"))
                object.SupVAh = $root.commonmodule.BCR.toObject(message.SupVAh, options);
            if (message.SupVArh != null && message.hasOwnProperty("SupVArh"))
                object.SupVArh = $root.commonmodule.BCR.toObject(message.SupVArh, options);
            if (message.SupWh != null && message.hasOwnProperty("SupWh"))
                object.SupWh = $root.commonmodule.BCR.toObject(message.SupWh, options);
            if (message.TotVAh != null && message.hasOwnProperty("TotVAh"))
                object.TotVAh = $root.commonmodule.BCR.toObject(message.TotVAh, options);
            if (message.TotVArh != null && message.hasOwnProperty("TotVArh"))
                object.TotVArh = $root.commonmodule.BCR.toObject(message.TotVArh, options);
            if (message.TotWh != null && message.hasOwnProperty("TotWh"))
                object.TotWh = $root.commonmodule.BCR.toObject(message.TotWh, options);
            return object;
        };

        /**
         * Converts this ReadingMMTR to JSON.
         * @function toJSON
         * @memberof commonmodule.ReadingMMTR
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ReadingMMTR.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ReadingMMTR;
    })();

    commonmodule.WYE = (function() {

        /**
         * Properties of a WYE.
         * @memberof commonmodule
         * @interface IWYE
         * @property {commonmodule.ICMV|null} [net] WYE net
         * @property {commonmodule.ICMV|null} [neut] WYE neut
         * @property {commonmodule.ICMV|null} [phsA] WYE phsA
         * @property {commonmodule.ICMV|null} [phsB] WYE phsB
         * @property {commonmodule.ICMV|null} [phsC] WYE phsC
         */

        /**
         * Constructs a new WYE.
         * @memberof commonmodule
         * @classdesc Represents a WYE.
         * @implements IWYE
         * @constructor
         * @param {commonmodule.IWYE=} [properties] Properties to set
         */
        function WYE(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * WYE net.
         * @member {commonmodule.ICMV|null|undefined} net
         * @memberof commonmodule.WYE
         * @instance
         */
        WYE.prototype.net = null;

        /**
         * WYE neut.
         * @member {commonmodule.ICMV|null|undefined} neut
         * @memberof commonmodule.WYE
         * @instance
         */
        WYE.prototype.neut = null;

        /**
         * WYE phsA.
         * @member {commonmodule.ICMV|null|undefined} phsA
         * @memberof commonmodule.WYE
         * @instance
         */
        WYE.prototype.phsA = null;

        /**
         * WYE phsB.
         * @member {commonmodule.ICMV|null|undefined} phsB
         * @memberof commonmodule.WYE
         * @instance
         */
        WYE.prototype.phsB = null;

        /**
         * WYE phsC.
         * @member {commonmodule.ICMV|null|undefined} phsC
         * @memberof commonmodule.WYE
         * @instance
         */
        WYE.prototype.phsC = null;

        /**
         * Creates a new WYE instance using the specified properties.
         * @function create
         * @memberof commonmodule.WYE
         * @static
         * @param {commonmodule.IWYE=} [properties] Properties to set
         * @returns {commonmodule.WYE} WYE instance
         */
        WYE.create = function create(properties) {
            return new WYE(properties);
        };

        /**
         * Encodes the specified WYE message. Does not implicitly {@link commonmodule.WYE.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.WYE
         * @static
         * @param {commonmodule.IWYE} message WYE message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WYE.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.net != null && Object.hasOwnProperty.call(message, "net"))
                $root.commonmodule.CMV.encode(message.net, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.neut != null && Object.hasOwnProperty.call(message, "neut"))
                $root.commonmodule.CMV.encode(message.neut, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.phsA != null && Object.hasOwnProperty.call(message, "phsA"))
                $root.commonmodule.CMV.encode(message.phsA, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.phsB != null && Object.hasOwnProperty.call(message, "phsB"))
                $root.commonmodule.CMV.encode(message.phsB, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.phsC != null && Object.hasOwnProperty.call(message, "phsC"))
                $root.commonmodule.CMV.encode(message.phsC, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified WYE message, length delimited. Does not implicitly {@link commonmodule.WYE.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.WYE
         * @static
         * @param {commonmodule.IWYE} message WYE message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        WYE.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a WYE message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.WYE
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.WYE} WYE
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WYE.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.WYE();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.net = $root.commonmodule.CMV.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.neut = $root.commonmodule.CMV.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.phsA = $root.commonmodule.CMV.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.phsB = $root.commonmodule.CMV.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.phsC = $root.commonmodule.CMV.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a WYE message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.WYE
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.WYE} WYE
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        WYE.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a WYE message.
         * @function verify
         * @memberof commonmodule.WYE
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        WYE.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.net != null && message.hasOwnProperty("net")) {
                var error = $root.commonmodule.CMV.verify(message.net);
                if (error)
                    return "net." + error;
            }
            if (message.neut != null && message.hasOwnProperty("neut")) {
                var error = $root.commonmodule.CMV.verify(message.neut);
                if (error)
                    return "neut." + error;
            }
            if (message.phsA != null && message.hasOwnProperty("phsA")) {
                var error = $root.commonmodule.CMV.verify(message.phsA);
                if (error)
                    return "phsA." + error;
            }
            if (message.phsB != null && message.hasOwnProperty("phsB")) {
                var error = $root.commonmodule.CMV.verify(message.phsB);
                if (error)
                    return "phsB." + error;
            }
            if (message.phsC != null && message.hasOwnProperty("phsC")) {
                var error = $root.commonmodule.CMV.verify(message.phsC);
                if (error)
                    return "phsC." + error;
            }
            return null;
        };

        /**
         * Creates a WYE message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.WYE
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.WYE} WYE
         */
        WYE.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.WYE)
                return object;
            var message = new $root.commonmodule.WYE();
            if (object.net != null) {
                if (typeof object.net !== "object")
                    throw TypeError(".commonmodule.WYE.net: object expected");
                message.net = $root.commonmodule.CMV.fromObject(object.net);
            }
            if (object.neut != null) {
                if (typeof object.neut !== "object")
                    throw TypeError(".commonmodule.WYE.neut: object expected");
                message.neut = $root.commonmodule.CMV.fromObject(object.neut);
            }
            if (object.phsA != null) {
                if (typeof object.phsA !== "object")
                    throw TypeError(".commonmodule.WYE.phsA: object expected");
                message.phsA = $root.commonmodule.CMV.fromObject(object.phsA);
            }
            if (object.phsB != null) {
                if (typeof object.phsB !== "object")
                    throw TypeError(".commonmodule.WYE.phsB: object expected");
                message.phsB = $root.commonmodule.CMV.fromObject(object.phsB);
            }
            if (object.phsC != null) {
                if (typeof object.phsC !== "object")
                    throw TypeError(".commonmodule.WYE.phsC: object expected");
                message.phsC = $root.commonmodule.CMV.fromObject(object.phsC);
            }
            return message;
        };

        /**
         * Creates a plain object from a WYE message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.WYE
         * @static
         * @param {commonmodule.WYE} message WYE
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        WYE.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.net = null;
                object.neut = null;
                object.phsA = null;
                object.phsB = null;
                object.phsC = null;
            }
            if (message.net != null && message.hasOwnProperty("net"))
                object.net = $root.commonmodule.CMV.toObject(message.net, options);
            if (message.neut != null && message.hasOwnProperty("neut"))
                object.neut = $root.commonmodule.CMV.toObject(message.neut, options);
            if (message.phsA != null && message.hasOwnProperty("phsA"))
                object.phsA = $root.commonmodule.CMV.toObject(message.phsA, options);
            if (message.phsB != null && message.hasOwnProperty("phsB"))
                object.phsB = $root.commonmodule.CMV.toObject(message.phsB, options);
            if (message.phsC != null && message.hasOwnProperty("phsC"))
                object.phsC = $root.commonmodule.CMV.toObject(message.phsC, options);
            return object;
        };

        /**
         * Converts this WYE to JSON.
         * @function toJSON
         * @memberof commonmodule.WYE
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        WYE.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return WYE;
    })();

    commonmodule.ReadingMMXU = (function() {

        /**
         * Properties of a ReadingMMXU.
         * @memberof commonmodule
         * @interface IReadingMMXU
         * @property {commonmodule.ILogicalNode|null} [logicalNode] ReadingMMXU logicalNode
         * @property {commonmodule.IWYE|null} [A] ReadingMMXU A
         * @property {commonmodule.IENG_CalcMethodKind|null} [ClcMth] ReadingMMXU ClcMth
         * @property {commonmodule.IMV|null} [Hz] ReadingMMXU Hz
         * @property {commonmodule.IWYE|null} [PF] ReadingMMXU PF
         * @property {commonmodule.IENG_PFSignKind|null} [PFSign] ReadingMMXU PFSign
         * @property {commonmodule.IWYE|null} [PhV] ReadingMMXU PhV
         * @property {commonmodule.IDEL|null} [PPV] ReadingMMXU PPV
         * @property {commonmodule.IWYE|null} [VA] ReadingMMXU VA
         * @property {commonmodule.IWYE|null} [VAr] ReadingMMXU VAr
         * @property {commonmodule.IWYE|null} [W] ReadingMMXU W
         */

        /**
         * Constructs a new ReadingMMXU.
         * @memberof commonmodule
         * @classdesc Represents a ReadingMMXU.
         * @implements IReadingMMXU
         * @constructor
         * @param {commonmodule.IReadingMMXU=} [properties] Properties to set
         */
        function ReadingMMXU(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ReadingMMXU logicalNode.
         * @member {commonmodule.ILogicalNode|null|undefined} logicalNode
         * @memberof commonmodule.ReadingMMXU
         * @instance
         */
        ReadingMMXU.prototype.logicalNode = null;

        /**
         * ReadingMMXU A.
         * @member {commonmodule.IWYE|null|undefined} A
         * @memberof commonmodule.ReadingMMXU
         * @instance
         */
        ReadingMMXU.prototype.A = null;

        /**
         * ReadingMMXU ClcMth.
         * @member {commonmodule.IENG_CalcMethodKind|null|undefined} ClcMth
         * @memberof commonmodule.ReadingMMXU
         * @instance
         */
        ReadingMMXU.prototype.ClcMth = null;

        /**
         * ReadingMMXU Hz.
         * @member {commonmodule.IMV|null|undefined} Hz
         * @memberof commonmodule.ReadingMMXU
         * @instance
         */
        ReadingMMXU.prototype.Hz = null;

        /**
         * ReadingMMXU PF.
         * @member {commonmodule.IWYE|null|undefined} PF
         * @memberof commonmodule.ReadingMMXU
         * @instance
         */
        ReadingMMXU.prototype.PF = null;

        /**
         * ReadingMMXU PFSign.
         * @member {commonmodule.IENG_PFSignKind|null|undefined} PFSign
         * @memberof commonmodule.ReadingMMXU
         * @instance
         */
        ReadingMMXU.prototype.PFSign = null;

        /**
         * ReadingMMXU PhV.
         * @member {commonmodule.IWYE|null|undefined} PhV
         * @memberof commonmodule.ReadingMMXU
         * @instance
         */
        ReadingMMXU.prototype.PhV = null;

        /**
         * ReadingMMXU PPV.
         * @member {commonmodule.IDEL|null|undefined} PPV
         * @memberof commonmodule.ReadingMMXU
         * @instance
         */
        ReadingMMXU.prototype.PPV = null;

        /**
         * ReadingMMXU VA.
         * @member {commonmodule.IWYE|null|undefined} VA
         * @memberof commonmodule.ReadingMMXU
         * @instance
         */
        ReadingMMXU.prototype.VA = null;

        /**
         * ReadingMMXU VAr.
         * @member {commonmodule.IWYE|null|undefined} VAr
         * @memberof commonmodule.ReadingMMXU
         * @instance
         */
        ReadingMMXU.prototype.VAr = null;

        /**
         * ReadingMMXU W.
         * @member {commonmodule.IWYE|null|undefined} W
         * @memberof commonmodule.ReadingMMXU
         * @instance
         */
        ReadingMMXU.prototype.W = null;

        /**
         * Creates a new ReadingMMXU instance using the specified properties.
         * @function create
         * @memberof commonmodule.ReadingMMXU
         * @static
         * @param {commonmodule.IReadingMMXU=} [properties] Properties to set
         * @returns {commonmodule.ReadingMMXU} ReadingMMXU instance
         */
        ReadingMMXU.create = function create(properties) {
            return new ReadingMMXU(properties);
        };

        /**
         * Encodes the specified ReadingMMXU message. Does not implicitly {@link commonmodule.ReadingMMXU.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.ReadingMMXU
         * @static
         * @param {commonmodule.IReadingMMXU} message ReadingMMXU message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReadingMMXU.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNode != null && Object.hasOwnProperty.call(message, "logicalNode"))
                $root.commonmodule.LogicalNode.encode(message.logicalNode, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.A != null && Object.hasOwnProperty.call(message, "A"))
                $root.commonmodule.WYE.encode(message.A, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.ClcMth != null && Object.hasOwnProperty.call(message, "ClcMth"))
                $root.commonmodule.ENG_CalcMethodKind.encode(message.ClcMth, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.Hz != null && Object.hasOwnProperty.call(message, "Hz"))
                $root.commonmodule.MV.encode(message.Hz, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.PF != null && Object.hasOwnProperty.call(message, "PF"))
                $root.commonmodule.WYE.encode(message.PF, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.PFSign != null && Object.hasOwnProperty.call(message, "PFSign"))
                $root.commonmodule.ENG_PFSignKind.encode(message.PFSign, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.PhV != null && Object.hasOwnProperty.call(message, "PhV"))
                $root.commonmodule.WYE.encode(message.PhV, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.PPV != null && Object.hasOwnProperty.call(message, "PPV"))
                $root.commonmodule.DEL.encode(message.PPV, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.VA != null && Object.hasOwnProperty.call(message, "VA"))
                $root.commonmodule.WYE.encode(message.VA, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.VAr != null && Object.hasOwnProperty.call(message, "VAr"))
                $root.commonmodule.WYE.encode(message.VAr, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.W != null && Object.hasOwnProperty.call(message, "W"))
                $root.commonmodule.WYE.encode(message.W, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ReadingMMXU message, length delimited. Does not implicitly {@link commonmodule.ReadingMMXU.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.ReadingMMXU
         * @static
         * @param {commonmodule.IReadingMMXU} message ReadingMMXU message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ReadingMMXU.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ReadingMMXU message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.ReadingMMXU
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.ReadingMMXU} ReadingMMXU
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReadingMMXU.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.ReadingMMXU();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNode = $root.commonmodule.LogicalNode.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.A = $root.commonmodule.WYE.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.ClcMth = $root.commonmodule.ENG_CalcMethodKind.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.Hz = $root.commonmodule.MV.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.PF = $root.commonmodule.WYE.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.PFSign = $root.commonmodule.ENG_PFSignKind.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.PhV = $root.commonmodule.WYE.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.PPV = $root.commonmodule.DEL.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.VA = $root.commonmodule.WYE.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.VAr = $root.commonmodule.WYE.decode(reader, reader.uint32());
                    break;
                case 11:
                    message.W = $root.commonmodule.WYE.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ReadingMMXU message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.ReadingMMXU
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.ReadingMMXU} ReadingMMXU
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ReadingMMXU.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ReadingMMXU message.
         * @function verify
         * @memberof commonmodule.ReadingMMXU
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ReadingMMXU.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode")) {
                var error = $root.commonmodule.LogicalNode.verify(message.logicalNode);
                if (error)
                    return "logicalNode." + error;
            }
            if (message.A != null && message.hasOwnProperty("A")) {
                var error = $root.commonmodule.WYE.verify(message.A);
                if (error)
                    return "A." + error;
            }
            if (message.ClcMth != null && message.hasOwnProperty("ClcMth")) {
                var error = $root.commonmodule.ENG_CalcMethodKind.verify(message.ClcMth);
                if (error)
                    return "ClcMth." + error;
            }
            if (message.Hz != null && message.hasOwnProperty("Hz")) {
                var error = $root.commonmodule.MV.verify(message.Hz);
                if (error)
                    return "Hz." + error;
            }
            if (message.PF != null && message.hasOwnProperty("PF")) {
                var error = $root.commonmodule.WYE.verify(message.PF);
                if (error)
                    return "PF." + error;
            }
            if (message.PFSign != null && message.hasOwnProperty("PFSign")) {
                var error = $root.commonmodule.ENG_PFSignKind.verify(message.PFSign);
                if (error)
                    return "PFSign." + error;
            }
            if (message.PhV != null && message.hasOwnProperty("PhV")) {
                var error = $root.commonmodule.WYE.verify(message.PhV);
                if (error)
                    return "PhV." + error;
            }
            if (message.PPV != null && message.hasOwnProperty("PPV")) {
                var error = $root.commonmodule.DEL.verify(message.PPV);
                if (error)
                    return "PPV." + error;
            }
            if (message.VA != null && message.hasOwnProperty("VA")) {
                var error = $root.commonmodule.WYE.verify(message.VA);
                if (error)
                    return "VA." + error;
            }
            if (message.VAr != null && message.hasOwnProperty("VAr")) {
                var error = $root.commonmodule.WYE.verify(message.VAr);
                if (error)
                    return "VAr." + error;
            }
            if (message.W != null && message.hasOwnProperty("W")) {
                var error = $root.commonmodule.WYE.verify(message.W);
                if (error)
                    return "W." + error;
            }
            return null;
        };

        /**
         * Creates a ReadingMMXU message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.ReadingMMXU
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.ReadingMMXU} ReadingMMXU
         */
        ReadingMMXU.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.ReadingMMXU)
                return object;
            var message = new $root.commonmodule.ReadingMMXU();
            if (object.logicalNode != null) {
                if (typeof object.logicalNode !== "object")
                    throw TypeError(".commonmodule.ReadingMMXU.logicalNode: object expected");
                message.logicalNode = $root.commonmodule.LogicalNode.fromObject(object.logicalNode);
            }
            if (object.A != null) {
                if (typeof object.A !== "object")
                    throw TypeError(".commonmodule.ReadingMMXU.A: object expected");
                message.A = $root.commonmodule.WYE.fromObject(object.A);
            }
            if (object.ClcMth != null) {
                if (typeof object.ClcMth !== "object")
                    throw TypeError(".commonmodule.ReadingMMXU.ClcMth: object expected");
                message.ClcMth = $root.commonmodule.ENG_CalcMethodKind.fromObject(object.ClcMth);
            }
            if (object.Hz != null) {
                if (typeof object.Hz !== "object")
                    throw TypeError(".commonmodule.ReadingMMXU.Hz: object expected");
                message.Hz = $root.commonmodule.MV.fromObject(object.Hz);
            }
            if (object.PF != null) {
                if (typeof object.PF !== "object")
                    throw TypeError(".commonmodule.ReadingMMXU.PF: object expected");
                message.PF = $root.commonmodule.WYE.fromObject(object.PF);
            }
            if (object.PFSign != null) {
                if (typeof object.PFSign !== "object")
                    throw TypeError(".commonmodule.ReadingMMXU.PFSign: object expected");
                message.PFSign = $root.commonmodule.ENG_PFSignKind.fromObject(object.PFSign);
            }
            if (object.PhV != null) {
                if (typeof object.PhV !== "object")
                    throw TypeError(".commonmodule.ReadingMMXU.PhV: object expected");
                message.PhV = $root.commonmodule.WYE.fromObject(object.PhV);
            }
            if (object.PPV != null) {
                if (typeof object.PPV !== "object")
                    throw TypeError(".commonmodule.ReadingMMXU.PPV: object expected");
                message.PPV = $root.commonmodule.DEL.fromObject(object.PPV);
            }
            if (object.VA != null) {
                if (typeof object.VA !== "object")
                    throw TypeError(".commonmodule.ReadingMMXU.VA: object expected");
                message.VA = $root.commonmodule.WYE.fromObject(object.VA);
            }
            if (object.VAr != null) {
                if (typeof object.VAr !== "object")
                    throw TypeError(".commonmodule.ReadingMMXU.VAr: object expected");
                message.VAr = $root.commonmodule.WYE.fromObject(object.VAr);
            }
            if (object.W != null) {
                if (typeof object.W !== "object")
                    throw TypeError(".commonmodule.ReadingMMXU.W: object expected");
                message.W = $root.commonmodule.WYE.fromObject(object.W);
            }
            return message;
        };

        /**
         * Creates a plain object from a ReadingMMXU message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.ReadingMMXU
         * @static
         * @param {commonmodule.ReadingMMXU} message ReadingMMXU
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ReadingMMXU.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNode = null;
                object.A = null;
                object.ClcMth = null;
                object.Hz = null;
                object.PF = null;
                object.PFSign = null;
                object.PhV = null;
                object.PPV = null;
                object.VA = null;
                object.VAr = null;
                object.W = null;
            }
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode"))
                object.logicalNode = $root.commonmodule.LogicalNode.toObject(message.logicalNode, options);
            if (message.A != null && message.hasOwnProperty("A"))
                object.A = $root.commonmodule.WYE.toObject(message.A, options);
            if (message.ClcMth != null && message.hasOwnProperty("ClcMth"))
                object.ClcMth = $root.commonmodule.ENG_CalcMethodKind.toObject(message.ClcMth, options);
            if (message.Hz != null && message.hasOwnProperty("Hz"))
                object.Hz = $root.commonmodule.MV.toObject(message.Hz, options);
            if (message.PF != null && message.hasOwnProperty("PF"))
                object.PF = $root.commonmodule.WYE.toObject(message.PF, options);
            if (message.PFSign != null && message.hasOwnProperty("PFSign"))
                object.PFSign = $root.commonmodule.ENG_PFSignKind.toObject(message.PFSign, options);
            if (message.PhV != null && message.hasOwnProperty("PhV"))
                object.PhV = $root.commonmodule.WYE.toObject(message.PhV, options);
            if (message.PPV != null && message.hasOwnProperty("PPV"))
                object.PPV = $root.commonmodule.DEL.toObject(message.PPV, options);
            if (message.VA != null && message.hasOwnProperty("VA"))
                object.VA = $root.commonmodule.WYE.toObject(message.VA, options);
            if (message.VAr != null && message.hasOwnProperty("VAr"))
                object.VAr = $root.commonmodule.WYE.toObject(message.VAr, options);
            if (message.W != null && message.hasOwnProperty("W"))
                object.W = $root.commonmodule.WYE.toObject(message.W, options);
            return object;
        };

        /**
         * Converts this ReadingMMXU to JSON.
         * @function toJSON
         * @memberof commonmodule.ReadingMMXU
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ReadingMMXU.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ReadingMMXU;
    })();

    /**
     * DbPosKind enum.
     * @name commonmodule.DbPosKind
     * @enum {number}
     * @property {number} DbPosKind_transient=0 DbPosKind_transient value
     * @property {number} DbPosKind_closed=1 DbPosKind_closed value
     * @property {number} DbPosKind_open=2 DbPosKind_open value
     * @property {number} DbPosKind_invalid=3 DbPosKind_invalid value
     */
    commonmodule.DbPosKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "DbPosKind_transient"] = 0;
        values[valuesById[1] = "DbPosKind_closed"] = 1;
        values[valuesById[2] = "DbPosKind_open"] = 2;
        values[valuesById[3] = "DbPosKind_invalid"] = 3;
        return values;
    })();

    commonmodule.Optional_DbPosKind = (function() {

        /**
         * Properties of an Optional_DbPosKind.
         * @memberof commonmodule
         * @interface IOptional_DbPosKind
         * @property {commonmodule.DbPosKind|null} [value] Optional_DbPosKind value
         */

        /**
         * Constructs a new Optional_DbPosKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_DbPosKind.
         * @implements IOptional_DbPosKind
         * @constructor
         * @param {commonmodule.IOptional_DbPosKind=} [properties] Properties to set
         */
        function Optional_DbPosKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_DbPosKind value.
         * @member {commonmodule.DbPosKind} value
         * @memberof commonmodule.Optional_DbPosKind
         * @instance
         */
        Optional_DbPosKind.prototype.value = 0;

        /**
         * Creates a new Optional_DbPosKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_DbPosKind
         * @static
         * @param {commonmodule.IOptional_DbPosKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_DbPosKind} Optional_DbPosKind instance
         */
        Optional_DbPosKind.create = function create(properties) {
            return new Optional_DbPosKind(properties);
        };

        /**
         * Encodes the specified Optional_DbPosKind message. Does not implicitly {@link commonmodule.Optional_DbPosKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_DbPosKind
         * @static
         * @param {commonmodule.IOptional_DbPosKind} message Optional_DbPosKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_DbPosKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_DbPosKind message, length delimited. Does not implicitly {@link commonmodule.Optional_DbPosKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_DbPosKind
         * @static
         * @param {commonmodule.IOptional_DbPosKind} message Optional_DbPosKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_DbPosKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_DbPosKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_DbPosKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_DbPosKind} Optional_DbPosKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_DbPosKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_DbPosKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_DbPosKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_DbPosKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_DbPosKind} Optional_DbPosKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_DbPosKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_DbPosKind message.
         * @function verify
         * @memberof commonmodule.Optional_DbPosKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_DbPosKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_DbPosKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_DbPosKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_DbPosKind} Optional_DbPosKind
         */
        Optional_DbPosKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_DbPosKind)
                return object;
            var message = new $root.commonmodule.Optional_DbPosKind();
            switch (object.value) {
            case "DbPosKind_transient":
            case 0:
                message.value = 0;
                break;
            case "DbPosKind_closed":
            case 1:
                message.value = 1;
                break;
            case "DbPosKind_open":
            case 2:
                message.value = 2;
                break;
            case "DbPosKind_invalid":
            case 3:
                message.value = 3;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_DbPosKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_DbPosKind
         * @static
         * @param {commonmodule.Optional_DbPosKind} message Optional_DbPosKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_DbPosKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "DbPosKind_transient" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.DbPosKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_DbPosKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_DbPosKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_DbPosKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_DbPosKind;
    })();

    commonmodule.StatusDPS = (function() {

        /**
         * Properties of a StatusDPS.
         * @memberof commonmodule
         * @interface IStatusDPS
         * @property {commonmodule.IQuality|null} [q] StatusDPS q
         * @property {commonmodule.DbPosKind|null} [stVal] StatusDPS stVal
         * @property {commonmodule.ITimestamp|null} [t] StatusDPS t
         */

        /**
         * Constructs a new StatusDPS.
         * @memberof commonmodule
         * @classdesc Represents a StatusDPS.
         * @implements IStatusDPS
         * @constructor
         * @param {commonmodule.IStatusDPS=} [properties] Properties to set
         */
        function StatusDPS(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StatusDPS q.
         * @member {commonmodule.IQuality|null|undefined} q
         * @memberof commonmodule.StatusDPS
         * @instance
         */
        StatusDPS.prototype.q = null;

        /**
         * StatusDPS stVal.
         * @member {commonmodule.DbPosKind} stVal
         * @memberof commonmodule.StatusDPS
         * @instance
         */
        StatusDPS.prototype.stVal = 0;

        /**
         * StatusDPS t.
         * @member {commonmodule.ITimestamp|null|undefined} t
         * @memberof commonmodule.StatusDPS
         * @instance
         */
        StatusDPS.prototype.t = null;

        /**
         * Creates a new StatusDPS instance using the specified properties.
         * @function create
         * @memberof commonmodule.StatusDPS
         * @static
         * @param {commonmodule.IStatusDPS=} [properties] Properties to set
         * @returns {commonmodule.StatusDPS} StatusDPS instance
         */
        StatusDPS.create = function create(properties) {
            return new StatusDPS(properties);
        };

        /**
         * Encodes the specified StatusDPS message. Does not implicitly {@link commonmodule.StatusDPS.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.StatusDPS
         * @static
         * @param {commonmodule.IStatusDPS} message StatusDPS message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusDPS.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.q != null && Object.hasOwnProperty.call(message, "q"))
                $root.commonmodule.Quality.encode(message.q, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.stVal != null && Object.hasOwnProperty.call(message, "stVal"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.stVal);
            if (message.t != null && Object.hasOwnProperty.call(message, "t"))
                $root.commonmodule.Timestamp.encode(message.t, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified StatusDPS message, length delimited. Does not implicitly {@link commonmodule.StatusDPS.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.StatusDPS
         * @static
         * @param {commonmodule.IStatusDPS} message StatusDPS message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusDPS.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StatusDPS message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.StatusDPS
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.StatusDPS} StatusDPS
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusDPS.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.StatusDPS();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.q = $root.commonmodule.Quality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.stVal = reader.int32();
                    break;
                case 3:
                    message.t = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a StatusDPS message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.StatusDPS
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.StatusDPS} StatusDPS
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusDPS.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StatusDPS message.
         * @function verify
         * @memberof commonmodule.StatusDPS
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StatusDPS.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.q != null && message.hasOwnProperty("q")) {
                var error = $root.commonmodule.Quality.verify(message.q);
                if (error)
                    return "q." + error;
            }
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                switch (message.stVal) {
                default:
                    return "stVal: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                    break;
                }
            if (message.t != null && message.hasOwnProperty("t")) {
                var error = $root.commonmodule.Timestamp.verify(message.t);
                if (error)
                    return "t." + error;
            }
            return null;
        };

        /**
         * Creates a StatusDPS message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.StatusDPS
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.StatusDPS} StatusDPS
         */
        StatusDPS.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.StatusDPS)
                return object;
            var message = new $root.commonmodule.StatusDPS();
            if (object.q != null) {
                if (typeof object.q !== "object")
                    throw TypeError(".commonmodule.StatusDPS.q: object expected");
                message.q = $root.commonmodule.Quality.fromObject(object.q);
            }
            switch (object.stVal) {
            case "DbPosKind_transient":
            case 0:
                message.stVal = 0;
                break;
            case "DbPosKind_closed":
            case 1:
                message.stVal = 1;
                break;
            case "DbPosKind_open":
            case 2:
                message.stVal = 2;
                break;
            case "DbPosKind_invalid":
            case 3:
                message.stVal = 3;
                break;
            }
            if (object.t != null) {
                if (typeof object.t !== "object")
                    throw TypeError(".commonmodule.StatusDPS.t: object expected");
                message.t = $root.commonmodule.Timestamp.fromObject(object.t);
            }
            return message;
        };

        /**
         * Creates a plain object from a StatusDPS message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.StatusDPS
         * @static
         * @param {commonmodule.StatusDPS} message StatusDPS
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StatusDPS.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.q = null;
                object.stVal = options.enums === String ? "DbPosKind_transient" : 0;
                object.t = null;
            }
            if (message.q != null && message.hasOwnProperty("q"))
                object.q = $root.commonmodule.Quality.toObject(message.q, options);
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                object.stVal = options.enums === String ? $root.commonmodule.DbPosKind[message.stVal] : message.stVal;
            if (message.t != null && message.hasOwnProperty("t"))
                object.t = $root.commonmodule.Timestamp.toObject(message.t, options);
            return object;
        };

        /**
         * Converts this StatusDPS to JSON.
         * @function toJSON
         * @memberof commonmodule.StatusDPS
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StatusDPS.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StatusDPS;
    })();

    commonmodule.StatusAndEventXCBR = (function() {

        /**
         * Properties of a StatusAndEventXCBR.
         * @memberof commonmodule
         * @interface IStatusAndEventXCBR
         * @property {commonmodule.ILogicalNodeForEventAndStatus|null} [logicalNodeForEventAndStatus] StatusAndEventXCBR logicalNodeForEventAndStatus
         * @property {commonmodule.IENS_DynamicTestKind|null} [DynamicTest] StatusAndEventXCBR DynamicTest
         * @property {commonmodule.IStatusDPS|null} [Pos] StatusAndEventXCBR Pos
         */

        /**
         * Constructs a new StatusAndEventXCBR.
         * @memberof commonmodule
         * @classdesc Represents a StatusAndEventXCBR.
         * @implements IStatusAndEventXCBR
         * @constructor
         * @param {commonmodule.IStatusAndEventXCBR=} [properties] Properties to set
         */
        function StatusAndEventXCBR(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StatusAndEventXCBR logicalNodeForEventAndStatus.
         * @member {commonmodule.ILogicalNodeForEventAndStatus|null|undefined} logicalNodeForEventAndStatus
         * @memberof commonmodule.StatusAndEventXCBR
         * @instance
         */
        StatusAndEventXCBR.prototype.logicalNodeForEventAndStatus = null;

        /**
         * StatusAndEventXCBR DynamicTest.
         * @member {commonmodule.IENS_DynamicTestKind|null|undefined} DynamicTest
         * @memberof commonmodule.StatusAndEventXCBR
         * @instance
         */
        StatusAndEventXCBR.prototype.DynamicTest = null;

        /**
         * StatusAndEventXCBR Pos.
         * @member {commonmodule.IStatusDPS|null|undefined} Pos
         * @memberof commonmodule.StatusAndEventXCBR
         * @instance
         */
        StatusAndEventXCBR.prototype.Pos = null;

        /**
         * Creates a new StatusAndEventXCBR instance using the specified properties.
         * @function create
         * @memberof commonmodule.StatusAndEventXCBR
         * @static
         * @param {commonmodule.IStatusAndEventXCBR=} [properties] Properties to set
         * @returns {commonmodule.StatusAndEventXCBR} StatusAndEventXCBR instance
         */
        StatusAndEventXCBR.create = function create(properties) {
            return new StatusAndEventXCBR(properties);
        };

        /**
         * Encodes the specified StatusAndEventXCBR message. Does not implicitly {@link commonmodule.StatusAndEventXCBR.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.StatusAndEventXCBR
         * @static
         * @param {commonmodule.IStatusAndEventXCBR} message StatusAndEventXCBR message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusAndEventXCBR.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForEventAndStatus != null && Object.hasOwnProperty.call(message, "logicalNodeForEventAndStatus"))
                $root.commonmodule.LogicalNodeForEventAndStatus.encode(message.logicalNodeForEventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.DynamicTest != null && Object.hasOwnProperty.call(message, "DynamicTest"))
                $root.commonmodule.ENS_DynamicTestKind.encode(message.DynamicTest, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.Pos != null && Object.hasOwnProperty.call(message, "Pos"))
                $root.commonmodule.StatusDPS.encode(message.Pos, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified StatusAndEventXCBR message, length delimited. Does not implicitly {@link commonmodule.StatusAndEventXCBR.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.StatusAndEventXCBR
         * @static
         * @param {commonmodule.IStatusAndEventXCBR} message StatusAndEventXCBR message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusAndEventXCBR.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StatusAndEventXCBR message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.StatusAndEventXCBR
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.StatusAndEventXCBR} StatusAndEventXCBR
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusAndEventXCBR.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.StatusAndEventXCBR();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.Pos = $root.commonmodule.StatusDPS.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a StatusAndEventXCBR message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.StatusAndEventXCBR
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.StatusAndEventXCBR} StatusAndEventXCBR
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusAndEventXCBR.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StatusAndEventXCBR message.
         * @function verify
         * @memberof commonmodule.StatusAndEventXCBR
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StatusAndEventXCBR.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus")) {
                var error = $root.commonmodule.LogicalNodeForEventAndStatus.verify(message.logicalNodeForEventAndStatus);
                if (error)
                    return "logicalNodeForEventAndStatus." + error;
            }
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest")) {
                var error = $root.commonmodule.ENS_DynamicTestKind.verify(message.DynamicTest);
                if (error)
                    return "DynamicTest." + error;
            }
            if (message.Pos != null && message.hasOwnProperty("Pos")) {
                var error = $root.commonmodule.StatusDPS.verify(message.Pos);
                if (error)
                    return "Pos." + error;
            }
            return null;
        };

        /**
         * Creates a StatusAndEventXCBR message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.StatusAndEventXCBR
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.StatusAndEventXCBR} StatusAndEventXCBR
         */
        StatusAndEventXCBR.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.StatusAndEventXCBR)
                return object;
            var message = new $root.commonmodule.StatusAndEventXCBR();
            if (object.logicalNodeForEventAndStatus != null) {
                if (typeof object.logicalNodeForEventAndStatus !== "object")
                    throw TypeError(".commonmodule.StatusAndEventXCBR.logicalNodeForEventAndStatus: object expected");
                message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.fromObject(object.logicalNodeForEventAndStatus);
            }
            if (object.DynamicTest != null) {
                if (typeof object.DynamicTest !== "object")
                    throw TypeError(".commonmodule.StatusAndEventXCBR.DynamicTest: object expected");
                message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.fromObject(object.DynamicTest);
            }
            if (object.Pos != null) {
                if (typeof object.Pos !== "object")
                    throw TypeError(".commonmodule.StatusAndEventXCBR.Pos: object expected");
                message.Pos = $root.commonmodule.StatusDPS.fromObject(object.Pos);
            }
            return message;
        };

        /**
         * Creates a plain object from a StatusAndEventXCBR message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.StatusAndEventXCBR
         * @static
         * @param {commonmodule.StatusAndEventXCBR} message StatusAndEventXCBR
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StatusAndEventXCBR.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForEventAndStatus = null;
                object.DynamicTest = null;
                object.Pos = null;
            }
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus"))
                object.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.toObject(message.logicalNodeForEventAndStatus, options);
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest"))
                object.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.toObject(message.DynamicTest, options);
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                object.Pos = $root.commonmodule.StatusDPS.toObject(message.Pos, options);
            return object;
        };

        /**
         * Converts this StatusAndEventXCBR to JSON.
         * @function toJSON
         * @memberof commonmodule.StatusAndEventXCBR
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StatusAndEventXCBR.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StatusAndEventXCBR;
    })();

    commonmodule.StatusISC = (function() {

        /**
         * Properties of a StatusISC.
         * @memberof commonmodule
         * @interface IStatusISC
         * @property {commonmodule.IQuality|null} [q] StatusISC q
         * @property {number|null} [stVal] StatusISC stVal
         * @property {commonmodule.ITimestamp|null} [t] StatusISC t
         */

        /**
         * Constructs a new StatusISC.
         * @memberof commonmodule
         * @classdesc Represents a StatusISC.
         * @implements IStatusISC
         * @constructor
         * @param {commonmodule.IStatusISC=} [properties] Properties to set
         */
        function StatusISC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StatusISC q.
         * @member {commonmodule.IQuality|null|undefined} q
         * @memberof commonmodule.StatusISC
         * @instance
         */
        StatusISC.prototype.q = null;

        /**
         * StatusISC stVal.
         * @member {number} stVal
         * @memberof commonmodule.StatusISC
         * @instance
         */
        StatusISC.prototype.stVal = 0;

        /**
         * StatusISC t.
         * @member {commonmodule.ITimestamp|null|undefined} t
         * @memberof commonmodule.StatusISC
         * @instance
         */
        StatusISC.prototype.t = null;

        /**
         * Creates a new StatusISC instance using the specified properties.
         * @function create
         * @memberof commonmodule.StatusISC
         * @static
         * @param {commonmodule.IStatusISC=} [properties] Properties to set
         * @returns {commonmodule.StatusISC} StatusISC instance
         */
        StatusISC.create = function create(properties) {
            return new StatusISC(properties);
        };

        /**
         * Encodes the specified StatusISC message. Does not implicitly {@link commonmodule.StatusISC.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.StatusISC
         * @static
         * @param {commonmodule.IStatusISC} message StatusISC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusISC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.q != null && Object.hasOwnProperty.call(message, "q"))
                $root.commonmodule.Quality.encode(message.q, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.stVal != null && Object.hasOwnProperty.call(message, "stVal"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.stVal);
            if (message.t != null && Object.hasOwnProperty.call(message, "t"))
                $root.commonmodule.Timestamp.encode(message.t, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified StatusISC message, length delimited. Does not implicitly {@link commonmodule.StatusISC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.StatusISC
         * @static
         * @param {commonmodule.IStatusISC} message StatusISC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusISC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StatusISC message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.StatusISC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.StatusISC} StatusISC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusISC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.StatusISC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.q = $root.commonmodule.Quality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.stVal = reader.int32();
                    break;
                case 3:
                    message.t = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a StatusISC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.StatusISC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.StatusISC} StatusISC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusISC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StatusISC message.
         * @function verify
         * @memberof commonmodule.StatusISC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StatusISC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.q != null && message.hasOwnProperty("q")) {
                var error = $root.commonmodule.Quality.verify(message.q);
                if (error)
                    return "q." + error;
            }
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                if (!$util.isInteger(message.stVal))
                    return "stVal: integer expected";
            if (message.t != null && message.hasOwnProperty("t")) {
                var error = $root.commonmodule.Timestamp.verify(message.t);
                if (error)
                    return "t." + error;
            }
            return null;
        };

        /**
         * Creates a StatusISC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.StatusISC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.StatusISC} StatusISC
         */
        StatusISC.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.StatusISC)
                return object;
            var message = new $root.commonmodule.StatusISC();
            if (object.q != null) {
                if (typeof object.q !== "object")
                    throw TypeError(".commonmodule.StatusISC.q: object expected");
                message.q = $root.commonmodule.Quality.fromObject(object.q);
            }
            if (object.stVal != null)
                message.stVal = object.stVal | 0;
            if (object.t != null) {
                if (typeof object.t !== "object")
                    throw TypeError(".commonmodule.StatusISC.t: object expected");
                message.t = $root.commonmodule.Timestamp.fromObject(object.t);
            }
            return message;
        };

        /**
         * Creates a plain object from a StatusISC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.StatusISC
         * @static
         * @param {commonmodule.StatusISC} message StatusISC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StatusISC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.q = null;
                object.stVal = 0;
                object.t = null;
            }
            if (message.q != null && message.hasOwnProperty("q"))
                object.q = $root.commonmodule.Quality.toObject(message.q, options);
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                object.stVal = message.stVal;
            if (message.t != null && message.hasOwnProperty("t"))
                object.t = $root.commonmodule.Timestamp.toObject(message.t, options);
            return object;
        };

        /**
         * Converts this StatusISC to JSON.
         * @function toJSON
         * @memberof commonmodule.StatusISC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StatusISC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StatusISC;
    })();

    commonmodule.StatusMessageInfo = (function() {

        /**
         * Properties of a StatusMessageInfo.
         * @memberof commonmodule
         * @interface IStatusMessageInfo
         * @property {commonmodule.IMessageInfo|null} [messageInfo] StatusMessageInfo messageInfo
         */

        /**
         * Constructs a new StatusMessageInfo.
         * @memberof commonmodule
         * @classdesc Represents a StatusMessageInfo.
         * @implements IStatusMessageInfo
         * @constructor
         * @param {commonmodule.IStatusMessageInfo=} [properties] Properties to set
         */
        function StatusMessageInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StatusMessageInfo messageInfo.
         * @member {commonmodule.IMessageInfo|null|undefined} messageInfo
         * @memberof commonmodule.StatusMessageInfo
         * @instance
         */
        StatusMessageInfo.prototype.messageInfo = null;

        /**
         * Creates a new StatusMessageInfo instance using the specified properties.
         * @function create
         * @memberof commonmodule.StatusMessageInfo
         * @static
         * @param {commonmodule.IStatusMessageInfo=} [properties] Properties to set
         * @returns {commonmodule.StatusMessageInfo} StatusMessageInfo instance
         */
        StatusMessageInfo.create = function create(properties) {
            return new StatusMessageInfo(properties);
        };

        /**
         * Encodes the specified StatusMessageInfo message. Does not implicitly {@link commonmodule.StatusMessageInfo.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.StatusMessageInfo
         * @static
         * @param {commonmodule.IStatusMessageInfo} message StatusMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusMessageInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.messageInfo != null && Object.hasOwnProperty.call(message, "messageInfo"))
                $root.commonmodule.MessageInfo.encode(message.messageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified StatusMessageInfo message, length delimited. Does not implicitly {@link commonmodule.StatusMessageInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.StatusMessageInfo
         * @static
         * @param {commonmodule.IStatusMessageInfo} message StatusMessageInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusMessageInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StatusMessageInfo message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.StatusMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.StatusMessageInfo} StatusMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusMessageInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.StatusMessageInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.messageInfo = $root.commonmodule.MessageInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a StatusMessageInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.StatusMessageInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.StatusMessageInfo} StatusMessageInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusMessageInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StatusMessageInfo message.
         * @function verify
         * @memberof commonmodule.StatusMessageInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StatusMessageInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.messageInfo != null && message.hasOwnProperty("messageInfo")) {
                var error = $root.commonmodule.MessageInfo.verify(message.messageInfo);
                if (error)
                    return "messageInfo." + error;
            }
            return null;
        };

        /**
         * Creates a StatusMessageInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.StatusMessageInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.StatusMessageInfo} StatusMessageInfo
         */
        StatusMessageInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.StatusMessageInfo)
                return object;
            var message = new $root.commonmodule.StatusMessageInfo();
            if (object.messageInfo != null) {
                if (typeof object.messageInfo !== "object")
                    throw TypeError(".commonmodule.StatusMessageInfo.messageInfo: object expected");
                message.messageInfo = $root.commonmodule.MessageInfo.fromObject(object.messageInfo);
            }
            return message;
        };

        /**
         * Creates a plain object from a StatusMessageInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.StatusMessageInfo
         * @static
         * @param {commonmodule.StatusMessageInfo} message StatusMessageInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StatusMessageInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.messageInfo = null;
            if (message.messageInfo != null && message.hasOwnProperty("messageInfo"))
                object.messageInfo = $root.commonmodule.MessageInfo.toObject(message.messageInfo, options);
            return object;
        };

        /**
         * Converts this StatusMessageInfo to JSON.
         * @function toJSON
         * @memberof commonmodule.StatusMessageInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StatusMessageInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StatusMessageInfo;
    })();

    commonmodule.StatusSPC = (function() {

        /**
         * Properties of a StatusSPC.
         * @memberof commonmodule
         * @interface IStatusSPC
         * @property {commonmodule.IQuality|null} [q] StatusSPC q
         * @property {boolean|null} [stVal] StatusSPC stVal
         * @property {commonmodule.ITimestamp|null} [t] StatusSPC t
         */

        /**
         * Constructs a new StatusSPC.
         * @memberof commonmodule
         * @classdesc Represents a StatusSPC.
         * @implements IStatusSPC
         * @constructor
         * @param {commonmodule.IStatusSPC=} [properties] Properties to set
         */
        function StatusSPC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StatusSPC q.
         * @member {commonmodule.IQuality|null|undefined} q
         * @memberof commonmodule.StatusSPC
         * @instance
         */
        StatusSPC.prototype.q = null;

        /**
         * StatusSPC stVal.
         * @member {boolean} stVal
         * @memberof commonmodule.StatusSPC
         * @instance
         */
        StatusSPC.prototype.stVal = false;

        /**
         * StatusSPC t.
         * @member {commonmodule.ITimestamp|null|undefined} t
         * @memberof commonmodule.StatusSPC
         * @instance
         */
        StatusSPC.prototype.t = null;

        /**
         * Creates a new StatusSPC instance using the specified properties.
         * @function create
         * @memberof commonmodule.StatusSPC
         * @static
         * @param {commonmodule.IStatusSPC=} [properties] Properties to set
         * @returns {commonmodule.StatusSPC} StatusSPC instance
         */
        StatusSPC.create = function create(properties) {
            return new StatusSPC(properties);
        };

        /**
         * Encodes the specified StatusSPC message. Does not implicitly {@link commonmodule.StatusSPC.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.StatusSPC
         * @static
         * @param {commonmodule.IStatusSPC} message StatusSPC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusSPC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.q != null && Object.hasOwnProperty.call(message, "q"))
                $root.commonmodule.Quality.encode(message.q, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.stVal != null && Object.hasOwnProperty.call(message, "stVal"))
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.stVal);
            if (message.t != null && Object.hasOwnProperty.call(message, "t"))
                $root.commonmodule.Timestamp.encode(message.t, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified StatusSPC message, length delimited. Does not implicitly {@link commonmodule.StatusSPC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.StatusSPC
         * @static
         * @param {commonmodule.IStatusSPC} message StatusSPC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusSPC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StatusSPC message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.StatusSPC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.StatusSPC} StatusSPC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusSPC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.StatusSPC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.q = $root.commonmodule.Quality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.stVal = reader.bool();
                    break;
                case 3:
                    message.t = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a StatusSPC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.StatusSPC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.StatusSPC} StatusSPC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusSPC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StatusSPC message.
         * @function verify
         * @memberof commonmodule.StatusSPC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StatusSPC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.q != null && message.hasOwnProperty("q")) {
                var error = $root.commonmodule.Quality.verify(message.q);
                if (error)
                    return "q." + error;
            }
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                if (typeof message.stVal !== "boolean")
                    return "stVal: boolean expected";
            if (message.t != null && message.hasOwnProperty("t")) {
                var error = $root.commonmodule.Timestamp.verify(message.t);
                if (error)
                    return "t." + error;
            }
            return null;
        };

        /**
         * Creates a StatusSPC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.StatusSPC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.StatusSPC} StatusSPC
         */
        StatusSPC.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.StatusSPC)
                return object;
            var message = new $root.commonmodule.StatusSPC();
            if (object.q != null) {
                if (typeof object.q !== "object")
                    throw TypeError(".commonmodule.StatusSPC.q: object expected");
                message.q = $root.commonmodule.Quality.fromObject(object.q);
            }
            if (object.stVal != null)
                message.stVal = Boolean(object.stVal);
            if (object.t != null) {
                if (typeof object.t !== "object")
                    throw TypeError(".commonmodule.StatusSPC.t: object expected");
                message.t = $root.commonmodule.Timestamp.fromObject(object.t);
            }
            return message;
        };

        /**
         * Creates a plain object from a StatusSPC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.StatusSPC
         * @static
         * @param {commonmodule.StatusSPC} message StatusSPC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StatusSPC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.q = null;
                object.stVal = false;
                object.t = null;
            }
            if (message.q != null && message.hasOwnProperty("q"))
                object.q = $root.commonmodule.Quality.toObject(message.q, options);
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                object.stVal = message.stVal;
            if (message.t != null && message.hasOwnProperty("t"))
                object.t = $root.commonmodule.Timestamp.toObject(message.t, options);
            return object;
        };

        /**
         * Converts this StatusSPC to JSON.
         * @function toJSON
         * @memberof commonmodule.StatusSPC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StatusSPC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StatusSPC;
    })();

    commonmodule.StatusValue = (function() {

        /**
         * Properties of a StatusValue.
         * @memberof commonmodule
         * @interface IStatusValue
         * @property {commonmodule.IIdentifiedObject|null} [identifiedObject] StatusValue identifiedObject
         */

        /**
         * Constructs a new StatusValue.
         * @memberof commonmodule
         * @classdesc Represents a StatusValue.
         * @implements IStatusValue
         * @constructor
         * @param {commonmodule.IStatusValue=} [properties] Properties to set
         */
        function StatusValue(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StatusValue identifiedObject.
         * @member {commonmodule.IIdentifiedObject|null|undefined} identifiedObject
         * @memberof commonmodule.StatusValue
         * @instance
         */
        StatusValue.prototype.identifiedObject = null;

        /**
         * Creates a new StatusValue instance using the specified properties.
         * @function create
         * @memberof commonmodule.StatusValue
         * @static
         * @param {commonmodule.IStatusValue=} [properties] Properties to set
         * @returns {commonmodule.StatusValue} StatusValue instance
         */
        StatusValue.create = function create(properties) {
            return new StatusValue(properties);
        };

        /**
         * Encodes the specified StatusValue message. Does not implicitly {@link commonmodule.StatusValue.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.StatusValue
         * @static
         * @param {commonmodule.IStatusValue} message StatusValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusValue.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.identifiedObject != null && Object.hasOwnProperty.call(message, "identifiedObject"))
                $root.commonmodule.IdentifiedObject.encode(message.identifiedObject, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified StatusValue message, length delimited. Does not implicitly {@link commonmodule.StatusValue.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.StatusValue
         * @static
         * @param {commonmodule.IStatusValue} message StatusValue message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StatusValue.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StatusValue message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.StatusValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.StatusValue} StatusValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusValue.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.StatusValue();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.identifiedObject = $root.commonmodule.IdentifiedObject.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a StatusValue message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.StatusValue
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.StatusValue} StatusValue
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StatusValue.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StatusValue message.
         * @function verify
         * @memberof commonmodule.StatusValue
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StatusValue.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject")) {
                var error = $root.commonmodule.IdentifiedObject.verify(message.identifiedObject);
                if (error)
                    return "identifiedObject." + error;
            }
            return null;
        };

        /**
         * Creates a StatusValue message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.StatusValue
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.StatusValue} StatusValue
         */
        StatusValue.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.StatusValue)
                return object;
            var message = new $root.commonmodule.StatusValue();
            if (object.identifiedObject != null) {
                if (typeof object.identifiedObject !== "object")
                    throw TypeError(".commonmodule.StatusValue.identifiedObject: object expected");
                message.identifiedObject = $root.commonmodule.IdentifiedObject.fromObject(object.identifiedObject);
            }
            return message;
        };

        /**
         * Creates a plain object from a StatusValue message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.StatusValue
         * @static
         * @param {commonmodule.StatusValue} message StatusValue
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StatusValue.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.identifiedObject = null;
            if (message.identifiedObject != null && message.hasOwnProperty("identifiedObject"))
                object.identifiedObject = $root.commonmodule.IdentifiedObject.toObject(message.identifiedObject, options);
            return object;
        };

        /**
         * Converts this StatusValue to JSON.
         * @function toJSON
         * @memberof commonmodule.StatusValue
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StatusValue.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StatusValue;
    })();

    commonmodule.VSS = (function() {

        /**
         * Properties of a VSS.
         * @memberof commonmodule
         * @interface IVSS
         * @property {commonmodule.IQuality|null} [q] VSS q
         * @property {string|null} [stVal] VSS stVal
         * @property {commonmodule.ITimestamp|null} [t] VSS t
         */

        /**
         * Constructs a new VSS.
         * @memberof commonmodule
         * @classdesc Represents a VSS.
         * @implements IVSS
         * @constructor
         * @param {commonmodule.IVSS=} [properties] Properties to set
         */
        function VSS(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * VSS q.
         * @member {commonmodule.IQuality|null|undefined} q
         * @memberof commonmodule.VSS
         * @instance
         */
        VSS.prototype.q = null;

        /**
         * VSS stVal.
         * @member {string} stVal
         * @memberof commonmodule.VSS
         * @instance
         */
        VSS.prototype.stVal = "";

        /**
         * VSS t.
         * @member {commonmodule.ITimestamp|null|undefined} t
         * @memberof commonmodule.VSS
         * @instance
         */
        VSS.prototype.t = null;

        /**
         * Creates a new VSS instance using the specified properties.
         * @function create
         * @memberof commonmodule.VSS
         * @static
         * @param {commonmodule.IVSS=} [properties] Properties to set
         * @returns {commonmodule.VSS} VSS instance
         */
        VSS.create = function create(properties) {
            return new VSS(properties);
        };

        /**
         * Encodes the specified VSS message. Does not implicitly {@link commonmodule.VSS.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.VSS
         * @static
         * @param {commonmodule.IVSS} message VSS message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VSS.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.q != null && Object.hasOwnProperty.call(message, "q"))
                $root.commonmodule.Quality.encode(message.q, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.stVal != null && Object.hasOwnProperty.call(message, "stVal"))
                writer.uint32(/* id 2, wireType 2 =*/18).string(message.stVal);
            if (message.t != null && Object.hasOwnProperty.call(message, "t"))
                $root.commonmodule.Timestamp.encode(message.t, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified VSS message, length delimited. Does not implicitly {@link commonmodule.VSS.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.VSS
         * @static
         * @param {commonmodule.IVSS} message VSS message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VSS.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a VSS message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.VSS
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.VSS} VSS
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VSS.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.VSS();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.q = $root.commonmodule.Quality.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.stVal = reader.string();
                    break;
                case 3:
                    message.t = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a VSS message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.VSS
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.VSS} VSS
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VSS.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a VSS message.
         * @function verify
         * @memberof commonmodule.VSS
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        VSS.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.q != null && message.hasOwnProperty("q")) {
                var error = $root.commonmodule.Quality.verify(message.q);
                if (error)
                    return "q." + error;
            }
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                if (!$util.isString(message.stVal))
                    return "stVal: string expected";
            if (message.t != null && message.hasOwnProperty("t")) {
                var error = $root.commonmodule.Timestamp.verify(message.t);
                if (error)
                    return "t." + error;
            }
            return null;
        };

        /**
         * Creates a VSS message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.VSS
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.VSS} VSS
         */
        VSS.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.VSS)
                return object;
            var message = new $root.commonmodule.VSS();
            if (object.q != null) {
                if (typeof object.q !== "object")
                    throw TypeError(".commonmodule.VSS.q: object expected");
                message.q = $root.commonmodule.Quality.fromObject(object.q);
            }
            if (object.stVal != null)
                message.stVal = String(object.stVal);
            if (object.t != null) {
                if (typeof object.t !== "object")
                    throw TypeError(".commonmodule.VSS.t: object expected");
                message.t = $root.commonmodule.Timestamp.fromObject(object.t);
            }
            return message;
        };

        /**
         * Creates a plain object from a VSS message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.VSS
         * @static
         * @param {commonmodule.VSS} message VSS
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        VSS.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.q = null;
                object.stVal = "";
                object.t = null;
            }
            if (message.q != null && message.hasOwnProperty("q"))
                object.q = $root.commonmodule.Quality.toObject(message.q, options);
            if (message.stVal != null && message.hasOwnProperty("stVal"))
                object.stVal = message.stVal;
            if (message.t != null && message.hasOwnProperty("t"))
                object.t = $root.commonmodule.Timestamp.toObject(message.t, options);
            return object;
        };

        /**
         * Converts this VSS to JSON.
         * @function toJSON
         * @memberof commonmodule.VSS
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        VSS.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return VSS;
    })();

    commonmodule.StringStatusGGIO = (function() {

        /**
         * Properties of a StringStatusGGIO.
         * @memberof commonmodule
         * @interface IStringStatusGGIO
         * @property {commonmodule.ILogicalNode|null} [logicalNode] StringStatusGGIO logicalNode
         * @property {commonmodule.IOptional_PhaseCodeKind|null} [Phase] StringStatusGGIO Phase
         * @property {commonmodule.IVSS|null} [StrIn] StringStatusGGIO StrIn
         */

        /**
         * Constructs a new StringStatusGGIO.
         * @memberof commonmodule
         * @classdesc Represents a StringStatusGGIO.
         * @implements IStringStatusGGIO
         * @constructor
         * @param {commonmodule.IStringStatusGGIO=} [properties] Properties to set
         */
        function StringStatusGGIO(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * StringStatusGGIO logicalNode.
         * @member {commonmodule.ILogicalNode|null|undefined} logicalNode
         * @memberof commonmodule.StringStatusGGIO
         * @instance
         */
        StringStatusGGIO.prototype.logicalNode = null;

        /**
         * StringStatusGGIO Phase.
         * @member {commonmodule.IOptional_PhaseCodeKind|null|undefined} Phase
         * @memberof commonmodule.StringStatusGGIO
         * @instance
         */
        StringStatusGGIO.prototype.Phase = null;

        /**
         * StringStatusGGIO StrIn.
         * @member {commonmodule.IVSS|null|undefined} StrIn
         * @memberof commonmodule.StringStatusGGIO
         * @instance
         */
        StringStatusGGIO.prototype.StrIn = null;

        /**
         * Creates a new StringStatusGGIO instance using the specified properties.
         * @function create
         * @memberof commonmodule.StringStatusGGIO
         * @static
         * @param {commonmodule.IStringStatusGGIO=} [properties] Properties to set
         * @returns {commonmodule.StringStatusGGIO} StringStatusGGIO instance
         */
        StringStatusGGIO.create = function create(properties) {
            return new StringStatusGGIO(properties);
        };

        /**
         * Encodes the specified StringStatusGGIO message. Does not implicitly {@link commonmodule.StringStatusGGIO.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.StringStatusGGIO
         * @static
         * @param {commonmodule.IStringStatusGGIO} message StringStatusGGIO message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StringStatusGGIO.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNode != null && Object.hasOwnProperty.call(message, "logicalNode"))
                $root.commonmodule.LogicalNode.encode(message.logicalNode, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.Phase != null && Object.hasOwnProperty.call(message, "Phase"))
                $root.commonmodule.Optional_PhaseCodeKind.encode(message.Phase, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.StrIn != null && Object.hasOwnProperty.call(message, "StrIn"))
                $root.commonmodule.VSS.encode(message.StrIn, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified StringStatusGGIO message, length delimited. Does not implicitly {@link commonmodule.StringStatusGGIO.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.StringStatusGGIO
         * @static
         * @param {commonmodule.IStringStatusGGIO} message StringStatusGGIO message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        StringStatusGGIO.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a StringStatusGGIO message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.StringStatusGGIO
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.StringStatusGGIO} StringStatusGGIO
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StringStatusGGIO.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.StringStatusGGIO();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNode = $root.commonmodule.LogicalNode.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.Phase = $root.commonmodule.Optional_PhaseCodeKind.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.StrIn = $root.commonmodule.VSS.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a StringStatusGGIO message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.StringStatusGGIO
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.StringStatusGGIO} StringStatusGGIO
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        StringStatusGGIO.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a StringStatusGGIO message.
         * @function verify
         * @memberof commonmodule.StringStatusGGIO
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        StringStatusGGIO.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode")) {
                var error = $root.commonmodule.LogicalNode.verify(message.logicalNode);
                if (error)
                    return "logicalNode." + error;
            }
            if (message.Phase != null && message.hasOwnProperty("Phase")) {
                var error = $root.commonmodule.Optional_PhaseCodeKind.verify(message.Phase);
                if (error)
                    return "Phase." + error;
            }
            if (message.StrIn != null && message.hasOwnProperty("StrIn")) {
                var error = $root.commonmodule.VSS.verify(message.StrIn);
                if (error)
                    return "StrIn." + error;
            }
            return null;
        };

        /**
         * Creates a StringStatusGGIO message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.StringStatusGGIO
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.StringStatusGGIO} StringStatusGGIO
         */
        StringStatusGGIO.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.StringStatusGGIO)
                return object;
            var message = new $root.commonmodule.StringStatusGGIO();
            if (object.logicalNode != null) {
                if (typeof object.logicalNode !== "object")
                    throw TypeError(".commonmodule.StringStatusGGIO.logicalNode: object expected");
                message.logicalNode = $root.commonmodule.LogicalNode.fromObject(object.logicalNode);
            }
            if (object.Phase != null) {
                if (typeof object.Phase !== "object")
                    throw TypeError(".commonmodule.StringStatusGGIO.Phase: object expected");
                message.Phase = $root.commonmodule.Optional_PhaseCodeKind.fromObject(object.Phase);
            }
            if (object.StrIn != null) {
                if (typeof object.StrIn !== "object")
                    throw TypeError(".commonmodule.StringStatusGGIO.StrIn: object expected");
                message.StrIn = $root.commonmodule.VSS.fromObject(object.StrIn);
            }
            return message;
        };

        /**
         * Creates a plain object from a StringStatusGGIO message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.StringStatusGGIO
         * @static
         * @param {commonmodule.StringStatusGGIO} message StringStatusGGIO
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        StringStatusGGIO.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNode = null;
                object.Phase = null;
                object.StrIn = null;
            }
            if (message.logicalNode != null && message.hasOwnProperty("logicalNode"))
                object.logicalNode = $root.commonmodule.LogicalNode.toObject(message.logicalNode, options);
            if (message.Phase != null && message.hasOwnProperty("Phase"))
                object.Phase = $root.commonmodule.Optional_PhaseCodeKind.toObject(message.Phase, options);
            if (message.StrIn != null && message.hasOwnProperty("StrIn"))
                object.StrIn = $root.commonmodule.VSS.toObject(message.StrIn, options);
            return object;
        };

        /**
         * Converts this StringStatusGGIO to JSON.
         * @function toJSON
         * @memberof commonmodule.StringStatusGGIO
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        StringStatusGGIO.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return StringStatusGGIO;
    })();

    commonmodule.SwitchPoint = (function() {

        /**
         * Properties of a SwitchPoint.
         * @memberof commonmodule
         * @interface ISwitchPoint
         * @property {commonmodule.IControlDPC|null} [Pos] SwitchPoint Pos
         * @property {commonmodule.IControlTimestamp|null} [startTime] SwitchPoint startTime
         */

        /**
         * Constructs a new SwitchPoint.
         * @memberof commonmodule
         * @classdesc Represents a SwitchPoint.
         * @implements ISwitchPoint
         * @constructor
         * @param {commonmodule.ISwitchPoint=} [properties] Properties to set
         */
        function SwitchPoint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchPoint Pos.
         * @member {commonmodule.IControlDPC|null|undefined} Pos
         * @memberof commonmodule.SwitchPoint
         * @instance
         */
        SwitchPoint.prototype.Pos = null;

        /**
         * SwitchPoint startTime.
         * @member {commonmodule.IControlTimestamp|null|undefined} startTime
         * @memberof commonmodule.SwitchPoint
         * @instance
         */
        SwitchPoint.prototype.startTime = null;

        /**
         * Creates a new SwitchPoint instance using the specified properties.
         * @function create
         * @memberof commonmodule.SwitchPoint
         * @static
         * @param {commonmodule.ISwitchPoint=} [properties] Properties to set
         * @returns {commonmodule.SwitchPoint} SwitchPoint instance
         */
        SwitchPoint.create = function create(properties) {
            return new SwitchPoint(properties);
        };

        /**
         * Encodes the specified SwitchPoint message. Does not implicitly {@link commonmodule.SwitchPoint.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.SwitchPoint
         * @static
         * @param {commonmodule.ISwitchPoint} message SwitchPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchPoint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.Pos != null && Object.hasOwnProperty.call(message, "Pos"))
                $root.commonmodule.ControlDPC.encode(message.Pos, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                $root.commonmodule.ControlTimestamp.encode(message.startTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchPoint message, length delimited. Does not implicitly {@link commonmodule.SwitchPoint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.SwitchPoint
         * @static
         * @param {commonmodule.ISwitchPoint} message SwitchPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchPoint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchPoint message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.SwitchPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.SwitchPoint} SwitchPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchPoint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.SwitchPoint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.Pos = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.startTime = $root.commonmodule.ControlTimestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchPoint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.SwitchPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.SwitchPoint} SwitchPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchPoint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchPoint message.
         * @function verify
         * @memberof commonmodule.SwitchPoint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchPoint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.Pos != null && message.hasOwnProperty("Pos")) {
                var error = $root.commonmodule.ControlDPC.verify(message.Pos);
                if (error)
                    return "Pos." + error;
            }
            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                var error = $root.commonmodule.ControlTimestamp.verify(message.startTime);
                if (error)
                    return "startTime." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchPoint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.SwitchPoint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.SwitchPoint} SwitchPoint
         */
        SwitchPoint.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.SwitchPoint)
                return object;
            var message = new $root.commonmodule.SwitchPoint();
            if (object.Pos != null) {
                if (typeof object.Pos !== "object")
                    throw TypeError(".commonmodule.SwitchPoint.Pos: object expected");
                message.Pos = $root.commonmodule.ControlDPC.fromObject(object.Pos);
            }
            if (object.startTime != null) {
                if (typeof object.startTime !== "object")
                    throw TypeError(".commonmodule.SwitchPoint.startTime: object expected");
                message.startTime = $root.commonmodule.ControlTimestamp.fromObject(object.startTime);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchPoint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.SwitchPoint
         * @static
         * @param {commonmodule.SwitchPoint} message SwitchPoint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchPoint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.Pos = null;
                object.startTime = null;
            }
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                object.Pos = $root.commonmodule.ControlDPC.toObject(message.Pos, options);
            if (message.startTime != null && message.hasOwnProperty("startTime"))
                object.startTime = $root.commonmodule.ControlTimestamp.toObject(message.startTime, options);
            return object;
        };

        /**
         * Converts this SwitchPoint to JSON.
         * @function toJSON
         * @memberof commonmodule.SwitchPoint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchPoint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchPoint;
    })();

    commonmodule.SwitchCSG = (function() {

        /**
         * Properties of a SwitchCSG.
         * @memberof commonmodule
         * @interface ISwitchCSG
         * @property {Array.<commonmodule.ISwitchPoint>|null} [crvPts] SwitchCSG crvPts
         */

        /**
         * Constructs a new SwitchCSG.
         * @memberof commonmodule
         * @classdesc Represents a SwitchCSG.
         * @implements ISwitchCSG
         * @constructor
         * @param {commonmodule.ISwitchCSG=} [properties] Properties to set
         */
        function SwitchCSG(properties) {
            this.crvPts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchCSG crvPts.
         * @member {Array.<commonmodule.ISwitchPoint>} crvPts
         * @memberof commonmodule.SwitchCSG
         * @instance
         */
        SwitchCSG.prototype.crvPts = $util.emptyArray;

        /**
         * Creates a new SwitchCSG instance using the specified properties.
         * @function create
         * @memberof commonmodule.SwitchCSG
         * @static
         * @param {commonmodule.ISwitchCSG=} [properties] Properties to set
         * @returns {commonmodule.SwitchCSG} SwitchCSG instance
         */
        SwitchCSG.create = function create(properties) {
            return new SwitchCSG(properties);
        };

        /**
         * Encodes the specified SwitchCSG message. Does not implicitly {@link commonmodule.SwitchCSG.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.SwitchCSG
         * @static
         * @param {commonmodule.ISwitchCSG} message SwitchCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchCSG.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.crvPts != null && message.crvPts.length)
                for (var i = 0; i < message.crvPts.length; ++i)
                    $root.commonmodule.SwitchPoint.encode(message.crvPts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchCSG message, length delimited. Does not implicitly {@link commonmodule.SwitchCSG.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.SwitchCSG
         * @static
         * @param {commonmodule.ISwitchCSG} message SwitchCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchCSG.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchCSG message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.SwitchCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.SwitchCSG} SwitchCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchCSG.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.SwitchCSG();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.crvPts && message.crvPts.length))
                        message.crvPts = [];
                    message.crvPts.push($root.commonmodule.SwitchPoint.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchCSG message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.SwitchCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.SwitchCSG} SwitchCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchCSG.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchCSG message.
         * @function verify
         * @memberof commonmodule.SwitchCSG
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchCSG.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.crvPts != null && message.hasOwnProperty("crvPts")) {
                if (!Array.isArray(message.crvPts))
                    return "crvPts: array expected";
                for (var i = 0; i < message.crvPts.length; ++i) {
                    var error = $root.commonmodule.SwitchPoint.verify(message.crvPts[i]);
                    if (error)
                        return "crvPts." + error;
                }
            }
            return null;
        };

        /**
         * Creates a SwitchCSG message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.SwitchCSG
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.SwitchCSG} SwitchCSG
         */
        SwitchCSG.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.SwitchCSG)
                return object;
            var message = new $root.commonmodule.SwitchCSG();
            if (object.crvPts) {
                if (!Array.isArray(object.crvPts))
                    throw TypeError(".commonmodule.SwitchCSG.crvPts: array expected");
                message.crvPts = [];
                for (var i = 0; i < object.crvPts.length; ++i) {
                    if (typeof object.crvPts[i] !== "object")
                        throw TypeError(".commonmodule.SwitchCSG.crvPts: object expected");
                    message.crvPts[i] = $root.commonmodule.SwitchPoint.fromObject(object.crvPts[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchCSG message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.SwitchCSG
         * @static
         * @param {commonmodule.SwitchCSG} message SwitchCSG
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchCSG.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.crvPts = [];
            if (message.crvPts && message.crvPts.length) {
                object.crvPts = [];
                for (var j = 0; j < message.crvPts.length; ++j)
                    object.crvPts[j] = $root.commonmodule.SwitchPoint.toObject(message.crvPts[j], options);
            }
            return object;
        };

        /**
         * Converts this SwitchCSG to JSON.
         * @function toJSON
         * @memberof commonmodule.SwitchCSG
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchCSG.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchCSG;
    })();

    commonmodule.SwitchControlScheduleFSCH = (function() {

        /**
         * Properties of a SwitchControlScheduleFSCH.
         * @memberof commonmodule
         * @interface ISwitchControlScheduleFSCH
         * @property {commonmodule.ISwitchCSG|null} [ValDCSG] SwitchControlScheduleFSCH ValDCSG
         */

        /**
         * Constructs a new SwitchControlScheduleFSCH.
         * @memberof commonmodule
         * @classdesc Represents a SwitchControlScheduleFSCH.
         * @implements ISwitchControlScheduleFSCH
         * @constructor
         * @param {commonmodule.ISwitchControlScheduleFSCH=} [properties] Properties to set
         */
        function SwitchControlScheduleFSCH(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchControlScheduleFSCH ValDCSG.
         * @member {commonmodule.ISwitchCSG|null|undefined} ValDCSG
         * @memberof commonmodule.SwitchControlScheduleFSCH
         * @instance
         */
        SwitchControlScheduleFSCH.prototype.ValDCSG = null;

        /**
         * Creates a new SwitchControlScheduleFSCH instance using the specified properties.
         * @function create
         * @memberof commonmodule.SwitchControlScheduleFSCH
         * @static
         * @param {commonmodule.ISwitchControlScheduleFSCH=} [properties] Properties to set
         * @returns {commonmodule.SwitchControlScheduleFSCH} SwitchControlScheduleFSCH instance
         */
        SwitchControlScheduleFSCH.create = function create(properties) {
            return new SwitchControlScheduleFSCH(properties);
        };

        /**
         * Encodes the specified SwitchControlScheduleFSCH message. Does not implicitly {@link commonmodule.SwitchControlScheduleFSCH.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.SwitchControlScheduleFSCH
         * @static
         * @param {commonmodule.ISwitchControlScheduleFSCH} message SwitchControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchControlScheduleFSCH.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ValDCSG != null && Object.hasOwnProperty.call(message, "ValDCSG"))
                $root.commonmodule.SwitchCSG.encode(message.ValDCSG, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchControlScheduleFSCH message, length delimited. Does not implicitly {@link commonmodule.SwitchControlScheduleFSCH.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.SwitchControlScheduleFSCH
         * @static
         * @param {commonmodule.ISwitchControlScheduleFSCH} message SwitchControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchControlScheduleFSCH.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchControlScheduleFSCH message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.SwitchControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.SwitchControlScheduleFSCH} SwitchControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchControlScheduleFSCH.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.SwitchControlScheduleFSCH();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ValDCSG = $root.commonmodule.SwitchCSG.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchControlScheduleFSCH message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.SwitchControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.SwitchControlScheduleFSCH} SwitchControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchControlScheduleFSCH.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchControlScheduleFSCH message.
         * @function verify
         * @memberof commonmodule.SwitchControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchControlScheduleFSCH.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ValDCSG != null && message.hasOwnProperty("ValDCSG")) {
                var error = $root.commonmodule.SwitchCSG.verify(message.ValDCSG);
                if (error)
                    return "ValDCSG." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchControlScheduleFSCH message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.SwitchControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.SwitchControlScheduleFSCH} SwitchControlScheduleFSCH
         */
        SwitchControlScheduleFSCH.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.SwitchControlScheduleFSCH)
                return object;
            var message = new $root.commonmodule.SwitchControlScheduleFSCH();
            if (object.ValDCSG != null) {
                if (typeof object.ValDCSG !== "object")
                    throw TypeError(".commonmodule.SwitchControlScheduleFSCH.ValDCSG: object expected");
                message.ValDCSG = $root.commonmodule.SwitchCSG.fromObject(object.ValDCSG);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchControlScheduleFSCH message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.SwitchControlScheduleFSCH
         * @static
         * @param {commonmodule.SwitchControlScheduleFSCH} message SwitchControlScheduleFSCH
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchControlScheduleFSCH.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ValDCSG = null;
            if (message.ValDCSG != null && message.hasOwnProperty("ValDCSG"))
                object.ValDCSG = $root.commonmodule.SwitchCSG.toObject(message.ValDCSG, options);
            return object;
        };

        /**
         * Converts this SwitchControlScheduleFSCH to JSON.
         * @function toJSON
         * @memberof commonmodule.SwitchControlScheduleFSCH
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchControlScheduleFSCH.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchControlScheduleFSCH;
    })();

    /**
     * StateKind enum.
     * @name commonmodule.StateKind
     * @enum {number}
     * @property {number} StateKind_off=0 StateKind_off value
     * @property {number} StateKind_on=1 StateKind_on value
     * @property {number} StateKind_standby=2 StateKind_standby value
     */
    commonmodule.StateKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "StateKind_off"] = 0;
        values[valuesById[1] = "StateKind_on"] = 1;
        values[valuesById[2] = "StateKind_standby"] = 2;
        return values;
    })();

    commonmodule.Optional_StateKind = (function() {

        /**
         * Properties of an Optional_StateKind.
         * @memberof commonmodule
         * @interface IOptional_StateKind
         * @property {commonmodule.StateKind|null} [value] Optional_StateKind value
         */

        /**
         * Constructs a new Optional_StateKind.
         * @memberof commonmodule
         * @classdesc Represents an Optional_StateKind.
         * @implements IOptional_StateKind
         * @constructor
         * @param {commonmodule.IOptional_StateKind=} [properties] Properties to set
         */
        function Optional_StateKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_StateKind value.
         * @member {commonmodule.StateKind} value
         * @memberof commonmodule.Optional_StateKind
         * @instance
         */
        Optional_StateKind.prototype.value = 0;

        /**
         * Creates a new Optional_StateKind instance using the specified properties.
         * @function create
         * @memberof commonmodule.Optional_StateKind
         * @static
         * @param {commonmodule.IOptional_StateKind=} [properties] Properties to set
         * @returns {commonmodule.Optional_StateKind} Optional_StateKind instance
         */
        Optional_StateKind.create = function create(properties) {
            return new Optional_StateKind(properties);
        };

        /**
         * Encodes the specified Optional_StateKind message. Does not implicitly {@link commonmodule.Optional_StateKind.verify|verify} messages.
         * @function encode
         * @memberof commonmodule.Optional_StateKind
         * @static
         * @param {commonmodule.IOptional_StateKind} message Optional_StateKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_StateKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_StateKind message, length delimited. Does not implicitly {@link commonmodule.Optional_StateKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof commonmodule.Optional_StateKind
         * @static
         * @param {commonmodule.IOptional_StateKind} message Optional_StateKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_StateKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_StateKind message from the specified reader or buffer.
         * @function decode
         * @memberof commonmodule.Optional_StateKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {commonmodule.Optional_StateKind} Optional_StateKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_StateKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.commonmodule.Optional_StateKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_StateKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof commonmodule.Optional_StateKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {commonmodule.Optional_StateKind} Optional_StateKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_StateKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_StateKind message.
         * @function verify
         * @memberof commonmodule.Optional_StateKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_StateKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_StateKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof commonmodule.Optional_StateKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {commonmodule.Optional_StateKind} Optional_StateKind
         */
        Optional_StateKind.fromObject = function fromObject(object) {
            if (object instanceof $root.commonmodule.Optional_StateKind)
                return object;
            var message = new $root.commonmodule.Optional_StateKind();
            switch (object.value) {
            case "StateKind_off":
            case 0:
                message.value = 0;
                break;
            case "StateKind_on":
            case 1:
                message.value = 1;
                break;
            case "StateKind_standby":
            case 2:
                message.value = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_StateKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof commonmodule.Optional_StateKind
         * @static
         * @param {commonmodule.Optional_StateKind} message Optional_StateKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_StateKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "StateKind_off" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.commonmodule.StateKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_StateKind to JSON.
         * @function toJSON
         * @memberof commonmodule.Optional_StateKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_StateKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_StateKind;
    })();

    return commonmodule;
})();

$root.coordinationservicemodule = (function() {

    /**
     * Namespace coordinationservicemodule.
     * @exports coordinationservicemodule
     * @namespace
     */
    var coordinationservicemodule = {};

    /**
     * CoordinationServiceModeKind enum.
     * @name coordinationservicemodule.CoordinationServiceModeKind
     * @enum {number}
     * @property {number} CoordinationServiceModeKind_none=0 CoordinationServiceModeKind_none value
     * @property {number} CoordinationServiceModeKind_auto=1 CoordinationServiceModeKind_auto value
     * @property {number} CoordinationServiceModeKind_manual=2 CoordinationServiceModeKind_manual value
     * @property {number} CoordinationServiceModeKind_netzero=3 CoordinationServiceModeKind_netzero value
     * @property {number} CoordinationServiceModeKind_start=4 CoordinationServiceModeKind_start value
     * @property {number} CoordinationServiceModeKind_stop=5 CoordinationServiceModeKind_stop value
     */
    coordinationservicemodule.CoordinationServiceModeKind = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "CoordinationServiceModeKind_none"] = 0;
        values[valuesById[1] = "CoordinationServiceModeKind_auto"] = 1;
        values[valuesById[2] = "CoordinationServiceModeKind_manual"] = 2;
        values[valuesById[3] = "CoordinationServiceModeKind_netzero"] = 3;
        values[valuesById[4] = "CoordinationServiceModeKind_start"] = 4;
        values[valuesById[5] = "CoordinationServiceModeKind_stop"] = 5;
        return values;
    })();

    coordinationservicemodule.Optional_CoordinationServiceModeKind = (function() {

        /**
         * Properties of an Optional_CoordinationServiceModeKind.
         * @memberof coordinationservicemodule
         * @interface IOptional_CoordinationServiceModeKind
         * @property {coordinationservicemodule.CoordinationServiceModeKind|null} [value] Optional_CoordinationServiceModeKind value
         */

        /**
         * Constructs a new Optional_CoordinationServiceModeKind.
         * @memberof coordinationservicemodule
         * @classdesc Represents an Optional_CoordinationServiceModeKind.
         * @implements IOptional_CoordinationServiceModeKind
         * @constructor
         * @param {coordinationservicemodule.IOptional_CoordinationServiceModeKind=} [properties] Properties to set
         */
        function Optional_CoordinationServiceModeKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Optional_CoordinationServiceModeKind value.
         * @member {coordinationservicemodule.CoordinationServiceModeKind} value
         * @memberof coordinationservicemodule.Optional_CoordinationServiceModeKind
         * @instance
         */
        Optional_CoordinationServiceModeKind.prototype.value = 0;

        /**
         * Creates a new Optional_CoordinationServiceModeKind instance using the specified properties.
         * @function create
         * @memberof coordinationservicemodule.Optional_CoordinationServiceModeKind
         * @static
         * @param {coordinationservicemodule.IOptional_CoordinationServiceModeKind=} [properties] Properties to set
         * @returns {coordinationservicemodule.Optional_CoordinationServiceModeKind} Optional_CoordinationServiceModeKind instance
         */
        Optional_CoordinationServiceModeKind.create = function create(properties) {
            return new Optional_CoordinationServiceModeKind(properties);
        };

        /**
         * Encodes the specified Optional_CoordinationServiceModeKind message. Does not implicitly {@link coordinationservicemodule.Optional_CoordinationServiceModeKind.verify|verify} messages.
         * @function encode
         * @memberof coordinationservicemodule.Optional_CoordinationServiceModeKind
         * @static
         * @param {coordinationservicemodule.IOptional_CoordinationServiceModeKind} message Optional_CoordinationServiceModeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_CoordinationServiceModeKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.value);
            return writer;
        };

        /**
         * Encodes the specified Optional_CoordinationServiceModeKind message, length delimited. Does not implicitly {@link coordinationservicemodule.Optional_CoordinationServiceModeKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof coordinationservicemodule.Optional_CoordinationServiceModeKind
         * @static
         * @param {coordinationservicemodule.IOptional_CoordinationServiceModeKind} message Optional_CoordinationServiceModeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Optional_CoordinationServiceModeKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an Optional_CoordinationServiceModeKind message from the specified reader or buffer.
         * @function decode
         * @memberof coordinationservicemodule.Optional_CoordinationServiceModeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {coordinationservicemodule.Optional_CoordinationServiceModeKind} Optional_CoordinationServiceModeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_CoordinationServiceModeKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.coordinationservicemodule.Optional_CoordinationServiceModeKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an Optional_CoordinationServiceModeKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof coordinationservicemodule.Optional_CoordinationServiceModeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {coordinationservicemodule.Optional_CoordinationServiceModeKind} Optional_CoordinationServiceModeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Optional_CoordinationServiceModeKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an Optional_CoordinationServiceModeKind message.
         * @function verify
         * @memberof coordinationservicemodule.Optional_CoordinationServiceModeKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Optional_CoordinationServiceModeKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.value != null && message.hasOwnProperty("value"))
                switch (message.value) {
                default:
                    return "value: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            return null;
        };

        /**
         * Creates an Optional_CoordinationServiceModeKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof coordinationservicemodule.Optional_CoordinationServiceModeKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {coordinationservicemodule.Optional_CoordinationServiceModeKind} Optional_CoordinationServiceModeKind
         */
        Optional_CoordinationServiceModeKind.fromObject = function fromObject(object) {
            if (object instanceof $root.coordinationservicemodule.Optional_CoordinationServiceModeKind)
                return object;
            var message = new $root.coordinationservicemodule.Optional_CoordinationServiceModeKind();
            switch (object.value) {
            case "CoordinationServiceModeKind_none":
            case 0:
                message.value = 0;
                break;
            case "CoordinationServiceModeKind_auto":
            case 1:
                message.value = 1;
                break;
            case "CoordinationServiceModeKind_manual":
            case 2:
                message.value = 2;
                break;
            case "CoordinationServiceModeKind_netzero":
            case 3:
                message.value = 3;
                break;
            case "CoordinationServiceModeKind_start":
            case 4:
                message.value = 4;
                break;
            case "CoordinationServiceModeKind_stop":
            case 5:
                message.value = 5;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from an Optional_CoordinationServiceModeKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof coordinationservicemodule.Optional_CoordinationServiceModeKind
         * @static
         * @param {coordinationservicemodule.Optional_CoordinationServiceModeKind} message Optional_CoordinationServiceModeKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Optional_CoordinationServiceModeKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.value = options.enums === String ? "CoordinationServiceModeKind_none" : 0;
            if (message.value != null && message.hasOwnProperty("value"))
                object.value = options.enums === String ? $root.coordinationservicemodule.CoordinationServiceModeKind[message.value] : message.value;
            return object;
        };

        /**
         * Converts this Optional_CoordinationServiceModeKind to JSON.
         * @function toJSON
         * @memberof coordinationservicemodule.Optional_CoordinationServiceModeKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Optional_CoordinationServiceModeKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Optional_CoordinationServiceModeKind;
    })();

    coordinationservicemodule.ENG_CoordinationServiceModeKind = (function() {

        /**
         * Properties of a ENG_CoordinationServiceModeKind.
         * @memberof coordinationservicemodule
         * @interface IENG_CoordinationServiceModeKind
         * @property {coordinationservicemodule.CoordinationServiceModeKind|null} [setVal] ENG_CoordinationServiceModeKind setVal
         * @property {google.protobuf.IStringValue|null} [setValExtension] ENG_CoordinationServiceModeKind setValExtension
         */

        /**
         * Constructs a new ENG_CoordinationServiceModeKind.
         * @memberof coordinationservicemodule
         * @classdesc Represents a ENG_CoordinationServiceModeKind.
         * @implements IENG_CoordinationServiceModeKind
         * @constructor
         * @param {coordinationservicemodule.IENG_CoordinationServiceModeKind=} [properties] Properties to set
         */
        function ENG_CoordinationServiceModeKind(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ENG_CoordinationServiceModeKind setVal.
         * @member {coordinationservicemodule.CoordinationServiceModeKind} setVal
         * @memberof coordinationservicemodule.ENG_CoordinationServiceModeKind
         * @instance
         */
        ENG_CoordinationServiceModeKind.prototype.setVal = 0;

        /**
         * ENG_CoordinationServiceModeKind setValExtension.
         * @member {google.protobuf.IStringValue|null|undefined} setValExtension
         * @memberof coordinationservicemodule.ENG_CoordinationServiceModeKind
         * @instance
         */
        ENG_CoordinationServiceModeKind.prototype.setValExtension = null;

        /**
         * Creates a new ENG_CoordinationServiceModeKind instance using the specified properties.
         * @function create
         * @memberof coordinationservicemodule.ENG_CoordinationServiceModeKind
         * @static
         * @param {coordinationservicemodule.IENG_CoordinationServiceModeKind=} [properties] Properties to set
         * @returns {coordinationservicemodule.ENG_CoordinationServiceModeKind} ENG_CoordinationServiceModeKind instance
         */
        ENG_CoordinationServiceModeKind.create = function create(properties) {
            return new ENG_CoordinationServiceModeKind(properties);
        };

        /**
         * Encodes the specified ENG_CoordinationServiceModeKind message. Does not implicitly {@link coordinationservicemodule.ENG_CoordinationServiceModeKind.verify|verify} messages.
         * @function encode
         * @memberof coordinationservicemodule.ENG_CoordinationServiceModeKind
         * @static
         * @param {coordinationservicemodule.IENG_CoordinationServiceModeKind} message ENG_CoordinationServiceModeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENG_CoordinationServiceModeKind.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.setVal != null && Object.hasOwnProperty.call(message, "setVal"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.setVal);
            if (message.setValExtension != null && Object.hasOwnProperty.call(message, "setValExtension"))
                $root.google.protobuf.StringValue.encode(message.setValExtension, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ENG_CoordinationServiceModeKind message, length delimited. Does not implicitly {@link coordinationservicemodule.ENG_CoordinationServiceModeKind.verify|verify} messages.
         * @function encodeDelimited
         * @memberof coordinationservicemodule.ENG_CoordinationServiceModeKind
         * @static
         * @param {coordinationservicemodule.IENG_CoordinationServiceModeKind} message ENG_CoordinationServiceModeKind message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ENG_CoordinationServiceModeKind.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ENG_CoordinationServiceModeKind message from the specified reader or buffer.
         * @function decode
         * @memberof coordinationservicemodule.ENG_CoordinationServiceModeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {coordinationservicemodule.ENG_CoordinationServiceModeKind} ENG_CoordinationServiceModeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENG_CoordinationServiceModeKind.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.coordinationservicemodule.ENG_CoordinationServiceModeKind();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.setVal = reader.int32();
                    break;
                case 2:
                    message.setValExtension = $root.google.protobuf.StringValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ENG_CoordinationServiceModeKind message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof coordinationservicemodule.ENG_CoordinationServiceModeKind
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {coordinationservicemodule.ENG_CoordinationServiceModeKind} ENG_CoordinationServiceModeKind
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ENG_CoordinationServiceModeKind.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ENG_CoordinationServiceModeKind message.
         * @function verify
         * @memberof coordinationservicemodule.ENG_CoordinationServiceModeKind
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ENG_CoordinationServiceModeKind.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.setVal != null && message.hasOwnProperty("setVal"))
                switch (message.setVal) {
                default:
                    return "setVal: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            if (message.setValExtension != null && message.hasOwnProperty("setValExtension")) {
                var error = $root.google.protobuf.StringValue.verify(message.setValExtension);
                if (error)
                    return "setValExtension." + error;
            }
            return null;
        };

        /**
         * Creates a ENG_CoordinationServiceModeKind message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof coordinationservicemodule.ENG_CoordinationServiceModeKind
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {coordinationservicemodule.ENG_CoordinationServiceModeKind} ENG_CoordinationServiceModeKind
         */
        ENG_CoordinationServiceModeKind.fromObject = function fromObject(object) {
            if (object instanceof $root.coordinationservicemodule.ENG_CoordinationServiceModeKind)
                return object;
            var message = new $root.coordinationservicemodule.ENG_CoordinationServiceModeKind();
            switch (object.setVal) {
            case "CoordinationServiceModeKind_none":
            case 0:
                message.setVal = 0;
                break;
            case "CoordinationServiceModeKind_auto":
            case 1:
                message.setVal = 1;
                break;
            case "CoordinationServiceModeKind_manual":
            case 2:
                message.setVal = 2;
                break;
            case "CoordinationServiceModeKind_netzero":
            case 3:
                message.setVal = 3;
                break;
            case "CoordinationServiceModeKind_start":
            case 4:
                message.setVal = 4;
                break;
            case "CoordinationServiceModeKind_stop":
            case 5:
                message.setVal = 5;
                break;
            }
            if (object.setValExtension != null) {
                if (typeof object.setValExtension !== "object")
                    throw TypeError(".coordinationservicemodule.ENG_CoordinationServiceModeKind.setValExtension: object expected");
                message.setValExtension = $root.google.protobuf.StringValue.fromObject(object.setValExtension);
            }
            return message;
        };

        /**
         * Creates a plain object from a ENG_CoordinationServiceModeKind message. Also converts values to other types if specified.
         * @function toObject
         * @memberof coordinationservicemodule.ENG_CoordinationServiceModeKind
         * @static
         * @param {coordinationservicemodule.ENG_CoordinationServiceModeKind} message ENG_CoordinationServiceModeKind
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ENG_CoordinationServiceModeKind.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.setVal = options.enums === String ? "CoordinationServiceModeKind_none" : 0;
                object.setValExtension = null;
            }
            if (message.setVal != null && message.hasOwnProperty("setVal"))
                object.setVal = options.enums === String ? $root.coordinationservicemodule.CoordinationServiceModeKind[message.setVal] : message.setVal;
            if (message.setValExtension != null && message.hasOwnProperty("setValExtension"))
                object.setValExtension = $root.google.protobuf.StringValue.toObject(message.setValExtension, options);
            return object;
        };

        /**
         * Converts this ENG_CoordinationServiceModeKind to JSON.
         * @function toJSON
         * @memberof coordinationservicemodule.ENG_CoordinationServiceModeKind
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ENG_CoordinationServiceModeKind.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ENG_CoordinationServiceModeKind;
    })();

    coordinationservicemodule.CoordinationControlDCSC = (function() {

        /**
         * Properties of a CoordinationControlDCSC.
         * @memberof coordinationservicemodule
         * @interface ICoordinationControlDCSC
         * @property {commonmodule.ILogicalNodeForControl|null} [logicalNodeForControl] CoordinationControlDCSC logicalNodeForControl
         * @property {coordinationservicemodule.IENG_CoordinationServiceModeKind|null} [CoordinationServiceMode] CoordinationControlDCSC CoordinationServiceMode
         * @property {commonmodule.IControlDPC|null} [Island] CoordinationControlDCSC Island
         */

        /**
         * Constructs a new CoordinationControlDCSC.
         * @memberof coordinationservicemodule
         * @classdesc Represents a CoordinationControlDCSC.
         * @implements ICoordinationControlDCSC
         * @constructor
         * @param {coordinationservicemodule.ICoordinationControlDCSC=} [properties] Properties to set
         */
        function CoordinationControlDCSC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CoordinationControlDCSC logicalNodeForControl.
         * @member {commonmodule.ILogicalNodeForControl|null|undefined} logicalNodeForControl
         * @memberof coordinationservicemodule.CoordinationControlDCSC
         * @instance
         */
        CoordinationControlDCSC.prototype.logicalNodeForControl = null;

        /**
         * CoordinationControlDCSC CoordinationServiceMode.
         * @member {coordinationservicemodule.IENG_CoordinationServiceModeKind|null|undefined} CoordinationServiceMode
         * @memberof coordinationservicemodule.CoordinationControlDCSC
         * @instance
         */
        CoordinationControlDCSC.prototype.CoordinationServiceMode = null;

        /**
         * CoordinationControlDCSC Island.
         * @member {commonmodule.IControlDPC|null|undefined} Island
         * @memberof coordinationservicemodule.CoordinationControlDCSC
         * @instance
         */
        CoordinationControlDCSC.prototype.Island = null;

        /**
         * Creates a new CoordinationControlDCSC instance using the specified properties.
         * @function create
         * @memberof coordinationservicemodule.CoordinationControlDCSC
         * @static
         * @param {coordinationservicemodule.ICoordinationControlDCSC=} [properties] Properties to set
         * @returns {coordinationservicemodule.CoordinationControlDCSC} CoordinationControlDCSC instance
         */
        CoordinationControlDCSC.create = function create(properties) {
            return new CoordinationControlDCSC(properties);
        };

        /**
         * Encodes the specified CoordinationControlDCSC message. Does not implicitly {@link coordinationservicemodule.CoordinationControlDCSC.verify|verify} messages.
         * @function encode
         * @memberof coordinationservicemodule.CoordinationControlDCSC
         * @static
         * @param {coordinationservicemodule.ICoordinationControlDCSC} message CoordinationControlDCSC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationControlDCSC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForControl != null && Object.hasOwnProperty.call(message, "logicalNodeForControl"))
                $root.commonmodule.LogicalNodeForControl.encode(message.logicalNodeForControl, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.CoordinationServiceMode != null && Object.hasOwnProperty.call(message, "CoordinationServiceMode"))
                $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.encode(message.CoordinationServiceMode, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.Island != null && Object.hasOwnProperty.call(message, "Island"))
                $root.commonmodule.ControlDPC.encode(message.Island, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CoordinationControlDCSC message, length delimited. Does not implicitly {@link coordinationservicemodule.CoordinationControlDCSC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof coordinationservicemodule.CoordinationControlDCSC
         * @static
         * @param {coordinationservicemodule.ICoordinationControlDCSC} message CoordinationControlDCSC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationControlDCSC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CoordinationControlDCSC message from the specified reader or buffer.
         * @function decode
         * @memberof coordinationservicemodule.CoordinationControlDCSC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {coordinationservicemodule.CoordinationControlDCSC} CoordinationControlDCSC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationControlDCSC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.coordinationservicemodule.CoordinationControlDCSC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.CoordinationServiceMode = $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.Island = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CoordinationControlDCSC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof coordinationservicemodule.CoordinationControlDCSC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {coordinationservicemodule.CoordinationControlDCSC} CoordinationControlDCSC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationControlDCSC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CoordinationControlDCSC message.
         * @function verify
         * @memberof coordinationservicemodule.CoordinationControlDCSC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CoordinationControlDCSC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl")) {
                var error = $root.commonmodule.LogicalNodeForControl.verify(message.logicalNodeForControl);
                if (error)
                    return "logicalNodeForControl." + error;
            }
            if (message.CoordinationServiceMode != null && message.hasOwnProperty("CoordinationServiceMode")) {
                var error = $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.verify(message.CoordinationServiceMode);
                if (error)
                    return "CoordinationServiceMode." + error;
            }
            if (message.Island != null && message.hasOwnProperty("Island")) {
                var error = $root.commonmodule.ControlDPC.verify(message.Island);
                if (error)
                    return "Island." + error;
            }
            return null;
        };

        /**
         * Creates a CoordinationControlDCSC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof coordinationservicemodule.CoordinationControlDCSC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {coordinationservicemodule.CoordinationControlDCSC} CoordinationControlDCSC
         */
        CoordinationControlDCSC.fromObject = function fromObject(object) {
            if (object instanceof $root.coordinationservicemodule.CoordinationControlDCSC)
                return object;
            var message = new $root.coordinationservicemodule.CoordinationControlDCSC();
            if (object.logicalNodeForControl != null) {
                if (typeof object.logicalNodeForControl !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationControlDCSC.logicalNodeForControl: object expected");
                message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.fromObject(object.logicalNodeForControl);
            }
            if (object.CoordinationServiceMode != null) {
                if (typeof object.CoordinationServiceMode !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationControlDCSC.CoordinationServiceMode: object expected");
                message.CoordinationServiceMode = $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.fromObject(object.CoordinationServiceMode);
            }
            if (object.Island != null) {
                if (typeof object.Island !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationControlDCSC.Island: object expected");
                message.Island = $root.commonmodule.ControlDPC.fromObject(object.Island);
            }
            return message;
        };

        /**
         * Creates a plain object from a CoordinationControlDCSC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof coordinationservicemodule.CoordinationControlDCSC
         * @static
         * @param {coordinationservicemodule.CoordinationControlDCSC} message CoordinationControlDCSC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CoordinationControlDCSC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForControl = null;
                object.CoordinationServiceMode = null;
                object.Island = null;
            }
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl"))
                object.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.toObject(message.logicalNodeForControl, options);
            if (message.CoordinationServiceMode != null && message.hasOwnProperty("CoordinationServiceMode"))
                object.CoordinationServiceMode = $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.toObject(message.CoordinationServiceMode, options);
            if (message.Island != null && message.hasOwnProperty("Island"))
                object.Island = $root.commonmodule.ControlDPC.toObject(message.Island, options);
            return object;
        };

        /**
         * Converts this CoordinationControlDCSC to JSON.
         * @function toJSON
         * @memberof coordinationservicemodule.CoordinationControlDCSC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CoordinationControlDCSC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CoordinationControlDCSC;
    })();

    coordinationservicemodule.CoordinationControl = (function() {

        /**
         * Properties of a CoordinationControl.
         * @memberof coordinationservicemodule
         * @interface ICoordinationControl
         * @property {commonmodule.IControlValue|null} [controlValue] CoordinationControl controlValue
         * @property {commonmodule.ICheckConditions|null} [check] CoordinationControl check
         * @property {coordinationservicemodule.ICoordinationControlDCSC|null} [coordinationControlDCSC] CoordinationControl coordinationControlDCSC
         */

        /**
         * Constructs a new CoordinationControl.
         * @memberof coordinationservicemodule
         * @classdesc Represents a CoordinationControl.
         * @implements ICoordinationControl
         * @constructor
         * @param {coordinationservicemodule.ICoordinationControl=} [properties] Properties to set
         */
        function CoordinationControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CoordinationControl controlValue.
         * @member {commonmodule.IControlValue|null|undefined} controlValue
         * @memberof coordinationservicemodule.CoordinationControl
         * @instance
         */
        CoordinationControl.prototype.controlValue = null;

        /**
         * CoordinationControl check.
         * @member {commonmodule.ICheckConditions|null|undefined} check
         * @memberof coordinationservicemodule.CoordinationControl
         * @instance
         */
        CoordinationControl.prototype.check = null;

        /**
         * CoordinationControl coordinationControlDCSC.
         * @member {coordinationservicemodule.ICoordinationControlDCSC|null|undefined} coordinationControlDCSC
         * @memberof coordinationservicemodule.CoordinationControl
         * @instance
         */
        CoordinationControl.prototype.coordinationControlDCSC = null;

        /**
         * Creates a new CoordinationControl instance using the specified properties.
         * @function create
         * @memberof coordinationservicemodule.CoordinationControl
         * @static
         * @param {coordinationservicemodule.ICoordinationControl=} [properties] Properties to set
         * @returns {coordinationservicemodule.CoordinationControl} CoordinationControl instance
         */
        CoordinationControl.create = function create(properties) {
            return new CoordinationControl(properties);
        };

        /**
         * Encodes the specified CoordinationControl message. Does not implicitly {@link coordinationservicemodule.CoordinationControl.verify|verify} messages.
         * @function encode
         * @memberof coordinationservicemodule.CoordinationControl
         * @static
         * @param {coordinationservicemodule.ICoordinationControl} message CoordinationControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlValue != null && Object.hasOwnProperty.call(message, "controlValue"))
                $root.commonmodule.ControlValue.encode(message.controlValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.check != null && Object.hasOwnProperty.call(message, "check"))
                $root.commonmodule.CheckConditions.encode(message.check, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.coordinationControlDCSC != null && Object.hasOwnProperty.call(message, "coordinationControlDCSC"))
                $root.coordinationservicemodule.CoordinationControlDCSC.encode(message.coordinationControlDCSC, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CoordinationControl message, length delimited. Does not implicitly {@link coordinationservicemodule.CoordinationControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof coordinationservicemodule.CoordinationControl
         * @static
         * @param {coordinationservicemodule.ICoordinationControl} message CoordinationControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CoordinationControl message from the specified reader or buffer.
         * @function decode
         * @memberof coordinationservicemodule.CoordinationControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {coordinationservicemodule.CoordinationControl} CoordinationControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.coordinationservicemodule.CoordinationControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlValue = $root.commonmodule.ControlValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.check = $root.commonmodule.CheckConditions.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.coordinationControlDCSC = $root.coordinationservicemodule.CoordinationControlDCSC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CoordinationControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof coordinationservicemodule.CoordinationControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {coordinationservicemodule.CoordinationControl} CoordinationControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CoordinationControl message.
         * @function verify
         * @memberof coordinationservicemodule.CoordinationControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CoordinationControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlValue != null && message.hasOwnProperty("controlValue")) {
                var error = $root.commonmodule.ControlValue.verify(message.controlValue);
                if (error)
                    return "controlValue." + error;
            }
            if (message.check != null && message.hasOwnProperty("check")) {
                var error = $root.commonmodule.CheckConditions.verify(message.check);
                if (error)
                    return "check." + error;
            }
            if (message.coordinationControlDCSC != null && message.hasOwnProperty("coordinationControlDCSC")) {
                var error = $root.coordinationservicemodule.CoordinationControlDCSC.verify(message.coordinationControlDCSC);
                if (error)
                    return "coordinationControlDCSC." + error;
            }
            return null;
        };

        /**
         * Creates a CoordinationControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof coordinationservicemodule.CoordinationControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {coordinationservicemodule.CoordinationControl} CoordinationControl
         */
        CoordinationControl.fromObject = function fromObject(object) {
            if (object instanceof $root.coordinationservicemodule.CoordinationControl)
                return object;
            var message = new $root.coordinationservicemodule.CoordinationControl();
            if (object.controlValue != null) {
                if (typeof object.controlValue !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationControl.controlValue: object expected");
                message.controlValue = $root.commonmodule.ControlValue.fromObject(object.controlValue);
            }
            if (object.check != null) {
                if (typeof object.check !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationControl.check: object expected");
                message.check = $root.commonmodule.CheckConditions.fromObject(object.check);
            }
            if (object.coordinationControlDCSC != null) {
                if (typeof object.coordinationControlDCSC !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationControl.coordinationControlDCSC: object expected");
                message.coordinationControlDCSC = $root.coordinationservicemodule.CoordinationControlDCSC.fromObject(object.coordinationControlDCSC);
            }
            return message;
        };

        /**
         * Creates a plain object from a CoordinationControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof coordinationservicemodule.CoordinationControl
         * @static
         * @param {coordinationservicemodule.CoordinationControl} message CoordinationControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CoordinationControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlValue = null;
                object.check = null;
                object.coordinationControlDCSC = null;
            }
            if (message.controlValue != null && message.hasOwnProperty("controlValue"))
                object.controlValue = $root.commonmodule.ControlValue.toObject(message.controlValue, options);
            if (message.check != null && message.hasOwnProperty("check"))
                object.check = $root.commonmodule.CheckConditions.toObject(message.check, options);
            if (message.coordinationControlDCSC != null && message.hasOwnProperty("coordinationControlDCSC"))
                object.coordinationControlDCSC = $root.coordinationservicemodule.CoordinationControlDCSC.toObject(message.coordinationControlDCSC, options);
            return object;
        };

        /**
         * Converts this CoordinationControl to JSON.
         * @function toJSON
         * @memberof coordinationservicemodule.CoordinationControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CoordinationControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CoordinationControl;
    })();

    coordinationservicemodule.CoordinationControlProfile = (function() {

        /**
         * Properties of a CoordinationControlProfile.
         * @memberof coordinationservicemodule
         * @interface ICoordinationControlProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] CoordinationControlProfile controlMessageInfo
         * @property {commonmodule.IApplicationSystem|null} [applicationSystem] CoordinationControlProfile applicationSystem
         * @property {coordinationservicemodule.ICoordinationControl|null} [coordinationControl] CoordinationControlProfile coordinationControl
         */

        /**
         * Constructs a new CoordinationControlProfile.
         * @memberof coordinationservicemodule
         * @classdesc Represents a CoordinationControlProfile.
         * @implements ICoordinationControlProfile
         * @constructor
         * @param {coordinationservicemodule.ICoordinationControlProfile=} [properties] Properties to set
         */
        function CoordinationControlProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CoordinationControlProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof coordinationservicemodule.CoordinationControlProfile
         * @instance
         */
        CoordinationControlProfile.prototype.controlMessageInfo = null;

        /**
         * CoordinationControlProfile applicationSystem.
         * @member {commonmodule.IApplicationSystem|null|undefined} applicationSystem
         * @memberof coordinationservicemodule.CoordinationControlProfile
         * @instance
         */
        CoordinationControlProfile.prototype.applicationSystem = null;

        /**
         * CoordinationControlProfile coordinationControl.
         * @member {coordinationservicemodule.ICoordinationControl|null|undefined} coordinationControl
         * @memberof coordinationservicemodule.CoordinationControlProfile
         * @instance
         */
        CoordinationControlProfile.prototype.coordinationControl = null;

        /**
         * Creates a new CoordinationControlProfile instance using the specified properties.
         * @function create
         * @memberof coordinationservicemodule.CoordinationControlProfile
         * @static
         * @param {coordinationservicemodule.ICoordinationControlProfile=} [properties] Properties to set
         * @returns {coordinationservicemodule.CoordinationControlProfile} CoordinationControlProfile instance
         */
        CoordinationControlProfile.create = function create(properties) {
            return new CoordinationControlProfile(properties);
        };

        /**
         * Encodes the specified CoordinationControlProfile message. Does not implicitly {@link coordinationservicemodule.CoordinationControlProfile.verify|verify} messages.
         * @function encode
         * @memberof coordinationservicemodule.CoordinationControlProfile
         * @static
         * @param {coordinationservicemodule.ICoordinationControlProfile} message CoordinationControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationControlProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.applicationSystem != null && Object.hasOwnProperty.call(message, "applicationSystem"))
                $root.commonmodule.ApplicationSystem.encode(message.applicationSystem, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.coordinationControl != null && Object.hasOwnProperty.call(message, "coordinationControl"))
                $root.coordinationservicemodule.CoordinationControl.encode(message.coordinationControl, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CoordinationControlProfile message, length delimited. Does not implicitly {@link coordinationservicemodule.CoordinationControlProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof coordinationservicemodule.CoordinationControlProfile
         * @static
         * @param {coordinationservicemodule.ICoordinationControlProfile} message CoordinationControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationControlProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CoordinationControlProfile message from the specified reader or buffer.
         * @function decode
         * @memberof coordinationservicemodule.CoordinationControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {coordinationservicemodule.CoordinationControlProfile} CoordinationControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationControlProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.coordinationservicemodule.CoordinationControlProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.applicationSystem = $root.commonmodule.ApplicationSystem.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.coordinationControl = $root.coordinationservicemodule.CoordinationControl.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CoordinationControlProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof coordinationservicemodule.CoordinationControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {coordinationservicemodule.CoordinationControlProfile} CoordinationControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationControlProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CoordinationControlProfile message.
         * @function verify
         * @memberof coordinationservicemodule.CoordinationControlProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CoordinationControlProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.applicationSystem != null && message.hasOwnProperty("applicationSystem")) {
                var error = $root.commonmodule.ApplicationSystem.verify(message.applicationSystem);
                if (error)
                    return "applicationSystem." + error;
            }
            if (message.coordinationControl != null && message.hasOwnProperty("coordinationControl")) {
                var error = $root.coordinationservicemodule.CoordinationControl.verify(message.coordinationControl);
                if (error)
                    return "coordinationControl." + error;
            }
            return null;
        };

        /**
         * Creates a CoordinationControlProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof coordinationservicemodule.CoordinationControlProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {coordinationservicemodule.CoordinationControlProfile} CoordinationControlProfile
         */
        CoordinationControlProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.coordinationservicemodule.CoordinationControlProfile)
                return object;
            var message = new $root.coordinationservicemodule.CoordinationControlProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationControlProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.applicationSystem != null) {
                if (typeof object.applicationSystem !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationControlProfile.applicationSystem: object expected");
                message.applicationSystem = $root.commonmodule.ApplicationSystem.fromObject(object.applicationSystem);
            }
            if (object.coordinationControl != null) {
                if (typeof object.coordinationControl !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationControlProfile.coordinationControl: object expected");
                message.coordinationControl = $root.coordinationservicemodule.CoordinationControl.fromObject(object.coordinationControl);
            }
            return message;
        };

        /**
         * Creates a plain object from a CoordinationControlProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof coordinationservicemodule.CoordinationControlProfile
         * @static
         * @param {coordinationservicemodule.CoordinationControlProfile} message CoordinationControlProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CoordinationControlProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.applicationSystem = null;
                object.coordinationControl = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.applicationSystem != null && message.hasOwnProperty("applicationSystem"))
                object.applicationSystem = $root.commonmodule.ApplicationSystem.toObject(message.applicationSystem, options);
            if (message.coordinationControl != null && message.hasOwnProperty("coordinationControl"))
                object.coordinationControl = $root.coordinationservicemodule.CoordinationControl.toObject(message.coordinationControl, options);
            return object;
        };

        /**
         * Converts this CoordinationControlProfile to JSON.
         * @function toJSON
         * @memberof coordinationservicemodule.CoordinationControlProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CoordinationControlProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CoordinationControlProfile;
    })();

    coordinationservicemodule.CoordinationEventDCSC = (function() {

        /**
         * Properties of a CoordinationEventDCSC.
         * @memberof coordinationservicemodule
         * @interface ICoordinationEventDCSC
         * @property {commonmodule.ILogicalNodeForEventAndStatus|null} [logicalNodeForEventAndStatus] CoordinationEventDCSC logicalNodeForEventAndStatus
         * @property {coordinationservicemodule.IENG_CoordinationServiceModeKind|null} [CoordinationServiceMode] CoordinationEventDCSC CoordinationServiceMode
         * @property {commonmodule.IStatusSPS|null} [Island] CoordinationEventDCSC Island
         * @property {commonmodule.IStatusSPS|null} [PermissibleAuto] CoordinationEventDCSC PermissibleAuto
         * @property {commonmodule.IStatusSPS|null} [PermissibleManual] CoordinationEventDCSC PermissibleManual
         * @property {commonmodule.IStatusSPS|null} [PermissibleNetzero] CoordinationEventDCSC PermissibleNetzero
         * @property {commonmodule.IStatusSPS|null} [PermissibleStart] CoordinationEventDCSC PermissibleStart
         * @property {commonmodule.IStatusSPS|null} [PermissibleStop] CoordinationEventDCSC PermissibleStop
         */

        /**
         * Constructs a new CoordinationEventDCSC.
         * @memberof coordinationservicemodule
         * @classdesc Represents a CoordinationEventDCSC.
         * @implements ICoordinationEventDCSC
         * @constructor
         * @param {coordinationservicemodule.ICoordinationEventDCSC=} [properties] Properties to set
         */
        function CoordinationEventDCSC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CoordinationEventDCSC logicalNodeForEventAndStatus.
         * @member {commonmodule.ILogicalNodeForEventAndStatus|null|undefined} logicalNodeForEventAndStatus
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @instance
         */
        CoordinationEventDCSC.prototype.logicalNodeForEventAndStatus = null;

        /**
         * CoordinationEventDCSC CoordinationServiceMode.
         * @member {coordinationservicemodule.IENG_CoordinationServiceModeKind|null|undefined} CoordinationServiceMode
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @instance
         */
        CoordinationEventDCSC.prototype.CoordinationServiceMode = null;

        /**
         * CoordinationEventDCSC Island.
         * @member {commonmodule.IStatusSPS|null|undefined} Island
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @instance
         */
        CoordinationEventDCSC.prototype.Island = null;

        /**
         * CoordinationEventDCSC PermissibleAuto.
         * @member {commonmodule.IStatusSPS|null|undefined} PermissibleAuto
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @instance
         */
        CoordinationEventDCSC.prototype.PermissibleAuto = null;

        /**
         * CoordinationEventDCSC PermissibleManual.
         * @member {commonmodule.IStatusSPS|null|undefined} PermissibleManual
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @instance
         */
        CoordinationEventDCSC.prototype.PermissibleManual = null;

        /**
         * CoordinationEventDCSC PermissibleNetzero.
         * @member {commonmodule.IStatusSPS|null|undefined} PermissibleNetzero
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @instance
         */
        CoordinationEventDCSC.prototype.PermissibleNetzero = null;

        /**
         * CoordinationEventDCSC PermissibleStart.
         * @member {commonmodule.IStatusSPS|null|undefined} PermissibleStart
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @instance
         */
        CoordinationEventDCSC.prototype.PermissibleStart = null;

        /**
         * CoordinationEventDCSC PermissibleStop.
         * @member {commonmodule.IStatusSPS|null|undefined} PermissibleStop
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @instance
         */
        CoordinationEventDCSC.prototype.PermissibleStop = null;

        /**
         * Creates a new CoordinationEventDCSC instance using the specified properties.
         * @function create
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @static
         * @param {coordinationservicemodule.ICoordinationEventDCSC=} [properties] Properties to set
         * @returns {coordinationservicemodule.CoordinationEventDCSC} CoordinationEventDCSC instance
         */
        CoordinationEventDCSC.create = function create(properties) {
            return new CoordinationEventDCSC(properties);
        };

        /**
         * Encodes the specified CoordinationEventDCSC message. Does not implicitly {@link coordinationservicemodule.CoordinationEventDCSC.verify|verify} messages.
         * @function encode
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @static
         * @param {coordinationservicemodule.ICoordinationEventDCSC} message CoordinationEventDCSC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationEventDCSC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForEventAndStatus != null && Object.hasOwnProperty.call(message, "logicalNodeForEventAndStatus"))
                $root.commonmodule.LogicalNodeForEventAndStatus.encode(message.logicalNodeForEventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.CoordinationServiceMode != null && Object.hasOwnProperty.call(message, "CoordinationServiceMode"))
                $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.encode(message.CoordinationServiceMode, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.Island != null && Object.hasOwnProperty.call(message, "Island"))
                $root.commonmodule.StatusSPS.encode(message.Island, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.PermissibleAuto != null && Object.hasOwnProperty.call(message, "PermissibleAuto"))
                $root.commonmodule.StatusSPS.encode(message.PermissibleAuto, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.PermissibleManual != null && Object.hasOwnProperty.call(message, "PermissibleManual"))
                $root.commonmodule.StatusSPS.encode(message.PermissibleManual, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.PermissibleNetzero != null && Object.hasOwnProperty.call(message, "PermissibleNetzero"))
                $root.commonmodule.StatusSPS.encode(message.PermissibleNetzero, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.PermissibleStart != null && Object.hasOwnProperty.call(message, "PermissibleStart"))
                $root.commonmodule.StatusSPS.encode(message.PermissibleStart, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.PermissibleStop != null && Object.hasOwnProperty.call(message, "PermissibleStop"))
                $root.commonmodule.StatusSPS.encode(message.PermissibleStop, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CoordinationEventDCSC message, length delimited. Does not implicitly {@link coordinationservicemodule.CoordinationEventDCSC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @static
         * @param {coordinationservicemodule.ICoordinationEventDCSC} message CoordinationEventDCSC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationEventDCSC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CoordinationEventDCSC message from the specified reader or buffer.
         * @function decode
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {coordinationservicemodule.CoordinationEventDCSC} CoordinationEventDCSC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationEventDCSC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.coordinationservicemodule.CoordinationEventDCSC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.CoordinationServiceMode = $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.Island = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.PermissibleAuto = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.PermissibleManual = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.PermissibleNetzero = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.PermissibleStart = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.PermissibleStop = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CoordinationEventDCSC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {coordinationservicemodule.CoordinationEventDCSC} CoordinationEventDCSC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationEventDCSC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CoordinationEventDCSC message.
         * @function verify
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CoordinationEventDCSC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus")) {
                var error = $root.commonmodule.LogicalNodeForEventAndStatus.verify(message.logicalNodeForEventAndStatus);
                if (error)
                    return "logicalNodeForEventAndStatus." + error;
            }
            if (message.CoordinationServiceMode != null && message.hasOwnProperty("CoordinationServiceMode")) {
                var error = $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.verify(message.CoordinationServiceMode);
                if (error)
                    return "CoordinationServiceMode." + error;
            }
            if (message.Island != null && message.hasOwnProperty("Island")) {
                var error = $root.commonmodule.StatusSPS.verify(message.Island);
                if (error)
                    return "Island." + error;
            }
            if (message.PermissibleAuto != null && message.hasOwnProperty("PermissibleAuto")) {
                var error = $root.commonmodule.StatusSPS.verify(message.PermissibleAuto);
                if (error)
                    return "PermissibleAuto." + error;
            }
            if (message.PermissibleManual != null && message.hasOwnProperty("PermissibleManual")) {
                var error = $root.commonmodule.StatusSPS.verify(message.PermissibleManual);
                if (error)
                    return "PermissibleManual." + error;
            }
            if (message.PermissibleNetzero != null && message.hasOwnProperty("PermissibleNetzero")) {
                var error = $root.commonmodule.StatusSPS.verify(message.PermissibleNetzero);
                if (error)
                    return "PermissibleNetzero." + error;
            }
            if (message.PermissibleStart != null && message.hasOwnProperty("PermissibleStart")) {
                var error = $root.commonmodule.StatusSPS.verify(message.PermissibleStart);
                if (error)
                    return "PermissibleStart." + error;
            }
            if (message.PermissibleStop != null && message.hasOwnProperty("PermissibleStop")) {
                var error = $root.commonmodule.StatusSPS.verify(message.PermissibleStop);
                if (error)
                    return "PermissibleStop." + error;
            }
            return null;
        };

        /**
         * Creates a CoordinationEventDCSC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {coordinationservicemodule.CoordinationEventDCSC} CoordinationEventDCSC
         */
        CoordinationEventDCSC.fromObject = function fromObject(object) {
            if (object instanceof $root.coordinationservicemodule.CoordinationEventDCSC)
                return object;
            var message = new $root.coordinationservicemodule.CoordinationEventDCSC();
            if (object.logicalNodeForEventAndStatus != null) {
                if (typeof object.logicalNodeForEventAndStatus !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationEventDCSC.logicalNodeForEventAndStatus: object expected");
                message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.fromObject(object.logicalNodeForEventAndStatus);
            }
            if (object.CoordinationServiceMode != null) {
                if (typeof object.CoordinationServiceMode !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationEventDCSC.CoordinationServiceMode: object expected");
                message.CoordinationServiceMode = $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.fromObject(object.CoordinationServiceMode);
            }
            if (object.Island != null) {
                if (typeof object.Island !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationEventDCSC.Island: object expected");
                message.Island = $root.commonmodule.StatusSPS.fromObject(object.Island);
            }
            if (object.PermissibleAuto != null) {
                if (typeof object.PermissibleAuto !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationEventDCSC.PermissibleAuto: object expected");
                message.PermissibleAuto = $root.commonmodule.StatusSPS.fromObject(object.PermissibleAuto);
            }
            if (object.PermissibleManual != null) {
                if (typeof object.PermissibleManual !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationEventDCSC.PermissibleManual: object expected");
                message.PermissibleManual = $root.commonmodule.StatusSPS.fromObject(object.PermissibleManual);
            }
            if (object.PermissibleNetzero != null) {
                if (typeof object.PermissibleNetzero !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationEventDCSC.PermissibleNetzero: object expected");
                message.PermissibleNetzero = $root.commonmodule.StatusSPS.fromObject(object.PermissibleNetzero);
            }
            if (object.PermissibleStart != null) {
                if (typeof object.PermissibleStart !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationEventDCSC.PermissibleStart: object expected");
                message.PermissibleStart = $root.commonmodule.StatusSPS.fromObject(object.PermissibleStart);
            }
            if (object.PermissibleStop != null) {
                if (typeof object.PermissibleStop !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationEventDCSC.PermissibleStop: object expected");
                message.PermissibleStop = $root.commonmodule.StatusSPS.fromObject(object.PermissibleStop);
            }
            return message;
        };

        /**
         * Creates a plain object from a CoordinationEventDCSC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @static
         * @param {coordinationservicemodule.CoordinationEventDCSC} message CoordinationEventDCSC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CoordinationEventDCSC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForEventAndStatus = null;
                object.CoordinationServiceMode = null;
                object.Island = null;
                object.PermissibleAuto = null;
                object.PermissibleManual = null;
                object.PermissibleNetzero = null;
                object.PermissibleStart = null;
                object.PermissibleStop = null;
            }
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus"))
                object.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.toObject(message.logicalNodeForEventAndStatus, options);
            if (message.CoordinationServiceMode != null && message.hasOwnProperty("CoordinationServiceMode"))
                object.CoordinationServiceMode = $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.toObject(message.CoordinationServiceMode, options);
            if (message.Island != null && message.hasOwnProperty("Island"))
                object.Island = $root.commonmodule.StatusSPS.toObject(message.Island, options);
            if (message.PermissibleAuto != null && message.hasOwnProperty("PermissibleAuto"))
                object.PermissibleAuto = $root.commonmodule.StatusSPS.toObject(message.PermissibleAuto, options);
            if (message.PermissibleManual != null && message.hasOwnProperty("PermissibleManual"))
                object.PermissibleManual = $root.commonmodule.StatusSPS.toObject(message.PermissibleManual, options);
            if (message.PermissibleNetzero != null && message.hasOwnProperty("PermissibleNetzero"))
                object.PermissibleNetzero = $root.commonmodule.StatusSPS.toObject(message.PermissibleNetzero, options);
            if (message.PermissibleStart != null && message.hasOwnProperty("PermissibleStart"))
                object.PermissibleStart = $root.commonmodule.StatusSPS.toObject(message.PermissibleStart, options);
            if (message.PermissibleStop != null && message.hasOwnProperty("PermissibleStop"))
                object.PermissibleStop = $root.commonmodule.StatusSPS.toObject(message.PermissibleStop, options);
            return object;
        };

        /**
         * Converts this CoordinationEventDCSC to JSON.
         * @function toJSON
         * @memberof coordinationservicemodule.CoordinationEventDCSC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CoordinationEventDCSC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CoordinationEventDCSC;
    })();

    coordinationservicemodule.CoordinationEvent = (function() {

        /**
         * Properties of a CoordinationEvent.
         * @memberof coordinationservicemodule
         * @interface ICoordinationEvent
         * @property {commonmodule.IEventValue|null} [eventValue] CoordinationEvent eventValue
         * @property {coordinationservicemodule.ICoordinationEventDCSC|null} [coordinationEventDCSC] CoordinationEvent coordinationEventDCSC
         */

        /**
         * Constructs a new CoordinationEvent.
         * @memberof coordinationservicemodule
         * @classdesc Represents a CoordinationEvent.
         * @implements ICoordinationEvent
         * @constructor
         * @param {coordinationservicemodule.ICoordinationEvent=} [properties] Properties to set
         */
        function CoordinationEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CoordinationEvent eventValue.
         * @member {commonmodule.IEventValue|null|undefined} eventValue
         * @memberof coordinationservicemodule.CoordinationEvent
         * @instance
         */
        CoordinationEvent.prototype.eventValue = null;

        /**
         * CoordinationEvent coordinationEventDCSC.
         * @member {coordinationservicemodule.ICoordinationEventDCSC|null|undefined} coordinationEventDCSC
         * @memberof coordinationservicemodule.CoordinationEvent
         * @instance
         */
        CoordinationEvent.prototype.coordinationEventDCSC = null;

        /**
         * Creates a new CoordinationEvent instance using the specified properties.
         * @function create
         * @memberof coordinationservicemodule.CoordinationEvent
         * @static
         * @param {coordinationservicemodule.ICoordinationEvent=} [properties] Properties to set
         * @returns {coordinationservicemodule.CoordinationEvent} CoordinationEvent instance
         */
        CoordinationEvent.create = function create(properties) {
            return new CoordinationEvent(properties);
        };

        /**
         * Encodes the specified CoordinationEvent message. Does not implicitly {@link coordinationservicemodule.CoordinationEvent.verify|verify} messages.
         * @function encode
         * @memberof coordinationservicemodule.CoordinationEvent
         * @static
         * @param {coordinationservicemodule.ICoordinationEvent} message CoordinationEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventValue != null && Object.hasOwnProperty.call(message, "eventValue"))
                $root.commonmodule.EventValue.encode(message.eventValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.coordinationEventDCSC != null && Object.hasOwnProperty.call(message, "coordinationEventDCSC"))
                $root.coordinationservicemodule.CoordinationEventDCSC.encode(message.coordinationEventDCSC, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CoordinationEvent message, length delimited. Does not implicitly {@link coordinationservicemodule.CoordinationEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof coordinationservicemodule.CoordinationEvent
         * @static
         * @param {coordinationservicemodule.ICoordinationEvent} message CoordinationEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CoordinationEvent message from the specified reader or buffer.
         * @function decode
         * @memberof coordinationservicemodule.CoordinationEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {coordinationservicemodule.CoordinationEvent} CoordinationEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.coordinationservicemodule.CoordinationEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventValue = $root.commonmodule.EventValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.coordinationEventDCSC = $root.coordinationservicemodule.CoordinationEventDCSC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CoordinationEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof coordinationservicemodule.CoordinationEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {coordinationservicemodule.CoordinationEvent} CoordinationEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CoordinationEvent message.
         * @function verify
         * @memberof coordinationservicemodule.CoordinationEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CoordinationEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventValue != null && message.hasOwnProperty("eventValue")) {
                var error = $root.commonmodule.EventValue.verify(message.eventValue);
                if (error)
                    return "eventValue." + error;
            }
            if (message.coordinationEventDCSC != null && message.hasOwnProperty("coordinationEventDCSC")) {
                var error = $root.coordinationservicemodule.CoordinationEventDCSC.verify(message.coordinationEventDCSC);
                if (error)
                    return "coordinationEventDCSC." + error;
            }
            return null;
        };

        /**
         * Creates a CoordinationEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof coordinationservicemodule.CoordinationEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {coordinationservicemodule.CoordinationEvent} CoordinationEvent
         */
        CoordinationEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.coordinationservicemodule.CoordinationEvent)
                return object;
            var message = new $root.coordinationservicemodule.CoordinationEvent();
            if (object.eventValue != null) {
                if (typeof object.eventValue !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationEvent.eventValue: object expected");
                message.eventValue = $root.commonmodule.EventValue.fromObject(object.eventValue);
            }
            if (object.coordinationEventDCSC != null) {
                if (typeof object.coordinationEventDCSC !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationEvent.coordinationEventDCSC: object expected");
                message.coordinationEventDCSC = $root.coordinationservicemodule.CoordinationEventDCSC.fromObject(object.coordinationEventDCSC);
            }
            return message;
        };

        /**
         * Creates a plain object from a CoordinationEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof coordinationservicemodule.CoordinationEvent
         * @static
         * @param {coordinationservicemodule.CoordinationEvent} message CoordinationEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CoordinationEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventValue = null;
                object.coordinationEventDCSC = null;
            }
            if (message.eventValue != null && message.hasOwnProperty("eventValue"))
                object.eventValue = $root.commonmodule.EventValue.toObject(message.eventValue, options);
            if (message.coordinationEventDCSC != null && message.hasOwnProperty("coordinationEventDCSC"))
                object.coordinationEventDCSC = $root.coordinationservicemodule.CoordinationEventDCSC.toObject(message.coordinationEventDCSC, options);
            return object;
        };

        /**
         * Converts this CoordinationEvent to JSON.
         * @function toJSON
         * @memberof coordinationservicemodule.CoordinationEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CoordinationEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CoordinationEvent;
    })();

    coordinationservicemodule.CoordinationEventProfile = (function() {

        /**
         * Properties of a CoordinationEventProfile.
         * @memberof coordinationservicemodule
         * @interface ICoordinationEventProfile
         * @property {commonmodule.IEventMessageInfo|null} [eventMessageInfo] CoordinationEventProfile eventMessageInfo
         * @property {commonmodule.IApplicationSystem|null} [applicationSystem] CoordinationEventProfile applicationSystem
         * @property {coordinationservicemodule.ICoordinationEvent|null} [coordinationEvent] CoordinationEventProfile coordinationEvent
         */

        /**
         * Constructs a new CoordinationEventProfile.
         * @memberof coordinationservicemodule
         * @classdesc Represents a CoordinationEventProfile.
         * @implements ICoordinationEventProfile
         * @constructor
         * @param {coordinationservicemodule.ICoordinationEventProfile=} [properties] Properties to set
         */
        function CoordinationEventProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CoordinationEventProfile eventMessageInfo.
         * @member {commonmodule.IEventMessageInfo|null|undefined} eventMessageInfo
         * @memberof coordinationservicemodule.CoordinationEventProfile
         * @instance
         */
        CoordinationEventProfile.prototype.eventMessageInfo = null;

        /**
         * CoordinationEventProfile applicationSystem.
         * @member {commonmodule.IApplicationSystem|null|undefined} applicationSystem
         * @memberof coordinationservicemodule.CoordinationEventProfile
         * @instance
         */
        CoordinationEventProfile.prototype.applicationSystem = null;

        /**
         * CoordinationEventProfile coordinationEvent.
         * @member {coordinationservicemodule.ICoordinationEvent|null|undefined} coordinationEvent
         * @memberof coordinationservicemodule.CoordinationEventProfile
         * @instance
         */
        CoordinationEventProfile.prototype.coordinationEvent = null;

        /**
         * Creates a new CoordinationEventProfile instance using the specified properties.
         * @function create
         * @memberof coordinationservicemodule.CoordinationEventProfile
         * @static
         * @param {coordinationservicemodule.ICoordinationEventProfile=} [properties] Properties to set
         * @returns {coordinationservicemodule.CoordinationEventProfile} CoordinationEventProfile instance
         */
        CoordinationEventProfile.create = function create(properties) {
            return new CoordinationEventProfile(properties);
        };

        /**
         * Encodes the specified CoordinationEventProfile message. Does not implicitly {@link coordinationservicemodule.CoordinationEventProfile.verify|verify} messages.
         * @function encode
         * @memberof coordinationservicemodule.CoordinationEventProfile
         * @static
         * @param {coordinationservicemodule.ICoordinationEventProfile} message CoordinationEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationEventProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventMessageInfo != null && Object.hasOwnProperty.call(message, "eventMessageInfo"))
                $root.commonmodule.EventMessageInfo.encode(message.eventMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.applicationSystem != null && Object.hasOwnProperty.call(message, "applicationSystem"))
                $root.commonmodule.ApplicationSystem.encode(message.applicationSystem, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.coordinationEvent != null && Object.hasOwnProperty.call(message, "coordinationEvent"))
                $root.coordinationservicemodule.CoordinationEvent.encode(message.coordinationEvent, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CoordinationEventProfile message, length delimited. Does not implicitly {@link coordinationservicemodule.CoordinationEventProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof coordinationservicemodule.CoordinationEventProfile
         * @static
         * @param {coordinationservicemodule.ICoordinationEventProfile} message CoordinationEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationEventProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CoordinationEventProfile message from the specified reader or buffer.
         * @function decode
         * @memberof coordinationservicemodule.CoordinationEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {coordinationservicemodule.CoordinationEventProfile} CoordinationEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationEventProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.coordinationservicemodule.CoordinationEventProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventMessageInfo = $root.commonmodule.EventMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.applicationSystem = $root.commonmodule.ApplicationSystem.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.coordinationEvent = $root.coordinationservicemodule.CoordinationEvent.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CoordinationEventProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof coordinationservicemodule.CoordinationEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {coordinationservicemodule.CoordinationEventProfile} CoordinationEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationEventProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CoordinationEventProfile message.
         * @function verify
         * @memberof coordinationservicemodule.CoordinationEventProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CoordinationEventProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo")) {
                var error = $root.commonmodule.EventMessageInfo.verify(message.eventMessageInfo);
                if (error)
                    return "eventMessageInfo." + error;
            }
            if (message.applicationSystem != null && message.hasOwnProperty("applicationSystem")) {
                var error = $root.commonmodule.ApplicationSystem.verify(message.applicationSystem);
                if (error)
                    return "applicationSystem." + error;
            }
            if (message.coordinationEvent != null && message.hasOwnProperty("coordinationEvent")) {
                var error = $root.coordinationservicemodule.CoordinationEvent.verify(message.coordinationEvent);
                if (error)
                    return "coordinationEvent." + error;
            }
            return null;
        };

        /**
         * Creates a CoordinationEventProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof coordinationservicemodule.CoordinationEventProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {coordinationservicemodule.CoordinationEventProfile} CoordinationEventProfile
         */
        CoordinationEventProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.coordinationservicemodule.CoordinationEventProfile)
                return object;
            var message = new $root.coordinationservicemodule.CoordinationEventProfile();
            if (object.eventMessageInfo != null) {
                if (typeof object.eventMessageInfo !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationEventProfile.eventMessageInfo: object expected");
                message.eventMessageInfo = $root.commonmodule.EventMessageInfo.fromObject(object.eventMessageInfo);
            }
            if (object.applicationSystem != null) {
                if (typeof object.applicationSystem !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationEventProfile.applicationSystem: object expected");
                message.applicationSystem = $root.commonmodule.ApplicationSystem.fromObject(object.applicationSystem);
            }
            if (object.coordinationEvent != null) {
                if (typeof object.coordinationEvent !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationEventProfile.coordinationEvent: object expected");
                message.coordinationEvent = $root.coordinationservicemodule.CoordinationEvent.fromObject(object.coordinationEvent);
            }
            return message;
        };

        /**
         * Creates a plain object from a CoordinationEventProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof coordinationservicemodule.CoordinationEventProfile
         * @static
         * @param {coordinationservicemodule.CoordinationEventProfile} message CoordinationEventProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CoordinationEventProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventMessageInfo = null;
                object.applicationSystem = null;
                object.coordinationEvent = null;
            }
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo"))
                object.eventMessageInfo = $root.commonmodule.EventMessageInfo.toObject(message.eventMessageInfo, options);
            if (message.applicationSystem != null && message.hasOwnProperty("applicationSystem"))
                object.applicationSystem = $root.commonmodule.ApplicationSystem.toObject(message.applicationSystem, options);
            if (message.coordinationEvent != null && message.hasOwnProperty("coordinationEvent"))
                object.coordinationEvent = $root.coordinationservicemodule.CoordinationEvent.toObject(message.coordinationEvent, options);
            return object;
        };

        /**
         * Converts this CoordinationEventProfile to JSON.
         * @function toJSON
         * @memberof coordinationservicemodule.CoordinationEventProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CoordinationEventProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CoordinationEventProfile;
    })();

    coordinationservicemodule.CoordinationStatusDCSC = (function() {

        /**
         * Properties of a CoordinationStatusDCSC.
         * @memberof coordinationservicemodule
         * @interface ICoordinationStatusDCSC
         * @property {commonmodule.ILogicalNodeForEventAndStatus|null} [logicalNodeForEventAndStatus] CoordinationStatusDCSC logicalNodeForEventAndStatus
         * @property {coordinationservicemodule.IENG_CoordinationServiceModeKind|null} [CoordinationServiceMode] CoordinationStatusDCSC CoordinationServiceMode
         * @property {commonmodule.IStatusSPS|null} [Island] CoordinationStatusDCSC Island
         * @property {commonmodule.IStatusSPS|null} [PermissibleAuto] CoordinationStatusDCSC PermissibleAuto
         * @property {commonmodule.IStatusSPS|null} [PermissibleManual] CoordinationStatusDCSC PermissibleManual
         * @property {commonmodule.IStatusSPS|null} [PermissibleNetzero] CoordinationStatusDCSC PermissibleNetzero
         * @property {commonmodule.IStatusSPS|null} [PermissibleStart] CoordinationStatusDCSC PermissibleStart
         * @property {commonmodule.IStatusSPS|null} [PermissibleStop] CoordinationStatusDCSC PermissibleStop
         */

        /**
         * Constructs a new CoordinationStatusDCSC.
         * @memberof coordinationservicemodule
         * @classdesc Represents a CoordinationStatusDCSC.
         * @implements ICoordinationStatusDCSC
         * @constructor
         * @param {coordinationservicemodule.ICoordinationStatusDCSC=} [properties] Properties to set
         */
        function CoordinationStatusDCSC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CoordinationStatusDCSC logicalNodeForEventAndStatus.
         * @member {commonmodule.ILogicalNodeForEventAndStatus|null|undefined} logicalNodeForEventAndStatus
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @instance
         */
        CoordinationStatusDCSC.prototype.logicalNodeForEventAndStatus = null;

        /**
         * CoordinationStatusDCSC CoordinationServiceMode.
         * @member {coordinationservicemodule.IENG_CoordinationServiceModeKind|null|undefined} CoordinationServiceMode
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @instance
         */
        CoordinationStatusDCSC.prototype.CoordinationServiceMode = null;

        /**
         * CoordinationStatusDCSC Island.
         * @member {commonmodule.IStatusSPS|null|undefined} Island
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @instance
         */
        CoordinationStatusDCSC.prototype.Island = null;

        /**
         * CoordinationStatusDCSC PermissibleAuto.
         * @member {commonmodule.IStatusSPS|null|undefined} PermissibleAuto
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @instance
         */
        CoordinationStatusDCSC.prototype.PermissibleAuto = null;

        /**
         * CoordinationStatusDCSC PermissibleManual.
         * @member {commonmodule.IStatusSPS|null|undefined} PermissibleManual
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @instance
         */
        CoordinationStatusDCSC.prototype.PermissibleManual = null;

        /**
         * CoordinationStatusDCSC PermissibleNetzero.
         * @member {commonmodule.IStatusSPS|null|undefined} PermissibleNetzero
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @instance
         */
        CoordinationStatusDCSC.prototype.PermissibleNetzero = null;

        /**
         * CoordinationStatusDCSC PermissibleStart.
         * @member {commonmodule.IStatusSPS|null|undefined} PermissibleStart
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @instance
         */
        CoordinationStatusDCSC.prototype.PermissibleStart = null;

        /**
         * CoordinationStatusDCSC PermissibleStop.
         * @member {commonmodule.IStatusSPS|null|undefined} PermissibleStop
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @instance
         */
        CoordinationStatusDCSC.prototype.PermissibleStop = null;

        /**
         * Creates a new CoordinationStatusDCSC instance using the specified properties.
         * @function create
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @static
         * @param {coordinationservicemodule.ICoordinationStatusDCSC=} [properties] Properties to set
         * @returns {coordinationservicemodule.CoordinationStatusDCSC} CoordinationStatusDCSC instance
         */
        CoordinationStatusDCSC.create = function create(properties) {
            return new CoordinationStatusDCSC(properties);
        };

        /**
         * Encodes the specified CoordinationStatusDCSC message. Does not implicitly {@link coordinationservicemodule.CoordinationStatusDCSC.verify|verify} messages.
         * @function encode
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @static
         * @param {coordinationservicemodule.ICoordinationStatusDCSC} message CoordinationStatusDCSC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationStatusDCSC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForEventAndStatus != null && Object.hasOwnProperty.call(message, "logicalNodeForEventAndStatus"))
                $root.commonmodule.LogicalNodeForEventAndStatus.encode(message.logicalNodeForEventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.CoordinationServiceMode != null && Object.hasOwnProperty.call(message, "CoordinationServiceMode"))
                $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.encode(message.CoordinationServiceMode, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.Island != null && Object.hasOwnProperty.call(message, "Island"))
                $root.commonmodule.StatusSPS.encode(message.Island, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.PermissibleAuto != null && Object.hasOwnProperty.call(message, "PermissibleAuto"))
                $root.commonmodule.StatusSPS.encode(message.PermissibleAuto, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.PermissibleManual != null && Object.hasOwnProperty.call(message, "PermissibleManual"))
                $root.commonmodule.StatusSPS.encode(message.PermissibleManual, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.PermissibleNetzero != null && Object.hasOwnProperty.call(message, "PermissibleNetzero"))
                $root.commonmodule.StatusSPS.encode(message.PermissibleNetzero, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.PermissibleStart != null && Object.hasOwnProperty.call(message, "PermissibleStart"))
                $root.commonmodule.StatusSPS.encode(message.PermissibleStart, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.PermissibleStop != null && Object.hasOwnProperty.call(message, "PermissibleStop"))
                $root.commonmodule.StatusSPS.encode(message.PermissibleStop, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CoordinationStatusDCSC message, length delimited. Does not implicitly {@link coordinationservicemodule.CoordinationStatusDCSC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @static
         * @param {coordinationservicemodule.ICoordinationStatusDCSC} message CoordinationStatusDCSC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationStatusDCSC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CoordinationStatusDCSC message from the specified reader or buffer.
         * @function decode
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {coordinationservicemodule.CoordinationStatusDCSC} CoordinationStatusDCSC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationStatusDCSC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.coordinationservicemodule.CoordinationStatusDCSC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.CoordinationServiceMode = $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.Island = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.PermissibleAuto = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.PermissibleManual = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.PermissibleNetzero = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.PermissibleStart = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.PermissibleStop = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CoordinationStatusDCSC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {coordinationservicemodule.CoordinationStatusDCSC} CoordinationStatusDCSC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationStatusDCSC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CoordinationStatusDCSC message.
         * @function verify
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CoordinationStatusDCSC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus")) {
                var error = $root.commonmodule.LogicalNodeForEventAndStatus.verify(message.logicalNodeForEventAndStatus);
                if (error)
                    return "logicalNodeForEventAndStatus." + error;
            }
            if (message.CoordinationServiceMode != null && message.hasOwnProperty("CoordinationServiceMode")) {
                var error = $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.verify(message.CoordinationServiceMode);
                if (error)
                    return "CoordinationServiceMode." + error;
            }
            if (message.Island != null && message.hasOwnProperty("Island")) {
                var error = $root.commonmodule.StatusSPS.verify(message.Island);
                if (error)
                    return "Island." + error;
            }
            if (message.PermissibleAuto != null && message.hasOwnProperty("PermissibleAuto")) {
                var error = $root.commonmodule.StatusSPS.verify(message.PermissibleAuto);
                if (error)
                    return "PermissibleAuto." + error;
            }
            if (message.PermissibleManual != null && message.hasOwnProperty("PermissibleManual")) {
                var error = $root.commonmodule.StatusSPS.verify(message.PermissibleManual);
                if (error)
                    return "PermissibleManual." + error;
            }
            if (message.PermissibleNetzero != null && message.hasOwnProperty("PermissibleNetzero")) {
                var error = $root.commonmodule.StatusSPS.verify(message.PermissibleNetzero);
                if (error)
                    return "PermissibleNetzero." + error;
            }
            if (message.PermissibleStart != null && message.hasOwnProperty("PermissibleStart")) {
                var error = $root.commonmodule.StatusSPS.verify(message.PermissibleStart);
                if (error)
                    return "PermissibleStart." + error;
            }
            if (message.PermissibleStop != null && message.hasOwnProperty("PermissibleStop")) {
                var error = $root.commonmodule.StatusSPS.verify(message.PermissibleStop);
                if (error)
                    return "PermissibleStop." + error;
            }
            return null;
        };

        /**
         * Creates a CoordinationStatusDCSC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {coordinationservicemodule.CoordinationStatusDCSC} CoordinationStatusDCSC
         */
        CoordinationStatusDCSC.fromObject = function fromObject(object) {
            if (object instanceof $root.coordinationservicemodule.CoordinationStatusDCSC)
                return object;
            var message = new $root.coordinationservicemodule.CoordinationStatusDCSC();
            if (object.logicalNodeForEventAndStatus != null) {
                if (typeof object.logicalNodeForEventAndStatus !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationStatusDCSC.logicalNodeForEventAndStatus: object expected");
                message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.fromObject(object.logicalNodeForEventAndStatus);
            }
            if (object.CoordinationServiceMode != null) {
                if (typeof object.CoordinationServiceMode !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationStatusDCSC.CoordinationServiceMode: object expected");
                message.CoordinationServiceMode = $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.fromObject(object.CoordinationServiceMode);
            }
            if (object.Island != null) {
                if (typeof object.Island !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationStatusDCSC.Island: object expected");
                message.Island = $root.commonmodule.StatusSPS.fromObject(object.Island);
            }
            if (object.PermissibleAuto != null) {
                if (typeof object.PermissibleAuto !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationStatusDCSC.PermissibleAuto: object expected");
                message.PermissibleAuto = $root.commonmodule.StatusSPS.fromObject(object.PermissibleAuto);
            }
            if (object.PermissibleManual != null) {
                if (typeof object.PermissibleManual !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationStatusDCSC.PermissibleManual: object expected");
                message.PermissibleManual = $root.commonmodule.StatusSPS.fromObject(object.PermissibleManual);
            }
            if (object.PermissibleNetzero != null) {
                if (typeof object.PermissibleNetzero !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationStatusDCSC.PermissibleNetzero: object expected");
                message.PermissibleNetzero = $root.commonmodule.StatusSPS.fromObject(object.PermissibleNetzero);
            }
            if (object.PermissibleStart != null) {
                if (typeof object.PermissibleStart !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationStatusDCSC.PermissibleStart: object expected");
                message.PermissibleStart = $root.commonmodule.StatusSPS.fromObject(object.PermissibleStart);
            }
            if (object.PermissibleStop != null) {
                if (typeof object.PermissibleStop !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationStatusDCSC.PermissibleStop: object expected");
                message.PermissibleStop = $root.commonmodule.StatusSPS.fromObject(object.PermissibleStop);
            }
            return message;
        };

        /**
         * Creates a plain object from a CoordinationStatusDCSC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @static
         * @param {coordinationservicemodule.CoordinationStatusDCSC} message CoordinationStatusDCSC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CoordinationStatusDCSC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForEventAndStatus = null;
                object.CoordinationServiceMode = null;
                object.Island = null;
                object.PermissibleAuto = null;
                object.PermissibleManual = null;
                object.PermissibleNetzero = null;
                object.PermissibleStart = null;
                object.PermissibleStop = null;
            }
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus"))
                object.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.toObject(message.logicalNodeForEventAndStatus, options);
            if (message.CoordinationServiceMode != null && message.hasOwnProperty("CoordinationServiceMode"))
                object.CoordinationServiceMode = $root.coordinationservicemodule.ENG_CoordinationServiceModeKind.toObject(message.CoordinationServiceMode, options);
            if (message.Island != null && message.hasOwnProperty("Island"))
                object.Island = $root.commonmodule.StatusSPS.toObject(message.Island, options);
            if (message.PermissibleAuto != null && message.hasOwnProperty("PermissibleAuto"))
                object.PermissibleAuto = $root.commonmodule.StatusSPS.toObject(message.PermissibleAuto, options);
            if (message.PermissibleManual != null && message.hasOwnProperty("PermissibleManual"))
                object.PermissibleManual = $root.commonmodule.StatusSPS.toObject(message.PermissibleManual, options);
            if (message.PermissibleNetzero != null && message.hasOwnProperty("PermissibleNetzero"))
                object.PermissibleNetzero = $root.commonmodule.StatusSPS.toObject(message.PermissibleNetzero, options);
            if (message.PermissibleStart != null && message.hasOwnProperty("PermissibleStart"))
                object.PermissibleStart = $root.commonmodule.StatusSPS.toObject(message.PermissibleStart, options);
            if (message.PermissibleStop != null && message.hasOwnProperty("PermissibleStop"))
                object.PermissibleStop = $root.commonmodule.StatusSPS.toObject(message.PermissibleStop, options);
            return object;
        };

        /**
         * Converts this CoordinationStatusDCSC to JSON.
         * @function toJSON
         * @memberof coordinationservicemodule.CoordinationStatusDCSC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CoordinationStatusDCSC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CoordinationStatusDCSC;
    })();

    coordinationservicemodule.CoordinationStatus = (function() {

        /**
         * Properties of a CoordinationStatus.
         * @memberof coordinationservicemodule
         * @interface ICoordinationStatus
         * @property {commonmodule.IEventValue|null} [eventValue] CoordinationStatus eventValue
         * @property {coordinationservicemodule.ICoordinationStatusDCSC|null} [coordinationStatusDCSC] CoordinationStatus coordinationStatusDCSC
         */

        /**
         * Constructs a new CoordinationStatus.
         * @memberof coordinationservicemodule
         * @classdesc Represents a CoordinationStatus.
         * @implements ICoordinationStatus
         * @constructor
         * @param {coordinationservicemodule.ICoordinationStatus=} [properties] Properties to set
         */
        function CoordinationStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CoordinationStatus eventValue.
         * @member {commonmodule.IEventValue|null|undefined} eventValue
         * @memberof coordinationservicemodule.CoordinationStatus
         * @instance
         */
        CoordinationStatus.prototype.eventValue = null;

        /**
         * CoordinationStatus coordinationStatusDCSC.
         * @member {coordinationservicemodule.ICoordinationStatusDCSC|null|undefined} coordinationStatusDCSC
         * @memberof coordinationservicemodule.CoordinationStatus
         * @instance
         */
        CoordinationStatus.prototype.coordinationStatusDCSC = null;

        /**
         * Creates a new CoordinationStatus instance using the specified properties.
         * @function create
         * @memberof coordinationservicemodule.CoordinationStatus
         * @static
         * @param {coordinationservicemodule.ICoordinationStatus=} [properties] Properties to set
         * @returns {coordinationservicemodule.CoordinationStatus} CoordinationStatus instance
         */
        CoordinationStatus.create = function create(properties) {
            return new CoordinationStatus(properties);
        };

        /**
         * Encodes the specified CoordinationStatus message. Does not implicitly {@link coordinationservicemodule.CoordinationStatus.verify|verify} messages.
         * @function encode
         * @memberof coordinationservicemodule.CoordinationStatus
         * @static
         * @param {coordinationservicemodule.ICoordinationStatus} message CoordinationStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventValue != null && Object.hasOwnProperty.call(message, "eventValue"))
                $root.commonmodule.EventValue.encode(message.eventValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.coordinationStatusDCSC != null && Object.hasOwnProperty.call(message, "coordinationStatusDCSC"))
                $root.coordinationservicemodule.CoordinationStatusDCSC.encode(message.coordinationStatusDCSC, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CoordinationStatus message, length delimited. Does not implicitly {@link coordinationservicemodule.CoordinationStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof coordinationservicemodule.CoordinationStatus
         * @static
         * @param {coordinationservicemodule.ICoordinationStatus} message CoordinationStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CoordinationStatus message from the specified reader or buffer.
         * @function decode
         * @memberof coordinationservicemodule.CoordinationStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {coordinationservicemodule.CoordinationStatus} CoordinationStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.coordinationservicemodule.CoordinationStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventValue = $root.commonmodule.EventValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.coordinationStatusDCSC = $root.coordinationservicemodule.CoordinationStatusDCSC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CoordinationStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof coordinationservicemodule.CoordinationStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {coordinationservicemodule.CoordinationStatus} CoordinationStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CoordinationStatus message.
         * @function verify
         * @memberof coordinationservicemodule.CoordinationStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CoordinationStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventValue != null && message.hasOwnProperty("eventValue")) {
                var error = $root.commonmodule.EventValue.verify(message.eventValue);
                if (error)
                    return "eventValue." + error;
            }
            if (message.coordinationStatusDCSC != null && message.hasOwnProperty("coordinationStatusDCSC")) {
                var error = $root.coordinationservicemodule.CoordinationStatusDCSC.verify(message.coordinationStatusDCSC);
                if (error)
                    return "coordinationStatusDCSC." + error;
            }
            return null;
        };

        /**
         * Creates a CoordinationStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof coordinationservicemodule.CoordinationStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {coordinationservicemodule.CoordinationStatus} CoordinationStatus
         */
        CoordinationStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.coordinationservicemodule.CoordinationStatus)
                return object;
            var message = new $root.coordinationservicemodule.CoordinationStatus();
            if (object.eventValue != null) {
                if (typeof object.eventValue !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationStatus.eventValue: object expected");
                message.eventValue = $root.commonmodule.EventValue.fromObject(object.eventValue);
            }
            if (object.coordinationStatusDCSC != null) {
                if (typeof object.coordinationStatusDCSC !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationStatus.coordinationStatusDCSC: object expected");
                message.coordinationStatusDCSC = $root.coordinationservicemodule.CoordinationStatusDCSC.fromObject(object.coordinationStatusDCSC);
            }
            return message;
        };

        /**
         * Creates a plain object from a CoordinationStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof coordinationservicemodule.CoordinationStatus
         * @static
         * @param {coordinationservicemodule.CoordinationStatus} message CoordinationStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CoordinationStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventValue = null;
                object.coordinationStatusDCSC = null;
            }
            if (message.eventValue != null && message.hasOwnProperty("eventValue"))
                object.eventValue = $root.commonmodule.EventValue.toObject(message.eventValue, options);
            if (message.coordinationStatusDCSC != null && message.hasOwnProperty("coordinationStatusDCSC"))
                object.coordinationStatusDCSC = $root.coordinationservicemodule.CoordinationStatusDCSC.toObject(message.coordinationStatusDCSC, options);
            return object;
        };

        /**
         * Converts this CoordinationStatus to JSON.
         * @function toJSON
         * @memberof coordinationservicemodule.CoordinationStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CoordinationStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CoordinationStatus;
    })();

    coordinationservicemodule.CoordinationStatusProfile = (function() {

        /**
         * Properties of a CoordinationStatusProfile.
         * @memberof coordinationservicemodule
         * @interface ICoordinationStatusProfile
         * @property {commonmodule.IEventMessageInfo|null} [eventMessageInfo] CoordinationStatusProfile eventMessageInfo
         * @property {commonmodule.IApplicationSystem|null} [applicationSystem] CoordinationStatusProfile applicationSystem
         * @property {coordinationservicemodule.ICoordinationStatus|null} [coordinationStatus] CoordinationStatusProfile coordinationStatus
         */

        /**
         * Constructs a new CoordinationStatusProfile.
         * @memberof coordinationservicemodule
         * @classdesc Represents a CoordinationStatusProfile.
         * @implements ICoordinationStatusProfile
         * @constructor
         * @param {coordinationservicemodule.ICoordinationStatusProfile=} [properties] Properties to set
         */
        function CoordinationStatusProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CoordinationStatusProfile eventMessageInfo.
         * @member {commonmodule.IEventMessageInfo|null|undefined} eventMessageInfo
         * @memberof coordinationservicemodule.CoordinationStatusProfile
         * @instance
         */
        CoordinationStatusProfile.prototype.eventMessageInfo = null;

        /**
         * CoordinationStatusProfile applicationSystem.
         * @member {commonmodule.IApplicationSystem|null|undefined} applicationSystem
         * @memberof coordinationservicemodule.CoordinationStatusProfile
         * @instance
         */
        CoordinationStatusProfile.prototype.applicationSystem = null;

        /**
         * CoordinationStatusProfile coordinationStatus.
         * @member {coordinationservicemodule.ICoordinationStatus|null|undefined} coordinationStatus
         * @memberof coordinationservicemodule.CoordinationStatusProfile
         * @instance
         */
        CoordinationStatusProfile.prototype.coordinationStatus = null;

        /**
         * Creates a new CoordinationStatusProfile instance using the specified properties.
         * @function create
         * @memberof coordinationservicemodule.CoordinationStatusProfile
         * @static
         * @param {coordinationservicemodule.ICoordinationStatusProfile=} [properties] Properties to set
         * @returns {coordinationservicemodule.CoordinationStatusProfile} CoordinationStatusProfile instance
         */
        CoordinationStatusProfile.create = function create(properties) {
            return new CoordinationStatusProfile(properties);
        };

        /**
         * Encodes the specified CoordinationStatusProfile message. Does not implicitly {@link coordinationservicemodule.CoordinationStatusProfile.verify|verify} messages.
         * @function encode
         * @memberof coordinationservicemodule.CoordinationStatusProfile
         * @static
         * @param {coordinationservicemodule.ICoordinationStatusProfile} message CoordinationStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationStatusProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventMessageInfo != null && Object.hasOwnProperty.call(message, "eventMessageInfo"))
                $root.commonmodule.EventMessageInfo.encode(message.eventMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.applicationSystem != null && Object.hasOwnProperty.call(message, "applicationSystem"))
                $root.commonmodule.ApplicationSystem.encode(message.applicationSystem, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.coordinationStatus != null && Object.hasOwnProperty.call(message, "coordinationStatus"))
                $root.coordinationservicemodule.CoordinationStatus.encode(message.coordinationStatus, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CoordinationStatusProfile message, length delimited. Does not implicitly {@link coordinationservicemodule.CoordinationStatusProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof coordinationservicemodule.CoordinationStatusProfile
         * @static
         * @param {coordinationservicemodule.ICoordinationStatusProfile} message CoordinationStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CoordinationStatusProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CoordinationStatusProfile message from the specified reader or buffer.
         * @function decode
         * @memberof coordinationservicemodule.CoordinationStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {coordinationservicemodule.CoordinationStatusProfile} CoordinationStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationStatusProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.coordinationservicemodule.CoordinationStatusProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventMessageInfo = $root.commonmodule.EventMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.applicationSystem = $root.commonmodule.ApplicationSystem.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.coordinationStatus = $root.coordinationservicemodule.CoordinationStatus.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CoordinationStatusProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof coordinationservicemodule.CoordinationStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {coordinationservicemodule.CoordinationStatusProfile} CoordinationStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CoordinationStatusProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CoordinationStatusProfile message.
         * @function verify
         * @memberof coordinationservicemodule.CoordinationStatusProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CoordinationStatusProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo")) {
                var error = $root.commonmodule.EventMessageInfo.verify(message.eventMessageInfo);
                if (error)
                    return "eventMessageInfo." + error;
            }
            if (message.applicationSystem != null && message.hasOwnProperty("applicationSystem")) {
                var error = $root.commonmodule.ApplicationSystem.verify(message.applicationSystem);
                if (error)
                    return "applicationSystem." + error;
            }
            if (message.coordinationStatus != null && message.hasOwnProperty("coordinationStatus")) {
                var error = $root.coordinationservicemodule.CoordinationStatus.verify(message.coordinationStatus);
                if (error)
                    return "coordinationStatus." + error;
            }
            return null;
        };

        /**
         * Creates a CoordinationStatusProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof coordinationservicemodule.CoordinationStatusProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {coordinationservicemodule.CoordinationStatusProfile} CoordinationStatusProfile
         */
        CoordinationStatusProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.coordinationservicemodule.CoordinationStatusProfile)
                return object;
            var message = new $root.coordinationservicemodule.CoordinationStatusProfile();
            if (object.eventMessageInfo != null) {
                if (typeof object.eventMessageInfo !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationStatusProfile.eventMessageInfo: object expected");
                message.eventMessageInfo = $root.commonmodule.EventMessageInfo.fromObject(object.eventMessageInfo);
            }
            if (object.applicationSystem != null) {
                if (typeof object.applicationSystem !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationStatusProfile.applicationSystem: object expected");
                message.applicationSystem = $root.commonmodule.ApplicationSystem.fromObject(object.applicationSystem);
            }
            if (object.coordinationStatus != null) {
                if (typeof object.coordinationStatus !== "object")
                    throw TypeError(".coordinationservicemodule.CoordinationStatusProfile.coordinationStatus: object expected");
                message.coordinationStatus = $root.coordinationservicemodule.CoordinationStatus.fromObject(object.coordinationStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a CoordinationStatusProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof coordinationservicemodule.CoordinationStatusProfile
         * @static
         * @param {coordinationservicemodule.CoordinationStatusProfile} message CoordinationStatusProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CoordinationStatusProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventMessageInfo = null;
                object.applicationSystem = null;
                object.coordinationStatus = null;
            }
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo"))
                object.eventMessageInfo = $root.commonmodule.EventMessageInfo.toObject(message.eventMessageInfo, options);
            if (message.applicationSystem != null && message.hasOwnProperty("applicationSystem"))
                object.applicationSystem = $root.commonmodule.ApplicationSystem.toObject(message.applicationSystem, options);
            if (message.coordinationStatus != null && message.hasOwnProperty("coordinationStatus"))
                object.coordinationStatus = $root.coordinationservicemodule.CoordinationStatus.toObject(message.coordinationStatus, options);
            return object;
        };

        /**
         * Converts this CoordinationStatusProfile to JSON.
         * @function toJSON
         * @memberof coordinationservicemodule.CoordinationStatusProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CoordinationStatusProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CoordinationStatusProfile;
    })();

    return coordinationservicemodule;
})();

$root.metermodule = (function() {

    /**
     * Namespace metermodule.
     * @exports metermodule
     * @namespace
     */
    var metermodule = {};

    metermodule.MeterReading = (function() {

        /**
         * Properties of a MeterReading.
         * @memberof metermodule
         * @interface IMeterReading
         * @property {commonmodule.IConductingEquipmentTerminalReading|null} [conductingEquipmentTerminalReading] MeterReading conductingEquipmentTerminalReading
         * @property {commonmodule.IPhaseMMTN|null} [phaseMMTN] MeterReading phaseMMTN
         * @property {commonmodule.IReadingMMTR|null} [readingMMTR] MeterReading readingMMTR
         * @property {commonmodule.IReadingMMXU|null} [readingMMXU] MeterReading readingMMXU
         */

        /**
         * Constructs a new MeterReading.
         * @memberof metermodule
         * @classdesc Represents a MeterReading.
         * @implements IMeterReading
         * @constructor
         * @param {metermodule.IMeterReading=} [properties] Properties to set
         */
        function MeterReading(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MeterReading conductingEquipmentTerminalReading.
         * @member {commonmodule.IConductingEquipmentTerminalReading|null|undefined} conductingEquipmentTerminalReading
         * @memberof metermodule.MeterReading
         * @instance
         */
        MeterReading.prototype.conductingEquipmentTerminalReading = null;

        /**
         * MeterReading phaseMMTN.
         * @member {commonmodule.IPhaseMMTN|null|undefined} phaseMMTN
         * @memberof metermodule.MeterReading
         * @instance
         */
        MeterReading.prototype.phaseMMTN = null;

        /**
         * MeterReading readingMMTR.
         * @member {commonmodule.IReadingMMTR|null|undefined} readingMMTR
         * @memberof metermodule.MeterReading
         * @instance
         */
        MeterReading.prototype.readingMMTR = null;

        /**
         * MeterReading readingMMXU.
         * @member {commonmodule.IReadingMMXU|null|undefined} readingMMXU
         * @memberof metermodule.MeterReading
         * @instance
         */
        MeterReading.prototype.readingMMXU = null;

        /**
         * Creates a new MeterReading instance using the specified properties.
         * @function create
         * @memberof metermodule.MeterReading
         * @static
         * @param {metermodule.IMeterReading=} [properties] Properties to set
         * @returns {metermodule.MeterReading} MeterReading instance
         */
        MeterReading.create = function create(properties) {
            return new MeterReading(properties);
        };

        /**
         * Encodes the specified MeterReading message. Does not implicitly {@link metermodule.MeterReading.verify|verify} messages.
         * @function encode
         * @memberof metermodule.MeterReading
         * @static
         * @param {metermodule.IMeterReading} message MeterReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MeterReading.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipmentTerminalReading != null && Object.hasOwnProperty.call(message, "conductingEquipmentTerminalReading"))
                $root.commonmodule.ConductingEquipmentTerminalReading.encode(message.conductingEquipmentTerminalReading, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.phaseMMTN != null && Object.hasOwnProperty.call(message, "phaseMMTN"))
                $root.commonmodule.PhaseMMTN.encode(message.phaseMMTN, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.readingMMTR != null && Object.hasOwnProperty.call(message, "readingMMTR"))
                $root.commonmodule.ReadingMMTR.encode(message.readingMMTR, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.readingMMXU != null && Object.hasOwnProperty.call(message, "readingMMXU"))
                $root.commonmodule.ReadingMMXU.encode(message.readingMMXU, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MeterReading message, length delimited. Does not implicitly {@link metermodule.MeterReading.verify|verify} messages.
         * @function encodeDelimited
         * @memberof metermodule.MeterReading
         * @static
         * @param {metermodule.IMeterReading} message MeterReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MeterReading.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MeterReading message from the specified reader or buffer.
         * @function decode
         * @memberof metermodule.MeterReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {metermodule.MeterReading} MeterReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MeterReading.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.metermodule.MeterReading();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.phaseMMTN = $root.commonmodule.PhaseMMTN.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.readingMMTR = $root.commonmodule.ReadingMMTR.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.readingMMXU = $root.commonmodule.ReadingMMXU.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MeterReading message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof metermodule.MeterReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {metermodule.MeterReading} MeterReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MeterReading.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MeterReading message.
         * @function verify
         * @memberof metermodule.MeterReading
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MeterReading.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading")) {
                var error = $root.commonmodule.ConductingEquipmentTerminalReading.verify(message.conductingEquipmentTerminalReading);
                if (error)
                    return "conductingEquipmentTerminalReading." + error;
            }
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN")) {
                var error = $root.commonmodule.PhaseMMTN.verify(message.phaseMMTN);
                if (error)
                    return "phaseMMTN." + error;
            }
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR")) {
                var error = $root.commonmodule.ReadingMMTR.verify(message.readingMMTR);
                if (error)
                    return "readingMMTR." + error;
            }
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU")) {
                var error = $root.commonmodule.ReadingMMXU.verify(message.readingMMXU);
                if (error)
                    return "readingMMXU." + error;
            }
            return null;
        };

        /**
         * Creates a MeterReading message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof metermodule.MeterReading
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {metermodule.MeterReading} MeterReading
         */
        MeterReading.fromObject = function fromObject(object) {
            if (object instanceof $root.metermodule.MeterReading)
                return object;
            var message = new $root.metermodule.MeterReading();
            if (object.conductingEquipmentTerminalReading != null) {
                if (typeof object.conductingEquipmentTerminalReading !== "object")
                    throw TypeError(".metermodule.MeterReading.conductingEquipmentTerminalReading: object expected");
                message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.fromObject(object.conductingEquipmentTerminalReading);
            }
            if (object.phaseMMTN != null) {
                if (typeof object.phaseMMTN !== "object")
                    throw TypeError(".metermodule.MeterReading.phaseMMTN: object expected");
                message.phaseMMTN = $root.commonmodule.PhaseMMTN.fromObject(object.phaseMMTN);
            }
            if (object.readingMMTR != null) {
                if (typeof object.readingMMTR !== "object")
                    throw TypeError(".metermodule.MeterReading.readingMMTR: object expected");
                message.readingMMTR = $root.commonmodule.ReadingMMTR.fromObject(object.readingMMTR);
            }
            if (object.readingMMXU != null) {
                if (typeof object.readingMMXU !== "object")
                    throw TypeError(".metermodule.MeterReading.readingMMXU: object expected");
                message.readingMMXU = $root.commonmodule.ReadingMMXU.fromObject(object.readingMMXU);
            }
            return message;
        };

        /**
         * Creates a plain object from a MeterReading message. Also converts values to other types if specified.
         * @function toObject
         * @memberof metermodule.MeterReading
         * @static
         * @param {metermodule.MeterReading} message MeterReading
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MeterReading.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conductingEquipmentTerminalReading = null;
                object.phaseMMTN = null;
                object.readingMMTR = null;
                object.readingMMXU = null;
            }
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading"))
                object.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.toObject(message.conductingEquipmentTerminalReading, options);
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN"))
                object.phaseMMTN = $root.commonmodule.PhaseMMTN.toObject(message.phaseMMTN, options);
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR"))
                object.readingMMTR = $root.commonmodule.ReadingMMTR.toObject(message.readingMMTR, options);
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU"))
                object.readingMMXU = $root.commonmodule.ReadingMMXU.toObject(message.readingMMXU, options);
            return object;
        };

        /**
         * Converts this MeterReading to JSON.
         * @function toJSON
         * @memberof metermodule.MeterReading
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MeterReading.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MeterReading;
    })();

    metermodule.MeterReadingProfile = (function() {

        /**
         * Properties of a MeterReadingProfile.
         * @memberof metermodule
         * @interface IMeterReadingProfile
         * @property {commonmodule.IReadingMessageInfo|null} [readingMessageInfo] MeterReadingProfile readingMessageInfo
         * @property {commonmodule.IIED|null} [ied] MeterReadingProfile ied
         * @property {commonmodule.IMeter|null} [meter] MeterReadingProfile meter
         * @property {metermodule.IMeterReading|null} [meterReading] MeterReadingProfile meterReading
         */

        /**
         * Constructs a new MeterReadingProfile.
         * @memberof metermodule
         * @classdesc Represents a MeterReadingProfile.
         * @implements IMeterReadingProfile
         * @constructor
         * @param {metermodule.IMeterReadingProfile=} [properties] Properties to set
         */
        function MeterReadingProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * MeterReadingProfile readingMessageInfo.
         * @member {commonmodule.IReadingMessageInfo|null|undefined} readingMessageInfo
         * @memberof metermodule.MeterReadingProfile
         * @instance
         */
        MeterReadingProfile.prototype.readingMessageInfo = null;

        /**
         * MeterReadingProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof metermodule.MeterReadingProfile
         * @instance
         */
        MeterReadingProfile.prototype.ied = null;

        /**
         * MeterReadingProfile meter.
         * @member {commonmodule.IMeter|null|undefined} meter
         * @memberof metermodule.MeterReadingProfile
         * @instance
         */
        MeterReadingProfile.prototype.meter = null;

        /**
         * MeterReadingProfile meterReading.
         * @member {metermodule.IMeterReading|null|undefined} meterReading
         * @memberof metermodule.MeterReadingProfile
         * @instance
         */
        MeterReadingProfile.prototype.meterReading = null;

        /**
         * Creates a new MeterReadingProfile instance using the specified properties.
         * @function create
         * @memberof metermodule.MeterReadingProfile
         * @static
         * @param {metermodule.IMeterReadingProfile=} [properties] Properties to set
         * @returns {metermodule.MeterReadingProfile} MeterReadingProfile instance
         */
        MeterReadingProfile.create = function create(properties) {
            return new MeterReadingProfile(properties);
        };

        /**
         * Encodes the specified MeterReadingProfile message. Does not implicitly {@link metermodule.MeterReadingProfile.verify|verify} messages.
         * @function encode
         * @memberof metermodule.MeterReadingProfile
         * @static
         * @param {metermodule.IMeterReadingProfile} message MeterReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MeterReadingProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.readingMessageInfo != null && Object.hasOwnProperty.call(message, "readingMessageInfo"))
                $root.commonmodule.ReadingMessageInfo.encode(message.readingMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.meter != null && Object.hasOwnProperty.call(message, "meter"))
                $root.commonmodule.Meter.encode(message.meter, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.meterReading != null && Object.hasOwnProperty.call(message, "meterReading"))
                $root.metermodule.MeterReading.encode(message.meterReading, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified MeterReadingProfile message, length delimited. Does not implicitly {@link metermodule.MeterReadingProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof metermodule.MeterReadingProfile
         * @static
         * @param {metermodule.IMeterReadingProfile} message MeterReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        MeterReadingProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a MeterReadingProfile message from the specified reader or buffer.
         * @function decode
         * @memberof metermodule.MeterReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {metermodule.MeterReadingProfile} MeterReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MeterReadingProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.metermodule.MeterReadingProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.meter = $root.commonmodule.Meter.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.meterReading = $root.metermodule.MeterReading.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a MeterReadingProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof metermodule.MeterReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {metermodule.MeterReadingProfile} MeterReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        MeterReadingProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a MeterReadingProfile message.
         * @function verify
         * @memberof metermodule.MeterReadingProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        MeterReadingProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo")) {
                var error = $root.commonmodule.ReadingMessageInfo.verify(message.readingMessageInfo);
                if (error)
                    return "readingMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.meter != null && message.hasOwnProperty("meter")) {
                var error = $root.commonmodule.Meter.verify(message.meter);
                if (error)
                    return "meter." + error;
            }
            if (message.meterReading != null && message.hasOwnProperty("meterReading")) {
                var error = $root.metermodule.MeterReading.verify(message.meterReading);
                if (error)
                    return "meterReading." + error;
            }
            return null;
        };

        /**
         * Creates a MeterReadingProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof metermodule.MeterReadingProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {metermodule.MeterReadingProfile} MeterReadingProfile
         */
        MeterReadingProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.metermodule.MeterReadingProfile)
                return object;
            var message = new $root.metermodule.MeterReadingProfile();
            if (object.readingMessageInfo != null) {
                if (typeof object.readingMessageInfo !== "object")
                    throw TypeError(".metermodule.MeterReadingProfile.readingMessageInfo: object expected");
                message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.fromObject(object.readingMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".metermodule.MeterReadingProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.meter != null) {
                if (typeof object.meter !== "object")
                    throw TypeError(".metermodule.MeterReadingProfile.meter: object expected");
                message.meter = $root.commonmodule.Meter.fromObject(object.meter);
            }
            if (object.meterReading != null) {
                if (typeof object.meterReading !== "object")
                    throw TypeError(".metermodule.MeterReadingProfile.meterReading: object expected");
                message.meterReading = $root.metermodule.MeterReading.fromObject(object.meterReading);
            }
            return message;
        };

        /**
         * Creates a plain object from a MeterReadingProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof metermodule.MeterReadingProfile
         * @static
         * @param {metermodule.MeterReadingProfile} message MeterReadingProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        MeterReadingProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.readingMessageInfo = null;
                object.ied = null;
                object.meter = null;
                object.meterReading = null;
            }
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo"))
                object.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.toObject(message.readingMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.meter != null && message.hasOwnProperty("meter"))
                object.meter = $root.commonmodule.Meter.toObject(message.meter, options);
            if (message.meterReading != null && message.hasOwnProperty("meterReading"))
                object.meterReading = $root.metermodule.MeterReading.toObject(message.meterReading, options);
            return object;
        };

        /**
         * Converts this MeterReadingProfile to JSON.
         * @function toJSON
         * @memberof metermodule.MeterReadingProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        MeterReadingProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return MeterReadingProfile;
    })();

    return metermodule;
})();

$root.switchmodule = (function() {

    /**
     * Namespace switchmodule.
     * @exports switchmodule
     * @namespace
     */
    var switchmodule = {};

    switchmodule.SwitchDiscreteControlXSWI = (function() {

        /**
         * Properties of a SwitchDiscreteControlXSWI.
         * @memberof switchmodule
         * @interface ISwitchDiscreteControlXSWI
         * @property {commonmodule.ILogicalNodeForControl|null} [logicalNodeForControl] SwitchDiscreteControlXSWI logicalNodeForControl
         * @property {commonmodule.IControlDPC|null} [Pos] SwitchDiscreteControlXSWI Pos
         */

        /**
         * Constructs a new SwitchDiscreteControlXSWI.
         * @memberof switchmodule
         * @classdesc Represents a SwitchDiscreteControlXSWI.
         * @implements ISwitchDiscreteControlXSWI
         * @constructor
         * @param {switchmodule.ISwitchDiscreteControlXSWI=} [properties] Properties to set
         */
        function SwitchDiscreteControlXSWI(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchDiscreteControlXSWI logicalNodeForControl.
         * @member {commonmodule.ILogicalNodeForControl|null|undefined} logicalNodeForControl
         * @memberof switchmodule.SwitchDiscreteControlXSWI
         * @instance
         */
        SwitchDiscreteControlXSWI.prototype.logicalNodeForControl = null;

        /**
         * SwitchDiscreteControlXSWI Pos.
         * @member {commonmodule.IControlDPC|null|undefined} Pos
         * @memberof switchmodule.SwitchDiscreteControlXSWI
         * @instance
         */
        SwitchDiscreteControlXSWI.prototype.Pos = null;

        /**
         * Creates a new SwitchDiscreteControlXSWI instance using the specified properties.
         * @function create
         * @memberof switchmodule.SwitchDiscreteControlXSWI
         * @static
         * @param {switchmodule.ISwitchDiscreteControlXSWI=} [properties] Properties to set
         * @returns {switchmodule.SwitchDiscreteControlXSWI} SwitchDiscreteControlXSWI instance
         */
        SwitchDiscreteControlXSWI.create = function create(properties) {
            return new SwitchDiscreteControlXSWI(properties);
        };

        /**
         * Encodes the specified SwitchDiscreteControlXSWI message. Does not implicitly {@link switchmodule.SwitchDiscreteControlXSWI.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.SwitchDiscreteControlXSWI
         * @static
         * @param {switchmodule.ISwitchDiscreteControlXSWI} message SwitchDiscreteControlXSWI message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchDiscreteControlXSWI.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForControl != null && Object.hasOwnProperty.call(message, "logicalNodeForControl"))
                $root.commonmodule.LogicalNodeForControl.encode(message.logicalNodeForControl, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.Pos != null && Object.hasOwnProperty.call(message, "Pos"))
                $root.commonmodule.ControlDPC.encode(message.Pos, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchDiscreteControlXSWI message, length delimited. Does not implicitly {@link switchmodule.SwitchDiscreteControlXSWI.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.SwitchDiscreteControlXSWI
         * @static
         * @param {switchmodule.ISwitchDiscreteControlXSWI} message SwitchDiscreteControlXSWI message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchDiscreteControlXSWI.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchDiscreteControlXSWI message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.SwitchDiscreteControlXSWI
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.SwitchDiscreteControlXSWI} SwitchDiscreteControlXSWI
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchDiscreteControlXSWI.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.SwitchDiscreteControlXSWI();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.Pos = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchDiscreteControlXSWI message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.SwitchDiscreteControlXSWI
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.SwitchDiscreteControlXSWI} SwitchDiscreteControlXSWI
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchDiscreteControlXSWI.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchDiscreteControlXSWI message.
         * @function verify
         * @memberof switchmodule.SwitchDiscreteControlXSWI
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchDiscreteControlXSWI.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl")) {
                var error = $root.commonmodule.LogicalNodeForControl.verify(message.logicalNodeForControl);
                if (error)
                    return "logicalNodeForControl." + error;
            }
            if (message.Pos != null && message.hasOwnProperty("Pos")) {
                var error = $root.commonmodule.ControlDPC.verify(message.Pos);
                if (error)
                    return "Pos." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchDiscreteControlXSWI message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.SwitchDiscreteControlXSWI
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.SwitchDiscreteControlXSWI} SwitchDiscreteControlXSWI
         */
        SwitchDiscreteControlXSWI.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.SwitchDiscreteControlXSWI)
                return object;
            var message = new $root.switchmodule.SwitchDiscreteControlXSWI();
            if (object.logicalNodeForControl != null) {
                if (typeof object.logicalNodeForControl !== "object")
                    throw TypeError(".switchmodule.SwitchDiscreteControlXSWI.logicalNodeForControl: object expected");
                message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.fromObject(object.logicalNodeForControl);
            }
            if (object.Pos != null) {
                if (typeof object.Pos !== "object")
                    throw TypeError(".switchmodule.SwitchDiscreteControlXSWI.Pos: object expected");
                message.Pos = $root.commonmodule.ControlDPC.fromObject(object.Pos);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchDiscreteControlXSWI message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.SwitchDiscreteControlXSWI
         * @static
         * @param {switchmodule.SwitchDiscreteControlXSWI} message SwitchDiscreteControlXSWI
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchDiscreteControlXSWI.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForControl = null;
                object.Pos = null;
            }
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl"))
                object.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.toObject(message.logicalNodeForControl, options);
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                object.Pos = $root.commonmodule.ControlDPC.toObject(message.Pos, options);
            return object;
        };

        /**
         * Converts this SwitchDiscreteControlXSWI to JSON.
         * @function toJSON
         * @memberof switchmodule.SwitchDiscreteControlXSWI
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchDiscreteControlXSWI.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchDiscreteControlXSWI;
    })();

    switchmodule.SwitchDiscreteControl = (function() {

        /**
         * Properties of a SwitchDiscreteControl.
         * @memberof switchmodule
         * @interface ISwitchDiscreteControl
         * @property {commonmodule.IControlValue|null} [controlValue] SwitchDiscreteControl controlValue
         * @property {commonmodule.ICheckConditions|null} [check] SwitchDiscreteControl check
         * @property {switchmodule.ISwitchDiscreteControlXSWI|null} [switchDiscreteControlXSWI] SwitchDiscreteControl switchDiscreteControlXSWI
         * @property {commonmodule.IDeviceControl|null} [deviceControl] SwitchDiscreteControl deviceControl
         */

        /**
         * Constructs a new SwitchDiscreteControl.
         * @memberof switchmodule
         * @classdesc Represents a SwitchDiscreteControl.
         * @implements ISwitchDiscreteControl
         * @constructor
         * @param {switchmodule.ISwitchDiscreteControl=} [properties] Properties to set
         */
        function SwitchDiscreteControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchDiscreteControl controlValue.
         * @member {commonmodule.IControlValue|null|undefined} controlValue
         * @memberof switchmodule.SwitchDiscreteControl
         * @instance
         */
        SwitchDiscreteControl.prototype.controlValue = null;

        /**
         * SwitchDiscreteControl check.
         * @member {commonmodule.ICheckConditions|null|undefined} check
         * @memberof switchmodule.SwitchDiscreteControl
         * @instance
         */
        SwitchDiscreteControl.prototype.check = null;

        /**
         * SwitchDiscreteControl switchDiscreteControlXSWI.
         * @member {switchmodule.ISwitchDiscreteControlXSWI|null|undefined} switchDiscreteControlXSWI
         * @memberof switchmodule.SwitchDiscreteControl
         * @instance
         */
        SwitchDiscreteControl.prototype.switchDiscreteControlXSWI = null;

        /**
         * SwitchDiscreteControl deviceControl.
         * @member {commonmodule.IDeviceControl|null|undefined} deviceControl
         * @memberof switchmodule.SwitchDiscreteControl
         * @instance
         */
        SwitchDiscreteControl.prototype.deviceControl = null;

        /**
         * Creates a new SwitchDiscreteControl instance using the specified properties.
         * @function create
         * @memberof switchmodule.SwitchDiscreteControl
         * @static
         * @param {switchmodule.ISwitchDiscreteControl=} [properties] Properties to set
         * @returns {switchmodule.SwitchDiscreteControl} SwitchDiscreteControl instance
         */
        SwitchDiscreteControl.create = function create(properties) {
            return new SwitchDiscreteControl(properties);
        };

        /**
         * Encodes the specified SwitchDiscreteControl message. Does not implicitly {@link switchmodule.SwitchDiscreteControl.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.SwitchDiscreteControl
         * @static
         * @param {switchmodule.ISwitchDiscreteControl} message SwitchDiscreteControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchDiscreteControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlValue != null && Object.hasOwnProperty.call(message, "controlValue"))
                $root.commonmodule.ControlValue.encode(message.controlValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.check != null && Object.hasOwnProperty.call(message, "check"))
                $root.commonmodule.CheckConditions.encode(message.check, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.switchDiscreteControlXSWI != null && Object.hasOwnProperty.call(message, "switchDiscreteControlXSWI"))
                $root.switchmodule.SwitchDiscreteControlXSWI.encode(message.switchDiscreteControlXSWI, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.deviceControl != null && Object.hasOwnProperty.call(message, "deviceControl"))
                $root.commonmodule.DeviceControl.encode(message.deviceControl, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchDiscreteControl message, length delimited. Does not implicitly {@link switchmodule.SwitchDiscreteControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.SwitchDiscreteControl
         * @static
         * @param {switchmodule.ISwitchDiscreteControl} message SwitchDiscreteControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchDiscreteControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchDiscreteControl message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.SwitchDiscreteControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.SwitchDiscreteControl} SwitchDiscreteControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchDiscreteControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.SwitchDiscreteControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlValue = $root.commonmodule.ControlValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.check = $root.commonmodule.CheckConditions.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.switchDiscreteControlXSWI = $root.switchmodule.SwitchDiscreteControlXSWI.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.deviceControl = $root.commonmodule.DeviceControl.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchDiscreteControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.SwitchDiscreteControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.SwitchDiscreteControl} SwitchDiscreteControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchDiscreteControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchDiscreteControl message.
         * @function verify
         * @memberof switchmodule.SwitchDiscreteControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchDiscreteControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlValue != null && message.hasOwnProperty("controlValue")) {
                var error = $root.commonmodule.ControlValue.verify(message.controlValue);
                if (error)
                    return "controlValue." + error;
            }
            if (message.check != null && message.hasOwnProperty("check")) {
                var error = $root.commonmodule.CheckConditions.verify(message.check);
                if (error)
                    return "check." + error;
            }
            if (message.switchDiscreteControlXSWI != null && message.hasOwnProperty("switchDiscreteControlXSWI")) {
                var error = $root.switchmodule.SwitchDiscreteControlXSWI.verify(message.switchDiscreteControlXSWI);
                if (error)
                    return "switchDiscreteControlXSWI." + error;
            }
            if (message.deviceControl != null && message.hasOwnProperty("deviceControl")) {
                var error = $root.commonmodule.DeviceControl.verify(message.deviceControl);
                if (error)
                    return "deviceControl." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchDiscreteControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.SwitchDiscreteControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.SwitchDiscreteControl} SwitchDiscreteControl
         */
        SwitchDiscreteControl.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.SwitchDiscreteControl)
                return object;
            var message = new $root.switchmodule.SwitchDiscreteControl();
            if (object.controlValue != null) {
                if (typeof object.controlValue !== "object")
                    throw TypeError(".switchmodule.SwitchDiscreteControl.controlValue: object expected");
                message.controlValue = $root.commonmodule.ControlValue.fromObject(object.controlValue);
            }
            if (object.check != null) {
                if (typeof object.check !== "object")
                    throw TypeError(".switchmodule.SwitchDiscreteControl.check: object expected");
                message.check = $root.commonmodule.CheckConditions.fromObject(object.check);
            }
            if (object.switchDiscreteControlXSWI != null) {
                if (typeof object.switchDiscreteControlXSWI !== "object")
                    throw TypeError(".switchmodule.SwitchDiscreteControl.switchDiscreteControlXSWI: object expected");
                message.switchDiscreteControlXSWI = $root.switchmodule.SwitchDiscreteControlXSWI.fromObject(object.switchDiscreteControlXSWI);
            }
            if (object.deviceControl != null) {
                if (typeof object.deviceControl !== "object")
                    throw TypeError(".switchmodule.SwitchDiscreteControl.deviceControl: object expected");
                message.deviceControl = $root.commonmodule.DeviceControl.fromObject(object.deviceControl);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchDiscreteControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.SwitchDiscreteControl
         * @static
         * @param {switchmodule.SwitchDiscreteControl} message SwitchDiscreteControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchDiscreteControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlValue = null;
                object.check = null;
                object.switchDiscreteControlXSWI = null;
                object.deviceControl = null;
            }
            if (message.controlValue != null && message.hasOwnProperty("controlValue"))
                object.controlValue = $root.commonmodule.ControlValue.toObject(message.controlValue, options);
            if (message.check != null && message.hasOwnProperty("check"))
                object.check = $root.commonmodule.CheckConditions.toObject(message.check, options);
            if (message.switchDiscreteControlXSWI != null && message.hasOwnProperty("switchDiscreteControlXSWI"))
                object.switchDiscreteControlXSWI = $root.switchmodule.SwitchDiscreteControlXSWI.toObject(message.switchDiscreteControlXSWI, options);
            if (message.deviceControl != null && message.hasOwnProperty("deviceControl"))
                object.deviceControl = $root.commonmodule.DeviceControl.toObject(message.deviceControl, options);
            return object;
        };

        /**
         * Converts this SwitchDiscreteControl to JSON.
         * @function toJSON
         * @memberof switchmodule.SwitchDiscreteControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchDiscreteControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchDiscreteControl;
    })();

    switchmodule.ProtectedSwitch = (function() {

        /**
         * Properties of a ProtectedSwitch.
         * @memberof switchmodule
         * @interface IProtectedSwitch
         * @property {commonmodule.IConductingEquipment|null} [conductingEquipment] ProtectedSwitch conductingEquipment
         */

        /**
         * Constructs a new ProtectedSwitch.
         * @memberof switchmodule
         * @classdesc Represents a ProtectedSwitch.
         * @implements IProtectedSwitch
         * @constructor
         * @param {switchmodule.IProtectedSwitch=} [properties] Properties to set
         */
        function ProtectedSwitch(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProtectedSwitch conductingEquipment.
         * @member {commonmodule.IConductingEquipment|null|undefined} conductingEquipment
         * @memberof switchmodule.ProtectedSwitch
         * @instance
         */
        ProtectedSwitch.prototype.conductingEquipment = null;

        /**
         * Creates a new ProtectedSwitch instance using the specified properties.
         * @function create
         * @memberof switchmodule.ProtectedSwitch
         * @static
         * @param {switchmodule.IProtectedSwitch=} [properties] Properties to set
         * @returns {switchmodule.ProtectedSwitch} ProtectedSwitch instance
         */
        ProtectedSwitch.create = function create(properties) {
            return new ProtectedSwitch(properties);
        };

        /**
         * Encodes the specified ProtectedSwitch message. Does not implicitly {@link switchmodule.ProtectedSwitch.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.ProtectedSwitch
         * @static
         * @param {switchmodule.IProtectedSwitch} message ProtectedSwitch message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProtectedSwitch.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipment != null && Object.hasOwnProperty.call(message, "conductingEquipment"))
                $root.commonmodule.ConductingEquipment.encode(message.conductingEquipment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProtectedSwitch message, length delimited. Does not implicitly {@link switchmodule.ProtectedSwitch.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.ProtectedSwitch
         * @static
         * @param {switchmodule.IProtectedSwitch} message ProtectedSwitch message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProtectedSwitch.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProtectedSwitch message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.ProtectedSwitch
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.ProtectedSwitch} ProtectedSwitch
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProtectedSwitch.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.ProtectedSwitch();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipment = $root.commonmodule.ConductingEquipment.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProtectedSwitch message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.ProtectedSwitch
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.ProtectedSwitch} ProtectedSwitch
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProtectedSwitch.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProtectedSwitch message.
         * @function verify
         * @memberof switchmodule.ProtectedSwitch
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProtectedSwitch.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment")) {
                var error = $root.commonmodule.ConductingEquipment.verify(message.conductingEquipment);
                if (error)
                    return "conductingEquipment." + error;
            }
            return null;
        };

        /**
         * Creates a ProtectedSwitch message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.ProtectedSwitch
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.ProtectedSwitch} ProtectedSwitch
         */
        ProtectedSwitch.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.ProtectedSwitch)
                return object;
            var message = new $root.switchmodule.ProtectedSwitch();
            if (object.conductingEquipment != null) {
                if (typeof object.conductingEquipment !== "object")
                    throw TypeError(".switchmodule.ProtectedSwitch.conductingEquipment: object expected");
                message.conductingEquipment = $root.commonmodule.ConductingEquipment.fromObject(object.conductingEquipment);
            }
            return message;
        };

        /**
         * Creates a plain object from a ProtectedSwitch message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.ProtectedSwitch
         * @static
         * @param {switchmodule.ProtectedSwitch} message ProtectedSwitch
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProtectedSwitch.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.conductingEquipment = null;
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment"))
                object.conductingEquipment = $root.commonmodule.ConductingEquipment.toObject(message.conductingEquipment, options);
            return object;
        };

        /**
         * Converts this ProtectedSwitch to JSON.
         * @function toJSON
         * @memberof switchmodule.ProtectedSwitch
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProtectedSwitch.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ProtectedSwitch;
    })();

    switchmodule.SwitchDiscreteControlProfile = (function() {

        /**
         * Properties of a SwitchDiscreteControlProfile.
         * @memberof switchmodule
         * @interface ISwitchDiscreteControlProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] SwitchDiscreteControlProfile controlMessageInfo
         * @property {commonmodule.IIED|null} [ied] SwitchDiscreteControlProfile ied
         * @property {switchmodule.IProtectedSwitch|null} [protectedSwitch] SwitchDiscreteControlProfile protectedSwitch
         * @property {switchmodule.ISwitchDiscreteControl|null} [switchDiscreteControl] SwitchDiscreteControlProfile switchDiscreteControl
         */

        /**
         * Constructs a new SwitchDiscreteControlProfile.
         * @memberof switchmodule
         * @classdesc Represents a SwitchDiscreteControlProfile.
         * @implements ISwitchDiscreteControlProfile
         * @constructor
         * @param {switchmodule.ISwitchDiscreteControlProfile=} [properties] Properties to set
         */
        function SwitchDiscreteControlProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchDiscreteControlProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof switchmodule.SwitchDiscreteControlProfile
         * @instance
         */
        SwitchDiscreteControlProfile.prototype.controlMessageInfo = null;

        /**
         * SwitchDiscreteControlProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof switchmodule.SwitchDiscreteControlProfile
         * @instance
         */
        SwitchDiscreteControlProfile.prototype.ied = null;

        /**
         * SwitchDiscreteControlProfile protectedSwitch.
         * @member {switchmodule.IProtectedSwitch|null|undefined} protectedSwitch
         * @memberof switchmodule.SwitchDiscreteControlProfile
         * @instance
         */
        SwitchDiscreteControlProfile.prototype.protectedSwitch = null;

        /**
         * SwitchDiscreteControlProfile switchDiscreteControl.
         * @member {switchmodule.ISwitchDiscreteControl|null|undefined} switchDiscreteControl
         * @memberof switchmodule.SwitchDiscreteControlProfile
         * @instance
         */
        SwitchDiscreteControlProfile.prototype.switchDiscreteControl = null;

        /**
         * Creates a new SwitchDiscreteControlProfile instance using the specified properties.
         * @function create
         * @memberof switchmodule.SwitchDiscreteControlProfile
         * @static
         * @param {switchmodule.ISwitchDiscreteControlProfile=} [properties] Properties to set
         * @returns {switchmodule.SwitchDiscreteControlProfile} SwitchDiscreteControlProfile instance
         */
        SwitchDiscreteControlProfile.create = function create(properties) {
            return new SwitchDiscreteControlProfile(properties);
        };

        /**
         * Encodes the specified SwitchDiscreteControlProfile message. Does not implicitly {@link switchmodule.SwitchDiscreteControlProfile.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.SwitchDiscreteControlProfile
         * @static
         * @param {switchmodule.ISwitchDiscreteControlProfile} message SwitchDiscreteControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchDiscreteControlProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.protectedSwitch != null && Object.hasOwnProperty.call(message, "protectedSwitch"))
                $root.switchmodule.ProtectedSwitch.encode(message.protectedSwitch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.switchDiscreteControl != null && Object.hasOwnProperty.call(message, "switchDiscreteControl"))
                $root.switchmodule.SwitchDiscreteControl.encode(message.switchDiscreteControl, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchDiscreteControlProfile message, length delimited. Does not implicitly {@link switchmodule.SwitchDiscreteControlProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.SwitchDiscreteControlProfile
         * @static
         * @param {switchmodule.ISwitchDiscreteControlProfile} message SwitchDiscreteControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchDiscreteControlProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchDiscreteControlProfile message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.SwitchDiscreteControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.SwitchDiscreteControlProfile} SwitchDiscreteControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchDiscreteControlProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.SwitchDiscreteControlProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.protectedSwitch = $root.switchmodule.ProtectedSwitch.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.switchDiscreteControl = $root.switchmodule.SwitchDiscreteControl.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchDiscreteControlProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.SwitchDiscreteControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.SwitchDiscreteControlProfile} SwitchDiscreteControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchDiscreteControlProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchDiscreteControlProfile message.
         * @function verify
         * @memberof switchmodule.SwitchDiscreteControlProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchDiscreteControlProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.protectedSwitch != null && message.hasOwnProperty("protectedSwitch")) {
                var error = $root.switchmodule.ProtectedSwitch.verify(message.protectedSwitch);
                if (error)
                    return "protectedSwitch." + error;
            }
            if (message.switchDiscreteControl != null && message.hasOwnProperty("switchDiscreteControl")) {
                var error = $root.switchmodule.SwitchDiscreteControl.verify(message.switchDiscreteControl);
                if (error)
                    return "switchDiscreteControl." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchDiscreteControlProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.SwitchDiscreteControlProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.SwitchDiscreteControlProfile} SwitchDiscreteControlProfile
         */
        SwitchDiscreteControlProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.SwitchDiscreteControlProfile)
                return object;
            var message = new $root.switchmodule.SwitchDiscreteControlProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".switchmodule.SwitchDiscreteControlProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".switchmodule.SwitchDiscreteControlProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.protectedSwitch != null) {
                if (typeof object.protectedSwitch !== "object")
                    throw TypeError(".switchmodule.SwitchDiscreteControlProfile.protectedSwitch: object expected");
                message.protectedSwitch = $root.switchmodule.ProtectedSwitch.fromObject(object.protectedSwitch);
            }
            if (object.switchDiscreteControl != null) {
                if (typeof object.switchDiscreteControl !== "object")
                    throw TypeError(".switchmodule.SwitchDiscreteControlProfile.switchDiscreteControl: object expected");
                message.switchDiscreteControl = $root.switchmodule.SwitchDiscreteControl.fromObject(object.switchDiscreteControl);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchDiscreteControlProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.SwitchDiscreteControlProfile
         * @static
         * @param {switchmodule.SwitchDiscreteControlProfile} message SwitchDiscreteControlProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchDiscreteControlProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.ied = null;
                object.protectedSwitch = null;
                object.switchDiscreteControl = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.protectedSwitch != null && message.hasOwnProperty("protectedSwitch"))
                object.protectedSwitch = $root.switchmodule.ProtectedSwitch.toObject(message.protectedSwitch, options);
            if (message.switchDiscreteControl != null && message.hasOwnProperty("switchDiscreteControl"))
                object.switchDiscreteControl = $root.switchmodule.SwitchDiscreteControl.toObject(message.switchDiscreteControl, options);
            return object;
        };

        /**
         * Converts this SwitchDiscreteControlProfile to JSON.
         * @function toJSON
         * @memberof switchmodule.SwitchDiscreteControlProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchDiscreteControlProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchDiscreteControlProfile;
    })();

    switchmodule.SwitchEventXSWI = (function() {

        /**
         * Properties of a SwitchEventXSWI.
         * @memberof switchmodule
         * @interface ISwitchEventXSWI
         * @property {commonmodule.ILogicalNodeForEventAndStatus|null} [logicalNodeForEventAndStatus] SwitchEventXSWI logicalNodeForEventAndStatus
         * @property {commonmodule.IENS_DynamicTestKind|null} [DynamicTest] SwitchEventXSWI DynamicTest
         * @property {commonmodule.IStatusDPS|null} [Pos] SwitchEventXSWI Pos
         */

        /**
         * Constructs a new SwitchEventXSWI.
         * @memberof switchmodule
         * @classdesc Represents a SwitchEventXSWI.
         * @implements ISwitchEventXSWI
         * @constructor
         * @param {switchmodule.ISwitchEventXSWI=} [properties] Properties to set
         */
        function SwitchEventXSWI(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchEventXSWI logicalNodeForEventAndStatus.
         * @member {commonmodule.ILogicalNodeForEventAndStatus|null|undefined} logicalNodeForEventAndStatus
         * @memberof switchmodule.SwitchEventXSWI
         * @instance
         */
        SwitchEventXSWI.prototype.logicalNodeForEventAndStatus = null;

        /**
         * SwitchEventXSWI DynamicTest.
         * @member {commonmodule.IENS_DynamicTestKind|null|undefined} DynamicTest
         * @memberof switchmodule.SwitchEventXSWI
         * @instance
         */
        SwitchEventXSWI.prototype.DynamicTest = null;

        /**
         * SwitchEventXSWI Pos.
         * @member {commonmodule.IStatusDPS|null|undefined} Pos
         * @memberof switchmodule.SwitchEventXSWI
         * @instance
         */
        SwitchEventXSWI.prototype.Pos = null;

        /**
         * Creates a new SwitchEventXSWI instance using the specified properties.
         * @function create
         * @memberof switchmodule.SwitchEventXSWI
         * @static
         * @param {switchmodule.ISwitchEventXSWI=} [properties] Properties to set
         * @returns {switchmodule.SwitchEventXSWI} SwitchEventXSWI instance
         */
        SwitchEventXSWI.create = function create(properties) {
            return new SwitchEventXSWI(properties);
        };

        /**
         * Encodes the specified SwitchEventXSWI message. Does not implicitly {@link switchmodule.SwitchEventXSWI.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.SwitchEventXSWI
         * @static
         * @param {switchmodule.ISwitchEventXSWI} message SwitchEventXSWI message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchEventXSWI.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForEventAndStatus != null && Object.hasOwnProperty.call(message, "logicalNodeForEventAndStatus"))
                $root.commonmodule.LogicalNodeForEventAndStatus.encode(message.logicalNodeForEventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.DynamicTest != null && Object.hasOwnProperty.call(message, "DynamicTest"))
                $root.commonmodule.ENS_DynamicTestKind.encode(message.DynamicTest, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.Pos != null && Object.hasOwnProperty.call(message, "Pos"))
                $root.commonmodule.StatusDPS.encode(message.Pos, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchEventXSWI message, length delimited. Does not implicitly {@link switchmodule.SwitchEventXSWI.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.SwitchEventXSWI
         * @static
         * @param {switchmodule.ISwitchEventXSWI} message SwitchEventXSWI message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchEventXSWI.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchEventXSWI message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.SwitchEventXSWI
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.SwitchEventXSWI} SwitchEventXSWI
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchEventXSWI.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.SwitchEventXSWI();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.Pos = $root.commonmodule.StatusDPS.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchEventXSWI message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.SwitchEventXSWI
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.SwitchEventXSWI} SwitchEventXSWI
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchEventXSWI.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchEventXSWI message.
         * @function verify
         * @memberof switchmodule.SwitchEventXSWI
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchEventXSWI.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus")) {
                var error = $root.commonmodule.LogicalNodeForEventAndStatus.verify(message.logicalNodeForEventAndStatus);
                if (error)
                    return "logicalNodeForEventAndStatus." + error;
            }
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest")) {
                var error = $root.commonmodule.ENS_DynamicTestKind.verify(message.DynamicTest);
                if (error)
                    return "DynamicTest." + error;
            }
            if (message.Pos != null && message.hasOwnProperty("Pos")) {
                var error = $root.commonmodule.StatusDPS.verify(message.Pos);
                if (error)
                    return "Pos." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchEventXSWI message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.SwitchEventXSWI
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.SwitchEventXSWI} SwitchEventXSWI
         */
        SwitchEventXSWI.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.SwitchEventXSWI)
                return object;
            var message = new $root.switchmodule.SwitchEventXSWI();
            if (object.logicalNodeForEventAndStatus != null) {
                if (typeof object.logicalNodeForEventAndStatus !== "object")
                    throw TypeError(".switchmodule.SwitchEventXSWI.logicalNodeForEventAndStatus: object expected");
                message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.fromObject(object.logicalNodeForEventAndStatus);
            }
            if (object.DynamicTest != null) {
                if (typeof object.DynamicTest !== "object")
                    throw TypeError(".switchmodule.SwitchEventXSWI.DynamicTest: object expected");
                message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.fromObject(object.DynamicTest);
            }
            if (object.Pos != null) {
                if (typeof object.Pos !== "object")
                    throw TypeError(".switchmodule.SwitchEventXSWI.Pos: object expected");
                message.Pos = $root.commonmodule.StatusDPS.fromObject(object.Pos);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchEventXSWI message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.SwitchEventXSWI
         * @static
         * @param {switchmodule.SwitchEventXSWI} message SwitchEventXSWI
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchEventXSWI.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForEventAndStatus = null;
                object.DynamicTest = null;
                object.Pos = null;
            }
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus"))
                object.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.toObject(message.logicalNodeForEventAndStatus, options);
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest"))
                object.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.toObject(message.DynamicTest, options);
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                object.Pos = $root.commonmodule.StatusDPS.toObject(message.Pos, options);
            return object;
        };

        /**
         * Converts this SwitchEventXSWI to JSON.
         * @function toJSON
         * @memberof switchmodule.SwitchEventXSWI
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchEventXSWI.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchEventXSWI;
    })();

    switchmodule.SwitchEvent = (function() {

        /**
         * Properties of a SwitchEvent.
         * @memberof switchmodule
         * @interface ISwitchEvent
         * @property {commonmodule.IEventValue|null} [eventValue] SwitchEvent eventValue
         * @property {switchmodule.ISwitchEventXSWI|null} [switchEventXSWI] SwitchEvent switchEventXSWI
         */

        /**
         * Constructs a new SwitchEvent.
         * @memberof switchmodule
         * @classdesc Represents a SwitchEvent.
         * @implements ISwitchEvent
         * @constructor
         * @param {switchmodule.ISwitchEvent=} [properties] Properties to set
         */
        function SwitchEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchEvent eventValue.
         * @member {commonmodule.IEventValue|null|undefined} eventValue
         * @memberof switchmodule.SwitchEvent
         * @instance
         */
        SwitchEvent.prototype.eventValue = null;

        /**
         * SwitchEvent switchEventXSWI.
         * @member {switchmodule.ISwitchEventXSWI|null|undefined} switchEventXSWI
         * @memberof switchmodule.SwitchEvent
         * @instance
         */
        SwitchEvent.prototype.switchEventXSWI = null;

        /**
         * Creates a new SwitchEvent instance using the specified properties.
         * @function create
         * @memberof switchmodule.SwitchEvent
         * @static
         * @param {switchmodule.ISwitchEvent=} [properties] Properties to set
         * @returns {switchmodule.SwitchEvent} SwitchEvent instance
         */
        SwitchEvent.create = function create(properties) {
            return new SwitchEvent(properties);
        };

        /**
         * Encodes the specified SwitchEvent message. Does not implicitly {@link switchmodule.SwitchEvent.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.SwitchEvent
         * @static
         * @param {switchmodule.ISwitchEvent} message SwitchEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventValue != null && Object.hasOwnProperty.call(message, "eventValue"))
                $root.commonmodule.EventValue.encode(message.eventValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.switchEventXSWI != null && Object.hasOwnProperty.call(message, "switchEventXSWI"))
                $root.switchmodule.SwitchEventXSWI.encode(message.switchEventXSWI, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchEvent message, length delimited. Does not implicitly {@link switchmodule.SwitchEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.SwitchEvent
         * @static
         * @param {switchmodule.ISwitchEvent} message SwitchEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchEvent message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.SwitchEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.SwitchEvent} SwitchEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.SwitchEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventValue = $root.commonmodule.EventValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.switchEventXSWI = $root.switchmodule.SwitchEventXSWI.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.SwitchEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.SwitchEvent} SwitchEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchEvent message.
         * @function verify
         * @memberof switchmodule.SwitchEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventValue != null && message.hasOwnProperty("eventValue")) {
                var error = $root.commonmodule.EventValue.verify(message.eventValue);
                if (error)
                    return "eventValue." + error;
            }
            if (message.switchEventXSWI != null && message.hasOwnProperty("switchEventXSWI")) {
                var error = $root.switchmodule.SwitchEventXSWI.verify(message.switchEventXSWI);
                if (error)
                    return "switchEventXSWI." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.SwitchEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.SwitchEvent} SwitchEvent
         */
        SwitchEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.SwitchEvent)
                return object;
            var message = new $root.switchmodule.SwitchEvent();
            if (object.eventValue != null) {
                if (typeof object.eventValue !== "object")
                    throw TypeError(".switchmodule.SwitchEvent.eventValue: object expected");
                message.eventValue = $root.commonmodule.EventValue.fromObject(object.eventValue);
            }
            if (object.switchEventXSWI != null) {
                if (typeof object.switchEventXSWI !== "object")
                    throw TypeError(".switchmodule.SwitchEvent.switchEventXSWI: object expected");
                message.switchEventXSWI = $root.switchmodule.SwitchEventXSWI.fromObject(object.switchEventXSWI);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.SwitchEvent
         * @static
         * @param {switchmodule.SwitchEvent} message SwitchEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventValue = null;
                object.switchEventXSWI = null;
            }
            if (message.eventValue != null && message.hasOwnProperty("eventValue"))
                object.eventValue = $root.commonmodule.EventValue.toObject(message.eventValue, options);
            if (message.switchEventXSWI != null && message.hasOwnProperty("switchEventXSWI"))
                object.switchEventXSWI = $root.switchmodule.SwitchEventXSWI.toObject(message.switchEventXSWI, options);
            return object;
        };

        /**
         * Converts this SwitchEvent to JSON.
         * @function toJSON
         * @memberof switchmodule.SwitchEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchEvent;
    })();

    switchmodule.SwitchEventProfile = (function() {

        /**
         * Properties of a SwitchEventProfile.
         * @memberof switchmodule
         * @interface ISwitchEventProfile
         * @property {commonmodule.IEventMessageInfo|null} [eventMessageInfo] SwitchEventProfile eventMessageInfo
         * @property {commonmodule.IIED|null} [ied] SwitchEventProfile ied
         * @property {switchmodule.IProtectedSwitch|null} [protectedSwitch] SwitchEventProfile protectedSwitch
         * @property {switchmodule.ISwitchEvent|null} [switchEvent] SwitchEventProfile switchEvent
         */

        /**
         * Constructs a new SwitchEventProfile.
         * @memberof switchmodule
         * @classdesc Represents a SwitchEventProfile.
         * @implements ISwitchEventProfile
         * @constructor
         * @param {switchmodule.ISwitchEventProfile=} [properties] Properties to set
         */
        function SwitchEventProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchEventProfile eventMessageInfo.
         * @member {commonmodule.IEventMessageInfo|null|undefined} eventMessageInfo
         * @memberof switchmodule.SwitchEventProfile
         * @instance
         */
        SwitchEventProfile.prototype.eventMessageInfo = null;

        /**
         * SwitchEventProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof switchmodule.SwitchEventProfile
         * @instance
         */
        SwitchEventProfile.prototype.ied = null;

        /**
         * SwitchEventProfile protectedSwitch.
         * @member {switchmodule.IProtectedSwitch|null|undefined} protectedSwitch
         * @memberof switchmodule.SwitchEventProfile
         * @instance
         */
        SwitchEventProfile.prototype.protectedSwitch = null;

        /**
         * SwitchEventProfile switchEvent.
         * @member {switchmodule.ISwitchEvent|null|undefined} switchEvent
         * @memberof switchmodule.SwitchEventProfile
         * @instance
         */
        SwitchEventProfile.prototype.switchEvent = null;

        /**
         * Creates a new SwitchEventProfile instance using the specified properties.
         * @function create
         * @memberof switchmodule.SwitchEventProfile
         * @static
         * @param {switchmodule.ISwitchEventProfile=} [properties] Properties to set
         * @returns {switchmodule.SwitchEventProfile} SwitchEventProfile instance
         */
        SwitchEventProfile.create = function create(properties) {
            return new SwitchEventProfile(properties);
        };

        /**
         * Encodes the specified SwitchEventProfile message. Does not implicitly {@link switchmodule.SwitchEventProfile.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.SwitchEventProfile
         * @static
         * @param {switchmodule.ISwitchEventProfile} message SwitchEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchEventProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventMessageInfo != null && Object.hasOwnProperty.call(message, "eventMessageInfo"))
                $root.commonmodule.EventMessageInfo.encode(message.eventMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.protectedSwitch != null && Object.hasOwnProperty.call(message, "protectedSwitch"))
                $root.switchmodule.ProtectedSwitch.encode(message.protectedSwitch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.switchEvent != null && Object.hasOwnProperty.call(message, "switchEvent"))
                $root.switchmodule.SwitchEvent.encode(message.switchEvent, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchEventProfile message, length delimited. Does not implicitly {@link switchmodule.SwitchEventProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.SwitchEventProfile
         * @static
         * @param {switchmodule.ISwitchEventProfile} message SwitchEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchEventProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchEventProfile message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.SwitchEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.SwitchEventProfile} SwitchEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchEventProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.SwitchEventProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventMessageInfo = $root.commonmodule.EventMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.protectedSwitch = $root.switchmodule.ProtectedSwitch.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.switchEvent = $root.switchmodule.SwitchEvent.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchEventProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.SwitchEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.SwitchEventProfile} SwitchEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchEventProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchEventProfile message.
         * @function verify
         * @memberof switchmodule.SwitchEventProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchEventProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo")) {
                var error = $root.commonmodule.EventMessageInfo.verify(message.eventMessageInfo);
                if (error)
                    return "eventMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.protectedSwitch != null && message.hasOwnProperty("protectedSwitch")) {
                var error = $root.switchmodule.ProtectedSwitch.verify(message.protectedSwitch);
                if (error)
                    return "protectedSwitch." + error;
            }
            if (message.switchEvent != null && message.hasOwnProperty("switchEvent")) {
                var error = $root.switchmodule.SwitchEvent.verify(message.switchEvent);
                if (error)
                    return "switchEvent." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchEventProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.SwitchEventProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.SwitchEventProfile} SwitchEventProfile
         */
        SwitchEventProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.SwitchEventProfile)
                return object;
            var message = new $root.switchmodule.SwitchEventProfile();
            if (object.eventMessageInfo != null) {
                if (typeof object.eventMessageInfo !== "object")
                    throw TypeError(".switchmodule.SwitchEventProfile.eventMessageInfo: object expected");
                message.eventMessageInfo = $root.commonmodule.EventMessageInfo.fromObject(object.eventMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".switchmodule.SwitchEventProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.protectedSwitch != null) {
                if (typeof object.protectedSwitch !== "object")
                    throw TypeError(".switchmodule.SwitchEventProfile.protectedSwitch: object expected");
                message.protectedSwitch = $root.switchmodule.ProtectedSwitch.fromObject(object.protectedSwitch);
            }
            if (object.switchEvent != null) {
                if (typeof object.switchEvent !== "object")
                    throw TypeError(".switchmodule.SwitchEventProfile.switchEvent: object expected");
                message.switchEvent = $root.switchmodule.SwitchEvent.fromObject(object.switchEvent);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchEventProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.SwitchEventProfile
         * @static
         * @param {switchmodule.SwitchEventProfile} message SwitchEventProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchEventProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventMessageInfo = null;
                object.ied = null;
                object.protectedSwitch = null;
                object.switchEvent = null;
            }
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo"))
                object.eventMessageInfo = $root.commonmodule.EventMessageInfo.toObject(message.eventMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.protectedSwitch != null && message.hasOwnProperty("protectedSwitch"))
                object.protectedSwitch = $root.switchmodule.ProtectedSwitch.toObject(message.protectedSwitch, options);
            if (message.switchEvent != null && message.hasOwnProperty("switchEvent"))
                object.switchEvent = $root.switchmodule.SwitchEvent.toObject(message.switchEvent, options);
            return object;
        };

        /**
         * Converts this SwitchEventProfile to JSON.
         * @function toJSON
         * @memberof switchmodule.SwitchEventProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchEventProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchEventProfile;
    })();

    switchmodule.SwitchReading = (function() {

        /**
         * Properties of a SwitchReading.
         * @memberof switchmodule
         * @interface ISwitchReading
         * @property {commonmodule.IConductingEquipmentTerminalReading|null} [conductingEquipmentTerminalReading] SwitchReading conductingEquipmentTerminalReading
         * @property {commonmodule.IReadingMMXU|null} [diffReadingMMXU] SwitchReading diffReadingMMXU
         * @property {commonmodule.IPhaseMMTN|null} [phaseMMTN] SwitchReading phaseMMTN
         * @property {commonmodule.IReadingMMTR|null} [readingMMTR] SwitchReading readingMMTR
         * @property {commonmodule.IReadingMMXU|null} [readingMMXU] SwitchReading readingMMXU
         */

        /**
         * Constructs a new SwitchReading.
         * @memberof switchmodule
         * @classdesc Represents a SwitchReading.
         * @implements ISwitchReading
         * @constructor
         * @param {switchmodule.ISwitchReading=} [properties] Properties to set
         */
        function SwitchReading(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchReading conductingEquipmentTerminalReading.
         * @member {commonmodule.IConductingEquipmentTerminalReading|null|undefined} conductingEquipmentTerminalReading
         * @memberof switchmodule.SwitchReading
         * @instance
         */
        SwitchReading.prototype.conductingEquipmentTerminalReading = null;

        /**
         * SwitchReading diffReadingMMXU.
         * @member {commonmodule.IReadingMMXU|null|undefined} diffReadingMMXU
         * @memberof switchmodule.SwitchReading
         * @instance
         */
        SwitchReading.prototype.diffReadingMMXU = null;

        /**
         * SwitchReading phaseMMTN.
         * @member {commonmodule.IPhaseMMTN|null|undefined} phaseMMTN
         * @memberof switchmodule.SwitchReading
         * @instance
         */
        SwitchReading.prototype.phaseMMTN = null;

        /**
         * SwitchReading readingMMTR.
         * @member {commonmodule.IReadingMMTR|null|undefined} readingMMTR
         * @memberof switchmodule.SwitchReading
         * @instance
         */
        SwitchReading.prototype.readingMMTR = null;

        /**
         * SwitchReading readingMMXU.
         * @member {commonmodule.IReadingMMXU|null|undefined} readingMMXU
         * @memberof switchmodule.SwitchReading
         * @instance
         */
        SwitchReading.prototype.readingMMXU = null;

        /**
         * Creates a new SwitchReading instance using the specified properties.
         * @function create
         * @memberof switchmodule.SwitchReading
         * @static
         * @param {switchmodule.ISwitchReading=} [properties] Properties to set
         * @returns {switchmodule.SwitchReading} SwitchReading instance
         */
        SwitchReading.create = function create(properties) {
            return new SwitchReading(properties);
        };

        /**
         * Encodes the specified SwitchReading message. Does not implicitly {@link switchmodule.SwitchReading.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.SwitchReading
         * @static
         * @param {switchmodule.ISwitchReading} message SwitchReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchReading.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipmentTerminalReading != null && Object.hasOwnProperty.call(message, "conductingEquipmentTerminalReading"))
                $root.commonmodule.ConductingEquipmentTerminalReading.encode(message.conductingEquipmentTerminalReading, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.diffReadingMMXU != null && Object.hasOwnProperty.call(message, "diffReadingMMXU"))
                $root.commonmodule.ReadingMMXU.encode(message.diffReadingMMXU, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.phaseMMTN != null && Object.hasOwnProperty.call(message, "phaseMMTN"))
                $root.commonmodule.PhaseMMTN.encode(message.phaseMMTN, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.readingMMTR != null && Object.hasOwnProperty.call(message, "readingMMTR"))
                $root.commonmodule.ReadingMMTR.encode(message.readingMMTR, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.readingMMXU != null && Object.hasOwnProperty.call(message, "readingMMXU"))
                $root.commonmodule.ReadingMMXU.encode(message.readingMMXU, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchReading message, length delimited. Does not implicitly {@link switchmodule.SwitchReading.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.SwitchReading
         * @static
         * @param {switchmodule.ISwitchReading} message SwitchReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchReading.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchReading message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.SwitchReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.SwitchReading} SwitchReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchReading.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.SwitchReading();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.diffReadingMMXU = $root.commonmodule.ReadingMMXU.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.phaseMMTN = $root.commonmodule.PhaseMMTN.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.readingMMTR = $root.commonmodule.ReadingMMTR.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.readingMMXU = $root.commonmodule.ReadingMMXU.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchReading message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.SwitchReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.SwitchReading} SwitchReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchReading.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchReading message.
         * @function verify
         * @memberof switchmodule.SwitchReading
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchReading.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading")) {
                var error = $root.commonmodule.ConductingEquipmentTerminalReading.verify(message.conductingEquipmentTerminalReading);
                if (error)
                    return "conductingEquipmentTerminalReading." + error;
            }
            if (message.diffReadingMMXU != null && message.hasOwnProperty("diffReadingMMXU")) {
                var error = $root.commonmodule.ReadingMMXU.verify(message.diffReadingMMXU);
                if (error)
                    return "diffReadingMMXU." + error;
            }
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN")) {
                var error = $root.commonmodule.PhaseMMTN.verify(message.phaseMMTN);
                if (error)
                    return "phaseMMTN." + error;
            }
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR")) {
                var error = $root.commonmodule.ReadingMMTR.verify(message.readingMMTR);
                if (error)
                    return "readingMMTR." + error;
            }
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU")) {
                var error = $root.commonmodule.ReadingMMXU.verify(message.readingMMXU);
                if (error)
                    return "readingMMXU." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchReading message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.SwitchReading
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.SwitchReading} SwitchReading
         */
        SwitchReading.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.SwitchReading)
                return object;
            var message = new $root.switchmodule.SwitchReading();
            if (object.conductingEquipmentTerminalReading != null) {
                if (typeof object.conductingEquipmentTerminalReading !== "object")
                    throw TypeError(".switchmodule.SwitchReading.conductingEquipmentTerminalReading: object expected");
                message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.fromObject(object.conductingEquipmentTerminalReading);
            }
            if (object.diffReadingMMXU != null) {
                if (typeof object.diffReadingMMXU !== "object")
                    throw TypeError(".switchmodule.SwitchReading.diffReadingMMXU: object expected");
                message.diffReadingMMXU = $root.commonmodule.ReadingMMXU.fromObject(object.diffReadingMMXU);
            }
            if (object.phaseMMTN != null) {
                if (typeof object.phaseMMTN !== "object")
                    throw TypeError(".switchmodule.SwitchReading.phaseMMTN: object expected");
                message.phaseMMTN = $root.commonmodule.PhaseMMTN.fromObject(object.phaseMMTN);
            }
            if (object.readingMMTR != null) {
                if (typeof object.readingMMTR !== "object")
                    throw TypeError(".switchmodule.SwitchReading.readingMMTR: object expected");
                message.readingMMTR = $root.commonmodule.ReadingMMTR.fromObject(object.readingMMTR);
            }
            if (object.readingMMXU != null) {
                if (typeof object.readingMMXU !== "object")
                    throw TypeError(".switchmodule.SwitchReading.readingMMXU: object expected");
                message.readingMMXU = $root.commonmodule.ReadingMMXU.fromObject(object.readingMMXU);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchReading message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.SwitchReading
         * @static
         * @param {switchmodule.SwitchReading} message SwitchReading
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchReading.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conductingEquipmentTerminalReading = null;
                object.diffReadingMMXU = null;
                object.phaseMMTN = null;
                object.readingMMTR = null;
                object.readingMMXU = null;
            }
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading"))
                object.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.toObject(message.conductingEquipmentTerminalReading, options);
            if (message.diffReadingMMXU != null && message.hasOwnProperty("diffReadingMMXU"))
                object.diffReadingMMXU = $root.commonmodule.ReadingMMXU.toObject(message.diffReadingMMXU, options);
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN"))
                object.phaseMMTN = $root.commonmodule.PhaseMMTN.toObject(message.phaseMMTN, options);
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR"))
                object.readingMMTR = $root.commonmodule.ReadingMMTR.toObject(message.readingMMTR, options);
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU"))
                object.readingMMXU = $root.commonmodule.ReadingMMXU.toObject(message.readingMMXU, options);
            return object;
        };

        /**
         * Converts this SwitchReading to JSON.
         * @function toJSON
         * @memberof switchmodule.SwitchReading
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchReading.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchReading;
    })();

    switchmodule.SwitchReadingProfile = (function() {

        /**
         * Properties of a SwitchReadingProfile.
         * @memberof switchmodule
         * @interface ISwitchReadingProfile
         * @property {commonmodule.IReadingMessageInfo|null} [readingMessageInfo] SwitchReadingProfile readingMessageInfo
         * @property {commonmodule.IIED|null} [ied] SwitchReadingProfile ied
         * @property {switchmodule.IProtectedSwitch|null} [protectedSwitch] SwitchReadingProfile protectedSwitch
         * @property {Array.<switchmodule.ISwitchReading>|null} [switchReading] SwitchReadingProfile switchReading
         */

        /**
         * Constructs a new SwitchReadingProfile.
         * @memberof switchmodule
         * @classdesc Represents a SwitchReadingProfile.
         * @implements ISwitchReadingProfile
         * @constructor
         * @param {switchmodule.ISwitchReadingProfile=} [properties] Properties to set
         */
        function SwitchReadingProfile(properties) {
            this.switchReading = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchReadingProfile readingMessageInfo.
         * @member {commonmodule.IReadingMessageInfo|null|undefined} readingMessageInfo
         * @memberof switchmodule.SwitchReadingProfile
         * @instance
         */
        SwitchReadingProfile.prototype.readingMessageInfo = null;

        /**
         * SwitchReadingProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof switchmodule.SwitchReadingProfile
         * @instance
         */
        SwitchReadingProfile.prototype.ied = null;

        /**
         * SwitchReadingProfile protectedSwitch.
         * @member {switchmodule.IProtectedSwitch|null|undefined} protectedSwitch
         * @memberof switchmodule.SwitchReadingProfile
         * @instance
         */
        SwitchReadingProfile.prototype.protectedSwitch = null;

        /**
         * SwitchReadingProfile switchReading.
         * @member {Array.<switchmodule.ISwitchReading>} switchReading
         * @memberof switchmodule.SwitchReadingProfile
         * @instance
         */
        SwitchReadingProfile.prototype.switchReading = $util.emptyArray;

        /**
         * Creates a new SwitchReadingProfile instance using the specified properties.
         * @function create
         * @memberof switchmodule.SwitchReadingProfile
         * @static
         * @param {switchmodule.ISwitchReadingProfile=} [properties] Properties to set
         * @returns {switchmodule.SwitchReadingProfile} SwitchReadingProfile instance
         */
        SwitchReadingProfile.create = function create(properties) {
            return new SwitchReadingProfile(properties);
        };

        /**
         * Encodes the specified SwitchReadingProfile message. Does not implicitly {@link switchmodule.SwitchReadingProfile.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.SwitchReadingProfile
         * @static
         * @param {switchmodule.ISwitchReadingProfile} message SwitchReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchReadingProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.readingMessageInfo != null && Object.hasOwnProperty.call(message, "readingMessageInfo"))
                $root.commonmodule.ReadingMessageInfo.encode(message.readingMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.protectedSwitch != null && Object.hasOwnProperty.call(message, "protectedSwitch"))
                $root.switchmodule.ProtectedSwitch.encode(message.protectedSwitch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.switchReading != null && message.switchReading.length)
                for (var i = 0; i < message.switchReading.length; ++i)
                    $root.switchmodule.SwitchReading.encode(message.switchReading[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchReadingProfile message, length delimited. Does not implicitly {@link switchmodule.SwitchReadingProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.SwitchReadingProfile
         * @static
         * @param {switchmodule.ISwitchReadingProfile} message SwitchReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchReadingProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchReadingProfile message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.SwitchReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.SwitchReadingProfile} SwitchReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchReadingProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.SwitchReadingProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.protectedSwitch = $root.switchmodule.ProtectedSwitch.decode(reader, reader.uint32());
                    break;
                case 4:
                    if (!(message.switchReading && message.switchReading.length))
                        message.switchReading = [];
                    message.switchReading.push($root.switchmodule.SwitchReading.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchReadingProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.SwitchReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.SwitchReadingProfile} SwitchReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchReadingProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchReadingProfile message.
         * @function verify
         * @memberof switchmodule.SwitchReadingProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchReadingProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo")) {
                var error = $root.commonmodule.ReadingMessageInfo.verify(message.readingMessageInfo);
                if (error)
                    return "readingMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.protectedSwitch != null && message.hasOwnProperty("protectedSwitch")) {
                var error = $root.switchmodule.ProtectedSwitch.verify(message.protectedSwitch);
                if (error)
                    return "protectedSwitch." + error;
            }
            if (message.switchReading != null && message.hasOwnProperty("switchReading")) {
                if (!Array.isArray(message.switchReading))
                    return "switchReading: array expected";
                for (var i = 0; i < message.switchReading.length; ++i) {
                    var error = $root.switchmodule.SwitchReading.verify(message.switchReading[i]);
                    if (error)
                        return "switchReading." + error;
                }
            }
            return null;
        };

        /**
         * Creates a SwitchReadingProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.SwitchReadingProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.SwitchReadingProfile} SwitchReadingProfile
         */
        SwitchReadingProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.SwitchReadingProfile)
                return object;
            var message = new $root.switchmodule.SwitchReadingProfile();
            if (object.readingMessageInfo != null) {
                if (typeof object.readingMessageInfo !== "object")
                    throw TypeError(".switchmodule.SwitchReadingProfile.readingMessageInfo: object expected");
                message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.fromObject(object.readingMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".switchmodule.SwitchReadingProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.protectedSwitch != null) {
                if (typeof object.protectedSwitch !== "object")
                    throw TypeError(".switchmodule.SwitchReadingProfile.protectedSwitch: object expected");
                message.protectedSwitch = $root.switchmodule.ProtectedSwitch.fromObject(object.protectedSwitch);
            }
            if (object.switchReading) {
                if (!Array.isArray(object.switchReading))
                    throw TypeError(".switchmodule.SwitchReadingProfile.switchReading: array expected");
                message.switchReading = [];
                for (var i = 0; i < object.switchReading.length; ++i) {
                    if (typeof object.switchReading[i] !== "object")
                        throw TypeError(".switchmodule.SwitchReadingProfile.switchReading: object expected");
                    message.switchReading[i] = $root.switchmodule.SwitchReading.fromObject(object.switchReading[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchReadingProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.SwitchReadingProfile
         * @static
         * @param {switchmodule.SwitchReadingProfile} message SwitchReadingProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchReadingProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.switchReading = [];
            if (options.defaults) {
                object.readingMessageInfo = null;
                object.ied = null;
                object.protectedSwitch = null;
            }
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo"))
                object.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.toObject(message.readingMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.protectedSwitch != null && message.hasOwnProperty("protectedSwitch"))
                object.protectedSwitch = $root.switchmodule.ProtectedSwitch.toObject(message.protectedSwitch, options);
            if (message.switchReading && message.switchReading.length) {
                object.switchReading = [];
                for (var j = 0; j < message.switchReading.length; ++j)
                    object.switchReading[j] = $root.switchmodule.SwitchReading.toObject(message.switchReading[j], options);
            }
            return object;
        };

        /**
         * Converts this SwitchReadingProfile to JSON.
         * @function toJSON
         * @memberof switchmodule.SwitchReadingProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchReadingProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchReadingProfile;
    })();

    switchmodule.SwitchStatusXSWI = (function() {

        /**
         * Properties of a SwitchStatusXSWI.
         * @memberof switchmodule
         * @interface ISwitchStatusXSWI
         * @property {commonmodule.ILogicalNodeForEventAndStatus|null} [logicalNodeForEventAndStatus] SwitchStatusXSWI logicalNodeForEventAndStatus
         * @property {commonmodule.IENS_DynamicTestKind|null} [DynamicTest] SwitchStatusXSWI DynamicTest
         * @property {commonmodule.IStatusDPS|null} [Pos] SwitchStatusXSWI Pos
         */

        /**
         * Constructs a new SwitchStatusXSWI.
         * @memberof switchmodule
         * @classdesc Represents a SwitchStatusXSWI.
         * @implements ISwitchStatusXSWI
         * @constructor
         * @param {switchmodule.ISwitchStatusXSWI=} [properties] Properties to set
         */
        function SwitchStatusXSWI(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchStatusXSWI logicalNodeForEventAndStatus.
         * @member {commonmodule.ILogicalNodeForEventAndStatus|null|undefined} logicalNodeForEventAndStatus
         * @memberof switchmodule.SwitchStatusXSWI
         * @instance
         */
        SwitchStatusXSWI.prototype.logicalNodeForEventAndStatus = null;

        /**
         * SwitchStatusXSWI DynamicTest.
         * @member {commonmodule.IENS_DynamicTestKind|null|undefined} DynamicTest
         * @memberof switchmodule.SwitchStatusXSWI
         * @instance
         */
        SwitchStatusXSWI.prototype.DynamicTest = null;

        /**
         * SwitchStatusXSWI Pos.
         * @member {commonmodule.IStatusDPS|null|undefined} Pos
         * @memberof switchmodule.SwitchStatusXSWI
         * @instance
         */
        SwitchStatusXSWI.prototype.Pos = null;

        /**
         * Creates a new SwitchStatusXSWI instance using the specified properties.
         * @function create
         * @memberof switchmodule.SwitchStatusXSWI
         * @static
         * @param {switchmodule.ISwitchStatusXSWI=} [properties] Properties to set
         * @returns {switchmodule.SwitchStatusXSWI} SwitchStatusXSWI instance
         */
        SwitchStatusXSWI.create = function create(properties) {
            return new SwitchStatusXSWI(properties);
        };

        /**
         * Encodes the specified SwitchStatusXSWI message. Does not implicitly {@link switchmodule.SwitchStatusXSWI.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.SwitchStatusXSWI
         * @static
         * @param {switchmodule.ISwitchStatusXSWI} message SwitchStatusXSWI message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchStatusXSWI.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForEventAndStatus != null && Object.hasOwnProperty.call(message, "logicalNodeForEventAndStatus"))
                $root.commonmodule.LogicalNodeForEventAndStatus.encode(message.logicalNodeForEventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.DynamicTest != null && Object.hasOwnProperty.call(message, "DynamicTest"))
                $root.commonmodule.ENS_DynamicTestKind.encode(message.DynamicTest, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.Pos != null && Object.hasOwnProperty.call(message, "Pos"))
                $root.commonmodule.StatusDPS.encode(message.Pos, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchStatusXSWI message, length delimited. Does not implicitly {@link switchmodule.SwitchStatusXSWI.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.SwitchStatusXSWI
         * @static
         * @param {switchmodule.ISwitchStatusXSWI} message SwitchStatusXSWI message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchStatusXSWI.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchStatusXSWI message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.SwitchStatusXSWI
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.SwitchStatusXSWI} SwitchStatusXSWI
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchStatusXSWI.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.SwitchStatusXSWI();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.Pos = $root.commonmodule.StatusDPS.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchStatusXSWI message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.SwitchStatusXSWI
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.SwitchStatusXSWI} SwitchStatusXSWI
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchStatusXSWI.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchStatusXSWI message.
         * @function verify
         * @memberof switchmodule.SwitchStatusXSWI
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchStatusXSWI.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus")) {
                var error = $root.commonmodule.LogicalNodeForEventAndStatus.verify(message.logicalNodeForEventAndStatus);
                if (error)
                    return "logicalNodeForEventAndStatus." + error;
            }
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest")) {
                var error = $root.commonmodule.ENS_DynamicTestKind.verify(message.DynamicTest);
                if (error)
                    return "DynamicTest." + error;
            }
            if (message.Pos != null && message.hasOwnProperty("Pos")) {
                var error = $root.commonmodule.StatusDPS.verify(message.Pos);
                if (error)
                    return "Pos." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchStatusXSWI message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.SwitchStatusXSWI
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.SwitchStatusXSWI} SwitchStatusXSWI
         */
        SwitchStatusXSWI.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.SwitchStatusXSWI)
                return object;
            var message = new $root.switchmodule.SwitchStatusXSWI();
            if (object.logicalNodeForEventAndStatus != null) {
                if (typeof object.logicalNodeForEventAndStatus !== "object")
                    throw TypeError(".switchmodule.SwitchStatusXSWI.logicalNodeForEventAndStatus: object expected");
                message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.fromObject(object.logicalNodeForEventAndStatus);
            }
            if (object.DynamicTest != null) {
                if (typeof object.DynamicTest !== "object")
                    throw TypeError(".switchmodule.SwitchStatusXSWI.DynamicTest: object expected");
                message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.fromObject(object.DynamicTest);
            }
            if (object.Pos != null) {
                if (typeof object.Pos !== "object")
                    throw TypeError(".switchmodule.SwitchStatusXSWI.Pos: object expected");
                message.Pos = $root.commonmodule.StatusDPS.fromObject(object.Pos);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchStatusXSWI message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.SwitchStatusXSWI
         * @static
         * @param {switchmodule.SwitchStatusXSWI} message SwitchStatusXSWI
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchStatusXSWI.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForEventAndStatus = null;
                object.DynamicTest = null;
                object.Pos = null;
            }
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus"))
                object.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.toObject(message.logicalNodeForEventAndStatus, options);
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest"))
                object.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.toObject(message.DynamicTest, options);
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                object.Pos = $root.commonmodule.StatusDPS.toObject(message.Pos, options);
            return object;
        };

        /**
         * Converts this SwitchStatusXSWI to JSON.
         * @function toJSON
         * @memberof switchmodule.SwitchStatusXSWI
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchStatusXSWI.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchStatusXSWI;
    })();

    switchmodule.SwitchStatus = (function() {

        /**
         * Properties of a SwitchStatus.
         * @memberof switchmodule
         * @interface ISwitchStatus
         * @property {commonmodule.IStatusValue|null} [statusValue] SwitchStatus statusValue
         * @property {switchmodule.ISwitchStatusXSWI|null} [switchStatusXSWI] SwitchStatus switchStatusXSWI
         * @property {commonmodule.IDeviceStatus|null} [deviceStatus] SwitchStatus deviceStatus
         */

        /**
         * Constructs a new SwitchStatus.
         * @memberof switchmodule
         * @classdesc Represents a SwitchStatus.
         * @implements ISwitchStatus
         * @constructor
         * @param {switchmodule.ISwitchStatus=} [properties] Properties to set
         */
        function SwitchStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchStatus statusValue.
         * @member {commonmodule.IStatusValue|null|undefined} statusValue
         * @memberof switchmodule.SwitchStatus
         * @instance
         */
        SwitchStatus.prototype.statusValue = null;

        /**
         * SwitchStatus switchStatusXSWI.
         * @member {switchmodule.ISwitchStatusXSWI|null|undefined} switchStatusXSWI
         * @memberof switchmodule.SwitchStatus
         * @instance
         */
        SwitchStatus.prototype.switchStatusXSWI = null;

        /**
         * SwitchStatus deviceStatus.
         * @member {commonmodule.IDeviceStatus|null|undefined} deviceStatus
         * @memberof switchmodule.SwitchStatus
         * @instance
         */
        SwitchStatus.prototype.deviceStatus = null;

        /**
         * Creates a new SwitchStatus instance using the specified properties.
         * @function create
         * @memberof switchmodule.SwitchStatus
         * @static
         * @param {switchmodule.ISwitchStatus=} [properties] Properties to set
         * @returns {switchmodule.SwitchStatus} SwitchStatus instance
         */
        SwitchStatus.create = function create(properties) {
            return new SwitchStatus(properties);
        };

        /**
         * Encodes the specified SwitchStatus message. Does not implicitly {@link switchmodule.SwitchStatus.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.SwitchStatus
         * @static
         * @param {switchmodule.ISwitchStatus} message SwitchStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusValue != null && Object.hasOwnProperty.call(message, "statusValue"))
                $root.commonmodule.StatusValue.encode(message.statusValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.switchStatusXSWI != null && Object.hasOwnProperty.call(message, "switchStatusXSWI"))
                $root.switchmodule.SwitchStatusXSWI.encode(message.switchStatusXSWI, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.deviceStatus != null && Object.hasOwnProperty.call(message, "deviceStatus"))
                $root.commonmodule.DeviceStatus.encode(message.deviceStatus, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchStatus message, length delimited. Does not implicitly {@link switchmodule.SwitchStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.SwitchStatus
         * @static
         * @param {switchmodule.ISwitchStatus} message SwitchStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchStatus message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.SwitchStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.SwitchStatus} SwitchStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.SwitchStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusValue = $root.commonmodule.StatusValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.switchStatusXSWI = $root.switchmodule.SwitchStatusXSWI.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.deviceStatus = $root.commonmodule.DeviceStatus.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.SwitchStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.SwitchStatus} SwitchStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchStatus message.
         * @function verify
         * @memberof switchmodule.SwitchStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusValue != null && message.hasOwnProperty("statusValue")) {
                var error = $root.commonmodule.StatusValue.verify(message.statusValue);
                if (error)
                    return "statusValue." + error;
            }
            if (message.switchStatusXSWI != null && message.hasOwnProperty("switchStatusXSWI")) {
                var error = $root.switchmodule.SwitchStatusXSWI.verify(message.switchStatusXSWI);
                if (error)
                    return "switchStatusXSWI." + error;
            }
            if (message.deviceStatus != null && message.hasOwnProperty("deviceStatus")) {
                var error = $root.commonmodule.DeviceStatus.verify(message.deviceStatus);
                if (error)
                    return "deviceStatus." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.SwitchStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.SwitchStatus} SwitchStatus
         */
        SwitchStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.SwitchStatus)
                return object;
            var message = new $root.switchmodule.SwitchStatus();
            if (object.statusValue != null) {
                if (typeof object.statusValue !== "object")
                    throw TypeError(".switchmodule.SwitchStatus.statusValue: object expected");
                message.statusValue = $root.commonmodule.StatusValue.fromObject(object.statusValue);
            }
            if (object.switchStatusXSWI != null) {
                if (typeof object.switchStatusXSWI !== "object")
                    throw TypeError(".switchmodule.SwitchStatus.switchStatusXSWI: object expected");
                message.switchStatusXSWI = $root.switchmodule.SwitchStatusXSWI.fromObject(object.switchStatusXSWI);
            }
            if (object.deviceStatus != null) {
                if (typeof object.deviceStatus !== "object")
                    throw TypeError(".switchmodule.SwitchStatus.deviceStatus: object expected");
                message.deviceStatus = $root.commonmodule.DeviceStatus.fromObject(object.deviceStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.SwitchStatus
         * @static
         * @param {switchmodule.SwitchStatus} message SwitchStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusValue = null;
                object.switchStatusXSWI = null;
                object.deviceStatus = null;
            }
            if (message.statusValue != null && message.hasOwnProperty("statusValue"))
                object.statusValue = $root.commonmodule.StatusValue.toObject(message.statusValue, options);
            if (message.switchStatusXSWI != null && message.hasOwnProperty("switchStatusXSWI"))
                object.switchStatusXSWI = $root.switchmodule.SwitchStatusXSWI.toObject(message.switchStatusXSWI, options);
            if (message.deviceStatus != null && message.hasOwnProperty("deviceStatus"))
                object.deviceStatus = $root.commonmodule.DeviceStatus.toObject(message.deviceStatus, options);
            return object;
        };

        /**
         * Converts this SwitchStatus to JSON.
         * @function toJSON
         * @memberof switchmodule.SwitchStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchStatus;
    })();

    switchmodule.SwitchStatusProfile = (function() {

        /**
         * Properties of a SwitchStatusProfile.
         * @memberof switchmodule
         * @interface ISwitchStatusProfile
         * @property {commonmodule.IStatusMessageInfo|null} [statusMessageInfo] SwitchStatusProfile statusMessageInfo
         * @property {commonmodule.IIED|null} [ied] SwitchStatusProfile ied
         * @property {switchmodule.IProtectedSwitch|null} [protectedSwitch] SwitchStatusProfile protectedSwitch
         * @property {switchmodule.ISwitchStatus|null} [switchStatus] SwitchStatusProfile switchStatus
         */

        /**
         * Constructs a new SwitchStatusProfile.
         * @memberof switchmodule
         * @classdesc Represents a SwitchStatusProfile.
         * @implements ISwitchStatusProfile
         * @constructor
         * @param {switchmodule.ISwitchStatusProfile=} [properties] Properties to set
         */
        function SwitchStatusProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchStatusProfile statusMessageInfo.
         * @member {commonmodule.IStatusMessageInfo|null|undefined} statusMessageInfo
         * @memberof switchmodule.SwitchStatusProfile
         * @instance
         */
        SwitchStatusProfile.prototype.statusMessageInfo = null;

        /**
         * SwitchStatusProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof switchmodule.SwitchStatusProfile
         * @instance
         */
        SwitchStatusProfile.prototype.ied = null;

        /**
         * SwitchStatusProfile protectedSwitch.
         * @member {switchmodule.IProtectedSwitch|null|undefined} protectedSwitch
         * @memberof switchmodule.SwitchStatusProfile
         * @instance
         */
        SwitchStatusProfile.prototype.protectedSwitch = null;

        /**
         * SwitchStatusProfile switchStatus.
         * @member {switchmodule.ISwitchStatus|null|undefined} switchStatus
         * @memberof switchmodule.SwitchStatusProfile
         * @instance
         */
        SwitchStatusProfile.prototype.switchStatus = null;

        /**
         * Creates a new SwitchStatusProfile instance using the specified properties.
         * @function create
         * @memberof switchmodule.SwitchStatusProfile
         * @static
         * @param {switchmodule.ISwitchStatusProfile=} [properties] Properties to set
         * @returns {switchmodule.SwitchStatusProfile} SwitchStatusProfile instance
         */
        SwitchStatusProfile.create = function create(properties) {
            return new SwitchStatusProfile(properties);
        };

        /**
         * Encodes the specified SwitchStatusProfile message. Does not implicitly {@link switchmodule.SwitchStatusProfile.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.SwitchStatusProfile
         * @static
         * @param {switchmodule.ISwitchStatusProfile} message SwitchStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchStatusProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusMessageInfo != null && Object.hasOwnProperty.call(message, "statusMessageInfo"))
                $root.commonmodule.StatusMessageInfo.encode(message.statusMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.protectedSwitch != null && Object.hasOwnProperty.call(message, "protectedSwitch"))
                $root.switchmodule.ProtectedSwitch.encode(message.protectedSwitch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.switchStatus != null && Object.hasOwnProperty.call(message, "switchStatus"))
                $root.switchmodule.SwitchStatus.encode(message.switchStatus, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchStatusProfile message, length delimited. Does not implicitly {@link switchmodule.SwitchStatusProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.SwitchStatusProfile
         * @static
         * @param {switchmodule.ISwitchStatusProfile} message SwitchStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchStatusProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchStatusProfile message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.SwitchStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.SwitchStatusProfile} SwitchStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchStatusProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.SwitchStatusProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.protectedSwitch = $root.switchmodule.ProtectedSwitch.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.switchStatus = $root.switchmodule.SwitchStatus.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchStatusProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.SwitchStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.SwitchStatusProfile} SwitchStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchStatusProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchStatusProfile message.
         * @function verify
         * @memberof switchmodule.SwitchStatusProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchStatusProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo")) {
                var error = $root.commonmodule.StatusMessageInfo.verify(message.statusMessageInfo);
                if (error)
                    return "statusMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.protectedSwitch != null && message.hasOwnProperty("protectedSwitch")) {
                var error = $root.switchmodule.ProtectedSwitch.verify(message.protectedSwitch);
                if (error)
                    return "protectedSwitch." + error;
            }
            if (message.switchStatus != null && message.hasOwnProperty("switchStatus")) {
                var error = $root.switchmodule.SwitchStatus.verify(message.switchStatus);
                if (error)
                    return "switchStatus." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchStatusProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.SwitchStatusProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.SwitchStatusProfile} SwitchStatusProfile
         */
        SwitchStatusProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.SwitchStatusProfile)
                return object;
            var message = new $root.switchmodule.SwitchStatusProfile();
            if (object.statusMessageInfo != null) {
                if (typeof object.statusMessageInfo !== "object")
                    throw TypeError(".switchmodule.SwitchStatusProfile.statusMessageInfo: object expected");
                message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.fromObject(object.statusMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".switchmodule.SwitchStatusProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.protectedSwitch != null) {
                if (typeof object.protectedSwitch !== "object")
                    throw TypeError(".switchmodule.SwitchStatusProfile.protectedSwitch: object expected");
                message.protectedSwitch = $root.switchmodule.ProtectedSwitch.fromObject(object.protectedSwitch);
            }
            if (object.switchStatus != null) {
                if (typeof object.switchStatus !== "object")
                    throw TypeError(".switchmodule.SwitchStatusProfile.switchStatus: object expected");
                message.switchStatus = $root.switchmodule.SwitchStatus.fromObject(object.switchStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchStatusProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.SwitchStatusProfile
         * @static
         * @param {switchmodule.SwitchStatusProfile} message SwitchStatusProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchStatusProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusMessageInfo = null;
                object.ied = null;
                object.protectedSwitch = null;
                object.switchStatus = null;
            }
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo"))
                object.statusMessageInfo = $root.commonmodule.StatusMessageInfo.toObject(message.statusMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.protectedSwitch != null && message.hasOwnProperty("protectedSwitch"))
                object.protectedSwitch = $root.switchmodule.ProtectedSwitch.toObject(message.protectedSwitch, options);
            if (message.switchStatus != null && message.hasOwnProperty("switchStatus"))
                object.switchStatus = $root.switchmodule.SwitchStatus.toObject(message.switchStatus, options);
            return object;
        };

        /**
         * Converts this SwitchStatusProfile to JSON.
         * @function toJSON
         * @memberof switchmodule.SwitchStatusProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchStatusProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchStatusProfile;
    })();

    switchmodule.SwitchControlFSCC = (function() {

        /**
         * Properties of a SwitchControlFSCC.
         * @memberof switchmodule
         * @interface ISwitchControlFSCC
         * @property {commonmodule.ILogicalNodeForControl|null} [logicalNodeForControl] SwitchControlFSCC logicalNodeForControl
         * @property {commonmodule.ISwitchControlScheduleFSCH|null} [switchControlScheduleFSCH] SwitchControlFSCC switchControlScheduleFSCH
         */

        /**
         * Constructs a new SwitchControlFSCC.
         * @memberof switchmodule
         * @classdesc Represents a SwitchControlFSCC.
         * @implements ISwitchControlFSCC
         * @constructor
         * @param {switchmodule.ISwitchControlFSCC=} [properties] Properties to set
         */
        function SwitchControlFSCC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchControlFSCC logicalNodeForControl.
         * @member {commonmodule.ILogicalNodeForControl|null|undefined} logicalNodeForControl
         * @memberof switchmodule.SwitchControlFSCC
         * @instance
         */
        SwitchControlFSCC.prototype.logicalNodeForControl = null;

        /**
         * SwitchControlFSCC switchControlScheduleFSCH.
         * @member {commonmodule.ISwitchControlScheduleFSCH|null|undefined} switchControlScheduleFSCH
         * @memberof switchmodule.SwitchControlFSCC
         * @instance
         */
        SwitchControlFSCC.prototype.switchControlScheduleFSCH = null;

        /**
         * Creates a new SwitchControlFSCC instance using the specified properties.
         * @function create
         * @memberof switchmodule.SwitchControlFSCC
         * @static
         * @param {switchmodule.ISwitchControlFSCC=} [properties] Properties to set
         * @returns {switchmodule.SwitchControlFSCC} SwitchControlFSCC instance
         */
        SwitchControlFSCC.create = function create(properties) {
            return new SwitchControlFSCC(properties);
        };

        /**
         * Encodes the specified SwitchControlFSCC message. Does not implicitly {@link switchmodule.SwitchControlFSCC.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.SwitchControlFSCC
         * @static
         * @param {switchmodule.ISwitchControlFSCC} message SwitchControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchControlFSCC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForControl != null && Object.hasOwnProperty.call(message, "logicalNodeForControl"))
                $root.commonmodule.LogicalNodeForControl.encode(message.logicalNodeForControl, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.switchControlScheduleFSCH != null && Object.hasOwnProperty.call(message, "switchControlScheduleFSCH"))
                $root.commonmodule.SwitchControlScheduleFSCH.encode(message.switchControlScheduleFSCH, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchControlFSCC message, length delimited. Does not implicitly {@link switchmodule.SwitchControlFSCC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.SwitchControlFSCC
         * @static
         * @param {switchmodule.ISwitchControlFSCC} message SwitchControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchControlFSCC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchControlFSCC message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.SwitchControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.SwitchControlFSCC} SwitchControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchControlFSCC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.SwitchControlFSCC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.switchControlScheduleFSCH = $root.commonmodule.SwitchControlScheduleFSCH.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchControlFSCC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.SwitchControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.SwitchControlFSCC} SwitchControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchControlFSCC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchControlFSCC message.
         * @function verify
         * @memberof switchmodule.SwitchControlFSCC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchControlFSCC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl")) {
                var error = $root.commonmodule.LogicalNodeForControl.verify(message.logicalNodeForControl);
                if (error)
                    return "logicalNodeForControl." + error;
            }
            if (message.switchControlScheduleFSCH != null && message.hasOwnProperty("switchControlScheduleFSCH")) {
                var error = $root.commonmodule.SwitchControlScheduleFSCH.verify(message.switchControlScheduleFSCH);
                if (error)
                    return "switchControlScheduleFSCH." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchControlFSCC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.SwitchControlFSCC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.SwitchControlFSCC} SwitchControlFSCC
         */
        SwitchControlFSCC.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.SwitchControlFSCC)
                return object;
            var message = new $root.switchmodule.SwitchControlFSCC();
            if (object.logicalNodeForControl != null) {
                if (typeof object.logicalNodeForControl !== "object")
                    throw TypeError(".switchmodule.SwitchControlFSCC.logicalNodeForControl: object expected");
                message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.fromObject(object.logicalNodeForControl);
            }
            if (object.switchControlScheduleFSCH != null) {
                if (typeof object.switchControlScheduleFSCH !== "object")
                    throw TypeError(".switchmodule.SwitchControlFSCC.switchControlScheduleFSCH: object expected");
                message.switchControlScheduleFSCH = $root.commonmodule.SwitchControlScheduleFSCH.fromObject(object.switchControlScheduleFSCH);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchControlFSCC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.SwitchControlFSCC
         * @static
         * @param {switchmodule.SwitchControlFSCC} message SwitchControlFSCC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchControlFSCC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForControl = null;
                object.switchControlScheduleFSCH = null;
            }
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl"))
                object.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.toObject(message.logicalNodeForControl, options);
            if (message.switchControlScheduleFSCH != null && message.hasOwnProperty("switchControlScheduleFSCH"))
                object.switchControlScheduleFSCH = $root.commonmodule.SwitchControlScheduleFSCH.toObject(message.switchControlScheduleFSCH, options);
            return object;
        };

        /**
         * Converts this SwitchControlFSCC to JSON.
         * @function toJSON
         * @memberof switchmodule.SwitchControlFSCC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchControlFSCC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchControlFSCC;
    })();

    switchmodule.SwitchControl = (function() {

        /**
         * Properties of a SwitchControl.
         * @memberof switchmodule
         * @interface ISwitchControl
         * @property {commonmodule.IControlValue|null} [controlValue] SwitchControl controlValue
         * @property {commonmodule.ICheckConditions|null} [check] SwitchControl check
         * @property {switchmodule.ISwitchControlFSCC|null} [SwitchControlFSCC] SwitchControl SwitchControlFSCC
         */

        /**
         * Constructs a new SwitchControl.
         * @memberof switchmodule
         * @classdesc Represents a SwitchControl.
         * @implements ISwitchControl
         * @constructor
         * @param {switchmodule.ISwitchControl=} [properties] Properties to set
         */
        function SwitchControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchControl controlValue.
         * @member {commonmodule.IControlValue|null|undefined} controlValue
         * @memberof switchmodule.SwitchControl
         * @instance
         */
        SwitchControl.prototype.controlValue = null;

        /**
         * SwitchControl check.
         * @member {commonmodule.ICheckConditions|null|undefined} check
         * @memberof switchmodule.SwitchControl
         * @instance
         */
        SwitchControl.prototype.check = null;

        /**
         * SwitchControl SwitchControlFSCC.
         * @member {switchmodule.ISwitchControlFSCC|null|undefined} SwitchControlFSCC
         * @memberof switchmodule.SwitchControl
         * @instance
         */
        SwitchControl.prototype.SwitchControlFSCC = null;

        /**
         * Creates a new SwitchControl instance using the specified properties.
         * @function create
         * @memberof switchmodule.SwitchControl
         * @static
         * @param {switchmodule.ISwitchControl=} [properties] Properties to set
         * @returns {switchmodule.SwitchControl} SwitchControl instance
         */
        SwitchControl.create = function create(properties) {
            return new SwitchControl(properties);
        };

        /**
         * Encodes the specified SwitchControl message. Does not implicitly {@link switchmodule.SwitchControl.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.SwitchControl
         * @static
         * @param {switchmodule.ISwitchControl} message SwitchControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlValue != null && Object.hasOwnProperty.call(message, "controlValue"))
                $root.commonmodule.ControlValue.encode(message.controlValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.check != null && Object.hasOwnProperty.call(message, "check"))
                $root.commonmodule.CheckConditions.encode(message.check, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.SwitchControlFSCC != null && Object.hasOwnProperty.call(message, "SwitchControlFSCC"))
                $root.switchmodule.SwitchControlFSCC.encode(message.SwitchControlFSCC, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchControl message, length delimited. Does not implicitly {@link switchmodule.SwitchControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.SwitchControl
         * @static
         * @param {switchmodule.ISwitchControl} message SwitchControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchControl message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.SwitchControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.SwitchControl} SwitchControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.SwitchControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlValue = $root.commonmodule.ControlValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.check = $root.commonmodule.CheckConditions.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.SwitchControlFSCC = $root.switchmodule.SwitchControlFSCC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.SwitchControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.SwitchControl} SwitchControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchControl message.
         * @function verify
         * @memberof switchmodule.SwitchControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlValue != null && message.hasOwnProperty("controlValue")) {
                var error = $root.commonmodule.ControlValue.verify(message.controlValue);
                if (error)
                    return "controlValue." + error;
            }
            if (message.check != null && message.hasOwnProperty("check")) {
                var error = $root.commonmodule.CheckConditions.verify(message.check);
                if (error)
                    return "check." + error;
            }
            if (message.SwitchControlFSCC != null && message.hasOwnProperty("SwitchControlFSCC")) {
                var error = $root.switchmodule.SwitchControlFSCC.verify(message.SwitchControlFSCC);
                if (error)
                    return "SwitchControlFSCC." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.SwitchControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.SwitchControl} SwitchControl
         */
        SwitchControl.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.SwitchControl)
                return object;
            var message = new $root.switchmodule.SwitchControl();
            if (object.controlValue != null) {
                if (typeof object.controlValue !== "object")
                    throw TypeError(".switchmodule.SwitchControl.controlValue: object expected");
                message.controlValue = $root.commonmodule.ControlValue.fromObject(object.controlValue);
            }
            if (object.check != null) {
                if (typeof object.check !== "object")
                    throw TypeError(".switchmodule.SwitchControl.check: object expected");
                message.check = $root.commonmodule.CheckConditions.fromObject(object.check);
            }
            if (object.SwitchControlFSCC != null) {
                if (typeof object.SwitchControlFSCC !== "object")
                    throw TypeError(".switchmodule.SwitchControl.SwitchControlFSCC: object expected");
                message.SwitchControlFSCC = $root.switchmodule.SwitchControlFSCC.fromObject(object.SwitchControlFSCC);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.SwitchControl
         * @static
         * @param {switchmodule.SwitchControl} message SwitchControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlValue = null;
                object.check = null;
                object.SwitchControlFSCC = null;
            }
            if (message.controlValue != null && message.hasOwnProperty("controlValue"))
                object.controlValue = $root.commonmodule.ControlValue.toObject(message.controlValue, options);
            if (message.check != null && message.hasOwnProperty("check"))
                object.check = $root.commonmodule.CheckConditions.toObject(message.check, options);
            if (message.SwitchControlFSCC != null && message.hasOwnProperty("SwitchControlFSCC"))
                object.SwitchControlFSCC = $root.switchmodule.SwitchControlFSCC.toObject(message.SwitchControlFSCC, options);
            return object;
        };

        /**
         * Converts this SwitchControl to JSON.
         * @function toJSON
         * @memberof switchmodule.SwitchControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchControl;
    })();

    switchmodule.SwitchControlProfile = (function() {

        /**
         * Properties of a SwitchControlProfile.
         * @memberof switchmodule
         * @interface ISwitchControlProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] SwitchControlProfile controlMessageInfo
         * @property {commonmodule.IIED|null} [ied] SwitchControlProfile ied
         * @property {switchmodule.IProtectedSwitch|null} [protectedSwitch] SwitchControlProfile protectedSwitch
         * @property {switchmodule.ISwitchControl|null} [switchControl] SwitchControlProfile switchControl
         */

        /**
         * Constructs a new SwitchControlProfile.
         * @memberof switchmodule
         * @classdesc Represents a SwitchControlProfile.
         * @implements ISwitchControlProfile
         * @constructor
         * @param {switchmodule.ISwitchControlProfile=} [properties] Properties to set
         */
        function SwitchControlProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SwitchControlProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof switchmodule.SwitchControlProfile
         * @instance
         */
        SwitchControlProfile.prototype.controlMessageInfo = null;

        /**
         * SwitchControlProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof switchmodule.SwitchControlProfile
         * @instance
         */
        SwitchControlProfile.prototype.ied = null;

        /**
         * SwitchControlProfile protectedSwitch.
         * @member {switchmodule.IProtectedSwitch|null|undefined} protectedSwitch
         * @memberof switchmodule.SwitchControlProfile
         * @instance
         */
        SwitchControlProfile.prototype.protectedSwitch = null;

        /**
         * SwitchControlProfile switchControl.
         * @member {switchmodule.ISwitchControl|null|undefined} switchControl
         * @memberof switchmodule.SwitchControlProfile
         * @instance
         */
        SwitchControlProfile.prototype.switchControl = null;

        /**
         * Creates a new SwitchControlProfile instance using the specified properties.
         * @function create
         * @memberof switchmodule.SwitchControlProfile
         * @static
         * @param {switchmodule.ISwitchControlProfile=} [properties] Properties to set
         * @returns {switchmodule.SwitchControlProfile} SwitchControlProfile instance
         */
        SwitchControlProfile.create = function create(properties) {
            return new SwitchControlProfile(properties);
        };

        /**
         * Encodes the specified SwitchControlProfile message. Does not implicitly {@link switchmodule.SwitchControlProfile.verify|verify} messages.
         * @function encode
         * @memberof switchmodule.SwitchControlProfile
         * @static
         * @param {switchmodule.ISwitchControlProfile} message SwitchControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchControlProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.protectedSwitch != null && Object.hasOwnProperty.call(message, "protectedSwitch"))
                $root.switchmodule.ProtectedSwitch.encode(message.protectedSwitch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.switchControl != null && Object.hasOwnProperty.call(message, "switchControl"))
                $root.switchmodule.SwitchControl.encode(message.switchControl, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SwitchControlProfile message, length delimited. Does not implicitly {@link switchmodule.SwitchControlProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof switchmodule.SwitchControlProfile
         * @static
         * @param {switchmodule.ISwitchControlProfile} message SwitchControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SwitchControlProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SwitchControlProfile message from the specified reader or buffer.
         * @function decode
         * @memberof switchmodule.SwitchControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {switchmodule.SwitchControlProfile} SwitchControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchControlProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.switchmodule.SwitchControlProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.protectedSwitch = $root.switchmodule.ProtectedSwitch.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.switchControl = $root.switchmodule.SwitchControl.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SwitchControlProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof switchmodule.SwitchControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {switchmodule.SwitchControlProfile} SwitchControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SwitchControlProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SwitchControlProfile message.
         * @function verify
         * @memberof switchmodule.SwitchControlProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SwitchControlProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.protectedSwitch != null && message.hasOwnProperty("protectedSwitch")) {
                var error = $root.switchmodule.ProtectedSwitch.verify(message.protectedSwitch);
                if (error)
                    return "protectedSwitch." + error;
            }
            if (message.switchControl != null && message.hasOwnProperty("switchControl")) {
                var error = $root.switchmodule.SwitchControl.verify(message.switchControl);
                if (error)
                    return "switchControl." + error;
            }
            return null;
        };

        /**
         * Creates a SwitchControlProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof switchmodule.SwitchControlProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {switchmodule.SwitchControlProfile} SwitchControlProfile
         */
        SwitchControlProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.switchmodule.SwitchControlProfile)
                return object;
            var message = new $root.switchmodule.SwitchControlProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".switchmodule.SwitchControlProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".switchmodule.SwitchControlProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.protectedSwitch != null) {
                if (typeof object.protectedSwitch !== "object")
                    throw TypeError(".switchmodule.SwitchControlProfile.protectedSwitch: object expected");
                message.protectedSwitch = $root.switchmodule.ProtectedSwitch.fromObject(object.protectedSwitch);
            }
            if (object.switchControl != null) {
                if (typeof object.switchControl !== "object")
                    throw TypeError(".switchmodule.SwitchControlProfile.switchControl: object expected");
                message.switchControl = $root.switchmodule.SwitchControl.fromObject(object.switchControl);
            }
            return message;
        };

        /**
         * Creates a plain object from a SwitchControlProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof switchmodule.SwitchControlProfile
         * @static
         * @param {switchmodule.SwitchControlProfile} message SwitchControlProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SwitchControlProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.ied = null;
                object.protectedSwitch = null;
                object.switchControl = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.protectedSwitch != null && message.hasOwnProperty("protectedSwitch"))
                object.protectedSwitch = $root.switchmodule.ProtectedSwitch.toObject(message.protectedSwitch, options);
            if (message.switchControl != null && message.hasOwnProperty("switchControl"))
                object.switchControl = $root.switchmodule.SwitchControl.toObject(message.switchControl, options);
            return object;
        };

        /**
         * Converts this SwitchControlProfile to JSON.
         * @function toJSON
         * @memberof switchmodule.SwitchControlProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SwitchControlProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SwitchControlProfile;
    })();

    return switchmodule;
})();

$root.breakermodule = (function() {

    /**
     * Namespace breakermodule.
     * @exports breakermodule
     * @namespace
     */
    var breakermodule = {};

    breakermodule.BreakerDiscreteControlXCBR = (function() {

        /**
         * Properties of a BreakerDiscreteControlXCBR.
         * @memberof breakermodule
         * @interface IBreakerDiscreteControlXCBR
         * @property {commonmodule.ILogicalNodeForControl|null} [logicalNodeForControl] BreakerDiscreteControlXCBR logicalNodeForControl
         * @property {commonmodule.IControlDPC|null} [Pos] BreakerDiscreteControlXCBR Pos
         */

        /**
         * Constructs a new BreakerDiscreteControlXCBR.
         * @memberof breakermodule
         * @classdesc Represents a BreakerDiscreteControlXCBR.
         * @implements IBreakerDiscreteControlXCBR
         * @constructor
         * @param {breakermodule.IBreakerDiscreteControlXCBR=} [properties] Properties to set
         */
        function BreakerDiscreteControlXCBR(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BreakerDiscreteControlXCBR logicalNodeForControl.
         * @member {commonmodule.ILogicalNodeForControl|null|undefined} logicalNodeForControl
         * @memberof breakermodule.BreakerDiscreteControlXCBR
         * @instance
         */
        BreakerDiscreteControlXCBR.prototype.logicalNodeForControl = null;

        /**
         * BreakerDiscreteControlXCBR Pos.
         * @member {commonmodule.IControlDPC|null|undefined} Pos
         * @memberof breakermodule.BreakerDiscreteControlXCBR
         * @instance
         */
        BreakerDiscreteControlXCBR.prototype.Pos = null;

        /**
         * Creates a new BreakerDiscreteControlXCBR instance using the specified properties.
         * @function create
         * @memberof breakermodule.BreakerDiscreteControlXCBR
         * @static
         * @param {breakermodule.IBreakerDiscreteControlXCBR=} [properties] Properties to set
         * @returns {breakermodule.BreakerDiscreteControlXCBR} BreakerDiscreteControlXCBR instance
         */
        BreakerDiscreteControlXCBR.create = function create(properties) {
            return new BreakerDiscreteControlXCBR(properties);
        };

        /**
         * Encodes the specified BreakerDiscreteControlXCBR message. Does not implicitly {@link breakermodule.BreakerDiscreteControlXCBR.verify|verify} messages.
         * @function encode
         * @memberof breakermodule.BreakerDiscreteControlXCBR
         * @static
         * @param {breakermodule.IBreakerDiscreteControlXCBR} message BreakerDiscreteControlXCBR message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerDiscreteControlXCBR.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForControl != null && Object.hasOwnProperty.call(message, "logicalNodeForControl"))
                $root.commonmodule.LogicalNodeForControl.encode(message.logicalNodeForControl, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.Pos != null && Object.hasOwnProperty.call(message, "Pos"))
                $root.commonmodule.ControlDPC.encode(message.Pos, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BreakerDiscreteControlXCBR message, length delimited. Does not implicitly {@link breakermodule.BreakerDiscreteControlXCBR.verify|verify} messages.
         * @function encodeDelimited
         * @memberof breakermodule.BreakerDiscreteControlXCBR
         * @static
         * @param {breakermodule.IBreakerDiscreteControlXCBR} message BreakerDiscreteControlXCBR message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerDiscreteControlXCBR.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BreakerDiscreteControlXCBR message from the specified reader or buffer.
         * @function decode
         * @memberof breakermodule.BreakerDiscreteControlXCBR
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {breakermodule.BreakerDiscreteControlXCBR} BreakerDiscreteControlXCBR
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerDiscreteControlXCBR.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.breakermodule.BreakerDiscreteControlXCBR();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.Pos = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BreakerDiscreteControlXCBR message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof breakermodule.BreakerDiscreteControlXCBR
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {breakermodule.BreakerDiscreteControlXCBR} BreakerDiscreteControlXCBR
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerDiscreteControlXCBR.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BreakerDiscreteControlXCBR message.
         * @function verify
         * @memberof breakermodule.BreakerDiscreteControlXCBR
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BreakerDiscreteControlXCBR.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl")) {
                var error = $root.commonmodule.LogicalNodeForControl.verify(message.logicalNodeForControl);
                if (error)
                    return "logicalNodeForControl." + error;
            }
            if (message.Pos != null && message.hasOwnProperty("Pos")) {
                var error = $root.commonmodule.ControlDPC.verify(message.Pos);
                if (error)
                    return "Pos." + error;
            }
            return null;
        };

        /**
         * Creates a BreakerDiscreteControlXCBR message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof breakermodule.BreakerDiscreteControlXCBR
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {breakermodule.BreakerDiscreteControlXCBR} BreakerDiscreteControlXCBR
         */
        BreakerDiscreteControlXCBR.fromObject = function fromObject(object) {
            if (object instanceof $root.breakermodule.BreakerDiscreteControlXCBR)
                return object;
            var message = new $root.breakermodule.BreakerDiscreteControlXCBR();
            if (object.logicalNodeForControl != null) {
                if (typeof object.logicalNodeForControl !== "object")
                    throw TypeError(".breakermodule.BreakerDiscreteControlXCBR.logicalNodeForControl: object expected");
                message.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.fromObject(object.logicalNodeForControl);
            }
            if (object.Pos != null) {
                if (typeof object.Pos !== "object")
                    throw TypeError(".breakermodule.BreakerDiscreteControlXCBR.Pos: object expected");
                message.Pos = $root.commonmodule.ControlDPC.fromObject(object.Pos);
            }
            return message;
        };

        /**
         * Creates a plain object from a BreakerDiscreteControlXCBR message. Also converts values to other types if specified.
         * @function toObject
         * @memberof breakermodule.BreakerDiscreteControlXCBR
         * @static
         * @param {breakermodule.BreakerDiscreteControlXCBR} message BreakerDiscreteControlXCBR
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BreakerDiscreteControlXCBR.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForControl = null;
                object.Pos = null;
            }
            if (message.logicalNodeForControl != null && message.hasOwnProperty("logicalNodeForControl"))
                object.logicalNodeForControl = $root.commonmodule.LogicalNodeForControl.toObject(message.logicalNodeForControl, options);
            if (message.Pos != null && message.hasOwnProperty("Pos"))
                object.Pos = $root.commonmodule.ControlDPC.toObject(message.Pos, options);
            return object;
        };

        /**
         * Converts this BreakerDiscreteControlXCBR to JSON.
         * @function toJSON
         * @memberof breakermodule.BreakerDiscreteControlXCBR
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BreakerDiscreteControlXCBR.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BreakerDiscreteControlXCBR;
    })();

    breakermodule.BreakerDiscreteControl = (function() {

        /**
         * Properties of a BreakerDiscreteControl.
         * @memberof breakermodule
         * @interface IBreakerDiscreteControl
         * @property {commonmodule.IControlValue|null} [controlValue] BreakerDiscreteControl controlValue
         * @property {commonmodule.ICheckConditions|null} [check] BreakerDiscreteControl check
         * @property {breakermodule.IBreakerDiscreteControlXCBR|null} [breakerDiscreteControlXCBR] BreakerDiscreteControl breakerDiscreteControlXCBR
         * @property {commonmodule.IDeviceControl|null} [deviceControl] BreakerDiscreteControl deviceControl
         */

        /**
         * Constructs a new BreakerDiscreteControl.
         * @memberof breakermodule
         * @classdesc Represents a BreakerDiscreteControl.
         * @implements IBreakerDiscreteControl
         * @constructor
         * @param {breakermodule.IBreakerDiscreteControl=} [properties] Properties to set
         */
        function BreakerDiscreteControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BreakerDiscreteControl controlValue.
         * @member {commonmodule.IControlValue|null|undefined} controlValue
         * @memberof breakermodule.BreakerDiscreteControl
         * @instance
         */
        BreakerDiscreteControl.prototype.controlValue = null;

        /**
         * BreakerDiscreteControl check.
         * @member {commonmodule.ICheckConditions|null|undefined} check
         * @memberof breakermodule.BreakerDiscreteControl
         * @instance
         */
        BreakerDiscreteControl.prototype.check = null;

        /**
         * BreakerDiscreteControl breakerDiscreteControlXCBR.
         * @member {breakermodule.IBreakerDiscreteControlXCBR|null|undefined} breakerDiscreteControlXCBR
         * @memberof breakermodule.BreakerDiscreteControl
         * @instance
         */
        BreakerDiscreteControl.prototype.breakerDiscreteControlXCBR = null;

        /**
         * BreakerDiscreteControl deviceControl.
         * @member {commonmodule.IDeviceControl|null|undefined} deviceControl
         * @memberof breakermodule.BreakerDiscreteControl
         * @instance
         */
        BreakerDiscreteControl.prototype.deviceControl = null;

        /**
         * Creates a new BreakerDiscreteControl instance using the specified properties.
         * @function create
         * @memberof breakermodule.BreakerDiscreteControl
         * @static
         * @param {breakermodule.IBreakerDiscreteControl=} [properties] Properties to set
         * @returns {breakermodule.BreakerDiscreteControl} BreakerDiscreteControl instance
         */
        BreakerDiscreteControl.create = function create(properties) {
            return new BreakerDiscreteControl(properties);
        };

        /**
         * Encodes the specified BreakerDiscreteControl message. Does not implicitly {@link breakermodule.BreakerDiscreteControl.verify|verify} messages.
         * @function encode
         * @memberof breakermodule.BreakerDiscreteControl
         * @static
         * @param {breakermodule.IBreakerDiscreteControl} message BreakerDiscreteControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerDiscreteControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlValue != null && Object.hasOwnProperty.call(message, "controlValue"))
                $root.commonmodule.ControlValue.encode(message.controlValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.check != null && Object.hasOwnProperty.call(message, "check"))
                $root.commonmodule.CheckConditions.encode(message.check, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.breakerDiscreteControlXCBR != null && Object.hasOwnProperty.call(message, "breakerDiscreteControlXCBR"))
                $root.breakermodule.BreakerDiscreteControlXCBR.encode(message.breakerDiscreteControlXCBR, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.deviceControl != null && Object.hasOwnProperty.call(message, "deviceControl"))
                $root.commonmodule.DeviceControl.encode(message.deviceControl, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BreakerDiscreteControl message, length delimited. Does not implicitly {@link breakermodule.BreakerDiscreteControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof breakermodule.BreakerDiscreteControl
         * @static
         * @param {breakermodule.IBreakerDiscreteControl} message BreakerDiscreteControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerDiscreteControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BreakerDiscreteControl message from the specified reader or buffer.
         * @function decode
         * @memberof breakermodule.BreakerDiscreteControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {breakermodule.BreakerDiscreteControl} BreakerDiscreteControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerDiscreteControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.breakermodule.BreakerDiscreteControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlValue = $root.commonmodule.ControlValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.check = $root.commonmodule.CheckConditions.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.breakerDiscreteControlXCBR = $root.breakermodule.BreakerDiscreteControlXCBR.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.deviceControl = $root.commonmodule.DeviceControl.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BreakerDiscreteControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof breakermodule.BreakerDiscreteControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {breakermodule.BreakerDiscreteControl} BreakerDiscreteControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerDiscreteControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BreakerDiscreteControl message.
         * @function verify
         * @memberof breakermodule.BreakerDiscreteControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BreakerDiscreteControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlValue != null && message.hasOwnProperty("controlValue")) {
                var error = $root.commonmodule.ControlValue.verify(message.controlValue);
                if (error)
                    return "controlValue." + error;
            }
            if (message.check != null && message.hasOwnProperty("check")) {
                var error = $root.commonmodule.CheckConditions.verify(message.check);
                if (error)
                    return "check." + error;
            }
            if (message.breakerDiscreteControlXCBR != null && message.hasOwnProperty("breakerDiscreteControlXCBR")) {
                var error = $root.breakermodule.BreakerDiscreteControlXCBR.verify(message.breakerDiscreteControlXCBR);
                if (error)
                    return "breakerDiscreteControlXCBR." + error;
            }
            if (message.deviceControl != null && message.hasOwnProperty("deviceControl")) {
                var error = $root.commonmodule.DeviceControl.verify(message.deviceControl);
                if (error)
                    return "deviceControl." + error;
            }
            return null;
        };

        /**
         * Creates a BreakerDiscreteControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof breakermodule.BreakerDiscreteControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {breakermodule.BreakerDiscreteControl} BreakerDiscreteControl
         */
        BreakerDiscreteControl.fromObject = function fromObject(object) {
            if (object instanceof $root.breakermodule.BreakerDiscreteControl)
                return object;
            var message = new $root.breakermodule.BreakerDiscreteControl();
            if (object.controlValue != null) {
                if (typeof object.controlValue !== "object")
                    throw TypeError(".breakermodule.BreakerDiscreteControl.controlValue: object expected");
                message.controlValue = $root.commonmodule.ControlValue.fromObject(object.controlValue);
            }
            if (object.check != null) {
                if (typeof object.check !== "object")
                    throw TypeError(".breakermodule.BreakerDiscreteControl.check: object expected");
                message.check = $root.commonmodule.CheckConditions.fromObject(object.check);
            }
            if (object.breakerDiscreteControlXCBR != null) {
                if (typeof object.breakerDiscreteControlXCBR !== "object")
                    throw TypeError(".breakermodule.BreakerDiscreteControl.breakerDiscreteControlXCBR: object expected");
                message.breakerDiscreteControlXCBR = $root.breakermodule.BreakerDiscreteControlXCBR.fromObject(object.breakerDiscreteControlXCBR);
            }
            if (object.deviceControl != null) {
                if (typeof object.deviceControl !== "object")
                    throw TypeError(".breakermodule.BreakerDiscreteControl.deviceControl: object expected");
                message.deviceControl = $root.commonmodule.DeviceControl.fromObject(object.deviceControl);
            }
            return message;
        };

        /**
         * Creates a plain object from a BreakerDiscreteControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof breakermodule.BreakerDiscreteControl
         * @static
         * @param {breakermodule.BreakerDiscreteControl} message BreakerDiscreteControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BreakerDiscreteControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlValue = null;
                object.check = null;
                object.breakerDiscreteControlXCBR = null;
                object.deviceControl = null;
            }
            if (message.controlValue != null && message.hasOwnProperty("controlValue"))
                object.controlValue = $root.commonmodule.ControlValue.toObject(message.controlValue, options);
            if (message.check != null && message.hasOwnProperty("check"))
                object.check = $root.commonmodule.CheckConditions.toObject(message.check, options);
            if (message.breakerDiscreteControlXCBR != null && message.hasOwnProperty("breakerDiscreteControlXCBR"))
                object.breakerDiscreteControlXCBR = $root.breakermodule.BreakerDiscreteControlXCBR.toObject(message.breakerDiscreteControlXCBR, options);
            if (message.deviceControl != null && message.hasOwnProperty("deviceControl"))
                object.deviceControl = $root.commonmodule.DeviceControl.toObject(message.deviceControl, options);
            return object;
        };

        /**
         * Converts this BreakerDiscreteControl to JSON.
         * @function toJSON
         * @memberof breakermodule.BreakerDiscreteControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BreakerDiscreteControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BreakerDiscreteControl;
    })();

    breakermodule.Breaker = (function() {

        /**
         * Properties of a Breaker.
         * @memberof breakermodule
         * @interface IBreaker
         * @property {commonmodule.IConductingEquipment|null} [conductingEquipment] Breaker conductingEquipment
         */

        /**
         * Constructs a new Breaker.
         * @memberof breakermodule
         * @classdesc Represents a Breaker.
         * @implements IBreaker
         * @constructor
         * @param {breakermodule.IBreaker=} [properties] Properties to set
         */
        function Breaker(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Breaker conductingEquipment.
         * @member {commonmodule.IConductingEquipment|null|undefined} conductingEquipment
         * @memberof breakermodule.Breaker
         * @instance
         */
        Breaker.prototype.conductingEquipment = null;

        /**
         * Creates a new Breaker instance using the specified properties.
         * @function create
         * @memberof breakermodule.Breaker
         * @static
         * @param {breakermodule.IBreaker=} [properties] Properties to set
         * @returns {breakermodule.Breaker} Breaker instance
         */
        Breaker.create = function create(properties) {
            return new Breaker(properties);
        };

        /**
         * Encodes the specified Breaker message. Does not implicitly {@link breakermodule.Breaker.verify|verify} messages.
         * @function encode
         * @memberof breakermodule.Breaker
         * @static
         * @param {breakermodule.IBreaker} message Breaker message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Breaker.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipment != null && Object.hasOwnProperty.call(message, "conductingEquipment"))
                $root.commonmodule.ConductingEquipment.encode(message.conductingEquipment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified Breaker message, length delimited. Does not implicitly {@link breakermodule.Breaker.verify|verify} messages.
         * @function encodeDelimited
         * @memberof breakermodule.Breaker
         * @static
         * @param {breakermodule.IBreaker} message Breaker message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Breaker.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Breaker message from the specified reader or buffer.
         * @function decode
         * @memberof breakermodule.Breaker
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {breakermodule.Breaker} Breaker
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Breaker.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.breakermodule.Breaker();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipment = $root.commonmodule.ConductingEquipment.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Breaker message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof breakermodule.Breaker
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {breakermodule.Breaker} Breaker
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Breaker.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Breaker message.
         * @function verify
         * @memberof breakermodule.Breaker
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Breaker.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment")) {
                var error = $root.commonmodule.ConductingEquipment.verify(message.conductingEquipment);
                if (error)
                    return "conductingEquipment." + error;
            }
            return null;
        };

        /**
         * Creates a Breaker message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof breakermodule.Breaker
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {breakermodule.Breaker} Breaker
         */
        Breaker.fromObject = function fromObject(object) {
            if (object instanceof $root.breakermodule.Breaker)
                return object;
            var message = new $root.breakermodule.Breaker();
            if (object.conductingEquipment != null) {
                if (typeof object.conductingEquipment !== "object")
                    throw TypeError(".breakermodule.Breaker.conductingEquipment: object expected");
                message.conductingEquipment = $root.commonmodule.ConductingEquipment.fromObject(object.conductingEquipment);
            }
            return message;
        };

        /**
         * Creates a plain object from a Breaker message. Also converts values to other types if specified.
         * @function toObject
         * @memberof breakermodule.Breaker
         * @static
         * @param {breakermodule.Breaker} message Breaker
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Breaker.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.conductingEquipment = null;
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment"))
                object.conductingEquipment = $root.commonmodule.ConductingEquipment.toObject(message.conductingEquipment, options);
            return object;
        };

        /**
         * Converts this Breaker to JSON.
         * @function toJSON
         * @memberof breakermodule.Breaker
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Breaker.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Breaker;
    })();

    breakermodule.BreakerDiscreteControlProfile = (function() {

        /**
         * Properties of a BreakerDiscreteControlProfile.
         * @memberof breakermodule
         * @interface IBreakerDiscreteControlProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] BreakerDiscreteControlProfile controlMessageInfo
         * @property {breakermodule.IBreaker|null} [breaker] BreakerDiscreteControlProfile breaker
         * @property {breakermodule.IBreakerDiscreteControl|null} [breakerDiscreteControl] BreakerDiscreteControlProfile breakerDiscreteControl
         * @property {commonmodule.IIED|null} [ied] BreakerDiscreteControlProfile ied
         */

        /**
         * Constructs a new BreakerDiscreteControlProfile.
         * @memberof breakermodule
         * @classdesc Represents a BreakerDiscreteControlProfile.
         * @implements IBreakerDiscreteControlProfile
         * @constructor
         * @param {breakermodule.IBreakerDiscreteControlProfile=} [properties] Properties to set
         */
        function BreakerDiscreteControlProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BreakerDiscreteControlProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof breakermodule.BreakerDiscreteControlProfile
         * @instance
         */
        BreakerDiscreteControlProfile.prototype.controlMessageInfo = null;

        /**
         * BreakerDiscreteControlProfile breaker.
         * @member {breakermodule.IBreaker|null|undefined} breaker
         * @memberof breakermodule.BreakerDiscreteControlProfile
         * @instance
         */
        BreakerDiscreteControlProfile.prototype.breaker = null;

        /**
         * BreakerDiscreteControlProfile breakerDiscreteControl.
         * @member {breakermodule.IBreakerDiscreteControl|null|undefined} breakerDiscreteControl
         * @memberof breakermodule.BreakerDiscreteControlProfile
         * @instance
         */
        BreakerDiscreteControlProfile.prototype.breakerDiscreteControl = null;

        /**
         * BreakerDiscreteControlProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof breakermodule.BreakerDiscreteControlProfile
         * @instance
         */
        BreakerDiscreteControlProfile.prototype.ied = null;

        /**
         * Creates a new BreakerDiscreteControlProfile instance using the specified properties.
         * @function create
         * @memberof breakermodule.BreakerDiscreteControlProfile
         * @static
         * @param {breakermodule.IBreakerDiscreteControlProfile=} [properties] Properties to set
         * @returns {breakermodule.BreakerDiscreteControlProfile} BreakerDiscreteControlProfile instance
         */
        BreakerDiscreteControlProfile.create = function create(properties) {
            return new BreakerDiscreteControlProfile(properties);
        };

        /**
         * Encodes the specified BreakerDiscreteControlProfile message. Does not implicitly {@link breakermodule.BreakerDiscreteControlProfile.verify|verify} messages.
         * @function encode
         * @memberof breakermodule.BreakerDiscreteControlProfile
         * @static
         * @param {breakermodule.IBreakerDiscreteControlProfile} message BreakerDiscreteControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerDiscreteControlProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.breaker != null && Object.hasOwnProperty.call(message, "breaker"))
                $root.breakermodule.Breaker.encode(message.breaker, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.breakerDiscreteControl != null && Object.hasOwnProperty.call(message, "breakerDiscreteControl"))
                $root.breakermodule.BreakerDiscreteControl.encode(message.breakerDiscreteControl, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BreakerDiscreteControlProfile message, length delimited. Does not implicitly {@link breakermodule.BreakerDiscreteControlProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof breakermodule.BreakerDiscreteControlProfile
         * @static
         * @param {breakermodule.IBreakerDiscreteControlProfile} message BreakerDiscreteControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerDiscreteControlProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BreakerDiscreteControlProfile message from the specified reader or buffer.
         * @function decode
         * @memberof breakermodule.BreakerDiscreteControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {breakermodule.BreakerDiscreteControlProfile} BreakerDiscreteControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerDiscreteControlProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.breakermodule.BreakerDiscreteControlProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.breaker = $root.breakermodule.Breaker.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.breakerDiscreteControl = $root.breakermodule.BreakerDiscreteControl.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BreakerDiscreteControlProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof breakermodule.BreakerDiscreteControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {breakermodule.BreakerDiscreteControlProfile} BreakerDiscreteControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerDiscreteControlProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BreakerDiscreteControlProfile message.
         * @function verify
         * @memberof breakermodule.BreakerDiscreteControlProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BreakerDiscreteControlProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.breaker != null && message.hasOwnProperty("breaker")) {
                var error = $root.breakermodule.Breaker.verify(message.breaker);
                if (error)
                    return "breaker." + error;
            }
            if (message.breakerDiscreteControl != null && message.hasOwnProperty("breakerDiscreteControl")) {
                var error = $root.breakermodule.BreakerDiscreteControl.verify(message.breakerDiscreteControl);
                if (error)
                    return "breakerDiscreteControl." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            return null;
        };

        /**
         * Creates a BreakerDiscreteControlProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof breakermodule.BreakerDiscreteControlProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {breakermodule.BreakerDiscreteControlProfile} BreakerDiscreteControlProfile
         */
        BreakerDiscreteControlProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.breakermodule.BreakerDiscreteControlProfile)
                return object;
            var message = new $root.breakermodule.BreakerDiscreteControlProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".breakermodule.BreakerDiscreteControlProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.breaker != null) {
                if (typeof object.breaker !== "object")
                    throw TypeError(".breakermodule.BreakerDiscreteControlProfile.breaker: object expected");
                message.breaker = $root.breakermodule.Breaker.fromObject(object.breaker);
            }
            if (object.breakerDiscreteControl != null) {
                if (typeof object.breakerDiscreteControl !== "object")
                    throw TypeError(".breakermodule.BreakerDiscreteControlProfile.breakerDiscreteControl: object expected");
                message.breakerDiscreteControl = $root.breakermodule.BreakerDiscreteControl.fromObject(object.breakerDiscreteControl);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".breakermodule.BreakerDiscreteControlProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            return message;
        };

        /**
         * Creates a plain object from a BreakerDiscreteControlProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof breakermodule.BreakerDiscreteControlProfile
         * @static
         * @param {breakermodule.BreakerDiscreteControlProfile} message BreakerDiscreteControlProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BreakerDiscreteControlProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.breaker = null;
                object.breakerDiscreteControl = null;
                object.ied = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.breaker != null && message.hasOwnProperty("breaker"))
                object.breaker = $root.breakermodule.Breaker.toObject(message.breaker, options);
            if (message.breakerDiscreteControl != null && message.hasOwnProperty("breakerDiscreteControl"))
                object.breakerDiscreteControl = $root.breakermodule.BreakerDiscreteControl.toObject(message.breakerDiscreteControl, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            return object;
        };

        /**
         * Converts this BreakerDiscreteControlProfile to JSON.
         * @function toJSON
         * @memberof breakermodule.BreakerDiscreteControlProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BreakerDiscreteControlProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BreakerDiscreteControlProfile;
    })();

    breakermodule.BreakerEvent = (function() {

        /**
         * Properties of a BreakerEvent.
         * @memberof breakermodule
         * @interface IBreakerEvent
         * @property {commonmodule.IEventValue|null} [eventValue] BreakerEvent eventValue
         * @property {commonmodule.IStatusAndEventXCBR|null} [statusAndEventXCBR] BreakerEvent statusAndEventXCBR
         */

        /**
         * Constructs a new BreakerEvent.
         * @memberof breakermodule
         * @classdesc Represents a BreakerEvent.
         * @implements IBreakerEvent
         * @constructor
         * @param {breakermodule.IBreakerEvent=} [properties] Properties to set
         */
        function BreakerEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BreakerEvent eventValue.
         * @member {commonmodule.IEventValue|null|undefined} eventValue
         * @memberof breakermodule.BreakerEvent
         * @instance
         */
        BreakerEvent.prototype.eventValue = null;

        /**
         * BreakerEvent statusAndEventXCBR.
         * @member {commonmodule.IStatusAndEventXCBR|null|undefined} statusAndEventXCBR
         * @memberof breakermodule.BreakerEvent
         * @instance
         */
        BreakerEvent.prototype.statusAndEventXCBR = null;

        /**
         * Creates a new BreakerEvent instance using the specified properties.
         * @function create
         * @memberof breakermodule.BreakerEvent
         * @static
         * @param {breakermodule.IBreakerEvent=} [properties] Properties to set
         * @returns {breakermodule.BreakerEvent} BreakerEvent instance
         */
        BreakerEvent.create = function create(properties) {
            return new BreakerEvent(properties);
        };

        /**
         * Encodes the specified BreakerEvent message. Does not implicitly {@link breakermodule.BreakerEvent.verify|verify} messages.
         * @function encode
         * @memberof breakermodule.BreakerEvent
         * @static
         * @param {breakermodule.IBreakerEvent} message BreakerEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventValue != null && Object.hasOwnProperty.call(message, "eventValue"))
                $root.commonmodule.EventValue.encode(message.eventValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.statusAndEventXCBR != null && Object.hasOwnProperty.call(message, "statusAndEventXCBR"))
                $root.commonmodule.StatusAndEventXCBR.encode(message.statusAndEventXCBR, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BreakerEvent message, length delimited. Does not implicitly {@link breakermodule.BreakerEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof breakermodule.BreakerEvent
         * @static
         * @param {breakermodule.IBreakerEvent} message BreakerEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BreakerEvent message from the specified reader or buffer.
         * @function decode
         * @memberof breakermodule.BreakerEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {breakermodule.BreakerEvent} BreakerEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.breakermodule.BreakerEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventValue = $root.commonmodule.EventValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.statusAndEventXCBR = $root.commonmodule.StatusAndEventXCBR.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BreakerEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof breakermodule.BreakerEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {breakermodule.BreakerEvent} BreakerEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BreakerEvent message.
         * @function verify
         * @memberof breakermodule.BreakerEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BreakerEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventValue != null && message.hasOwnProperty("eventValue")) {
                var error = $root.commonmodule.EventValue.verify(message.eventValue);
                if (error)
                    return "eventValue." + error;
            }
            if (message.statusAndEventXCBR != null && message.hasOwnProperty("statusAndEventXCBR")) {
                var error = $root.commonmodule.StatusAndEventXCBR.verify(message.statusAndEventXCBR);
                if (error)
                    return "statusAndEventXCBR." + error;
            }
            return null;
        };

        /**
         * Creates a BreakerEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof breakermodule.BreakerEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {breakermodule.BreakerEvent} BreakerEvent
         */
        BreakerEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.breakermodule.BreakerEvent)
                return object;
            var message = new $root.breakermodule.BreakerEvent();
            if (object.eventValue != null) {
                if (typeof object.eventValue !== "object")
                    throw TypeError(".breakermodule.BreakerEvent.eventValue: object expected");
                message.eventValue = $root.commonmodule.EventValue.fromObject(object.eventValue);
            }
            if (object.statusAndEventXCBR != null) {
                if (typeof object.statusAndEventXCBR !== "object")
                    throw TypeError(".breakermodule.BreakerEvent.statusAndEventXCBR: object expected");
                message.statusAndEventXCBR = $root.commonmodule.StatusAndEventXCBR.fromObject(object.statusAndEventXCBR);
            }
            return message;
        };

        /**
         * Creates a plain object from a BreakerEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof breakermodule.BreakerEvent
         * @static
         * @param {breakermodule.BreakerEvent} message BreakerEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BreakerEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventValue = null;
                object.statusAndEventXCBR = null;
            }
            if (message.eventValue != null && message.hasOwnProperty("eventValue"))
                object.eventValue = $root.commonmodule.EventValue.toObject(message.eventValue, options);
            if (message.statusAndEventXCBR != null && message.hasOwnProperty("statusAndEventXCBR"))
                object.statusAndEventXCBR = $root.commonmodule.StatusAndEventXCBR.toObject(message.statusAndEventXCBR, options);
            return object;
        };

        /**
         * Converts this BreakerEvent to JSON.
         * @function toJSON
         * @memberof breakermodule.BreakerEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BreakerEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BreakerEvent;
    })();

    breakermodule.BreakerEventProfile = (function() {

        /**
         * Properties of a BreakerEventProfile.
         * @memberof breakermodule
         * @interface IBreakerEventProfile
         * @property {commonmodule.IEventMessageInfo|null} [eventMessageInfo] BreakerEventProfile eventMessageInfo
         * @property {breakermodule.IBreaker|null} [breaker] BreakerEventProfile breaker
         * @property {breakermodule.IBreakerEvent|null} [breakerEvent] BreakerEventProfile breakerEvent
         * @property {commonmodule.IIED|null} [ied] BreakerEventProfile ied
         */

        /**
         * Constructs a new BreakerEventProfile.
         * @memberof breakermodule
         * @classdesc Represents a BreakerEventProfile.
         * @implements IBreakerEventProfile
         * @constructor
         * @param {breakermodule.IBreakerEventProfile=} [properties] Properties to set
         */
        function BreakerEventProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BreakerEventProfile eventMessageInfo.
         * @member {commonmodule.IEventMessageInfo|null|undefined} eventMessageInfo
         * @memberof breakermodule.BreakerEventProfile
         * @instance
         */
        BreakerEventProfile.prototype.eventMessageInfo = null;

        /**
         * BreakerEventProfile breaker.
         * @member {breakermodule.IBreaker|null|undefined} breaker
         * @memberof breakermodule.BreakerEventProfile
         * @instance
         */
        BreakerEventProfile.prototype.breaker = null;

        /**
         * BreakerEventProfile breakerEvent.
         * @member {breakermodule.IBreakerEvent|null|undefined} breakerEvent
         * @memberof breakermodule.BreakerEventProfile
         * @instance
         */
        BreakerEventProfile.prototype.breakerEvent = null;

        /**
         * BreakerEventProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof breakermodule.BreakerEventProfile
         * @instance
         */
        BreakerEventProfile.prototype.ied = null;

        /**
         * Creates a new BreakerEventProfile instance using the specified properties.
         * @function create
         * @memberof breakermodule.BreakerEventProfile
         * @static
         * @param {breakermodule.IBreakerEventProfile=} [properties] Properties to set
         * @returns {breakermodule.BreakerEventProfile} BreakerEventProfile instance
         */
        BreakerEventProfile.create = function create(properties) {
            return new BreakerEventProfile(properties);
        };

        /**
         * Encodes the specified BreakerEventProfile message. Does not implicitly {@link breakermodule.BreakerEventProfile.verify|verify} messages.
         * @function encode
         * @memberof breakermodule.BreakerEventProfile
         * @static
         * @param {breakermodule.IBreakerEventProfile} message BreakerEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerEventProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventMessageInfo != null && Object.hasOwnProperty.call(message, "eventMessageInfo"))
                $root.commonmodule.EventMessageInfo.encode(message.eventMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.breaker != null && Object.hasOwnProperty.call(message, "breaker"))
                $root.breakermodule.Breaker.encode(message.breaker, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.breakerEvent != null && Object.hasOwnProperty.call(message, "breakerEvent"))
                $root.breakermodule.BreakerEvent.encode(message.breakerEvent, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BreakerEventProfile message, length delimited. Does not implicitly {@link breakermodule.BreakerEventProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof breakermodule.BreakerEventProfile
         * @static
         * @param {breakermodule.IBreakerEventProfile} message BreakerEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerEventProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BreakerEventProfile message from the specified reader or buffer.
         * @function decode
         * @memberof breakermodule.BreakerEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {breakermodule.BreakerEventProfile} BreakerEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerEventProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.breakermodule.BreakerEventProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventMessageInfo = $root.commonmodule.EventMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.breaker = $root.breakermodule.Breaker.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.breakerEvent = $root.breakermodule.BreakerEvent.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BreakerEventProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof breakermodule.BreakerEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {breakermodule.BreakerEventProfile} BreakerEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerEventProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BreakerEventProfile message.
         * @function verify
         * @memberof breakermodule.BreakerEventProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BreakerEventProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo")) {
                var error = $root.commonmodule.EventMessageInfo.verify(message.eventMessageInfo);
                if (error)
                    return "eventMessageInfo." + error;
            }
            if (message.breaker != null && message.hasOwnProperty("breaker")) {
                var error = $root.breakermodule.Breaker.verify(message.breaker);
                if (error)
                    return "breaker." + error;
            }
            if (message.breakerEvent != null && message.hasOwnProperty("breakerEvent")) {
                var error = $root.breakermodule.BreakerEvent.verify(message.breakerEvent);
                if (error)
                    return "breakerEvent." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            return null;
        };

        /**
         * Creates a BreakerEventProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof breakermodule.BreakerEventProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {breakermodule.BreakerEventProfile} BreakerEventProfile
         */
        BreakerEventProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.breakermodule.BreakerEventProfile)
                return object;
            var message = new $root.breakermodule.BreakerEventProfile();
            if (object.eventMessageInfo != null) {
                if (typeof object.eventMessageInfo !== "object")
                    throw TypeError(".breakermodule.BreakerEventProfile.eventMessageInfo: object expected");
                message.eventMessageInfo = $root.commonmodule.EventMessageInfo.fromObject(object.eventMessageInfo);
            }
            if (object.breaker != null) {
                if (typeof object.breaker !== "object")
                    throw TypeError(".breakermodule.BreakerEventProfile.breaker: object expected");
                message.breaker = $root.breakermodule.Breaker.fromObject(object.breaker);
            }
            if (object.breakerEvent != null) {
                if (typeof object.breakerEvent !== "object")
                    throw TypeError(".breakermodule.BreakerEventProfile.breakerEvent: object expected");
                message.breakerEvent = $root.breakermodule.BreakerEvent.fromObject(object.breakerEvent);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".breakermodule.BreakerEventProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            return message;
        };

        /**
         * Creates a plain object from a BreakerEventProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof breakermodule.BreakerEventProfile
         * @static
         * @param {breakermodule.BreakerEventProfile} message BreakerEventProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BreakerEventProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventMessageInfo = null;
                object.breaker = null;
                object.breakerEvent = null;
                object.ied = null;
            }
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo"))
                object.eventMessageInfo = $root.commonmodule.EventMessageInfo.toObject(message.eventMessageInfo, options);
            if (message.breaker != null && message.hasOwnProperty("breaker"))
                object.breaker = $root.breakermodule.Breaker.toObject(message.breaker, options);
            if (message.breakerEvent != null && message.hasOwnProperty("breakerEvent"))
                object.breakerEvent = $root.breakermodule.BreakerEvent.toObject(message.breakerEvent, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            return object;
        };

        /**
         * Converts this BreakerEventProfile to JSON.
         * @function toJSON
         * @memberof breakermodule.BreakerEventProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BreakerEventProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BreakerEventProfile;
    })();

    breakermodule.BreakerReading = (function() {

        /**
         * Properties of a BreakerReading.
         * @memberof breakermodule
         * @interface IBreakerReading
         * @property {commonmodule.IConductingEquipmentTerminalReading|null} [conductingEquipmentTerminalReading] BreakerReading conductingEquipmentTerminalReading
         * @property {commonmodule.IReadingMMXU|null} [diffReadingMMXU] BreakerReading diffReadingMMXU
         * @property {commonmodule.IPhaseMMTN|null} [phaseMMTN] BreakerReading phaseMMTN
         * @property {commonmodule.IReadingMMTR|null} [readingMMTR] BreakerReading readingMMTR
         * @property {commonmodule.IReadingMMXU|null} [readingMMXU] BreakerReading readingMMXU
         */

        /**
         * Constructs a new BreakerReading.
         * @memberof breakermodule
         * @classdesc Represents a BreakerReading.
         * @implements IBreakerReading
         * @constructor
         * @param {breakermodule.IBreakerReading=} [properties] Properties to set
         */
        function BreakerReading(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BreakerReading conductingEquipmentTerminalReading.
         * @member {commonmodule.IConductingEquipmentTerminalReading|null|undefined} conductingEquipmentTerminalReading
         * @memberof breakermodule.BreakerReading
         * @instance
         */
        BreakerReading.prototype.conductingEquipmentTerminalReading = null;

        /**
         * BreakerReading diffReadingMMXU.
         * @member {commonmodule.IReadingMMXU|null|undefined} diffReadingMMXU
         * @memberof breakermodule.BreakerReading
         * @instance
         */
        BreakerReading.prototype.diffReadingMMXU = null;

        /**
         * BreakerReading phaseMMTN.
         * @member {commonmodule.IPhaseMMTN|null|undefined} phaseMMTN
         * @memberof breakermodule.BreakerReading
         * @instance
         */
        BreakerReading.prototype.phaseMMTN = null;

        /**
         * BreakerReading readingMMTR.
         * @member {commonmodule.IReadingMMTR|null|undefined} readingMMTR
         * @memberof breakermodule.BreakerReading
         * @instance
         */
        BreakerReading.prototype.readingMMTR = null;

        /**
         * BreakerReading readingMMXU.
         * @member {commonmodule.IReadingMMXU|null|undefined} readingMMXU
         * @memberof breakermodule.BreakerReading
         * @instance
         */
        BreakerReading.prototype.readingMMXU = null;

        /**
         * Creates a new BreakerReading instance using the specified properties.
         * @function create
         * @memberof breakermodule.BreakerReading
         * @static
         * @param {breakermodule.IBreakerReading=} [properties] Properties to set
         * @returns {breakermodule.BreakerReading} BreakerReading instance
         */
        BreakerReading.create = function create(properties) {
            return new BreakerReading(properties);
        };

        /**
         * Encodes the specified BreakerReading message. Does not implicitly {@link breakermodule.BreakerReading.verify|verify} messages.
         * @function encode
         * @memberof breakermodule.BreakerReading
         * @static
         * @param {breakermodule.IBreakerReading} message BreakerReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerReading.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipmentTerminalReading != null && Object.hasOwnProperty.call(message, "conductingEquipmentTerminalReading"))
                $root.commonmodule.ConductingEquipmentTerminalReading.encode(message.conductingEquipmentTerminalReading, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.diffReadingMMXU != null && Object.hasOwnProperty.call(message, "diffReadingMMXU"))
                $root.commonmodule.ReadingMMXU.encode(message.diffReadingMMXU, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.phaseMMTN != null && Object.hasOwnProperty.call(message, "phaseMMTN"))
                $root.commonmodule.PhaseMMTN.encode(message.phaseMMTN, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.readingMMTR != null && Object.hasOwnProperty.call(message, "readingMMTR"))
                $root.commonmodule.ReadingMMTR.encode(message.readingMMTR, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.readingMMXU != null && Object.hasOwnProperty.call(message, "readingMMXU"))
                $root.commonmodule.ReadingMMXU.encode(message.readingMMXU, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BreakerReading message, length delimited. Does not implicitly {@link breakermodule.BreakerReading.verify|verify} messages.
         * @function encodeDelimited
         * @memberof breakermodule.BreakerReading
         * @static
         * @param {breakermodule.IBreakerReading} message BreakerReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerReading.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BreakerReading message from the specified reader or buffer.
         * @function decode
         * @memberof breakermodule.BreakerReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {breakermodule.BreakerReading} BreakerReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerReading.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.breakermodule.BreakerReading();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.diffReadingMMXU = $root.commonmodule.ReadingMMXU.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.phaseMMTN = $root.commonmodule.PhaseMMTN.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.readingMMTR = $root.commonmodule.ReadingMMTR.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.readingMMXU = $root.commonmodule.ReadingMMXU.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BreakerReading message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof breakermodule.BreakerReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {breakermodule.BreakerReading} BreakerReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerReading.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BreakerReading message.
         * @function verify
         * @memberof breakermodule.BreakerReading
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BreakerReading.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading")) {
                var error = $root.commonmodule.ConductingEquipmentTerminalReading.verify(message.conductingEquipmentTerminalReading);
                if (error)
                    return "conductingEquipmentTerminalReading." + error;
            }
            if (message.diffReadingMMXU != null && message.hasOwnProperty("diffReadingMMXU")) {
                var error = $root.commonmodule.ReadingMMXU.verify(message.diffReadingMMXU);
                if (error)
                    return "diffReadingMMXU." + error;
            }
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN")) {
                var error = $root.commonmodule.PhaseMMTN.verify(message.phaseMMTN);
                if (error)
                    return "phaseMMTN." + error;
            }
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR")) {
                var error = $root.commonmodule.ReadingMMTR.verify(message.readingMMTR);
                if (error)
                    return "readingMMTR." + error;
            }
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU")) {
                var error = $root.commonmodule.ReadingMMXU.verify(message.readingMMXU);
                if (error)
                    return "readingMMXU." + error;
            }
            return null;
        };

        /**
         * Creates a BreakerReading message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof breakermodule.BreakerReading
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {breakermodule.BreakerReading} BreakerReading
         */
        BreakerReading.fromObject = function fromObject(object) {
            if (object instanceof $root.breakermodule.BreakerReading)
                return object;
            var message = new $root.breakermodule.BreakerReading();
            if (object.conductingEquipmentTerminalReading != null) {
                if (typeof object.conductingEquipmentTerminalReading !== "object")
                    throw TypeError(".breakermodule.BreakerReading.conductingEquipmentTerminalReading: object expected");
                message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.fromObject(object.conductingEquipmentTerminalReading);
            }
            if (object.diffReadingMMXU != null) {
                if (typeof object.diffReadingMMXU !== "object")
                    throw TypeError(".breakermodule.BreakerReading.diffReadingMMXU: object expected");
                message.diffReadingMMXU = $root.commonmodule.ReadingMMXU.fromObject(object.diffReadingMMXU);
            }
            if (object.phaseMMTN != null) {
                if (typeof object.phaseMMTN !== "object")
                    throw TypeError(".breakermodule.BreakerReading.phaseMMTN: object expected");
                message.phaseMMTN = $root.commonmodule.PhaseMMTN.fromObject(object.phaseMMTN);
            }
            if (object.readingMMTR != null) {
                if (typeof object.readingMMTR !== "object")
                    throw TypeError(".breakermodule.BreakerReading.readingMMTR: object expected");
                message.readingMMTR = $root.commonmodule.ReadingMMTR.fromObject(object.readingMMTR);
            }
            if (object.readingMMXU != null) {
                if (typeof object.readingMMXU !== "object")
                    throw TypeError(".breakermodule.BreakerReading.readingMMXU: object expected");
                message.readingMMXU = $root.commonmodule.ReadingMMXU.fromObject(object.readingMMXU);
            }
            return message;
        };

        /**
         * Creates a plain object from a BreakerReading message. Also converts values to other types if specified.
         * @function toObject
         * @memberof breakermodule.BreakerReading
         * @static
         * @param {breakermodule.BreakerReading} message BreakerReading
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BreakerReading.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conductingEquipmentTerminalReading = null;
                object.diffReadingMMXU = null;
                object.phaseMMTN = null;
                object.readingMMTR = null;
                object.readingMMXU = null;
            }
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading"))
                object.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.toObject(message.conductingEquipmentTerminalReading, options);
            if (message.diffReadingMMXU != null && message.hasOwnProperty("diffReadingMMXU"))
                object.diffReadingMMXU = $root.commonmodule.ReadingMMXU.toObject(message.diffReadingMMXU, options);
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN"))
                object.phaseMMTN = $root.commonmodule.PhaseMMTN.toObject(message.phaseMMTN, options);
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR"))
                object.readingMMTR = $root.commonmodule.ReadingMMTR.toObject(message.readingMMTR, options);
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU"))
                object.readingMMXU = $root.commonmodule.ReadingMMXU.toObject(message.readingMMXU, options);
            return object;
        };

        /**
         * Converts this BreakerReading to JSON.
         * @function toJSON
         * @memberof breakermodule.BreakerReading
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BreakerReading.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BreakerReading;
    })();

    breakermodule.BreakerReadingProfile = (function() {

        /**
         * Properties of a BreakerReadingProfile.
         * @memberof breakermodule
         * @interface IBreakerReadingProfile
         * @property {commonmodule.IReadingMessageInfo|null} [readingMessageInfo] BreakerReadingProfile readingMessageInfo
         * @property {breakermodule.IBreaker|null} [breaker] BreakerReadingProfile breaker
         * @property {Array.<breakermodule.IBreakerReading>|null} [breakerReading] BreakerReadingProfile breakerReading
         * @property {commonmodule.IIED|null} [ied] BreakerReadingProfile ied
         */

        /**
         * Constructs a new BreakerReadingProfile.
         * @memberof breakermodule
         * @classdesc Represents a BreakerReadingProfile.
         * @implements IBreakerReadingProfile
         * @constructor
         * @param {breakermodule.IBreakerReadingProfile=} [properties] Properties to set
         */
        function BreakerReadingProfile(properties) {
            this.breakerReading = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BreakerReadingProfile readingMessageInfo.
         * @member {commonmodule.IReadingMessageInfo|null|undefined} readingMessageInfo
         * @memberof breakermodule.BreakerReadingProfile
         * @instance
         */
        BreakerReadingProfile.prototype.readingMessageInfo = null;

        /**
         * BreakerReadingProfile breaker.
         * @member {breakermodule.IBreaker|null|undefined} breaker
         * @memberof breakermodule.BreakerReadingProfile
         * @instance
         */
        BreakerReadingProfile.prototype.breaker = null;

        /**
         * BreakerReadingProfile breakerReading.
         * @member {Array.<breakermodule.IBreakerReading>} breakerReading
         * @memberof breakermodule.BreakerReadingProfile
         * @instance
         */
        BreakerReadingProfile.prototype.breakerReading = $util.emptyArray;

        /**
         * BreakerReadingProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof breakermodule.BreakerReadingProfile
         * @instance
         */
        BreakerReadingProfile.prototype.ied = null;

        /**
         * Creates a new BreakerReadingProfile instance using the specified properties.
         * @function create
         * @memberof breakermodule.BreakerReadingProfile
         * @static
         * @param {breakermodule.IBreakerReadingProfile=} [properties] Properties to set
         * @returns {breakermodule.BreakerReadingProfile} BreakerReadingProfile instance
         */
        BreakerReadingProfile.create = function create(properties) {
            return new BreakerReadingProfile(properties);
        };

        /**
         * Encodes the specified BreakerReadingProfile message. Does not implicitly {@link breakermodule.BreakerReadingProfile.verify|verify} messages.
         * @function encode
         * @memberof breakermodule.BreakerReadingProfile
         * @static
         * @param {breakermodule.IBreakerReadingProfile} message BreakerReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerReadingProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.readingMessageInfo != null && Object.hasOwnProperty.call(message, "readingMessageInfo"))
                $root.commonmodule.ReadingMessageInfo.encode(message.readingMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.breaker != null && Object.hasOwnProperty.call(message, "breaker"))
                $root.breakermodule.Breaker.encode(message.breaker, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.breakerReading != null && message.breakerReading.length)
                for (var i = 0; i < message.breakerReading.length; ++i)
                    $root.breakermodule.BreakerReading.encode(message.breakerReading[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BreakerReadingProfile message, length delimited. Does not implicitly {@link breakermodule.BreakerReadingProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof breakermodule.BreakerReadingProfile
         * @static
         * @param {breakermodule.IBreakerReadingProfile} message BreakerReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerReadingProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BreakerReadingProfile message from the specified reader or buffer.
         * @function decode
         * @memberof breakermodule.BreakerReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {breakermodule.BreakerReadingProfile} BreakerReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerReadingProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.breakermodule.BreakerReadingProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.breaker = $root.breakermodule.Breaker.decode(reader, reader.uint32());
                    break;
                case 3:
                    if (!(message.breakerReading && message.breakerReading.length))
                        message.breakerReading = [];
                    message.breakerReading.push($root.breakermodule.BreakerReading.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BreakerReadingProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof breakermodule.BreakerReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {breakermodule.BreakerReadingProfile} BreakerReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerReadingProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BreakerReadingProfile message.
         * @function verify
         * @memberof breakermodule.BreakerReadingProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BreakerReadingProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo")) {
                var error = $root.commonmodule.ReadingMessageInfo.verify(message.readingMessageInfo);
                if (error)
                    return "readingMessageInfo." + error;
            }
            if (message.breaker != null && message.hasOwnProperty("breaker")) {
                var error = $root.breakermodule.Breaker.verify(message.breaker);
                if (error)
                    return "breaker." + error;
            }
            if (message.breakerReading != null && message.hasOwnProperty("breakerReading")) {
                if (!Array.isArray(message.breakerReading))
                    return "breakerReading: array expected";
                for (var i = 0; i < message.breakerReading.length; ++i) {
                    var error = $root.breakermodule.BreakerReading.verify(message.breakerReading[i]);
                    if (error)
                        return "breakerReading." + error;
                }
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            return null;
        };

        /**
         * Creates a BreakerReadingProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof breakermodule.BreakerReadingProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {breakermodule.BreakerReadingProfile} BreakerReadingProfile
         */
        BreakerReadingProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.breakermodule.BreakerReadingProfile)
                return object;
            var message = new $root.breakermodule.BreakerReadingProfile();
            if (object.readingMessageInfo != null) {
                if (typeof object.readingMessageInfo !== "object")
                    throw TypeError(".breakermodule.BreakerReadingProfile.readingMessageInfo: object expected");
                message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.fromObject(object.readingMessageInfo);
            }
            if (object.breaker != null) {
                if (typeof object.breaker !== "object")
                    throw TypeError(".breakermodule.BreakerReadingProfile.breaker: object expected");
                message.breaker = $root.breakermodule.Breaker.fromObject(object.breaker);
            }
            if (object.breakerReading) {
                if (!Array.isArray(object.breakerReading))
                    throw TypeError(".breakermodule.BreakerReadingProfile.breakerReading: array expected");
                message.breakerReading = [];
                for (var i = 0; i < object.breakerReading.length; ++i) {
                    if (typeof object.breakerReading[i] !== "object")
                        throw TypeError(".breakermodule.BreakerReadingProfile.breakerReading: object expected");
                    message.breakerReading[i] = $root.breakermodule.BreakerReading.fromObject(object.breakerReading[i]);
                }
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".breakermodule.BreakerReadingProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            return message;
        };

        /**
         * Creates a plain object from a BreakerReadingProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof breakermodule.BreakerReadingProfile
         * @static
         * @param {breakermodule.BreakerReadingProfile} message BreakerReadingProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BreakerReadingProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.breakerReading = [];
            if (options.defaults) {
                object.readingMessageInfo = null;
                object.breaker = null;
                object.ied = null;
            }
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo"))
                object.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.toObject(message.readingMessageInfo, options);
            if (message.breaker != null && message.hasOwnProperty("breaker"))
                object.breaker = $root.breakermodule.Breaker.toObject(message.breaker, options);
            if (message.breakerReading && message.breakerReading.length) {
                object.breakerReading = [];
                for (var j = 0; j < message.breakerReading.length; ++j)
                    object.breakerReading[j] = $root.breakermodule.BreakerReading.toObject(message.breakerReading[j], options);
            }
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            return object;
        };

        /**
         * Converts this BreakerReadingProfile to JSON.
         * @function toJSON
         * @memberof breakermodule.BreakerReadingProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BreakerReadingProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BreakerReadingProfile;
    })();

    breakermodule.BreakerStatus = (function() {

        /**
         * Properties of a BreakerStatus.
         * @memberof breakermodule
         * @interface IBreakerStatus
         * @property {commonmodule.IStatusValue|null} [statusValue] BreakerStatus statusValue
         * @property {commonmodule.IStatusAndEventXCBR|null} [statusAndEventXCBR] BreakerStatus statusAndEventXCBR
         * @property {commonmodule.IDeviceStatus|null} [deviceStatus] BreakerStatus deviceStatus
         */

        /**
         * Constructs a new BreakerStatus.
         * @memberof breakermodule
         * @classdesc Represents a BreakerStatus.
         * @implements IBreakerStatus
         * @constructor
         * @param {breakermodule.IBreakerStatus=} [properties] Properties to set
         */
        function BreakerStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BreakerStatus statusValue.
         * @member {commonmodule.IStatusValue|null|undefined} statusValue
         * @memberof breakermodule.BreakerStatus
         * @instance
         */
        BreakerStatus.prototype.statusValue = null;

        /**
         * BreakerStatus statusAndEventXCBR.
         * @member {commonmodule.IStatusAndEventXCBR|null|undefined} statusAndEventXCBR
         * @memberof breakermodule.BreakerStatus
         * @instance
         */
        BreakerStatus.prototype.statusAndEventXCBR = null;

        /**
         * BreakerStatus deviceStatus.
         * @member {commonmodule.IDeviceStatus|null|undefined} deviceStatus
         * @memberof breakermodule.BreakerStatus
         * @instance
         */
        BreakerStatus.prototype.deviceStatus = null;

        /**
         * Creates a new BreakerStatus instance using the specified properties.
         * @function create
         * @memberof breakermodule.BreakerStatus
         * @static
         * @param {breakermodule.IBreakerStatus=} [properties] Properties to set
         * @returns {breakermodule.BreakerStatus} BreakerStatus instance
         */
        BreakerStatus.create = function create(properties) {
            return new BreakerStatus(properties);
        };

        /**
         * Encodes the specified BreakerStatus message. Does not implicitly {@link breakermodule.BreakerStatus.verify|verify} messages.
         * @function encode
         * @memberof breakermodule.BreakerStatus
         * @static
         * @param {breakermodule.IBreakerStatus} message BreakerStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusValue != null && Object.hasOwnProperty.call(message, "statusValue"))
                $root.commonmodule.StatusValue.encode(message.statusValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.statusAndEventXCBR != null && Object.hasOwnProperty.call(message, "statusAndEventXCBR"))
                $root.commonmodule.StatusAndEventXCBR.encode(message.statusAndEventXCBR, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.deviceStatus != null && Object.hasOwnProperty.call(message, "deviceStatus"))
                $root.commonmodule.DeviceStatus.encode(message.deviceStatus, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BreakerStatus message, length delimited. Does not implicitly {@link breakermodule.BreakerStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof breakermodule.BreakerStatus
         * @static
         * @param {breakermodule.IBreakerStatus} message BreakerStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BreakerStatus message from the specified reader or buffer.
         * @function decode
         * @memberof breakermodule.BreakerStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {breakermodule.BreakerStatus} BreakerStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.breakermodule.BreakerStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusValue = $root.commonmodule.StatusValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.statusAndEventXCBR = $root.commonmodule.StatusAndEventXCBR.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.deviceStatus = $root.commonmodule.DeviceStatus.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BreakerStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof breakermodule.BreakerStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {breakermodule.BreakerStatus} BreakerStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BreakerStatus message.
         * @function verify
         * @memberof breakermodule.BreakerStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BreakerStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusValue != null && message.hasOwnProperty("statusValue")) {
                var error = $root.commonmodule.StatusValue.verify(message.statusValue);
                if (error)
                    return "statusValue." + error;
            }
            if (message.statusAndEventXCBR != null && message.hasOwnProperty("statusAndEventXCBR")) {
                var error = $root.commonmodule.StatusAndEventXCBR.verify(message.statusAndEventXCBR);
                if (error)
                    return "statusAndEventXCBR." + error;
            }
            if (message.deviceStatus != null && message.hasOwnProperty("deviceStatus")) {
                var error = $root.commonmodule.DeviceStatus.verify(message.deviceStatus);
                if (error)
                    return "deviceStatus." + error;
            }
            return null;
        };

        /**
         * Creates a BreakerStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof breakermodule.BreakerStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {breakermodule.BreakerStatus} BreakerStatus
         */
        BreakerStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.breakermodule.BreakerStatus)
                return object;
            var message = new $root.breakermodule.BreakerStatus();
            if (object.statusValue != null) {
                if (typeof object.statusValue !== "object")
                    throw TypeError(".breakermodule.BreakerStatus.statusValue: object expected");
                message.statusValue = $root.commonmodule.StatusValue.fromObject(object.statusValue);
            }
            if (object.statusAndEventXCBR != null) {
                if (typeof object.statusAndEventXCBR !== "object")
                    throw TypeError(".breakermodule.BreakerStatus.statusAndEventXCBR: object expected");
                message.statusAndEventXCBR = $root.commonmodule.StatusAndEventXCBR.fromObject(object.statusAndEventXCBR);
            }
            if (object.deviceStatus != null) {
                if (typeof object.deviceStatus !== "object")
                    throw TypeError(".breakermodule.BreakerStatus.deviceStatus: object expected");
                message.deviceStatus = $root.commonmodule.DeviceStatus.fromObject(object.deviceStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a BreakerStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof breakermodule.BreakerStatus
         * @static
         * @param {breakermodule.BreakerStatus} message BreakerStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BreakerStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusValue = null;
                object.statusAndEventXCBR = null;
                object.deviceStatus = null;
            }
            if (message.statusValue != null && message.hasOwnProperty("statusValue"))
                object.statusValue = $root.commonmodule.StatusValue.toObject(message.statusValue, options);
            if (message.statusAndEventXCBR != null && message.hasOwnProperty("statusAndEventXCBR"))
                object.statusAndEventXCBR = $root.commonmodule.StatusAndEventXCBR.toObject(message.statusAndEventXCBR, options);
            if (message.deviceStatus != null && message.hasOwnProperty("deviceStatus"))
                object.deviceStatus = $root.commonmodule.DeviceStatus.toObject(message.deviceStatus, options);
            return object;
        };

        /**
         * Converts this BreakerStatus to JSON.
         * @function toJSON
         * @memberof breakermodule.BreakerStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BreakerStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BreakerStatus;
    })();

    breakermodule.BreakerStatusProfile = (function() {

        /**
         * Properties of a BreakerStatusProfile.
         * @memberof breakermodule
         * @interface IBreakerStatusProfile
         * @property {commonmodule.IStatusMessageInfo|null} [statusMessageInfo] BreakerStatusProfile statusMessageInfo
         * @property {breakermodule.IBreaker|null} [breaker] BreakerStatusProfile breaker
         * @property {breakermodule.IBreakerStatus|null} [breakerStatus] BreakerStatusProfile breakerStatus
         * @property {commonmodule.IIED|null} [ied] BreakerStatusProfile ied
         */

        /**
         * Constructs a new BreakerStatusProfile.
         * @memberof breakermodule
         * @classdesc Represents a BreakerStatusProfile.
         * @implements IBreakerStatusProfile
         * @constructor
         * @param {breakermodule.IBreakerStatusProfile=} [properties] Properties to set
         */
        function BreakerStatusProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * BreakerStatusProfile statusMessageInfo.
         * @member {commonmodule.IStatusMessageInfo|null|undefined} statusMessageInfo
         * @memberof breakermodule.BreakerStatusProfile
         * @instance
         */
        BreakerStatusProfile.prototype.statusMessageInfo = null;

        /**
         * BreakerStatusProfile breaker.
         * @member {breakermodule.IBreaker|null|undefined} breaker
         * @memberof breakermodule.BreakerStatusProfile
         * @instance
         */
        BreakerStatusProfile.prototype.breaker = null;

        /**
         * BreakerStatusProfile breakerStatus.
         * @member {breakermodule.IBreakerStatus|null|undefined} breakerStatus
         * @memberof breakermodule.BreakerStatusProfile
         * @instance
         */
        BreakerStatusProfile.prototype.breakerStatus = null;

        /**
         * BreakerStatusProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof breakermodule.BreakerStatusProfile
         * @instance
         */
        BreakerStatusProfile.prototype.ied = null;

        /**
         * Creates a new BreakerStatusProfile instance using the specified properties.
         * @function create
         * @memberof breakermodule.BreakerStatusProfile
         * @static
         * @param {breakermodule.IBreakerStatusProfile=} [properties] Properties to set
         * @returns {breakermodule.BreakerStatusProfile} BreakerStatusProfile instance
         */
        BreakerStatusProfile.create = function create(properties) {
            return new BreakerStatusProfile(properties);
        };

        /**
         * Encodes the specified BreakerStatusProfile message. Does not implicitly {@link breakermodule.BreakerStatusProfile.verify|verify} messages.
         * @function encode
         * @memberof breakermodule.BreakerStatusProfile
         * @static
         * @param {breakermodule.IBreakerStatusProfile} message BreakerStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerStatusProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusMessageInfo != null && Object.hasOwnProperty.call(message, "statusMessageInfo"))
                $root.commonmodule.StatusMessageInfo.encode(message.statusMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.breaker != null && Object.hasOwnProperty.call(message, "breaker"))
                $root.breakermodule.Breaker.encode(message.breaker, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.breakerStatus != null && Object.hasOwnProperty.call(message, "breakerStatus"))
                $root.breakermodule.BreakerStatus.encode(message.breakerStatus, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified BreakerStatusProfile message, length delimited. Does not implicitly {@link breakermodule.BreakerStatusProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof breakermodule.BreakerStatusProfile
         * @static
         * @param {breakermodule.IBreakerStatusProfile} message BreakerStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        BreakerStatusProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a BreakerStatusProfile message from the specified reader or buffer.
         * @function decode
         * @memberof breakermodule.BreakerStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {breakermodule.BreakerStatusProfile} BreakerStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerStatusProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.breakermodule.BreakerStatusProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.breaker = $root.breakermodule.Breaker.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.breakerStatus = $root.breakermodule.BreakerStatus.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a BreakerStatusProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof breakermodule.BreakerStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {breakermodule.BreakerStatusProfile} BreakerStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        BreakerStatusProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a BreakerStatusProfile message.
         * @function verify
         * @memberof breakermodule.BreakerStatusProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        BreakerStatusProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo")) {
                var error = $root.commonmodule.StatusMessageInfo.verify(message.statusMessageInfo);
                if (error)
                    return "statusMessageInfo." + error;
            }
            if (message.breaker != null && message.hasOwnProperty("breaker")) {
                var error = $root.breakermodule.Breaker.verify(message.breaker);
                if (error)
                    return "breaker." + error;
            }
            if (message.breakerStatus != null && message.hasOwnProperty("breakerStatus")) {
                var error = $root.breakermodule.BreakerStatus.verify(message.breakerStatus);
                if (error)
                    return "breakerStatus." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            return null;
        };

        /**
         * Creates a BreakerStatusProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof breakermodule.BreakerStatusProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {breakermodule.BreakerStatusProfile} BreakerStatusProfile
         */
        BreakerStatusProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.breakermodule.BreakerStatusProfile)
                return object;
            var message = new $root.breakermodule.BreakerStatusProfile();
            if (object.statusMessageInfo != null) {
                if (typeof object.statusMessageInfo !== "object")
                    throw TypeError(".breakermodule.BreakerStatusProfile.statusMessageInfo: object expected");
                message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.fromObject(object.statusMessageInfo);
            }
            if (object.breaker != null) {
                if (typeof object.breaker !== "object")
                    throw TypeError(".breakermodule.BreakerStatusProfile.breaker: object expected");
                message.breaker = $root.breakermodule.Breaker.fromObject(object.breaker);
            }
            if (object.breakerStatus != null) {
                if (typeof object.breakerStatus !== "object")
                    throw TypeError(".breakermodule.BreakerStatusProfile.breakerStatus: object expected");
                message.breakerStatus = $root.breakermodule.BreakerStatus.fromObject(object.breakerStatus);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".breakermodule.BreakerStatusProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            return message;
        };

        /**
         * Creates a plain object from a BreakerStatusProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof breakermodule.BreakerStatusProfile
         * @static
         * @param {breakermodule.BreakerStatusProfile} message BreakerStatusProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        BreakerStatusProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusMessageInfo = null;
                object.breaker = null;
                object.breakerStatus = null;
                object.ied = null;
            }
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo"))
                object.statusMessageInfo = $root.commonmodule.StatusMessageInfo.toObject(message.statusMessageInfo, options);
            if (message.breaker != null && message.hasOwnProperty("breaker"))
                object.breaker = $root.breakermodule.Breaker.toObject(message.breaker, options);
            if (message.breakerStatus != null && message.hasOwnProperty("breakerStatus"))
                object.breakerStatus = $root.breakermodule.BreakerStatus.toObject(message.breakerStatus, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            return object;
        };

        /**
         * Converts this BreakerStatusProfile to JSON.
         * @function toJSON
         * @memberof breakermodule.BreakerStatusProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        BreakerStatusProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return BreakerStatusProfile;
    })();

    return breakermodule;
})();

$root.interconnectionmodule = (function() {

    /**
     * Namespace interconnectionmodule.
     * @exports interconnectionmodule
     * @namespace
     */
    var interconnectionmodule = {};

    interconnectionmodule.InterconnectionPoint = (function() {

        /**
         * Properties of an InterconnectionPoint.
         * @memberof interconnectionmodule
         * @interface IInterconnectionPoint
         * @property {commonmodule.IControlDPC|null} [blackStartEnabled] InterconnectionPoint blackStartEnabled
         * @property {commonmodule.IControlDPC|null} [frequencySetPointEnabled] InterconnectionPoint frequencySetPointEnabled
         * @property {commonmodule.IControlDPC|null} [island] InterconnectionPoint island
         * @property {google.protobuf.IFloatValue|null} [pctHzDroop] InterconnectionPoint pctHzDroop
         * @property {google.protobuf.IFloatValue|null} [pctVDroop] InterconnectionPoint pctVDroop
         * @property {commonmodule.IRampRate|null} [rampRates] InterconnectionPoint rampRates
         * @property {commonmodule.IControlDPC|null} [reactivePwrSetPointEnabled] InterconnectionPoint reactivePwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [realPwrSetPointEnabled] InterconnectionPoint realPwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [voltageSetPointEnabled] InterconnectionPoint voltageSetPointEnabled
         * @property {commonmodule.ITimestamp|null} [startTime] InterconnectionPoint startTime
         */

        /**
         * Constructs a new InterconnectionPoint.
         * @memberof interconnectionmodule
         * @classdesc Represents an InterconnectionPoint.
         * @implements IInterconnectionPoint
         * @constructor
         * @param {interconnectionmodule.IInterconnectionPoint=} [properties] Properties to set
         */
        function InterconnectionPoint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InterconnectionPoint blackStartEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} blackStartEnabled
         * @memberof interconnectionmodule.InterconnectionPoint
         * @instance
         */
        InterconnectionPoint.prototype.blackStartEnabled = null;

        /**
         * InterconnectionPoint frequencySetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} frequencySetPointEnabled
         * @memberof interconnectionmodule.InterconnectionPoint
         * @instance
         */
        InterconnectionPoint.prototype.frequencySetPointEnabled = null;

        /**
         * InterconnectionPoint island.
         * @member {commonmodule.IControlDPC|null|undefined} island
         * @memberof interconnectionmodule.InterconnectionPoint
         * @instance
         */
        InterconnectionPoint.prototype.island = null;

        /**
         * InterconnectionPoint pctHzDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctHzDroop
         * @memberof interconnectionmodule.InterconnectionPoint
         * @instance
         */
        InterconnectionPoint.prototype.pctHzDroop = null;

        /**
         * InterconnectionPoint pctVDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctVDroop
         * @memberof interconnectionmodule.InterconnectionPoint
         * @instance
         */
        InterconnectionPoint.prototype.pctVDroop = null;

        /**
         * InterconnectionPoint rampRates.
         * @member {commonmodule.IRampRate|null|undefined} rampRates
         * @memberof interconnectionmodule.InterconnectionPoint
         * @instance
         */
        InterconnectionPoint.prototype.rampRates = null;

        /**
         * InterconnectionPoint reactivePwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} reactivePwrSetPointEnabled
         * @memberof interconnectionmodule.InterconnectionPoint
         * @instance
         */
        InterconnectionPoint.prototype.reactivePwrSetPointEnabled = null;

        /**
         * InterconnectionPoint realPwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} realPwrSetPointEnabled
         * @memberof interconnectionmodule.InterconnectionPoint
         * @instance
         */
        InterconnectionPoint.prototype.realPwrSetPointEnabled = null;

        /**
         * InterconnectionPoint voltageSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} voltageSetPointEnabled
         * @memberof interconnectionmodule.InterconnectionPoint
         * @instance
         */
        InterconnectionPoint.prototype.voltageSetPointEnabled = null;

        /**
         * InterconnectionPoint startTime.
         * @member {commonmodule.ITimestamp|null|undefined} startTime
         * @memberof interconnectionmodule.InterconnectionPoint
         * @instance
         */
        InterconnectionPoint.prototype.startTime = null;

        /**
         * Creates a new InterconnectionPoint instance using the specified properties.
         * @function create
         * @memberof interconnectionmodule.InterconnectionPoint
         * @static
         * @param {interconnectionmodule.IInterconnectionPoint=} [properties] Properties to set
         * @returns {interconnectionmodule.InterconnectionPoint} InterconnectionPoint instance
         */
        InterconnectionPoint.create = function create(properties) {
            return new InterconnectionPoint(properties);
        };

        /**
         * Encodes the specified InterconnectionPoint message. Does not implicitly {@link interconnectionmodule.InterconnectionPoint.verify|verify} messages.
         * @function encode
         * @memberof interconnectionmodule.InterconnectionPoint
         * @static
         * @param {interconnectionmodule.IInterconnectionPoint} message InterconnectionPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InterconnectionPoint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.blackStartEnabled != null && Object.hasOwnProperty.call(message, "blackStartEnabled"))
                $root.commonmodule.ControlDPC.encode(message.blackStartEnabled, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.frequencySetPointEnabled != null && Object.hasOwnProperty.call(message, "frequencySetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.frequencySetPointEnabled, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.island != null && Object.hasOwnProperty.call(message, "island"))
                $root.commonmodule.ControlDPC.encode(message.island, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.pctHzDroop != null && Object.hasOwnProperty.call(message, "pctHzDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctHzDroop, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.pctVDroop != null && Object.hasOwnProperty.call(message, "pctVDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctVDroop, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.rampRates != null && Object.hasOwnProperty.call(message, "rampRates"))
                $root.commonmodule.RampRate.encode(message.rampRates, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.reactivePwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "reactivePwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.reactivePwrSetPointEnabled, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.realPwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "realPwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.realPwrSetPointEnabled, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.voltageSetPointEnabled != null && Object.hasOwnProperty.call(message, "voltageSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.voltageSetPointEnabled, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                $root.commonmodule.Timestamp.encode(message.startTime, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified InterconnectionPoint message, length delimited. Does not implicitly {@link interconnectionmodule.InterconnectionPoint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof interconnectionmodule.InterconnectionPoint
         * @static
         * @param {interconnectionmodule.IInterconnectionPoint} message InterconnectionPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InterconnectionPoint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InterconnectionPoint message from the specified reader or buffer.
         * @function decode
         * @memberof interconnectionmodule.InterconnectionPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {interconnectionmodule.InterconnectionPoint} InterconnectionPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InterconnectionPoint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.interconnectionmodule.InterconnectionPoint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.blackStartEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.frequencySetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.island = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.pctHzDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.pctVDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.rampRates = $root.commonmodule.RampRate.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.startTime = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InterconnectionPoint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof interconnectionmodule.InterconnectionPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {interconnectionmodule.InterconnectionPoint} InterconnectionPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InterconnectionPoint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InterconnectionPoint message.
         * @function verify
         * @memberof interconnectionmodule.InterconnectionPoint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InterconnectionPoint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.blackStartEnabled != null && message.hasOwnProperty("blackStartEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.blackStartEnabled);
                if (error)
                    return "blackStartEnabled." + error;
            }
            if (message.frequencySetPointEnabled != null && message.hasOwnProperty("frequencySetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.frequencySetPointEnabled);
                if (error)
                    return "frequencySetPointEnabled." + error;
            }
            if (message.island != null && message.hasOwnProperty("island")) {
                var error = $root.commonmodule.ControlDPC.verify(message.island);
                if (error)
                    return "island." + error;
            }
            if (message.pctHzDroop != null && message.hasOwnProperty("pctHzDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctHzDroop);
                if (error)
                    return "pctHzDroop." + error;
            }
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctVDroop);
                if (error)
                    return "pctVDroop." + error;
            }
            if (message.rampRates != null && message.hasOwnProperty("rampRates")) {
                var error = $root.commonmodule.RampRate.verify(message.rampRates);
                if (error)
                    return "rampRates." + error;
            }
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reactivePwrSetPointEnabled);
                if (error)
                    return "reactivePwrSetPointEnabled." + error;
            }
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.realPwrSetPointEnabled);
                if (error)
                    return "realPwrSetPointEnabled." + error;
            }
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.voltageSetPointEnabled);
                if (error)
                    return "voltageSetPointEnabled." + error;
            }
            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                var error = $root.commonmodule.Timestamp.verify(message.startTime);
                if (error)
                    return "startTime." + error;
            }
            return null;
        };

        /**
         * Creates an InterconnectionPoint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof interconnectionmodule.InterconnectionPoint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {interconnectionmodule.InterconnectionPoint} InterconnectionPoint
         */
        InterconnectionPoint.fromObject = function fromObject(object) {
            if (object instanceof $root.interconnectionmodule.InterconnectionPoint)
                return object;
            var message = new $root.interconnectionmodule.InterconnectionPoint();
            if (object.blackStartEnabled != null) {
                if (typeof object.blackStartEnabled !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionPoint.blackStartEnabled: object expected");
                message.blackStartEnabled = $root.commonmodule.ControlDPC.fromObject(object.blackStartEnabled);
            }
            if (object.frequencySetPointEnabled != null) {
                if (typeof object.frequencySetPointEnabled !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionPoint.frequencySetPointEnabled: object expected");
                message.frequencySetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.frequencySetPointEnabled);
            }
            if (object.island != null) {
                if (typeof object.island !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionPoint.island: object expected");
                message.island = $root.commonmodule.ControlDPC.fromObject(object.island);
            }
            if (object.pctHzDroop != null) {
                if (typeof object.pctHzDroop !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionPoint.pctHzDroop: object expected");
                message.pctHzDroop = $root.google.protobuf.FloatValue.fromObject(object.pctHzDroop);
            }
            if (object.pctVDroop != null) {
                if (typeof object.pctVDroop !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionPoint.pctVDroop: object expected");
                message.pctVDroop = $root.google.protobuf.FloatValue.fromObject(object.pctVDroop);
            }
            if (object.rampRates != null) {
                if (typeof object.rampRates !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionPoint.rampRates: object expected");
                message.rampRates = $root.commonmodule.RampRate.fromObject(object.rampRates);
            }
            if (object.reactivePwrSetPointEnabled != null) {
                if (typeof object.reactivePwrSetPointEnabled !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionPoint.reactivePwrSetPointEnabled: object expected");
                message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.reactivePwrSetPointEnabled);
            }
            if (object.realPwrSetPointEnabled != null) {
                if (typeof object.realPwrSetPointEnabled !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionPoint.realPwrSetPointEnabled: object expected");
                message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.realPwrSetPointEnabled);
            }
            if (object.voltageSetPointEnabled != null) {
                if (typeof object.voltageSetPointEnabled !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionPoint.voltageSetPointEnabled: object expected");
                message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.voltageSetPointEnabled);
            }
            if (object.startTime != null) {
                if (typeof object.startTime !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionPoint.startTime: object expected");
                message.startTime = $root.commonmodule.Timestamp.fromObject(object.startTime);
            }
            return message;
        };

        /**
         * Creates a plain object from an InterconnectionPoint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof interconnectionmodule.InterconnectionPoint
         * @static
         * @param {interconnectionmodule.InterconnectionPoint} message InterconnectionPoint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InterconnectionPoint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.blackStartEnabled = null;
                object.frequencySetPointEnabled = null;
                object.island = null;
                object.pctHzDroop = null;
                object.pctVDroop = null;
                object.rampRates = null;
                object.reactivePwrSetPointEnabled = null;
                object.realPwrSetPointEnabled = null;
                object.voltageSetPointEnabled = null;
                object.startTime = null;
            }
            if (message.blackStartEnabled != null && message.hasOwnProperty("blackStartEnabled"))
                object.blackStartEnabled = $root.commonmodule.ControlDPC.toObject(message.blackStartEnabled, options);
            if (message.frequencySetPointEnabled != null && message.hasOwnProperty("frequencySetPointEnabled"))
                object.frequencySetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.frequencySetPointEnabled, options);
            if (message.island != null && message.hasOwnProperty("island"))
                object.island = $root.commonmodule.ControlDPC.toObject(message.island, options);
            if (message.pctHzDroop != null && message.hasOwnProperty("pctHzDroop"))
                object.pctHzDroop = $root.google.protobuf.FloatValue.toObject(message.pctHzDroop, options);
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop"))
                object.pctVDroop = $root.google.protobuf.FloatValue.toObject(message.pctVDroop, options);
            if (message.rampRates != null && message.hasOwnProperty("rampRates"))
                object.rampRates = $root.commonmodule.RampRate.toObject(message.rampRates, options);
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled"))
                object.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.reactivePwrSetPointEnabled, options);
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled"))
                object.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.realPwrSetPointEnabled, options);
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled"))
                object.voltageSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.voltageSetPointEnabled, options);
            if (message.startTime != null && message.hasOwnProperty("startTime"))
                object.startTime = $root.commonmodule.Timestamp.toObject(message.startTime, options);
            return object;
        };

        /**
         * Converts this InterconnectionPoint to JSON.
         * @function toJSON
         * @memberof interconnectionmodule.InterconnectionPoint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InterconnectionPoint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InterconnectionPoint;
    })();

    interconnectionmodule.InterconnectionCSG = (function() {

        /**
         * Properties of an InterconnectionCSG.
         * @memberof interconnectionmodule
         * @interface IInterconnectionCSG
         * @property {Array.<interconnectionmodule.IInterconnectionPoint>|null} [crvPts] InterconnectionCSG crvPts
         */

        /**
         * Constructs a new InterconnectionCSG.
         * @memberof interconnectionmodule
         * @classdesc Represents an InterconnectionCSG.
         * @implements IInterconnectionCSG
         * @constructor
         * @param {interconnectionmodule.IInterconnectionCSG=} [properties] Properties to set
         */
        function InterconnectionCSG(properties) {
            this.crvPts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InterconnectionCSG crvPts.
         * @member {Array.<interconnectionmodule.IInterconnectionPoint>} crvPts
         * @memberof interconnectionmodule.InterconnectionCSG
         * @instance
         */
        InterconnectionCSG.prototype.crvPts = $util.emptyArray;

        /**
         * Creates a new InterconnectionCSG instance using the specified properties.
         * @function create
         * @memberof interconnectionmodule.InterconnectionCSG
         * @static
         * @param {interconnectionmodule.IInterconnectionCSG=} [properties] Properties to set
         * @returns {interconnectionmodule.InterconnectionCSG} InterconnectionCSG instance
         */
        InterconnectionCSG.create = function create(properties) {
            return new InterconnectionCSG(properties);
        };

        /**
         * Encodes the specified InterconnectionCSG message. Does not implicitly {@link interconnectionmodule.InterconnectionCSG.verify|verify} messages.
         * @function encode
         * @memberof interconnectionmodule.InterconnectionCSG
         * @static
         * @param {interconnectionmodule.IInterconnectionCSG} message InterconnectionCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InterconnectionCSG.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.crvPts != null && message.crvPts.length)
                for (var i = 0; i < message.crvPts.length; ++i)
                    $root.interconnectionmodule.InterconnectionPoint.encode(message.crvPts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified InterconnectionCSG message, length delimited. Does not implicitly {@link interconnectionmodule.InterconnectionCSG.verify|verify} messages.
         * @function encodeDelimited
         * @memberof interconnectionmodule.InterconnectionCSG
         * @static
         * @param {interconnectionmodule.IInterconnectionCSG} message InterconnectionCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InterconnectionCSG.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InterconnectionCSG message from the specified reader or buffer.
         * @function decode
         * @memberof interconnectionmodule.InterconnectionCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {interconnectionmodule.InterconnectionCSG} InterconnectionCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InterconnectionCSG.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.interconnectionmodule.InterconnectionCSG();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.crvPts && message.crvPts.length))
                        message.crvPts = [];
                    message.crvPts.push($root.interconnectionmodule.InterconnectionPoint.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InterconnectionCSG message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof interconnectionmodule.InterconnectionCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {interconnectionmodule.InterconnectionCSG} InterconnectionCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InterconnectionCSG.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InterconnectionCSG message.
         * @function verify
         * @memberof interconnectionmodule.InterconnectionCSG
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InterconnectionCSG.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.crvPts != null && message.hasOwnProperty("crvPts")) {
                if (!Array.isArray(message.crvPts))
                    return "crvPts: array expected";
                for (var i = 0; i < message.crvPts.length; ++i) {
                    var error = $root.interconnectionmodule.InterconnectionPoint.verify(message.crvPts[i]);
                    if (error)
                        return "crvPts." + error;
                }
            }
            return null;
        };

        /**
         * Creates an InterconnectionCSG message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof interconnectionmodule.InterconnectionCSG
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {interconnectionmodule.InterconnectionCSG} InterconnectionCSG
         */
        InterconnectionCSG.fromObject = function fromObject(object) {
            if (object instanceof $root.interconnectionmodule.InterconnectionCSG)
                return object;
            var message = new $root.interconnectionmodule.InterconnectionCSG();
            if (object.crvPts) {
                if (!Array.isArray(object.crvPts))
                    throw TypeError(".interconnectionmodule.InterconnectionCSG.crvPts: array expected");
                message.crvPts = [];
                for (var i = 0; i < object.crvPts.length; ++i) {
                    if (typeof object.crvPts[i] !== "object")
                        throw TypeError(".interconnectionmodule.InterconnectionCSG.crvPts: object expected");
                    message.crvPts[i] = $root.interconnectionmodule.InterconnectionPoint.fromObject(object.crvPts[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an InterconnectionCSG message. Also converts values to other types if specified.
         * @function toObject
         * @memberof interconnectionmodule.InterconnectionCSG
         * @static
         * @param {interconnectionmodule.InterconnectionCSG} message InterconnectionCSG
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InterconnectionCSG.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.crvPts = [];
            if (message.crvPts && message.crvPts.length) {
                object.crvPts = [];
                for (var j = 0; j < message.crvPts.length; ++j)
                    object.crvPts[j] = $root.interconnectionmodule.InterconnectionPoint.toObject(message.crvPts[j], options);
            }
            return object;
        };

        /**
         * Converts this InterconnectionCSG to JSON.
         * @function toJSON
         * @memberof interconnectionmodule.InterconnectionCSG
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InterconnectionCSG.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InterconnectionCSG;
    })();

    interconnectionmodule.InterconnectionControlScheduleFSCH = (function() {

        /**
         * Properties of an InterconnectionControlScheduleFSCH.
         * @memberof interconnectionmodule
         * @interface IInterconnectionControlScheduleFSCH
         * @property {interconnectionmodule.IInterconnectionCSG|null} [ValDCSG] InterconnectionControlScheduleFSCH ValDCSG
         */

        /**
         * Constructs a new InterconnectionControlScheduleFSCH.
         * @memberof interconnectionmodule
         * @classdesc Represents an InterconnectionControlScheduleFSCH.
         * @implements IInterconnectionControlScheduleFSCH
         * @constructor
         * @param {interconnectionmodule.IInterconnectionControlScheduleFSCH=} [properties] Properties to set
         */
        function InterconnectionControlScheduleFSCH(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InterconnectionControlScheduleFSCH ValDCSG.
         * @member {interconnectionmodule.IInterconnectionCSG|null|undefined} ValDCSG
         * @memberof interconnectionmodule.InterconnectionControlScheduleFSCH
         * @instance
         */
        InterconnectionControlScheduleFSCH.prototype.ValDCSG = null;

        /**
         * Creates a new InterconnectionControlScheduleFSCH instance using the specified properties.
         * @function create
         * @memberof interconnectionmodule.InterconnectionControlScheduleFSCH
         * @static
         * @param {interconnectionmodule.IInterconnectionControlScheduleFSCH=} [properties] Properties to set
         * @returns {interconnectionmodule.InterconnectionControlScheduleFSCH} InterconnectionControlScheduleFSCH instance
         */
        InterconnectionControlScheduleFSCH.create = function create(properties) {
            return new InterconnectionControlScheduleFSCH(properties);
        };

        /**
         * Encodes the specified InterconnectionControlScheduleFSCH message. Does not implicitly {@link interconnectionmodule.InterconnectionControlScheduleFSCH.verify|verify} messages.
         * @function encode
         * @memberof interconnectionmodule.InterconnectionControlScheduleFSCH
         * @static
         * @param {interconnectionmodule.IInterconnectionControlScheduleFSCH} message InterconnectionControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InterconnectionControlScheduleFSCH.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ValDCSG != null && Object.hasOwnProperty.call(message, "ValDCSG"))
                $root.interconnectionmodule.InterconnectionCSG.encode(message.ValDCSG, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified InterconnectionControlScheduleFSCH message, length delimited. Does not implicitly {@link interconnectionmodule.InterconnectionControlScheduleFSCH.verify|verify} messages.
         * @function encodeDelimited
         * @memberof interconnectionmodule.InterconnectionControlScheduleFSCH
         * @static
         * @param {interconnectionmodule.IInterconnectionControlScheduleFSCH} message InterconnectionControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InterconnectionControlScheduleFSCH.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InterconnectionControlScheduleFSCH message from the specified reader or buffer.
         * @function decode
         * @memberof interconnectionmodule.InterconnectionControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {interconnectionmodule.InterconnectionControlScheduleFSCH} InterconnectionControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InterconnectionControlScheduleFSCH.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.interconnectionmodule.InterconnectionControlScheduleFSCH();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ValDCSG = $root.interconnectionmodule.InterconnectionCSG.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InterconnectionControlScheduleFSCH message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof interconnectionmodule.InterconnectionControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {interconnectionmodule.InterconnectionControlScheduleFSCH} InterconnectionControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InterconnectionControlScheduleFSCH.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InterconnectionControlScheduleFSCH message.
         * @function verify
         * @memberof interconnectionmodule.InterconnectionControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InterconnectionControlScheduleFSCH.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ValDCSG != null && message.hasOwnProperty("ValDCSG")) {
                var error = $root.interconnectionmodule.InterconnectionCSG.verify(message.ValDCSG);
                if (error)
                    return "ValDCSG." + error;
            }
            return null;
        };

        /**
         * Creates an InterconnectionControlScheduleFSCH message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof interconnectionmodule.InterconnectionControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {interconnectionmodule.InterconnectionControlScheduleFSCH} InterconnectionControlScheduleFSCH
         */
        InterconnectionControlScheduleFSCH.fromObject = function fromObject(object) {
            if (object instanceof $root.interconnectionmodule.InterconnectionControlScheduleFSCH)
                return object;
            var message = new $root.interconnectionmodule.InterconnectionControlScheduleFSCH();
            if (object.ValDCSG != null) {
                if (typeof object.ValDCSG !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionControlScheduleFSCH.ValDCSG: object expected");
                message.ValDCSG = $root.interconnectionmodule.InterconnectionCSG.fromObject(object.ValDCSG);
            }
            return message;
        };

        /**
         * Creates a plain object from an InterconnectionControlScheduleFSCH message. Also converts values to other types if specified.
         * @function toObject
         * @memberof interconnectionmodule.InterconnectionControlScheduleFSCH
         * @static
         * @param {interconnectionmodule.InterconnectionControlScheduleFSCH} message InterconnectionControlScheduleFSCH
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InterconnectionControlScheduleFSCH.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ValDCSG = null;
            if (message.ValDCSG != null && message.hasOwnProperty("ValDCSG"))
                object.ValDCSG = $root.interconnectionmodule.InterconnectionCSG.toObject(message.ValDCSG, options);
            return object;
        };

        /**
         * Converts this InterconnectionControlScheduleFSCH to JSON.
         * @function toJSON
         * @memberof interconnectionmodule.InterconnectionControlScheduleFSCH
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InterconnectionControlScheduleFSCH.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InterconnectionControlScheduleFSCH;
    })();

    interconnectionmodule.InterconnectionScheduleFSCC = (function() {

        /**
         * Properties of an InterconnectionScheduleFSCC.
         * @memberof interconnectionmodule
         * @interface IInterconnectionScheduleFSCC
         * @property {commonmodule.IControlFSCC|null} [controlFSCC] InterconnectionScheduleFSCC controlFSCC
         * @property {Array.<interconnectionmodule.IInterconnectionControlScheduleFSCH>|null} [interconnectionControlScheduleFSCH] InterconnectionScheduleFSCC interconnectionControlScheduleFSCH
         */

        /**
         * Constructs a new InterconnectionScheduleFSCC.
         * @memberof interconnectionmodule
         * @classdesc Represents an InterconnectionScheduleFSCC.
         * @implements IInterconnectionScheduleFSCC
         * @constructor
         * @param {interconnectionmodule.IInterconnectionScheduleFSCC=} [properties] Properties to set
         */
        function InterconnectionScheduleFSCC(properties) {
            this.interconnectionControlScheduleFSCH = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InterconnectionScheduleFSCC controlFSCC.
         * @member {commonmodule.IControlFSCC|null|undefined} controlFSCC
         * @memberof interconnectionmodule.InterconnectionScheduleFSCC
         * @instance
         */
        InterconnectionScheduleFSCC.prototype.controlFSCC = null;

        /**
         * InterconnectionScheduleFSCC interconnectionControlScheduleFSCH.
         * @member {Array.<interconnectionmodule.IInterconnectionControlScheduleFSCH>} interconnectionControlScheduleFSCH
         * @memberof interconnectionmodule.InterconnectionScheduleFSCC
         * @instance
         */
        InterconnectionScheduleFSCC.prototype.interconnectionControlScheduleFSCH = $util.emptyArray;

        /**
         * Creates a new InterconnectionScheduleFSCC instance using the specified properties.
         * @function create
         * @memberof interconnectionmodule.InterconnectionScheduleFSCC
         * @static
         * @param {interconnectionmodule.IInterconnectionScheduleFSCC=} [properties] Properties to set
         * @returns {interconnectionmodule.InterconnectionScheduleFSCC} InterconnectionScheduleFSCC instance
         */
        InterconnectionScheduleFSCC.create = function create(properties) {
            return new InterconnectionScheduleFSCC(properties);
        };

        /**
         * Encodes the specified InterconnectionScheduleFSCC message. Does not implicitly {@link interconnectionmodule.InterconnectionScheduleFSCC.verify|verify} messages.
         * @function encode
         * @memberof interconnectionmodule.InterconnectionScheduleFSCC
         * @static
         * @param {interconnectionmodule.IInterconnectionScheduleFSCC} message InterconnectionScheduleFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InterconnectionScheduleFSCC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlFSCC != null && Object.hasOwnProperty.call(message, "controlFSCC"))
                $root.commonmodule.ControlFSCC.encode(message.controlFSCC, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.interconnectionControlScheduleFSCH != null && message.interconnectionControlScheduleFSCH.length)
                for (var i = 0; i < message.interconnectionControlScheduleFSCH.length; ++i)
                    $root.interconnectionmodule.InterconnectionControlScheduleFSCH.encode(message.interconnectionControlScheduleFSCH[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified InterconnectionScheduleFSCC message, length delimited. Does not implicitly {@link interconnectionmodule.InterconnectionScheduleFSCC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof interconnectionmodule.InterconnectionScheduleFSCC
         * @static
         * @param {interconnectionmodule.IInterconnectionScheduleFSCC} message InterconnectionScheduleFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InterconnectionScheduleFSCC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InterconnectionScheduleFSCC message from the specified reader or buffer.
         * @function decode
         * @memberof interconnectionmodule.InterconnectionScheduleFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {interconnectionmodule.InterconnectionScheduleFSCC} InterconnectionScheduleFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InterconnectionScheduleFSCC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.interconnectionmodule.InterconnectionScheduleFSCC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlFSCC = $root.commonmodule.ControlFSCC.decode(reader, reader.uint32());
                    break;
                case 2:
                    if (!(message.interconnectionControlScheduleFSCH && message.interconnectionControlScheduleFSCH.length))
                        message.interconnectionControlScheduleFSCH = [];
                    message.interconnectionControlScheduleFSCH.push($root.interconnectionmodule.InterconnectionControlScheduleFSCH.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InterconnectionScheduleFSCC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof interconnectionmodule.InterconnectionScheduleFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {interconnectionmodule.InterconnectionScheduleFSCC} InterconnectionScheduleFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InterconnectionScheduleFSCC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InterconnectionScheduleFSCC message.
         * @function verify
         * @memberof interconnectionmodule.InterconnectionScheduleFSCC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InterconnectionScheduleFSCC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlFSCC != null && message.hasOwnProperty("controlFSCC")) {
                var error = $root.commonmodule.ControlFSCC.verify(message.controlFSCC);
                if (error)
                    return "controlFSCC." + error;
            }
            if (message.interconnectionControlScheduleFSCH != null && message.hasOwnProperty("interconnectionControlScheduleFSCH")) {
                if (!Array.isArray(message.interconnectionControlScheduleFSCH))
                    return "interconnectionControlScheduleFSCH: array expected";
                for (var i = 0; i < message.interconnectionControlScheduleFSCH.length; ++i) {
                    var error = $root.interconnectionmodule.InterconnectionControlScheduleFSCH.verify(message.interconnectionControlScheduleFSCH[i]);
                    if (error)
                        return "interconnectionControlScheduleFSCH." + error;
                }
            }
            return null;
        };

        /**
         * Creates an InterconnectionScheduleFSCC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof interconnectionmodule.InterconnectionScheduleFSCC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {interconnectionmodule.InterconnectionScheduleFSCC} InterconnectionScheduleFSCC
         */
        InterconnectionScheduleFSCC.fromObject = function fromObject(object) {
            if (object instanceof $root.interconnectionmodule.InterconnectionScheduleFSCC)
                return object;
            var message = new $root.interconnectionmodule.InterconnectionScheduleFSCC();
            if (object.controlFSCC != null) {
                if (typeof object.controlFSCC !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionScheduleFSCC.controlFSCC: object expected");
                message.controlFSCC = $root.commonmodule.ControlFSCC.fromObject(object.controlFSCC);
            }
            if (object.interconnectionControlScheduleFSCH) {
                if (!Array.isArray(object.interconnectionControlScheduleFSCH))
                    throw TypeError(".interconnectionmodule.InterconnectionScheduleFSCC.interconnectionControlScheduleFSCH: array expected");
                message.interconnectionControlScheduleFSCH = [];
                for (var i = 0; i < object.interconnectionControlScheduleFSCH.length; ++i) {
                    if (typeof object.interconnectionControlScheduleFSCH[i] !== "object")
                        throw TypeError(".interconnectionmodule.InterconnectionScheduleFSCC.interconnectionControlScheduleFSCH: object expected");
                    message.interconnectionControlScheduleFSCH[i] = $root.interconnectionmodule.InterconnectionControlScheduleFSCH.fromObject(object.interconnectionControlScheduleFSCH[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from an InterconnectionScheduleFSCC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof interconnectionmodule.InterconnectionScheduleFSCC
         * @static
         * @param {interconnectionmodule.InterconnectionScheduleFSCC} message InterconnectionScheduleFSCC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InterconnectionScheduleFSCC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.interconnectionControlScheduleFSCH = [];
            if (options.defaults)
                object.controlFSCC = null;
            if (message.controlFSCC != null && message.hasOwnProperty("controlFSCC"))
                object.controlFSCC = $root.commonmodule.ControlFSCC.toObject(message.controlFSCC, options);
            if (message.interconnectionControlScheduleFSCH && message.interconnectionControlScheduleFSCH.length) {
                object.interconnectionControlScheduleFSCH = [];
                for (var j = 0; j < message.interconnectionControlScheduleFSCH.length; ++j)
                    object.interconnectionControlScheduleFSCH[j] = $root.interconnectionmodule.InterconnectionControlScheduleFSCH.toObject(message.interconnectionControlScheduleFSCH[j], options);
            }
            return object;
        };

        /**
         * Converts this InterconnectionScheduleFSCC to JSON.
         * @function toJSON
         * @memberof interconnectionmodule.InterconnectionScheduleFSCC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InterconnectionScheduleFSCC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InterconnectionScheduleFSCC;
    })();

    interconnectionmodule.InterconnectionSchedule = (function() {

        /**
         * Properties of an InterconnectionSchedule.
         * @memberof interconnectionmodule
         * @interface IInterconnectionSchedule
         * @property {commonmodule.IControlValue|null} [controlValue] InterconnectionSchedule controlValue
         * @property {commonmodule.ICheckConditions|null} [check] InterconnectionSchedule check
         * @property {interconnectionmodule.IInterconnectionScheduleFSCC|null} [interconnectionScheduleFSCC] InterconnectionSchedule interconnectionScheduleFSCC
         */

        /**
         * Constructs a new InterconnectionSchedule.
         * @memberof interconnectionmodule
         * @classdesc Represents an InterconnectionSchedule.
         * @implements IInterconnectionSchedule
         * @constructor
         * @param {interconnectionmodule.IInterconnectionSchedule=} [properties] Properties to set
         */
        function InterconnectionSchedule(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InterconnectionSchedule controlValue.
         * @member {commonmodule.IControlValue|null|undefined} controlValue
         * @memberof interconnectionmodule.InterconnectionSchedule
         * @instance
         */
        InterconnectionSchedule.prototype.controlValue = null;

        /**
         * InterconnectionSchedule check.
         * @member {commonmodule.ICheckConditions|null|undefined} check
         * @memberof interconnectionmodule.InterconnectionSchedule
         * @instance
         */
        InterconnectionSchedule.prototype.check = null;

        /**
         * InterconnectionSchedule interconnectionScheduleFSCC.
         * @member {interconnectionmodule.IInterconnectionScheduleFSCC|null|undefined} interconnectionScheduleFSCC
         * @memberof interconnectionmodule.InterconnectionSchedule
         * @instance
         */
        InterconnectionSchedule.prototype.interconnectionScheduleFSCC = null;

        /**
         * Creates a new InterconnectionSchedule instance using the specified properties.
         * @function create
         * @memberof interconnectionmodule.InterconnectionSchedule
         * @static
         * @param {interconnectionmodule.IInterconnectionSchedule=} [properties] Properties to set
         * @returns {interconnectionmodule.InterconnectionSchedule} InterconnectionSchedule instance
         */
        InterconnectionSchedule.create = function create(properties) {
            return new InterconnectionSchedule(properties);
        };

        /**
         * Encodes the specified InterconnectionSchedule message. Does not implicitly {@link interconnectionmodule.InterconnectionSchedule.verify|verify} messages.
         * @function encode
         * @memberof interconnectionmodule.InterconnectionSchedule
         * @static
         * @param {interconnectionmodule.IInterconnectionSchedule} message InterconnectionSchedule message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InterconnectionSchedule.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlValue != null && Object.hasOwnProperty.call(message, "controlValue"))
                $root.commonmodule.ControlValue.encode(message.controlValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.check != null && Object.hasOwnProperty.call(message, "check"))
                $root.commonmodule.CheckConditions.encode(message.check, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.interconnectionScheduleFSCC != null && Object.hasOwnProperty.call(message, "interconnectionScheduleFSCC"))
                $root.interconnectionmodule.InterconnectionScheduleFSCC.encode(message.interconnectionScheduleFSCC, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified InterconnectionSchedule message, length delimited. Does not implicitly {@link interconnectionmodule.InterconnectionSchedule.verify|verify} messages.
         * @function encodeDelimited
         * @memberof interconnectionmodule.InterconnectionSchedule
         * @static
         * @param {interconnectionmodule.IInterconnectionSchedule} message InterconnectionSchedule message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InterconnectionSchedule.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InterconnectionSchedule message from the specified reader or buffer.
         * @function decode
         * @memberof interconnectionmodule.InterconnectionSchedule
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {interconnectionmodule.InterconnectionSchedule} InterconnectionSchedule
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InterconnectionSchedule.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.interconnectionmodule.InterconnectionSchedule();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlValue = $root.commonmodule.ControlValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.check = $root.commonmodule.CheckConditions.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.interconnectionScheduleFSCC = $root.interconnectionmodule.InterconnectionScheduleFSCC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InterconnectionSchedule message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof interconnectionmodule.InterconnectionSchedule
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {interconnectionmodule.InterconnectionSchedule} InterconnectionSchedule
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InterconnectionSchedule.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InterconnectionSchedule message.
         * @function verify
         * @memberof interconnectionmodule.InterconnectionSchedule
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InterconnectionSchedule.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlValue != null && message.hasOwnProperty("controlValue")) {
                var error = $root.commonmodule.ControlValue.verify(message.controlValue);
                if (error)
                    return "controlValue." + error;
            }
            if (message.check != null && message.hasOwnProperty("check")) {
                var error = $root.commonmodule.CheckConditions.verify(message.check);
                if (error)
                    return "check." + error;
            }
            if (message.interconnectionScheduleFSCC != null && message.hasOwnProperty("interconnectionScheduleFSCC")) {
                var error = $root.interconnectionmodule.InterconnectionScheduleFSCC.verify(message.interconnectionScheduleFSCC);
                if (error)
                    return "interconnectionScheduleFSCC." + error;
            }
            return null;
        };

        /**
         * Creates an InterconnectionSchedule message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof interconnectionmodule.InterconnectionSchedule
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {interconnectionmodule.InterconnectionSchedule} InterconnectionSchedule
         */
        InterconnectionSchedule.fromObject = function fromObject(object) {
            if (object instanceof $root.interconnectionmodule.InterconnectionSchedule)
                return object;
            var message = new $root.interconnectionmodule.InterconnectionSchedule();
            if (object.controlValue != null) {
                if (typeof object.controlValue !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionSchedule.controlValue: object expected");
                message.controlValue = $root.commonmodule.ControlValue.fromObject(object.controlValue);
            }
            if (object.check != null) {
                if (typeof object.check !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionSchedule.check: object expected");
                message.check = $root.commonmodule.CheckConditions.fromObject(object.check);
            }
            if (object.interconnectionScheduleFSCC != null) {
                if (typeof object.interconnectionScheduleFSCC !== "object")
                    throw TypeError(".interconnectionmodule.InterconnectionSchedule.interconnectionScheduleFSCC: object expected");
                message.interconnectionScheduleFSCC = $root.interconnectionmodule.InterconnectionScheduleFSCC.fromObject(object.interconnectionScheduleFSCC);
            }
            return message;
        };

        /**
         * Creates a plain object from an InterconnectionSchedule message. Also converts values to other types if specified.
         * @function toObject
         * @memberof interconnectionmodule.InterconnectionSchedule
         * @static
         * @param {interconnectionmodule.InterconnectionSchedule} message InterconnectionSchedule
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InterconnectionSchedule.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlValue = null;
                object.check = null;
                object.interconnectionScheduleFSCC = null;
            }
            if (message.controlValue != null && message.hasOwnProperty("controlValue"))
                object.controlValue = $root.commonmodule.ControlValue.toObject(message.controlValue, options);
            if (message.check != null && message.hasOwnProperty("check"))
                object.check = $root.commonmodule.CheckConditions.toObject(message.check, options);
            if (message.interconnectionScheduleFSCC != null && message.hasOwnProperty("interconnectionScheduleFSCC"))
                object.interconnectionScheduleFSCC = $root.interconnectionmodule.InterconnectionScheduleFSCC.toObject(message.interconnectionScheduleFSCC, options);
            return object;
        };

        /**
         * Converts this InterconnectionSchedule to JSON.
         * @function toJSON
         * @memberof interconnectionmodule.InterconnectionSchedule
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InterconnectionSchedule.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InterconnectionSchedule;
    })();

    interconnectionmodule.PlannedInterconnectionScheduleProfile = (function() {

        /**
         * Properties of a PlannedInterconnectionScheduleProfile.
         * @memberof interconnectionmodule
         * @interface IPlannedInterconnectionScheduleProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] PlannedInterconnectionScheduleProfile controlMessageInfo
         * @property {commonmodule.IApplicationSystem|null} [applicationSystem] PlannedInterconnectionScheduleProfile applicationSystem
         * @property {interconnectionmodule.IInterconnectionSchedule|null} [interconnectionSchedule] PlannedInterconnectionScheduleProfile interconnectionSchedule
         */

        /**
         * Constructs a new PlannedInterconnectionScheduleProfile.
         * @memberof interconnectionmodule
         * @classdesc Represents a PlannedInterconnectionScheduleProfile.
         * @implements IPlannedInterconnectionScheduleProfile
         * @constructor
         * @param {interconnectionmodule.IPlannedInterconnectionScheduleProfile=} [properties] Properties to set
         */
        function PlannedInterconnectionScheduleProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PlannedInterconnectionScheduleProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof interconnectionmodule.PlannedInterconnectionScheduleProfile
         * @instance
         */
        PlannedInterconnectionScheduleProfile.prototype.controlMessageInfo = null;

        /**
         * PlannedInterconnectionScheduleProfile applicationSystem.
         * @member {commonmodule.IApplicationSystem|null|undefined} applicationSystem
         * @memberof interconnectionmodule.PlannedInterconnectionScheduleProfile
         * @instance
         */
        PlannedInterconnectionScheduleProfile.prototype.applicationSystem = null;

        /**
         * PlannedInterconnectionScheduleProfile interconnectionSchedule.
         * @member {interconnectionmodule.IInterconnectionSchedule|null|undefined} interconnectionSchedule
         * @memberof interconnectionmodule.PlannedInterconnectionScheduleProfile
         * @instance
         */
        PlannedInterconnectionScheduleProfile.prototype.interconnectionSchedule = null;

        /**
         * Creates a new PlannedInterconnectionScheduleProfile instance using the specified properties.
         * @function create
         * @memberof interconnectionmodule.PlannedInterconnectionScheduleProfile
         * @static
         * @param {interconnectionmodule.IPlannedInterconnectionScheduleProfile=} [properties] Properties to set
         * @returns {interconnectionmodule.PlannedInterconnectionScheduleProfile} PlannedInterconnectionScheduleProfile instance
         */
        PlannedInterconnectionScheduleProfile.create = function create(properties) {
            return new PlannedInterconnectionScheduleProfile(properties);
        };

        /**
         * Encodes the specified PlannedInterconnectionScheduleProfile message. Does not implicitly {@link interconnectionmodule.PlannedInterconnectionScheduleProfile.verify|verify} messages.
         * @function encode
         * @memberof interconnectionmodule.PlannedInterconnectionScheduleProfile
         * @static
         * @param {interconnectionmodule.IPlannedInterconnectionScheduleProfile} message PlannedInterconnectionScheduleProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlannedInterconnectionScheduleProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.applicationSystem != null && Object.hasOwnProperty.call(message, "applicationSystem"))
                $root.commonmodule.ApplicationSystem.encode(message.applicationSystem, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.interconnectionSchedule != null && Object.hasOwnProperty.call(message, "interconnectionSchedule"))
                $root.interconnectionmodule.InterconnectionSchedule.encode(message.interconnectionSchedule, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified PlannedInterconnectionScheduleProfile message, length delimited. Does not implicitly {@link interconnectionmodule.PlannedInterconnectionScheduleProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof interconnectionmodule.PlannedInterconnectionScheduleProfile
         * @static
         * @param {interconnectionmodule.IPlannedInterconnectionScheduleProfile} message PlannedInterconnectionScheduleProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PlannedInterconnectionScheduleProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PlannedInterconnectionScheduleProfile message from the specified reader or buffer.
         * @function decode
         * @memberof interconnectionmodule.PlannedInterconnectionScheduleProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {interconnectionmodule.PlannedInterconnectionScheduleProfile} PlannedInterconnectionScheduleProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlannedInterconnectionScheduleProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.interconnectionmodule.PlannedInterconnectionScheduleProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.applicationSystem = $root.commonmodule.ApplicationSystem.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.interconnectionSchedule = $root.interconnectionmodule.InterconnectionSchedule.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PlannedInterconnectionScheduleProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof interconnectionmodule.PlannedInterconnectionScheduleProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {interconnectionmodule.PlannedInterconnectionScheduleProfile} PlannedInterconnectionScheduleProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PlannedInterconnectionScheduleProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PlannedInterconnectionScheduleProfile message.
         * @function verify
         * @memberof interconnectionmodule.PlannedInterconnectionScheduleProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PlannedInterconnectionScheduleProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.applicationSystem != null && message.hasOwnProperty("applicationSystem")) {
                var error = $root.commonmodule.ApplicationSystem.verify(message.applicationSystem);
                if (error)
                    return "applicationSystem." + error;
            }
            if (message.interconnectionSchedule != null && message.hasOwnProperty("interconnectionSchedule")) {
                var error = $root.interconnectionmodule.InterconnectionSchedule.verify(message.interconnectionSchedule);
                if (error)
                    return "interconnectionSchedule." + error;
            }
            return null;
        };

        /**
         * Creates a PlannedInterconnectionScheduleProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof interconnectionmodule.PlannedInterconnectionScheduleProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {interconnectionmodule.PlannedInterconnectionScheduleProfile} PlannedInterconnectionScheduleProfile
         */
        PlannedInterconnectionScheduleProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.interconnectionmodule.PlannedInterconnectionScheduleProfile)
                return object;
            var message = new $root.interconnectionmodule.PlannedInterconnectionScheduleProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".interconnectionmodule.PlannedInterconnectionScheduleProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.applicationSystem != null) {
                if (typeof object.applicationSystem !== "object")
                    throw TypeError(".interconnectionmodule.PlannedInterconnectionScheduleProfile.applicationSystem: object expected");
                message.applicationSystem = $root.commonmodule.ApplicationSystem.fromObject(object.applicationSystem);
            }
            if (object.interconnectionSchedule != null) {
                if (typeof object.interconnectionSchedule !== "object")
                    throw TypeError(".interconnectionmodule.PlannedInterconnectionScheduleProfile.interconnectionSchedule: object expected");
                message.interconnectionSchedule = $root.interconnectionmodule.InterconnectionSchedule.fromObject(object.interconnectionSchedule);
            }
            return message;
        };

        /**
         * Creates a plain object from a PlannedInterconnectionScheduleProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof interconnectionmodule.PlannedInterconnectionScheduleProfile
         * @static
         * @param {interconnectionmodule.PlannedInterconnectionScheduleProfile} message PlannedInterconnectionScheduleProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PlannedInterconnectionScheduleProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.applicationSystem = null;
                object.interconnectionSchedule = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.applicationSystem != null && message.hasOwnProperty("applicationSystem"))
                object.applicationSystem = $root.commonmodule.ApplicationSystem.toObject(message.applicationSystem, options);
            if (message.interconnectionSchedule != null && message.hasOwnProperty("interconnectionSchedule"))
                object.interconnectionSchedule = $root.interconnectionmodule.InterconnectionSchedule.toObject(message.interconnectionSchedule, options);
            return object;
        };

        /**
         * Converts this PlannedInterconnectionScheduleProfile to JSON.
         * @function toJSON
         * @memberof interconnectionmodule.PlannedInterconnectionScheduleProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PlannedInterconnectionScheduleProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PlannedInterconnectionScheduleProfile;
    })();

    interconnectionmodule.RequestedInterconnectionScheduleProfile = (function() {

        /**
         * Properties of a RequestedInterconnectionScheduleProfile.
         * @memberof interconnectionmodule
         * @interface IRequestedInterconnectionScheduleProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] RequestedInterconnectionScheduleProfile controlMessageInfo
         * @property {commonmodule.IApplicationSystem|null} [applicationSystem] RequestedInterconnectionScheduleProfile applicationSystem
         * @property {interconnectionmodule.IInterconnectionSchedule|null} [interconnectionSchedule] RequestedInterconnectionScheduleProfile interconnectionSchedule
         */

        /**
         * Constructs a new RequestedInterconnectionScheduleProfile.
         * @memberof interconnectionmodule
         * @classdesc Represents a RequestedInterconnectionScheduleProfile.
         * @implements IRequestedInterconnectionScheduleProfile
         * @constructor
         * @param {interconnectionmodule.IRequestedInterconnectionScheduleProfile=} [properties] Properties to set
         */
        function RequestedInterconnectionScheduleProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RequestedInterconnectionScheduleProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof interconnectionmodule.RequestedInterconnectionScheduleProfile
         * @instance
         */
        RequestedInterconnectionScheduleProfile.prototype.controlMessageInfo = null;

        /**
         * RequestedInterconnectionScheduleProfile applicationSystem.
         * @member {commonmodule.IApplicationSystem|null|undefined} applicationSystem
         * @memberof interconnectionmodule.RequestedInterconnectionScheduleProfile
         * @instance
         */
        RequestedInterconnectionScheduleProfile.prototype.applicationSystem = null;

        /**
         * RequestedInterconnectionScheduleProfile interconnectionSchedule.
         * @member {interconnectionmodule.IInterconnectionSchedule|null|undefined} interconnectionSchedule
         * @memberof interconnectionmodule.RequestedInterconnectionScheduleProfile
         * @instance
         */
        RequestedInterconnectionScheduleProfile.prototype.interconnectionSchedule = null;

        /**
         * Creates a new RequestedInterconnectionScheduleProfile instance using the specified properties.
         * @function create
         * @memberof interconnectionmodule.RequestedInterconnectionScheduleProfile
         * @static
         * @param {interconnectionmodule.IRequestedInterconnectionScheduleProfile=} [properties] Properties to set
         * @returns {interconnectionmodule.RequestedInterconnectionScheduleProfile} RequestedInterconnectionScheduleProfile instance
         */
        RequestedInterconnectionScheduleProfile.create = function create(properties) {
            return new RequestedInterconnectionScheduleProfile(properties);
        };

        /**
         * Encodes the specified RequestedInterconnectionScheduleProfile message. Does not implicitly {@link interconnectionmodule.RequestedInterconnectionScheduleProfile.verify|verify} messages.
         * @function encode
         * @memberof interconnectionmodule.RequestedInterconnectionScheduleProfile
         * @static
         * @param {interconnectionmodule.IRequestedInterconnectionScheduleProfile} message RequestedInterconnectionScheduleProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestedInterconnectionScheduleProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.applicationSystem != null && Object.hasOwnProperty.call(message, "applicationSystem"))
                $root.commonmodule.ApplicationSystem.encode(message.applicationSystem, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.interconnectionSchedule != null && Object.hasOwnProperty.call(message, "interconnectionSchedule"))
                $root.interconnectionmodule.InterconnectionSchedule.encode(message.interconnectionSchedule, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RequestedInterconnectionScheduleProfile message, length delimited. Does not implicitly {@link interconnectionmodule.RequestedInterconnectionScheduleProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof interconnectionmodule.RequestedInterconnectionScheduleProfile
         * @static
         * @param {interconnectionmodule.IRequestedInterconnectionScheduleProfile} message RequestedInterconnectionScheduleProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RequestedInterconnectionScheduleProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RequestedInterconnectionScheduleProfile message from the specified reader or buffer.
         * @function decode
         * @memberof interconnectionmodule.RequestedInterconnectionScheduleProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {interconnectionmodule.RequestedInterconnectionScheduleProfile} RequestedInterconnectionScheduleProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestedInterconnectionScheduleProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.interconnectionmodule.RequestedInterconnectionScheduleProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.applicationSystem = $root.commonmodule.ApplicationSystem.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.interconnectionSchedule = $root.interconnectionmodule.InterconnectionSchedule.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RequestedInterconnectionScheduleProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof interconnectionmodule.RequestedInterconnectionScheduleProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {interconnectionmodule.RequestedInterconnectionScheduleProfile} RequestedInterconnectionScheduleProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RequestedInterconnectionScheduleProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RequestedInterconnectionScheduleProfile message.
         * @function verify
         * @memberof interconnectionmodule.RequestedInterconnectionScheduleProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RequestedInterconnectionScheduleProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.applicationSystem != null && message.hasOwnProperty("applicationSystem")) {
                var error = $root.commonmodule.ApplicationSystem.verify(message.applicationSystem);
                if (error)
                    return "applicationSystem." + error;
            }
            if (message.interconnectionSchedule != null && message.hasOwnProperty("interconnectionSchedule")) {
                var error = $root.interconnectionmodule.InterconnectionSchedule.verify(message.interconnectionSchedule);
                if (error)
                    return "interconnectionSchedule." + error;
            }
            return null;
        };

        /**
         * Creates a RequestedInterconnectionScheduleProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof interconnectionmodule.RequestedInterconnectionScheduleProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {interconnectionmodule.RequestedInterconnectionScheduleProfile} RequestedInterconnectionScheduleProfile
         */
        RequestedInterconnectionScheduleProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.interconnectionmodule.RequestedInterconnectionScheduleProfile)
                return object;
            var message = new $root.interconnectionmodule.RequestedInterconnectionScheduleProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".interconnectionmodule.RequestedInterconnectionScheduleProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.applicationSystem != null) {
                if (typeof object.applicationSystem !== "object")
                    throw TypeError(".interconnectionmodule.RequestedInterconnectionScheduleProfile.applicationSystem: object expected");
                message.applicationSystem = $root.commonmodule.ApplicationSystem.fromObject(object.applicationSystem);
            }
            if (object.interconnectionSchedule != null) {
                if (typeof object.interconnectionSchedule !== "object")
                    throw TypeError(".interconnectionmodule.RequestedInterconnectionScheduleProfile.interconnectionSchedule: object expected");
                message.interconnectionSchedule = $root.interconnectionmodule.InterconnectionSchedule.fromObject(object.interconnectionSchedule);
            }
            return message;
        };

        /**
         * Creates a plain object from a RequestedInterconnectionScheduleProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof interconnectionmodule.RequestedInterconnectionScheduleProfile
         * @static
         * @param {interconnectionmodule.RequestedInterconnectionScheduleProfile} message RequestedInterconnectionScheduleProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RequestedInterconnectionScheduleProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.applicationSystem = null;
                object.interconnectionSchedule = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.applicationSystem != null && message.hasOwnProperty("applicationSystem"))
                object.applicationSystem = $root.commonmodule.ApplicationSystem.toObject(message.applicationSystem, options);
            if (message.interconnectionSchedule != null && message.hasOwnProperty("interconnectionSchedule"))
                object.interconnectionSchedule = $root.interconnectionmodule.InterconnectionSchedule.toObject(message.interconnectionSchedule, options);
            return object;
        };

        /**
         * Converts this RequestedInterconnectionScheduleProfile to JSON.
         * @function toJSON
         * @memberof interconnectionmodule.RequestedInterconnectionScheduleProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RequestedInterconnectionScheduleProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RequestedInterconnectionScheduleProfile;
    })();

    return interconnectionmodule;
})();

$root.generationmodule = (function() {

    /**
     * Namespace generationmodule.
     * @exports generationmodule
     * @namespace
     */
    var generationmodule = {};

    generationmodule.GenerationPoint = (function() {

        /**
         * Properties of a GenerationPoint.
         * @memberof generationmodule
         * @interface IGenerationPoint
         * @property {commonmodule.IControlDPC|null} [blackStartEnabled] GenerationPoint blackStartEnabled
         * @property {commonmodule.IControlDPC|null} [frequencySetPointEnabled] GenerationPoint frequencySetPointEnabled
         * @property {google.protobuf.IFloatValue|null} [pctHzDroop] GenerationPoint pctHzDroop
         * @property {google.protobuf.IFloatValue|null} [pctVDroop] GenerationPoint pctVDroop
         * @property {commonmodule.IRampRate|null} [rampRates] GenerationPoint rampRates
         * @property {commonmodule.IControlDPC|null} [reactivePwrSetPointEnabled] GenerationPoint reactivePwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [realPwrSetPointEnabled] GenerationPoint realPwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [reset] GenerationPoint reset
         * @property {commonmodule.IOptional_StateKind|null} [state] GenerationPoint state
         * @property {commonmodule.IControlDPC|null} [syncBackToGrid] GenerationPoint syncBackToGrid
         * @property {commonmodule.IControlDPC|null} [transToIslndOnGridLossEnabled] GenerationPoint transToIslndOnGridLossEnabled
         * @property {commonmodule.IControlDPC|null} [voltageSetPointEnabled] GenerationPoint voltageSetPointEnabled
         * @property {commonmodule.IControlTimestamp|null} [startTime] GenerationPoint startTime
         */

        /**
         * Constructs a new GenerationPoint.
         * @memberof generationmodule
         * @classdesc Represents a GenerationPoint.
         * @implements IGenerationPoint
         * @constructor
         * @param {generationmodule.IGenerationPoint=} [properties] Properties to set
         */
        function GenerationPoint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationPoint blackStartEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} blackStartEnabled
         * @memberof generationmodule.GenerationPoint
         * @instance
         */
        GenerationPoint.prototype.blackStartEnabled = null;

        /**
         * GenerationPoint frequencySetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} frequencySetPointEnabled
         * @memberof generationmodule.GenerationPoint
         * @instance
         */
        GenerationPoint.prototype.frequencySetPointEnabled = null;

        /**
         * GenerationPoint pctHzDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctHzDroop
         * @memberof generationmodule.GenerationPoint
         * @instance
         */
        GenerationPoint.prototype.pctHzDroop = null;

        /**
         * GenerationPoint pctVDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctVDroop
         * @memberof generationmodule.GenerationPoint
         * @instance
         */
        GenerationPoint.prototype.pctVDroop = null;

        /**
         * GenerationPoint rampRates.
         * @member {commonmodule.IRampRate|null|undefined} rampRates
         * @memberof generationmodule.GenerationPoint
         * @instance
         */
        GenerationPoint.prototype.rampRates = null;

        /**
         * GenerationPoint reactivePwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} reactivePwrSetPointEnabled
         * @memberof generationmodule.GenerationPoint
         * @instance
         */
        GenerationPoint.prototype.reactivePwrSetPointEnabled = null;

        /**
         * GenerationPoint realPwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} realPwrSetPointEnabled
         * @memberof generationmodule.GenerationPoint
         * @instance
         */
        GenerationPoint.prototype.realPwrSetPointEnabled = null;

        /**
         * GenerationPoint reset.
         * @member {commonmodule.IControlDPC|null|undefined} reset
         * @memberof generationmodule.GenerationPoint
         * @instance
         */
        GenerationPoint.prototype.reset = null;

        /**
         * GenerationPoint state.
         * @member {commonmodule.IOptional_StateKind|null|undefined} state
         * @memberof generationmodule.GenerationPoint
         * @instance
         */
        GenerationPoint.prototype.state = null;

        /**
         * GenerationPoint syncBackToGrid.
         * @member {commonmodule.IControlDPC|null|undefined} syncBackToGrid
         * @memberof generationmodule.GenerationPoint
         * @instance
         */
        GenerationPoint.prototype.syncBackToGrid = null;

        /**
         * GenerationPoint transToIslndOnGridLossEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} transToIslndOnGridLossEnabled
         * @memberof generationmodule.GenerationPoint
         * @instance
         */
        GenerationPoint.prototype.transToIslndOnGridLossEnabled = null;

        /**
         * GenerationPoint voltageSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} voltageSetPointEnabled
         * @memberof generationmodule.GenerationPoint
         * @instance
         */
        GenerationPoint.prototype.voltageSetPointEnabled = null;

        /**
         * GenerationPoint startTime.
         * @member {commonmodule.IControlTimestamp|null|undefined} startTime
         * @memberof generationmodule.GenerationPoint
         * @instance
         */
        GenerationPoint.prototype.startTime = null;

        /**
         * Creates a new GenerationPoint instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationPoint
         * @static
         * @param {generationmodule.IGenerationPoint=} [properties] Properties to set
         * @returns {generationmodule.GenerationPoint} GenerationPoint instance
         */
        GenerationPoint.create = function create(properties) {
            return new GenerationPoint(properties);
        };

        /**
         * Encodes the specified GenerationPoint message. Does not implicitly {@link generationmodule.GenerationPoint.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationPoint
         * @static
         * @param {generationmodule.IGenerationPoint} message GenerationPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationPoint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.blackStartEnabled != null && Object.hasOwnProperty.call(message, "blackStartEnabled"))
                $root.commonmodule.ControlDPC.encode(message.blackStartEnabled, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.frequencySetPointEnabled != null && Object.hasOwnProperty.call(message, "frequencySetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.frequencySetPointEnabled, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.pctHzDroop != null && Object.hasOwnProperty.call(message, "pctHzDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctHzDroop, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.pctVDroop != null && Object.hasOwnProperty.call(message, "pctVDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctVDroop, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.rampRates != null && Object.hasOwnProperty.call(message, "rampRates"))
                $root.commonmodule.RampRate.encode(message.rampRates, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.reactivePwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "reactivePwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.reactivePwrSetPointEnabled, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.realPwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "realPwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.realPwrSetPointEnabled, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.reset != null && Object.hasOwnProperty.call(message, "reset"))
                $root.commonmodule.ControlDPC.encode(message.reset, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                $root.commonmodule.Optional_StateKind.encode(message.state, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.syncBackToGrid != null && Object.hasOwnProperty.call(message, "syncBackToGrid"))
                $root.commonmodule.ControlDPC.encode(message.syncBackToGrid, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.transToIslndOnGridLossEnabled != null && Object.hasOwnProperty.call(message, "transToIslndOnGridLossEnabled"))
                $root.commonmodule.ControlDPC.encode(message.transToIslndOnGridLossEnabled, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.voltageSetPointEnabled != null && Object.hasOwnProperty.call(message, "voltageSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.voltageSetPointEnabled, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                $root.commonmodule.ControlTimestamp.encode(message.startTime, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationPoint message, length delimited. Does not implicitly {@link generationmodule.GenerationPoint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationPoint
         * @static
         * @param {generationmodule.IGenerationPoint} message GenerationPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationPoint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationPoint message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationPoint} GenerationPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationPoint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationPoint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.blackStartEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.frequencySetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.pctHzDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.pctVDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.rampRates = $root.commonmodule.RampRate.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.reset = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.state = $root.commonmodule.Optional_StateKind.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.syncBackToGrid = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 11:
                    message.transToIslndOnGridLossEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 13:
                    message.startTime = $root.commonmodule.ControlTimestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationPoint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationPoint} GenerationPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationPoint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationPoint message.
         * @function verify
         * @memberof generationmodule.GenerationPoint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationPoint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.blackStartEnabled != null && message.hasOwnProperty("blackStartEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.blackStartEnabled);
                if (error)
                    return "blackStartEnabled." + error;
            }
            if (message.frequencySetPointEnabled != null && message.hasOwnProperty("frequencySetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.frequencySetPointEnabled);
                if (error)
                    return "frequencySetPointEnabled." + error;
            }
            if (message.pctHzDroop != null && message.hasOwnProperty("pctHzDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctHzDroop);
                if (error)
                    return "pctHzDroop." + error;
            }
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctVDroop);
                if (error)
                    return "pctVDroop." + error;
            }
            if (message.rampRates != null && message.hasOwnProperty("rampRates")) {
                var error = $root.commonmodule.RampRate.verify(message.rampRates);
                if (error)
                    return "rampRates." + error;
            }
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reactivePwrSetPointEnabled);
                if (error)
                    return "reactivePwrSetPointEnabled." + error;
            }
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.realPwrSetPointEnabled);
                if (error)
                    return "realPwrSetPointEnabled." + error;
            }
            if (message.reset != null && message.hasOwnProperty("reset")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reset);
                if (error)
                    return "reset." + error;
            }
            if (message.state != null && message.hasOwnProperty("state")) {
                var error = $root.commonmodule.Optional_StateKind.verify(message.state);
                if (error)
                    return "state." + error;
            }
            if (message.syncBackToGrid != null && message.hasOwnProperty("syncBackToGrid")) {
                var error = $root.commonmodule.ControlDPC.verify(message.syncBackToGrid);
                if (error)
                    return "syncBackToGrid." + error;
            }
            if (message.transToIslndOnGridLossEnabled != null && message.hasOwnProperty("transToIslndOnGridLossEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.transToIslndOnGridLossEnabled);
                if (error)
                    return "transToIslndOnGridLossEnabled." + error;
            }
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.voltageSetPointEnabled);
                if (error)
                    return "voltageSetPointEnabled." + error;
            }
            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                var error = $root.commonmodule.ControlTimestamp.verify(message.startTime);
                if (error)
                    return "startTime." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationPoint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationPoint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationPoint} GenerationPoint
         */
        GenerationPoint.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationPoint)
                return object;
            var message = new $root.generationmodule.GenerationPoint();
            if (object.blackStartEnabled != null) {
                if (typeof object.blackStartEnabled !== "object")
                    throw TypeError(".generationmodule.GenerationPoint.blackStartEnabled: object expected");
                message.blackStartEnabled = $root.commonmodule.ControlDPC.fromObject(object.blackStartEnabled);
            }
            if (object.frequencySetPointEnabled != null) {
                if (typeof object.frequencySetPointEnabled !== "object")
                    throw TypeError(".generationmodule.GenerationPoint.frequencySetPointEnabled: object expected");
                message.frequencySetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.frequencySetPointEnabled);
            }
            if (object.pctHzDroop != null) {
                if (typeof object.pctHzDroop !== "object")
                    throw TypeError(".generationmodule.GenerationPoint.pctHzDroop: object expected");
                message.pctHzDroop = $root.google.protobuf.FloatValue.fromObject(object.pctHzDroop);
            }
            if (object.pctVDroop != null) {
                if (typeof object.pctVDroop !== "object")
                    throw TypeError(".generationmodule.GenerationPoint.pctVDroop: object expected");
                message.pctVDroop = $root.google.protobuf.FloatValue.fromObject(object.pctVDroop);
            }
            if (object.rampRates != null) {
                if (typeof object.rampRates !== "object")
                    throw TypeError(".generationmodule.GenerationPoint.rampRates: object expected");
                message.rampRates = $root.commonmodule.RampRate.fromObject(object.rampRates);
            }
            if (object.reactivePwrSetPointEnabled != null) {
                if (typeof object.reactivePwrSetPointEnabled !== "object")
                    throw TypeError(".generationmodule.GenerationPoint.reactivePwrSetPointEnabled: object expected");
                message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.reactivePwrSetPointEnabled);
            }
            if (object.realPwrSetPointEnabled != null) {
                if (typeof object.realPwrSetPointEnabled !== "object")
                    throw TypeError(".generationmodule.GenerationPoint.realPwrSetPointEnabled: object expected");
                message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.realPwrSetPointEnabled);
            }
            if (object.reset != null) {
                if (typeof object.reset !== "object")
                    throw TypeError(".generationmodule.GenerationPoint.reset: object expected");
                message.reset = $root.commonmodule.ControlDPC.fromObject(object.reset);
            }
            if (object.state != null) {
                if (typeof object.state !== "object")
                    throw TypeError(".generationmodule.GenerationPoint.state: object expected");
                message.state = $root.commonmodule.Optional_StateKind.fromObject(object.state);
            }
            if (object.syncBackToGrid != null) {
                if (typeof object.syncBackToGrid !== "object")
                    throw TypeError(".generationmodule.GenerationPoint.syncBackToGrid: object expected");
                message.syncBackToGrid = $root.commonmodule.ControlDPC.fromObject(object.syncBackToGrid);
            }
            if (object.transToIslndOnGridLossEnabled != null) {
                if (typeof object.transToIslndOnGridLossEnabled !== "object")
                    throw TypeError(".generationmodule.GenerationPoint.transToIslndOnGridLossEnabled: object expected");
                message.transToIslndOnGridLossEnabled = $root.commonmodule.ControlDPC.fromObject(object.transToIslndOnGridLossEnabled);
            }
            if (object.voltageSetPointEnabled != null) {
                if (typeof object.voltageSetPointEnabled !== "object")
                    throw TypeError(".generationmodule.GenerationPoint.voltageSetPointEnabled: object expected");
                message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.voltageSetPointEnabled);
            }
            if (object.startTime != null) {
                if (typeof object.startTime !== "object")
                    throw TypeError(".generationmodule.GenerationPoint.startTime: object expected");
                message.startTime = $root.commonmodule.ControlTimestamp.fromObject(object.startTime);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationPoint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationPoint
         * @static
         * @param {generationmodule.GenerationPoint} message GenerationPoint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationPoint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.blackStartEnabled = null;
                object.frequencySetPointEnabled = null;
                object.pctHzDroop = null;
                object.pctVDroop = null;
                object.rampRates = null;
                object.reactivePwrSetPointEnabled = null;
                object.realPwrSetPointEnabled = null;
                object.reset = null;
                object.state = null;
                object.syncBackToGrid = null;
                object.transToIslndOnGridLossEnabled = null;
                object.voltageSetPointEnabled = null;
                object.startTime = null;
            }
            if (message.blackStartEnabled != null && message.hasOwnProperty("blackStartEnabled"))
                object.blackStartEnabled = $root.commonmodule.ControlDPC.toObject(message.blackStartEnabled, options);
            if (message.frequencySetPointEnabled != null && message.hasOwnProperty("frequencySetPointEnabled"))
                object.frequencySetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.frequencySetPointEnabled, options);
            if (message.pctHzDroop != null && message.hasOwnProperty("pctHzDroop"))
                object.pctHzDroop = $root.google.protobuf.FloatValue.toObject(message.pctHzDroop, options);
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop"))
                object.pctVDroop = $root.google.protobuf.FloatValue.toObject(message.pctVDroop, options);
            if (message.rampRates != null && message.hasOwnProperty("rampRates"))
                object.rampRates = $root.commonmodule.RampRate.toObject(message.rampRates, options);
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled"))
                object.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.reactivePwrSetPointEnabled, options);
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled"))
                object.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.realPwrSetPointEnabled, options);
            if (message.reset != null && message.hasOwnProperty("reset"))
                object.reset = $root.commonmodule.ControlDPC.toObject(message.reset, options);
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = $root.commonmodule.Optional_StateKind.toObject(message.state, options);
            if (message.syncBackToGrid != null && message.hasOwnProperty("syncBackToGrid"))
                object.syncBackToGrid = $root.commonmodule.ControlDPC.toObject(message.syncBackToGrid, options);
            if (message.transToIslndOnGridLossEnabled != null && message.hasOwnProperty("transToIslndOnGridLossEnabled"))
                object.transToIslndOnGridLossEnabled = $root.commonmodule.ControlDPC.toObject(message.transToIslndOnGridLossEnabled, options);
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled"))
                object.voltageSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.voltageSetPointEnabled, options);
            if (message.startTime != null && message.hasOwnProperty("startTime"))
                object.startTime = $root.commonmodule.ControlTimestamp.toObject(message.startTime, options);
            return object;
        };

        /**
         * Converts this GenerationPoint to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationPoint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationPoint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationPoint;
    })();

    generationmodule.GenerationCSG = (function() {

        /**
         * Properties of a GenerationCSG.
         * @memberof generationmodule
         * @interface IGenerationCSG
         * @property {Array.<generationmodule.IGenerationPoint>|null} [crvPts] GenerationCSG crvPts
         */

        /**
         * Constructs a new GenerationCSG.
         * @memberof generationmodule
         * @classdesc Represents a GenerationCSG.
         * @implements IGenerationCSG
         * @constructor
         * @param {generationmodule.IGenerationCSG=} [properties] Properties to set
         */
        function GenerationCSG(properties) {
            this.crvPts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationCSG crvPts.
         * @member {Array.<generationmodule.IGenerationPoint>} crvPts
         * @memberof generationmodule.GenerationCSG
         * @instance
         */
        GenerationCSG.prototype.crvPts = $util.emptyArray;

        /**
         * Creates a new GenerationCSG instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationCSG
         * @static
         * @param {generationmodule.IGenerationCSG=} [properties] Properties to set
         * @returns {generationmodule.GenerationCSG} GenerationCSG instance
         */
        GenerationCSG.create = function create(properties) {
            return new GenerationCSG(properties);
        };

        /**
         * Encodes the specified GenerationCSG message. Does not implicitly {@link generationmodule.GenerationCSG.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationCSG
         * @static
         * @param {generationmodule.IGenerationCSG} message GenerationCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationCSG.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.crvPts != null && message.crvPts.length)
                for (var i = 0; i < message.crvPts.length; ++i)
                    $root.generationmodule.GenerationPoint.encode(message.crvPts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationCSG message, length delimited. Does not implicitly {@link generationmodule.GenerationCSG.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationCSG
         * @static
         * @param {generationmodule.IGenerationCSG} message GenerationCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationCSG.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationCSG message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationCSG} GenerationCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationCSG.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationCSG();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.crvPts && message.crvPts.length))
                        message.crvPts = [];
                    message.crvPts.push($root.generationmodule.GenerationPoint.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationCSG message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationCSG} GenerationCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationCSG.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationCSG message.
         * @function verify
         * @memberof generationmodule.GenerationCSG
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationCSG.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.crvPts != null && message.hasOwnProperty("crvPts")) {
                if (!Array.isArray(message.crvPts))
                    return "crvPts: array expected";
                for (var i = 0; i < message.crvPts.length; ++i) {
                    var error = $root.generationmodule.GenerationPoint.verify(message.crvPts[i]);
                    if (error)
                        return "crvPts." + error;
                }
            }
            return null;
        };

        /**
         * Creates a GenerationCSG message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationCSG
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationCSG} GenerationCSG
         */
        GenerationCSG.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationCSG)
                return object;
            var message = new $root.generationmodule.GenerationCSG();
            if (object.crvPts) {
                if (!Array.isArray(object.crvPts))
                    throw TypeError(".generationmodule.GenerationCSG.crvPts: array expected");
                message.crvPts = [];
                for (var i = 0; i < object.crvPts.length; ++i) {
                    if (typeof object.crvPts[i] !== "object")
                        throw TypeError(".generationmodule.GenerationCSG.crvPts: object expected");
                    message.crvPts[i] = $root.generationmodule.GenerationPoint.fromObject(object.crvPts[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationCSG message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationCSG
         * @static
         * @param {generationmodule.GenerationCSG} message GenerationCSG
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationCSG.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.crvPts = [];
            if (message.crvPts && message.crvPts.length) {
                object.crvPts = [];
                for (var j = 0; j < message.crvPts.length; ++j)
                    object.crvPts[j] = $root.generationmodule.GenerationPoint.toObject(message.crvPts[j], options);
            }
            return object;
        };

        /**
         * Converts this GenerationCSG to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationCSG
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationCSG.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationCSG;
    })();

    generationmodule.GenerationControlScheduleFSCH = (function() {

        /**
         * Properties of a GenerationControlScheduleFSCH.
         * @memberof generationmodule
         * @interface IGenerationControlScheduleFSCH
         * @property {generationmodule.IGenerationCSG|null} [ValDCSG] GenerationControlScheduleFSCH ValDCSG
         */

        /**
         * Constructs a new GenerationControlScheduleFSCH.
         * @memberof generationmodule
         * @classdesc Represents a GenerationControlScheduleFSCH.
         * @implements IGenerationControlScheduleFSCH
         * @constructor
         * @param {generationmodule.IGenerationControlScheduleFSCH=} [properties] Properties to set
         */
        function GenerationControlScheduleFSCH(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationControlScheduleFSCH ValDCSG.
         * @member {generationmodule.IGenerationCSG|null|undefined} ValDCSG
         * @memberof generationmodule.GenerationControlScheduleFSCH
         * @instance
         */
        GenerationControlScheduleFSCH.prototype.ValDCSG = null;

        /**
         * Creates a new GenerationControlScheduleFSCH instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationControlScheduleFSCH
         * @static
         * @param {generationmodule.IGenerationControlScheduleFSCH=} [properties] Properties to set
         * @returns {generationmodule.GenerationControlScheduleFSCH} GenerationControlScheduleFSCH instance
         */
        GenerationControlScheduleFSCH.create = function create(properties) {
            return new GenerationControlScheduleFSCH(properties);
        };

        /**
         * Encodes the specified GenerationControlScheduleFSCH message. Does not implicitly {@link generationmodule.GenerationControlScheduleFSCH.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationControlScheduleFSCH
         * @static
         * @param {generationmodule.IGenerationControlScheduleFSCH} message GenerationControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationControlScheduleFSCH.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ValDCSG != null && Object.hasOwnProperty.call(message, "ValDCSG"))
                $root.generationmodule.GenerationCSG.encode(message.ValDCSG, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationControlScheduleFSCH message, length delimited. Does not implicitly {@link generationmodule.GenerationControlScheduleFSCH.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationControlScheduleFSCH
         * @static
         * @param {generationmodule.IGenerationControlScheduleFSCH} message GenerationControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationControlScheduleFSCH.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationControlScheduleFSCH message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationControlScheduleFSCH} GenerationControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationControlScheduleFSCH.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationControlScheduleFSCH();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ValDCSG = $root.generationmodule.GenerationCSG.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationControlScheduleFSCH message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationControlScheduleFSCH} GenerationControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationControlScheduleFSCH.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationControlScheduleFSCH message.
         * @function verify
         * @memberof generationmodule.GenerationControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationControlScheduleFSCH.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ValDCSG != null && message.hasOwnProperty("ValDCSG")) {
                var error = $root.generationmodule.GenerationCSG.verify(message.ValDCSG);
                if (error)
                    return "ValDCSG." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationControlScheduleFSCH message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationControlScheduleFSCH} GenerationControlScheduleFSCH
         */
        GenerationControlScheduleFSCH.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationControlScheduleFSCH)
                return object;
            var message = new $root.generationmodule.GenerationControlScheduleFSCH();
            if (object.ValDCSG != null) {
                if (typeof object.ValDCSG !== "object")
                    throw TypeError(".generationmodule.GenerationControlScheduleFSCH.ValDCSG: object expected");
                message.ValDCSG = $root.generationmodule.GenerationCSG.fromObject(object.ValDCSG);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationControlScheduleFSCH message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationControlScheduleFSCH
         * @static
         * @param {generationmodule.GenerationControlScheduleFSCH} message GenerationControlScheduleFSCH
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationControlScheduleFSCH.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ValDCSG = null;
            if (message.ValDCSG != null && message.hasOwnProperty("ValDCSG"))
                object.ValDCSG = $root.generationmodule.GenerationCSG.toObject(message.ValDCSG, options);
            return object;
        };

        /**
         * Converts this GenerationControlScheduleFSCH to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationControlScheduleFSCH
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationControlScheduleFSCH.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationControlScheduleFSCH;
    })();

    generationmodule.GenerationControlFSCC = (function() {

        /**
         * Properties of a GenerationControlFSCC.
         * @memberof generationmodule
         * @interface IGenerationControlFSCC
         * @property {commonmodule.IControlFSCC|null} [controlFSCC] GenerationControlFSCC controlFSCC
         * @property {generationmodule.IGenerationControlScheduleFSCH|null} [GenerationControlScheduleFSCH] GenerationControlFSCC GenerationControlScheduleFSCH
         */

        /**
         * Constructs a new GenerationControlFSCC.
         * @memberof generationmodule
         * @classdesc Represents a GenerationControlFSCC.
         * @implements IGenerationControlFSCC
         * @constructor
         * @param {generationmodule.IGenerationControlFSCC=} [properties] Properties to set
         */
        function GenerationControlFSCC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationControlFSCC controlFSCC.
         * @member {commonmodule.IControlFSCC|null|undefined} controlFSCC
         * @memberof generationmodule.GenerationControlFSCC
         * @instance
         */
        GenerationControlFSCC.prototype.controlFSCC = null;

        /**
         * GenerationControlFSCC GenerationControlScheduleFSCH.
         * @member {generationmodule.IGenerationControlScheduleFSCH|null|undefined} GenerationControlScheduleFSCH
         * @memberof generationmodule.GenerationControlFSCC
         * @instance
         */
        GenerationControlFSCC.prototype.GenerationControlScheduleFSCH = null;

        /**
         * Creates a new GenerationControlFSCC instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationControlFSCC
         * @static
         * @param {generationmodule.IGenerationControlFSCC=} [properties] Properties to set
         * @returns {generationmodule.GenerationControlFSCC} GenerationControlFSCC instance
         */
        GenerationControlFSCC.create = function create(properties) {
            return new GenerationControlFSCC(properties);
        };

        /**
         * Encodes the specified GenerationControlFSCC message. Does not implicitly {@link generationmodule.GenerationControlFSCC.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationControlFSCC
         * @static
         * @param {generationmodule.IGenerationControlFSCC} message GenerationControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationControlFSCC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlFSCC != null && Object.hasOwnProperty.call(message, "controlFSCC"))
                $root.commonmodule.ControlFSCC.encode(message.controlFSCC, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.GenerationControlScheduleFSCH != null && Object.hasOwnProperty.call(message, "GenerationControlScheduleFSCH"))
                $root.generationmodule.GenerationControlScheduleFSCH.encode(message.GenerationControlScheduleFSCH, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationControlFSCC message, length delimited. Does not implicitly {@link generationmodule.GenerationControlFSCC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationControlFSCC
         * @static
         * @param {generationmodule.IGenerationControlFSCC} message GenerationControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationControlFSCC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationControlFSCC message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationControlFSCC} GenerationControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationControlFSCC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationControlFSCC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlFSCC = $root.commonmodule.ControlFSCC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.GenerationControlScheduleFSCH = $root.generationmodule.GenerationControlScheduleFSCH.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationControlFSCC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationControlFSCC} GenerationControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationControlFSCC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationControlFSCC message.
         * @function verify
         * @memberof generationmodule.GenerationControlFSCC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationControlFSCC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlFSCC != null && message.hasOwnProperty("controlFSCC")) {
                var error = $root.commonmodule.ControlFSCC.verify(message.controlFSCC);
                if (error)
                    return "controlFSCC." + error;
            }
            if (message.GenerationControlScheduleFSCH != null && message.hasOwnProperty("GenerationControlScheduleFSCH")) {
                var error = $root.generationmodule.GenerationControlScheduleFSCH.verify(message.GenerationControlScheduleFSCH);
                if (error)
                    return "GenerationControlScheduleFSCH." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationControlFSCC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationControlFSCC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationControlFSCC} GenerationControlFSCC
         */
        GenerationControlFSCC.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationControlFSCC)
                return object;
            var message = new $root.generationmodule.GenerationControlFSCC();
            if (object.controlFSCC != null) {
                if (typeof object.controlFSCC !== "object")
                    throw TypeError(".generationmodule.GenerationControlFSCC.controlFSCC: object expected");
                message.controlFSCC = $root.commonmodule.ControlFSCC.fromObject(object.controlFSCC);
            }
            if (object.GenerationControlScheduleFSCH != null) {
                if (typeof object.GenerationControlScheduleFSCH !== "object")
                    throw TypeError(".generationmodule.GenerationControlFSCC.GenerationControlScheduleFSCH: object expected");
                message.GenerationControlScheduleFSCH = $root.generationmodule.GenerationControlScheduleFSCH.fromObject(object.GenerationControlScheduleFSCH);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationControlFSCC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationControlFSCC
         * @static
         * @param {generationmodule.GenerationControlFSCC} message GenerationControlFSCC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationControlFSCC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlFSCC = null;
                object.GenerationControlScheduleFSCH = null;
            }
            if (message.controlFSCC != null && message.hasOwnProperty("controlFSCC"))
                object.controlFSCC = $root.commonmodule.ControlFSCC.toObject(message.controlFSCC, options);
            if (message.GenerationControlScheduleFSCH != null && message.hasOwnProperty("GenerationControlScheduleFSCH"))
                object.GenerationControlScheduleFSCH = $root.generationmodule.GenerationControlScheduleFSCH.toObject(message.GenerationControlScheduleFSCH, options);
            return object;
        };

        /**
         * Converts this GenerationControlFSCC to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationControlFSCC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationControlFSCC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationControlFSCC;
    })();

    generationmodule.GenerationControl = (function() {

        /**
         * Properties of a GenerationControl.
         * @memberof generationmodule
         * @interface IGenerationControl
         * @property {commonmodule.IControlValue|null} [controlValue] GenerationControl controlValue
         * @property {commonmodule.ICheckConditions|null} [check] GenerationControl check
         * @property {generationmodule.IGenerationControlFSCC|null} [generationControlFSCC] GenerationControl generationControlFSCC
         */

        /**
         * Constructs a new GenerationControl.
         * @memberof generationmodule
         * @classdesc Represents a GenerationControl.
         * @implements IGenerationControl
         * @constructor
         * @param {generationmodule.IGenerationControl=} [properties] Properties to set
         */
        function GenerationControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationControl controlValue.
         * @member {commonmodule.IControlValue|null|undefined} controlValue
         * @memberof generationmodule.GenerationControl
         * @instance
         */
        GenerationControl.prototype.controlValue = null;

        /**
         * GenerationControl check.
         * @member {commonmodule.ICheckConditions|null|undefined} check
         * @memberof generationmodule.GenerationControl
         * @instance
         */
        GenerationControl.prototype.check = null;

        /**
         * GenerationControl generationControlFSCC.
         * @member {generationmodule.IGenerationControlFSCC|null|undefined} generationControlFSCC
         * @memberof generationmodule.GenerationControl
         * @instance
         */
        GenerationControl.prototype.generationControlFSCC = null;

        /**
         * Creates a new GenerationControl instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationControl
         * @static
         * @param {generationmodule.IGenerationControl=} [properties] Properties to set
         * @returns {generationmodule.GenerationControl} GenerationControl instance
         */
        GenerationControl.create = function create(properties) {
            return new GenerationControl(properties);
        };

        /**
         * Encodes the specified GenerationControl message. Does not implicitly {@link generationmodule.GenerationControl.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationControl
         * @static
         * @param {generationmodule.IGenerationControl} message GenerationControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlValue != null && Object.hasOwnProperty.call(message, "controlValue"))
                $root.commonmodule.ControlValue.encode(message.controlValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.check != null && Object.hasOwnProperty.call(message, "check"))
                $root.commonmodule.CheckConditions.encode(message.check, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.generationControlFSCC != null && Object.hasOwnProperty.call(message, "generationControlFSCC"))
                $root.generationmodule.GenerationControlFSCC.encode(message.generationControlFSCC, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationControl message, length delimited. Does not implicitly {@link generationmodule.GenerationControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationControl
         * @static
         * @param {generationmodule.IGenerationControl} message GenerationControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationControl message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationControl} GenerationControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlValue = $root.commonmodule.ControlValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.check = $root.commonmodule.CheckConditions.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.generationControlFSCC = $root.generationmodule.GenerationControlFSCC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationControl} GenerationControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationControl message.
         * @function verify
         * @memberof generationmodule.GenerationControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlValue != null && message.hasOwnProperty("controlValue")) {
                var error = $root.commonmodule.ControlValue.verify(message.controlValue);
                if (error)
                    return "controlValue." + error;
            }
            if (message.check != null && message.hasOwnProperty("check")) {
                var error = $root.commonmodule.CheckConditions.verify(message.check);
                if (error)
                    return "check." + error;
            }
            if (message.generationControlFSCC != null && message.hasOwnProperty("generationControlFSCC")) {
                var error = $root.generationmodule.GenerationControlFSCC.verify(message.generationControlFSCC);
                if (error)
                    return "generationControlFSCC." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationControl} GenerationControl
         */
        GenerationControl.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationControl)
                return object;
            var message = new $root.generationmodule.GenerationControl();
            if (object.controlValue != null) {
                if (typeof object.controlValue !== "object")
                    throw TypeError(".generationmodule.GenerationControl.controlValue: object expected");
                message.controlValue = $root.commonmodule.ControlValue.fromObject(object.controlValue);
            }
            if (object.check != null) {
                if (typeof object.check !== "object")
                    throw TypeError(".generationmodule.GenerationControl.check: object expected");
                message.check = $root.commonmodule.CheckConditions.fromObject(object.check);
            }
            if (object.generationControlFSCC != null) {
                if (typeof object.generationControlFSCC !== "object")
                    throw TypeError(".generationmodule.GenerationControl.generationControlFSCC: object expected");
                message.generationControlFSCC = $root.generationmodule.GenerationControlFSCC.fromObject(object.generationControlFSCC);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationControl
         * @static
         * @param {generationmodule.GenerationControl} message GenerationControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlValue = null;
                object.check = null;
                object.generationControlFSCC = null;
            }
            if (message.controlValue != null && message.hasOwnProperty("controlValue"))
                object.controlValue = $root.commonmodule.ControlValue.toObject(message.controlValue, options);
            if (message.check != null && message.hasOwnProperty("check"))
                object.check = $root.commonmodule.CheckConditions.toObject(message.check, options);
            if (message.generationControlFSCC != null && message.hasOwnProperty("generationControlFSCC"))
                object.generationControlFSCC = $root.generationmodule.GenerationControlFSCC.toObject(message.generationControlFSCC, options);
            return object;
        };

        /**
         * Converts this GenerationControl to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationControl;
    })();

    generationmodule.GeneratingUnit = (function() {

        /**
         * Properties of a GeneratingUnit.
         * @memberof generationmodule
         * @interface IGeneratingUnit
         * @property {commonmodule.IConductingEquipment|null} [conductingEquipment] GeneratingUnit conductingEquipment
         * @property {commonmodule.IActivePower|null} [maxOperatingP] GeneratingUnit maxOperatingP
         */

        /**
         * Constructs a new GeneratingUnit.
         * @memberof generationmodule
         * @classdesc Represents a GeneratingUnit.
         * @implements IGeneratingUnit
         * @constructor
         * @param {generationmodule.IGeneratingUnit=} [properties] Properties to set
         */
        function GeneratingUnit(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GeneratingUnit conductingEquipment.
         * @member {commonmodule.IConductingEquipment|null|undefined} conductingEquipment
         * @memberof generationmodule.GeneratingUnit
         * @instance
         */
        GeneratingUnit.prototype.conductingEquipment = null;

        /**
         * GeneratingUnit maxOperatingP.
         * @member {commonmodule.IActivePower|null|undefined} maxOperatingP
         * @memberof generationmodule.GeneratingUnit
         * @instance
         */
        GeneratingUnit.prototype.maxOperatingP = null;

        /**
         * Creates a new GeneratingUnit instance using the specified properties.
         * @function create
         * @memberof generationmodule.GeneratingUnit
         * @static
         * @param {generationmodule.IGeneratingUnit=} [properties] Properties to set
         * @returns {generationmodule.GeneratingUnit} GeneratingUnit instance
         */
        GeneratingUnit.create = function create(properties) {
            return new GeneratingUnit(properties);
        };

        /**
         * Encodes the specified GeneratingUnit message. Does not implicitly {@link generationmodule.GeneratingUnit.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GeneratingUnit
         * @static
         * @param {generationmodule.IGeneratingUnit} message GeneratingUnit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GeneratingUnit.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipment != null && Object.hasOwnProperty.call(message, "conductingEquipment"))
                $root.commonmodule.ConductingEquipment.encode(message.conductingEquipment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.maxOperatingP != null && Object.hasOwnProperty.call(message, "maxOperatingP"))
                $root.commonmodule.ActivePower.encode(message.maxOperatingP, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GeneratingUnit message, length delimited. Does not implicitly {@link generationmodule.GeneratingUnit.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GeneratingUnit
         * @static
         * @param {generationmodule.IGeneratingUnit} message GeneratingUnit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GeneratingUnit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GeneratingUnit message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GeneratingUnit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GeneratingUnit} GeneratingUnit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GeneratingUnit.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GeneratingUnit();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipment = $root.commonmodule.ConductingEquipment.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.maxOperatingP = $root.commonmodule.ActivePower.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GeneratingUnit message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GeneratingUnit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GeneratingUnit} GeneratingUnit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GeneratingUnit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GeneratingUnit message.
         * @function verify
         * @memberof generationmodule.GeneratingUnit
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GeneratingUnit.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment")) {
                var error = $root.commonmodule.ConductingEquipment.verify(message.conductingEquipment);
                if (error)
                    return "conductingEquipment." + error;
            }
            if (message.maxOperatingP != null && message.hasOwnProperty("maxOperatingP")) {
                var error = $root.commonmodule.ActivePower.verify(message.maxOperatingP);
                if (error)
                    return "maxOperatingP." + error;
            }
            return null;
        };

        /**
         * Creates a GeneratingUnit message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GeneratingUnit
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GeneratingUnit} GeneratingUnit
         */
        GeneratingUnit.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GeneratingUnit)
                return object;
            var message = new $root.generationmodule.GeneratingUnit();
            if (object.conductingEquipment != null) {
                if (typeof object.conductingEquipment !== "object")
                    throw TypeError(".generationmodule.GeneratingUnit.conductingEquipment: object expected");
                message.conductingEquipment = $root.commonmodule.ConductingEquipment.fromObject(object.conductingEquipment);
            }
            if (object.maxOperatingP != null) {
                if (typeof object.maxOperatingP !== "object")
                    throw TypeError(".generationmodule.GeneratingUnit.maxOperatingP: object expected");
                message.maxOperatingP = $root.commonmodule.ActivePower.fromObject(object.maxOperatingP);
            }
            return message;
        };

        /**
         * Creates a plain object from a GeneratingUnit message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GeneratingUnit
         * @static
         * @param {generationmodule.GeneratingUnit} message GeneratingUnit
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GeneratingUnit.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conductingEquipment = null;
                object.maxOperatingP = null;
            }
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment"))
                object.conductingEquipment = $root.commonmodule.ConductingEquipment.toObject(message.conductingEquipment, options);
            if (message.maxOperatingP != null && message.hasOwnProperty("maxOperatingP"))
                object.maxOperatingP = $root.commonmodule.ActivePower.toObject(message.maxOperatingP, options);
            return object;
        };

        /**
         * Converts this GeneratingUnit to JSON.
         * @function toJSON
         * @memberof generationmodule.GeneratingUnit
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GeneratingUnit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GeneratingUnit;
    })();

    generationmodule.GenerationControlProfile = (function() {

        /**
         * Properties of a GenerationControlProfile.
         * @memberof generationmodule
         * @interface IGenerationControlProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] GenerationControlProfile controlMessageInfo
         * @property {generationmodule.IGeneratingUnit|null} [generatingUnit] GenerationControlProfile generatingUnit
         * @property {generationmodule.IGenerationControl|null} [generationControl] GenerationControlProfile generationControl
         * @property {commonmodule.IIED|null} [ied] GenerationControlProfile ied
         */

        /**
         * Constructs a new GenerationControlProfile.
         * @memberof generationmodule
         * @classdesc Represents a GenerationControlProfile.
         * @implements IGenerationControlProfile
         * @constructor
         * @param {generationmodule.IGenerationControlProfile=} [properties] Properties to set
         */
        function GenerationControlProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationControlProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof generationmodule.GenerationControlProfile
         * @instance
         */
        GenerationControlProfile.prototype.controlMessageInfo = null;

        /**
         * GenerationControlProfile generatingUnit.
         * @member {generationmodule.IGeneratingUnit|null|undefined} generatingUnit
         * @memberof generationmodule.GenerationControlProfile
         * @instance
         */
        GenerationControlProfile.prototype.generatingUnit = null;

        /**
         * GenerationControlProfile generationControl.
         * @member {generationmodule.IGenerationControl|null|undefined} generationControl
         * @memberof generationmodule.GenerationControlProfile
         * @instance
         */
        GenerationControlProfile.prototype.generationControl = null;

        /**
         * GenerationControlProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof generationmodule.GenerationControlProfile
         * @instance
         */
        GenerationControlProfile.prototype.ied = null;

        /**
         * Creates a new GenerationControlProfile instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationControlProfile
         * @static
         * @param {generationmodule.IGenerationControlProfile=} [properties] Properties to set
         * @returns {generationmodule.GenerationControlProfile} GenerationControlProfile instance
         */
        GenerationControlProfile.create = function create(properties) {
            return new GenerationControlProfile(properties);
        };

        /**
         * Encodes the specified GenerationControlProfile message. Does not implicitly {@link generationmodule.GenerationControlProfile.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationControlProfile
         * @static
         * @param {generationmodule.IGenerationControlProfile} message GenerationControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationControlProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.generatingUnit != null && Object.hasOwnProperty.call(message, "generatingUnit"))
                $root.generationmodule.GeneratingUnit.encode(message.generatingUnit, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.generationControl != null && Object.hasOwnProperty.call(message, "generationControl"))
                $root.generationmodule.GenerationControl.encode(message.generationControl, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationControlProfile message, length delimited. Does not implicitly {@link generationmodule.GenerationControlProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationControlProfile
         * @static
         * @param {generationmodule.IGenerationControlProfile} message GenerationControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationControlProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationControlProfile message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationControlProfile} GenerationControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationControlProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationControlProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.generatingUnit = $root.generationmodule.GeneratingUnit.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.generationControl = $root.generationmodule.GenerationControl.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationControlProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationControlProfile} GenerationControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationControlProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationControlProfile message.
         * @function verify
         * @memberof generationmodule.GenerationControlProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationControlProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.generatingUnit != null && message.hasOwnProperty("generatingUnit")) {
                var error = $root.generationmodule.GeneratingUnit.verify(message.generatingUnit);
                if (error)
                    return "generatingUnit." + error;
            }
            if (message.generationControl != null && message.hasOwnProperty("generationControl")) {
                var error = $root.generationmodule.GenerationControl.verify(message.generationControl);
                if (error)
                    return "generationControl." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationControlProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationControlProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationControlProfile} GenerationControlProfile
         */
        GenerationControlProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationControlProfile)
                return object;
            var message = new $root.generationmodule.GenerationControlProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".generationmodule.GenerationControlProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.generatingUnit != null) {
                if (typeof object.generatingUnit !== "object")
                    throw TypeError(".generationmodule.GenerationControlProfile.generatingUnit: object expected");
                message.generatingUnit = $root.generationmodule.GeneratingUnit.fromObject(object.generatingUnit);
            }
            if (object.generationControl != null) {
                if (typeof object.generationControl !== "object")
                    throw TypeError(".generationmodule.GenerationControlProfile.generationControl: object expected");
                message.generationControl = $root.generationmodule.GenerationControl.fromObject(object.generationControl);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".generationmodule.GenerationControlProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationControlProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationControlProfile
         * @static
         * @param {generationmodule.GenerationControlProfile} message GenerationControlProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationControlProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.generatingUnit = null;
                object.generationControl = null;
                object.ied = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.generatingUnit != null && message.hasOwnProperty("generatingUnit"))
                object.generatingUnit = $root.generationmodule.GeneratingUnit.toObject(message.generatingUnit, options);
            if (message.generationControl != null && message.hasOwnProperty("generationControl"))
                object.generationControl = $root.generationmodule.GenerationControl.toObject(message.generationControl, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            return object;
        };

        /**
         * Converts this GenerationControlProfile to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationControlProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationControlProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationControlProfile;
    })();

    generationmodule.GenerationReading = (function() {

        /**
         * Properties of a GenerationReading.
         * @memberof generationmodule
         * @interface IGenerationReading
         * @property {commonmodule.IConductingEquipmentTerminalReading|null} [conductingEquipmentTerminalReading] GenerationReading conductingEquipmentTerminalReading
         * @property {commonmodule.IPhaseMMTN|null} [phaseMMTN] GenerationReading phaseMMTN
         * @property {commonmodule.IReadingMMTR|null} [readingMMTR] GenerationReading readingMMTR
         * @property {commonmodule.IReadingMMXU|null} [readingMMXU] GenerationReading readingMMXU
         */

        /**
         * Constructs a new GenerationReading.
         * @memberof generationmodule
         * @classdesc Represents a GenerationReading.
         * @implements IGenerationReading
         * @constructor
         * @param {generationmodule.IGenerationReading=} [properties] Properties to set
         */
        function GenerationReading(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationReading conductingEquipmentTerminalReading.
         * @member {commonmodule.IConductingEquipmentTerminalReading|null|undefined} conductingEquipmentTerminalReading
         * @memberof generationmodule.GenerationReading
         * @instance
         */
        GenerationReading.prototype.conductingEquipmentTerminalReading = null;

        /**
         * GenerationReading phaseMMTN.
         * @member {commonmodule.IPhaseMMTN|null|undefined} phaseMMTN
         * @memberof generationmodule.GenerationReading
         * @instance
         */
        GenerationReading.prototype.phaseMMTN = null;

        /**
         * GenerationReading readingMMTR.
         * @member {commonmodule.IReadingMMTR|null|undefined} readingMMTR
         * @memberof generationmodule.GenerationReading
         * @instance
         */
        GenerationReading.prototype.readingMMTR = null;

        /**
         * GenerationReading readingMMXU.
         * @member {commonmodule.IReadingMMXU|null|undefined} readingMMXU
         * @memberof generationmodule.GenerationReading
         * @instance
         */
        GenerationReading.prototype.readingMMXU = null;

        /**
         * Creates a new GenerationReading instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationReading
         * @static
         * @param {generationmodule.IGenerationReading=} [properties] Properties to set
         * @returns {generationmodule.GenerationReading} GenerationReading instance
         */
        GenerationReading.create = function create(properties) {
            return new GenerationReading(properties);
        };

        /**
         * Encodes the specified GenerationReading message. Does not implicitly {@link generationmodule.GenerationReading.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationReading
         * @static
         * @param {generationmodule.IGenerationReading} message GenerationReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationReading.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipmentTerminalReading != null && Object.hasOwnProperty.call(message, "conductingEquipmentTerminalReading"))
                $root.commonmodule.ConductingEquipmentTerminalReading.encode(message.conductingEquipmentTerminalReading, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.phaseMMTN != null && Object.hasOwnProperty.call(message, "phaseMMTN"))
                $root.commonmodule.PhaseMMTN.encode(message.phaseMMTN, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.readingMMTR != null && Object.hasOwnProperty.call(message, "readingMMTR"))
                $root.commonmodule.ReadingMMTR.encode(message.readingMMTR, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.readingMMXU != null && Object.hasOwnProperty.call(message, "readingMMXU"))
                $root.commonmodule.ReadingMMXU.encode(message.readingMMXU, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationReading message, length delimited. Does not implicitly {@link generationmodule.GenerationReading.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationReading
         * @static
         * @param {generationmodule.IGenerationReading} message GenerationReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationReading.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationReading message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationReading} GenerationReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationReading.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationReading();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.phaseMMTN = $root.commonmodule.PhaseMMTN.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.readingMMTR = $root.commonmodule.ReadingMMTR.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.readingMMXU = $root.commonmodule.ReadingMMXU.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationReading message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationReading} GenerationReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationReading.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationReading message.
         * @function verify
         * @memberof generationmodule.GenerationReading
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationReading.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading")) {
                var error = $root.commonmodule.ConductingEquipmentTerminalReading.verify(message.conductingEquipmentTerminalReading);
                if (error)
                    return "conductingEquipmentTerminalReading." + error;
            }
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN")) {
                var error = $root.commonmodule.PhaseMMTN.verify(message.phaseMMTN);
                if (error)
                    return "phaseMMTN." + error;
            }
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR")) {
                var error = $root.commonmodule.ReadingMMTR.verify(message.readingMMTR);
                if (error)
                    return "readingMMTR." + error;
            }
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU")) {
                var error = $root.commonmodule.ReadingMMXU.verify(message.readingMMXU);
                if (error)
                    return "readingMMXU." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationReading message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationReading
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationReading} GenerationReading
         */
        GenerationReading.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationReading)
                return object;
            var message = new $root.generationmodule.GenerationReading();
            if (object.conductingEquipmentTerminalReading != null) {
                if (typeof object.conductingEquipmentTerminalReading !== "object")
                    throw TypeError(".generationmodule.GenerationReading.conductingEquipmentTerminalReading: object expected");
                message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.fromObject(object.conductingEquipmentTerminalReading);
            }
            if (object.phaseMMTN != null) {
                if (typeof object.phaseMMTN !== "object")
                    throw TypeError(".generationmodule.GenerationReading.phaseMMTN: object expected");
                message.phaseMMTN = $root.commonmodule.PhaseMMTN.fromObject(object.phaseMMTN);
            }
            if (object.readingMMTR != null) {
                if (typeof object.readingMMTR !== "object")
                    throw TypeError(".generationmodule.GenerationReading.readingMMTR: object expected");
                message.readingMMTR = $root.commonmodule.ReadingMMTR.fromObject(object.readingMMTR);
            }
            if (object.readingMMXU != null) {
                if (typeof object.readingMMXU !== "object")
                    throw TypeError(".generationmodule.GenerationReading.readingMMXU: object expected");
                message.readingMMXU = $root.commonmodule.ReadingMMXU.fromObject(object.readingMMXU);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationReading message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationReading
         * @static
         * @param {generationmodule.GenerationReading} message GenerationReading
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationReading.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conductingEquipmentTerminalReading = null;
                object.phaseMMTN = null;
                object.readingMMTR = null;
                object.readingMMXU = null;
            }
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading"))
                object.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.toObject(message.conductingEquipmentTerminalReading, options);
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN"))
                object.phaseMMTN = $root.commonmodule.PhaseMMTN.toObject(message.phaseMMTN, options);
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR"))
                object.readingMMTR = $root.commonmodule.ReadingMMTR.toObject(message.readingMMTR, options);
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU"))
                object.readingMMXU = $root.commonmodule.ReadingMMXU.toObject(message.readingMMXU, options);
            return object;
        };

        /**
         * Converts this GenerationReading to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationReading
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationReading.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationReading;
    })();

    generationmodule.GenerationReadingProfile = (function() {

        /**
         * Properties of a GenerationReadingProfile.
         * @memberof generationmodule
         * @interface IGenerationReadingProfile
         * @property {commonmodule.IReadingMessageInfo|null} [readingMessageInfo] GenerationReadingProfile readingMessageInfo
         * @property {generationmodule.IGeneratingUnit|null} [generatingUnit] GenerationReadingProfile generatingUnit
         * @property {generationmodule.IGenerationReading|null} [generationReading] GenerationReadingProfile generationReading
         * @property {commonmodule.IIED|null} [ied] GenerationReadingProfile ied
         */

        /**
         * Constructs a new GenerationReadingProfile.
         * @memberof generationmodule
         * @classdesc Represents a GenerationReadingProfile.
         * @implements IGenerationReadingProfile
         * @constructor
         * @param {generationmodule.IGenerationReadingProfile=} [properties] Properties to set
         */
        function GenerationReadingProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationReadingProfile readingMessageInfo.
         * @member {commonmodule.IReadingMessageInfo|null|undefined} readingMessageInfo
         * @memberof generationmodule.GenerationReadingProfile
         * @instance
         */
        GenerationReadingProfile.prototype.readingMessageInfo = null;

        /**
         * GenerationReadingProfile generatingUnit.
         * @member {generationmodule.IGeneratingUnit|null|undefined} generatingUnit
         * @memberof generationmodule.GenerationReadingProfile
         * @instance
         */
        GenerationReadingProfile.prototype.generatingUnit = null;

        /**
         * GenerationReadingProfile generationReading.
         * @member {generationmodule.IGenerationReading|null|undefined} generationReading
         * @memberof generationmodule.GenerationReadingProfile
         * @instance
         */
        GenerationReadingProfile.prototype.generationReading = null;

        /**
         * GenerationReadingProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof generationmodule.GenerationReadingProfile
         * @instance
         */
        GenerationReadingProfile.prototype.ied = null;

        /**
         * Creates a new GenerationReadingProfile instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationReadingProfile
         * @static
         * @param {generationmodule.IGenerationReadingProfile=} [properties] Properties to set
         * @returns {generationmodule.GenerationReadingProfile} GenerationReadingProfile instance
         */
        GenerationReadingProfile.create = function create(properties) {
            return new GenerationReadingProfile(properties);
        };

        /**
         * Encodes the specified GenerationReadingProfile message. Does not implicitly {@link generationmodule.GenerationReadingProfile.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationReadingProfile
         * @static
         * @param {generationmodule.IGenerationReadingProfile} message GenerationReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationReadingProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.readingMessageInfo != null && Object.hasOwnProperty.call(message, "readingMessageInfo"))
                $root.commonmodule.ReadingMessageInfo.encode(message.readingMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.generatingUnit != null && Object.hasOwnProperty.call(message, "generatingUnit"))
                $root.generationmodule.GeneratingUnit.encode(message.generatingUnit, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.generationReading != null && Object.hasOwnProperty.call(message, "generationReading"))
                $root.generationmodule.GenerationReading.encode(message.generationReading, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationReadingProfile message, length delimited. Does not implicitly {@link generationmodule.GenerationReadingProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationReadingProfile
         * @static
         * @param {generationmodule.IGenerationReadingProfile} message GenerationReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationReadingProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationReadingProfile message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationReadingProfile} GenerationReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationReadingProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationReadingProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.generatingUnit = $root.generationmodule.GeneratingUnit.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.generationReading = $root.generationmodule.GenerationReading.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationReadingProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationReadingProfile} GenerationReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationReadingProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationReadingProfile message.
         * @function verify
         * @memberof generationmodule.GenerationReadingProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationReadingProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo")) {
                var error = $root.commonmodule.ReadingMessageInfo.verify(message.readingMessageInfo);
                if (error)
                    return "readingMessageInfo." + error;
            }
            if (message.generatingUnit != null && message.hasOwnProperty("generatingUnit")) {
                var error = $root.generationmodule.GeneratingUnit.verify(message.generatingUnit);
                if (error)
                    return "generatingUnit." + error;
            }
            if (message.generationReading != null && message.hasOwnProperty("generationReading")) {
                var error = $root.generationmodule.GenerationReading.verify(message.generationReading);
                if (error)
                    return "generationReading." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationReadingProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationReadingProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationReadingProfile} GenerationReadingProfile
         */
        GenerationReadingProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationReadingProfile)
                return object;
            var message = new $root.generationmodule.GenerationReadingProfile();
            if (object.readingMessageInfo != null) {
                if (typeof object.readingMessageInfo !== "object")
                    throw TypeError(".generationmodule.GenerationReadingProfile.readingMessageInfo: object expected");
                message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.fromObject(object.readingMessageInfo);
            }
            if (object.generatingUnit != null) {
                if (typeof object.generatingUnit !== "object")
                    throw TypeError(".generationmodule.GenerationReadingProfile.generatingUnit: object expected");
                message.generatingUnit = $root.generationmodule.GeneratingUnit.fromObject(object.generatingUnit);
            }
            if (object.generationReading != null) {
                if (typeof object.generationReading !== "object")
                    throw TypeError(".generationmodule.GenerationReadingProfile.generationReading: object expected");
                message.generationReading = $root.generationmodule.GenerationReading.fromObject(object.generationReading);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".generationmodule.GenerationReadingProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationReadingProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationReadingProfile
         * @static
         * @param {generationmodule.GenerationReadingProfile} message GenerationReadingProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationReadingProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.readingMessageInfo = null;
                object.generatingUnit = null;
                object.generationReading = null;
                object.ied = null;
            }
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo"))
                object.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.toObject(message.readingMessageInfo, options);
            if (message.generatingUnit != null && message.hasOwnProperty("generatingUnit"))
                object.generatingUnit = $root.generationmodule.GeneratingUnit.toObject(message.generatingUnit, options);
            if (message.generationReading != null && message.hasOwnProperty("generationReading"))
                object.generationReading = $root.generationmodule.GenerationReading.toObject(message.generationReading, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            return object;
        };

        /**
         * Converts this GenerationReadingProfile to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationReadingProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationReadingProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationReadingProfile;
    })();

    generationmodule.GenerationPointStatus = (function() {

        /**
         * Properties of a GenerationPointStatus.
         * @memberof generationmodule
         * @interface IGenerationPointStatus
         * @property {commonmodule.IControlDPC|null} [blackStartEnabled] GenerationPointStatus blackStartEnabled
         * @property {commonmodule.IControlDPC|null} [frequencySetPointEnabled] GenerationPointStatus frequencySetPointEnabled
         * @property {google.protobuf.IFloatValue|null} [pctHzDroop] GenerationPointStatus pctHzDroop
         * @property {google.protobuf.IFloatValue|null} [pctVDroop] GenerationPointStatus pctVDroop
         * @property {commonmodule.IRampRate|null} [rampRates] GenerationPointStatus rampRates
         * @property {commonmodule.IControlDPC|null} [reactivePwrSetPointEnabled] GenerationPointStatus reactivePwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [realPwrSetPointEnabled] GenerationPointStatus realPwrSetPointEnabled
         * @property {commonmodule.IOptional_StateKind|null} [state] GenerationPointStatus state
         * @property {commonmodule.IControlDPC|null} [syncBackToGrid] GenerationPointStatus syncBackToGrid
         * @property {commonmodule.IControlDPC|null} [transToIslndOnGridLossEnabled] GenerationPointStatus transToIslndOnGridLossEnabled
         * @property {commonmodule.IControlDPC|null} [voltageSetPointEnabled] GenerationPointStatus voltageSetPointEnabled
         */

        /**
         * Constructs a new GenerationPointStatus.
         * @memberof generationmodule
         * @classdesc Represents a GenerationPointStatus.
         * @implements IGenerationPointStatus
         * @constructor
         * @param {generationmodule.IGenerationPointStatus=} [properties] Properties to set
         */
        function GenerationPointStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationPointStatus blackStartEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} blackStartEnabled
         * @memberof generationmodule.GenerationPointStatus
         * @instance
         */
        GenerationPointStatus.prototype.blackStartEnabled = null;

        /**
         * GenerationPointStatus frequencySetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} frequencySetPointEnabled
         * @memberof generationmodule.GenerationPointStatus
         * @instance
         */
        GenerationPointStatus.prototype.frequencySetPointEnabled = null;

        /**
         * GenerationPointStatus pctHzDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctHzDroop
         * @memberof generationmodule.GenerationPointStatus
         * @instance
         */
        GenerationPointStatus.prototype.pctHzDroop = null;

        /**
         * GenerationPointStatus pctVDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctVDroop
         * @memberof generationmodule.GenerationPointStatus
         * @instance
         */
        GenerationPointStatus.prototype.pctVDroop = null;

        /**
         * GenerationPointStatus rampRates.
         * @member {commonmodule.IRampRate|null|undefined} rampRates
         * @memberof generationmodule.GenerationPointStatus
         * @instance
         */
        GenerationPointStatus.prototype.rampRates = null;

        /**
         * GenerationPointStatus reactivePwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} reactivePwrSetPointEnabled
         * @memberof generationmodule.GenerationPointStatus
         * @instance
         */
        GenerationPointStatus.prototype.reactivePwrSetPointEnabled = null;

        /**
         * GenerationPointStatus realPwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} realPwrSetPointEnabled
         * @memberof generationmodule.GenerationPointStatus
         * @instance
         */
        GenerationPointStatus.prototype.realPwrSetPointEnabled = null;

        /**
         * GenerationPointStatus state.
         * @member {commonmodule.IOptional_StateKind|null|undefined} state
         * @memberof generationmodule.GenerationPointStatus
         * @instance
         */
        GenerationPointStatus.prototype.state = null;

        /**
         * GenerationPointStatus syncBackToGrid.
         * @member {commonmodule.IControlDPC|null|undefined} syncBackToGrid
         * @memberof generationmodule.GenerationPointStatus
         * @instance
         */
        GenerationPointStatus.prototype.syncBackToGrid = null;

        /**
         * GenerationPointStatus transToIslndOnGridLossEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} transToIslndOnGridLossEnabled
         * @memberof generationmodule.GenerationPointStatus
         * @instance
         */
        GenerationPointStatus.prototype.transToIslndOnGridLossEnabled = null;

        /**
         * GenerationPointStatus voltageSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} voltageSetPointEnabled
         * @memberof generationmodule.GenerationPointStatus
         * @instance
         */
        GenerationPointStatus.prototype.voltageSetPointEnabled = null;

        /**
         * Creates a new GenerationPointStatus instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationPointStatus
         * @static
         * @param {generationmodule.IGenerationPointStatus=} [properties] Properties to set
         * @returns {generationmodule.GenerationPointStatus} GenerationPointStatus instance
         */
        GenerationPointStatus.create = function create(properties) {
            return new GenerationPointStatus(properties);
        };

        /**
         * Encodes the specified GenerationPointStatus message. Does not implicitly {@link generationmodule.GenerationPointStatus.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationPointStatus
         * @static
         * @param {generationmodule.IGenerationPointStatus} message GenerationPointStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationPointStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.blackStartEnabled != null && Object.hasOwnProperty.call(message, "blackStartEnabled"))
                $root.commonmodule.ControlDPC.encode(message.blackStartEnabled, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.frequencySetPointEnabled != null && Object.hasOwnProperty.call(message, "frequencySetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.frequencySetPointEnabled, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.pctHzDroop != null && Object.hasOwnProperty.call(message, "pctHzDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctHzDroop, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.pctVDroop != null && Object.hasOwnProperty.call(message, "pctVDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctVDroop, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.rampRates != null && Object.hasOwnProperty.call(message, "rampRates"))
                $root.commonmodule.RampRate.encode(message.rampRates, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.reactivePwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "reactivePwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.reactivePwrSetPointEnabled, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.realPwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "realPwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.realPwrSetPointEnabled, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                $root.commonmodule.Optional_StateKind.encode(message.state, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.syncBackToGrid != null && Object.hasOwnProperty.call(message, "syncBackToGrid"))
                $root.commonmodule.ControlDPC.encode(message.syncBackToGrid, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.transToIslndOnGridLossEnabled != null && Object.hasOwnProperty.call(message, "transToIslndOnGridLossEnabled"))
                $root.commonmodule.ControlDPC.encode(message.transToIslndOnGridLossEnabled, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.voltageSetPointEnabled != null && Object.hasOwnProperty.call(message, "voltageSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.voltageSetPointEnabled, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationPointStatus message, length delimited. Does not implicitly {@link generationmodule.GenerationPointStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationPointStatus
         * @static
         * @param {generationmodule.IGenerationPointStatus} message GenerationPointStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationPointStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationPointStatus message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationPointStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationPointStatus} GenerationPointStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationPointStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationPointStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.blackStartEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.frequencySetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.pctHzDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.pctVDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.rampRates = $root.commonmodule.RampRate.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.state = $root.commonmodule.Optional_StateKind.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.syncBackToGrid = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.transToIslndOnGridLossEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 11:
                    message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationPointStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationPointStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationPointStatus} GenerationPointStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationPointStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationPointStatus message.
         * @function verify
         * @memberof generationmodule.GenerationPointStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationPointStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.blackStartEnabled != null && message.hasOwnProperty("blackStartEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.blackStartEnabled);
                if (error)
                    return "blackStartEnabled." + error;
            }
            if (message.frequencySetPointEnabled != null && message.hasOwnProperty("frequencySetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.frequencySetPointEnabled);
                if (error)
                    return "frequencySetPointEnabled." + error;
            }
            if (message.pctHzDroop != null && message.hasOwnProperty("pctHzDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctHzDroop);
                if (error)
                    return "pctHzDroop." + error;
            }
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctVDroop);
                if (error)
                    return "pctVDroop." + error;
            }
            if (message.rampRates != null && message.hasOwnProperty("rampRates")) {
                var error = $root.commonmodule.RampRate.verify(message.rampRates);
                if (error)
                    return "rampRates." + error;
            }
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reactivePwrSetPointEnabled);
                if (error)
                    return "reactivePwrSetPointEnabled." + error;
            }
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.realPwrSetPointEnabled);
                if (error)
                    return "realPwrSetPointEnabled." + error;
            }
            if (message.state != null && message.hasOwnProperty("state")) {
                var error = $root.commonmodule.Optional_StateKind.verify(message.state);
                if (error)
                    return "state." + error;
            }
            if (message.syncBackToGrid != null && message.hasOwnProperty("syncBackToGrid")) {
                var error = $root.commonmodule.ControlDPC.verify(message.syncBackToGrid);
                if (error)
                    return "syncBackToGrid." + error;
            }
            if (message.transToIslndOnGridLossEnabled != null && message.hasOwnProperty("transToIslndOnGridLossEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.transToIslndOnGridLossEnabled);
                if (error)
                    return "transToIslndOnGridLossEnabled." + error;
            }
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.voltageSetPointEnabled);
                if (error)
                    return "voltageSetPointEnabled." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationPointStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationPointStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationPointStatus} GenerationPointStatus
         */
        GenerationPointStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationPointStatus)
                return object;
            var message = new $root.generationmodule.GenerationPointStatus();
            if (object.blackStartEnabled != null) {
                if (typeof object.blackStartEnabled !== "object")
                    throw TypeError(".generationmodule.GenerationPointStatus.blackStartEnabled: object expected");
                message.blackStartEnabled = $root.commonmodule.ControlDPC.fromObject(object.blackStartEnabled);
            }
            if (object.frequencySetPointEnabled != null) {
                if (typeof object.frequencySetPointEnabled !== "object")
                    throw TypeError(".generationmodule.GenerationPointStatus.frequencySetPointEnabled: object expected");
                message.frequencySetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.frequencySetPointEnabled);
            }
            if (object.pctHzDroop != null) {
                if (typeof object.pctHzDroop !== "object")
                    throw TypeError(".generationmodule.GenerationPointStatus.pctHzDroop: object expected");
                message.pctHzDroop = $root.google.protobuf.FloatValue.fromObject(object.pctHzDroop);
            }
            if (object.pctVDroop != null) {
                if (typeof object.pctVDroop !== "object")
                    throw TypeError(".generationmodule.GenerationPointStatus.pctVDroop: object expected");
                message.pctVDroop = $root.google.protobuf.FloatValue.fromObject(object.pctVDroop);
            }
            if (object.rampRates != null) {
                if (typeof object.rampRates !== "object")
                    throw TypeError(".generationmodule.GenerationPointStatus.rampRates: object expected");
                message.rampRates = $root.commonmodule.RampRate.fromObject(object.rampRates);
            }
            if (object.reactivePwrSetPointEnabled != null) {
                if (typeof object.reactivePwrSetPointEnabled !== "object")
                    throw TypeError(".generationmodule.GenerationPointStatus.reactivePwrSetPointEnabled: object expected");
                message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.reactivePwrSetPointEnabled);
            }
            if (object.realPwrSetPointEnabled != null) {
                if (typeof object.realPwrSetPointEnabled !== "object")
                    throw TypeError(".generationmodule.GenerationPointStatus.realPwrSetPointEnabled: object expected");
                message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.realPwrSetPointEnabled);
            }
            if (object.state != null) {
                if (typeof object.state !== "object")
                    throw TypeError(".generationmodule.GenerationPointStatus.state: object expected");
                message.state = $root.commonmodule.Optional_StateKind.fromObject(object.state);
            }
            if (object.syncBackToGrid != null) {
                if (typeof object.syncBackToGrid !== "object")
                    throw TypeError(".generationmodule.GenerationPointStatus.syncBackToGrid: object expected");
                message.syncBackToGrid = $root.commonmodule.ControlDPC.fromObject(object.syncBackToGrid);
            }
            if (object.transToIslndOnGridLossEnabled != null) {
                if (typeof object.transToIslndOnGridLossEnabled !== "object")
                    throw TypeError(".generationmodule.GenerationPointStatus.transToIslndOnGridLossEnabled: object expected");
                message.transToIslndOnGridLossEnabled = $root.commonmodule.ControlDPC.fromObject(object.transToIslndOnGridLossEnabled);
            }
            if (object.voltageSetPointEnabled != null) {
                if (typeof object.voltageSetPointEnabled !== "object")
                    throw TypeError(".generationmodule.GenerationPointStatus.voltageSetPointEnabled: object expected");
                message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.voltageSetPointEnabled);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationPointStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationPointStatus
         * @static
         * @param {generationmodule.GenerationPointStatus} message GenerationPointStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationPointStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.blackStartEnabled = null;
                object.frequencySetPointEnabled = null;
                object.pctHzDroop = null;
                object.pctVDroop = null;
                object.rampRates = null;
                object.reactivePwrSetPointEnabled = null;
                object.realPwrSetPointEnabled = null;
                object.state = null;
                object.syncBackToGrid = null;
                object.transToIslndOnGridLossEnabled = null;
                object.voltageSetPointEnabled = null;
            }
            if (message.blackStartEnabled != null && message.hasOwnProperty("blackStartEnabled"))
                object.blackStartEnabled = $root.commonmodule.ControlDPC.toObject(message.blackStartEnabled, options);
            if (message.frequencySetPointEnabled != null && message.hasOwnProperty("frequencySetPointEnabled"))
                object.frequencySetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.frequencySetPointEnabled, options);
            if (message.pctHzDroop != null && message.hasOwnProperty("pctHzDroop"))
                object.pctHzDroop = $root.google.protobuf.FloatValue.toObject(message.pctHzDroop, options);
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop"))
                object.pctVDroop = $root.google.protobuf.FloatValue.toObject(message.pctVDroop, options);
            if (message.rampRates != null && message.hasOwnProperty("rampRates"))
                object.rampRates = $root.commonmodule.RampRate.toObject(message.rampRates, options);
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled"))
                object.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.reactivePwrSetPointEnabled, options);
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled"))
                object.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.realPwrSetPointEnabled, options);
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = $root.commonmodule.Optional_StateKind.toObject(message.state, options);
            if (message.syncBackToGrid != null && message.hasOwnProperty("syncBackToGrid"))
                object.syncBackToGrid = $root.commonmodule.ControlDPC.toObject(message.syncBackToGrid, options);
            if (message.transToIslndOnGridLossEnabled != null && message.hasOwnProperty("transToIslndOnGridLossEnabled"))
                object.transToIslndOnGridLossEnabled = $root.commonmodule.ControlDPC.toObject(message.transToIslndOnGridLossEnabled, options);
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled"))
                object.voltageSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.voltageSetPointEnabled, options);
            return object;
        };

        /**
         * Converts this GenerationPointStatus to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationPointStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationPointStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationPointStatus;
    })();

    generationmodule.GenerationEventAndStatusZGEN = (function() {

        /**
         * Properties of a GenerationEventAndStatusZGEN.
         * @memberof generationmodule
         * @interface IGenerationEventAndStatusZGEN
         * @property {commonmodule.ILogicalNodeForEventAndStatus|null} [logicalNodeForEventAndStatus] GenerationEventAndStatusZGEN logicalNodeForEventAndStatus
         * @property {commonmodule.IStatusSPS|null} [AuxPwrSt] GenerationEventAndStatusZGEN AuxPwrSt
         * @property {commonmodule.IENS_DynamicTestKind|null} [DynamicTest] GenerationEventAndStatusZGEN DynamicTest
         * @property {commonmodule.IStatusSPS|null} [EmgStop] GenerationEventAndStatusZGEN EmgStop
         * @property {commonmodule.IStatusSPS|null} [GnSynSt] GenerationEventAndStatusZGEN GnSynSt
         * @property {generationmodule.IGenerationPointStatus|null} [PointStatus] GenerationEventAndStatusZGEN PointStatus
         */

        /**
         * Constructs a new GenerationEventAndStatusZGEN.
         * @memberof generationmodule
         * @classdesc Represents a GenerationEventAndStatusZGEN.
         * @implements IGenerationEventAndStatusZGEN
         * @constructor
         * @param {generationmodule.IGenerationEventAndStatusZGEN=} [properties] Properties to set
         */
        function GenerationEventAndStatusZGEN(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationEventAndStatusZGEN logicalNodeForEventAndStatus.
         * @member {commonmodule.ILogicalNodeForEventAndStatus|null|undefined} logicalNodeForEventAndStatus
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @instance
         */
        GenerationEventAndStatusZGEN.prototype.logicalNodeForEventAndStatus = null;

        /**
         * GenerationEventAndStatusZGEN AuxPwrSt.
         * @member {commonmodule.IStatusSPS|null|undefined} AuxPwrSt
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @instance
         */
        GenerationEventAndStatusZGEN.prototype.AuxPwrSt = null;

        /**
         * GenerationEventAndStatusZGEN DynamicTest.
         * @member {commonmodule.IENS_DynamicTestKind|null|undefined} DynamicTest
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @instance
         */
        GenerationEventAndStatusZGEN.prototype.DynamicTest = null;

        /**
         * GenerationEventAndStatusZGEN EmgStop.
         * @member {commonmodule.IStatusSPS|null|undefined} EmgStop
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @instance
         */
        GenerationEventAndStatusZGEN.prototype.EmgStop = null;

        /**
         * GenerationEventAndStatusZGEN GnSynSt.
         * @member {commonmodule.IStatusSPS|null|undefined} GnSynSt
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @instance
         */
        GenerationEventAndStatusZGEN.prototype.GnSynSt = null;

        /**
         * GenerationEventAndStatusZGEN PointStatus.
         * @member {generationmodule.IGenerationPointStatus|null|undefined} PointStatus
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @instance
         */
        GenerationEventAndStatusZGEN.prototype.PointStatus = null;

        /**
         * Creates a new GenerationEventAndStatusZGEN instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @static
         * @param {generationmodule.IGenerationEventAndStatusZGEN=} [properties] Properties to set
         * @returns {generationmodule.GenerationEventAndStatusZGEN} GenerationEventAndStatusZGEN instance
         */
        GenerationEventAndStatusZGEN.create = function create(properties) {
            return new GenerationEventAndStatusZGEN(properties);
        };

        /**
         * Encodes the specified GenerationEventAndStatusZGEN message. Does not implicitly {@link generationmodule.GenerationEventAndStatusZGEN.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @static
         * @param {generationmodule.IGenerationEventAndStatusZGEN} message GenerationEventAndStatusZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationEventAndStatusZGEN.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForEventAndStatus != null && Object.hasOwnProperty.call(message, "logicalNodeForEventAndStatus"))
                $root.commonmodule.LogicalNodeForEventAndStatus.encode(message.logicalNodeForEventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.AuxPwrSt != null && Object.hasOwnProperty.call(message, "AuxPwrSt"))
                $root.commonmodule.StatusSPS.encode(message.AuxPwrSt, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.DynamicTest != null && Object.hasOwnProperty.call(message, "DynamicTest"))
                $root.commonmodule.ENS_DynamicTestKind.encode(message.DynamicTest, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.EmgStop != null && Object.hasOwnProperty.call(message, "EmgStop"))
                $root.commonmodule.StatusSPS.encode(message.EmgStop, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.GnSynSt != null && Object.hasOwnProperty.call(message, "GnSynSt"))
                $root.commonmodule.StatusSPS.encode(message.GnSynSt, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.PointStatus != null && Object.hasOwnProperty.call(message, "PointStatus"))
                $root.generationmodule.GenerationPointStatus.encode(message.PointStatus, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationEventAndStatusZGEN message, length delimited. Does not implicitly {@link generationmodule.GenerationEventAndStatusZGEN.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @static
         * @param {generationmodule.IGenerationEventAndStatusZGEN} message GenerationEventAndStatusZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationEventAndStatusZGEN.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationEventAndStatusZGEN message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationEventAndStatusZGEN} GenerationEventAndStatusZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationEventAndStatusZGEN.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationEventAndStatusZGEN();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.AuxPwrSt = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.EmgStop = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.GnSynSt = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.PointStatus = $root.generationmodule.GenerationPointStatus.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationEventAndStatusZGEN message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationEventAndStatusZGEN} GenerationEventAndStatusZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationEventAndStatusZGEN.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationEventAndStatusZGEN message.
         * @function verify
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationEventAndStatusZGEN.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus")) {
                var error = $root.commonmodule.LogicalNodeForEventAndStatus.verify(message.logicalNodeForEventAndStatus);
                if (error)
                    return "logicalNodeForEventAndStatus." + error;
            }
            if (message.AuxPwrSt != null && message.hasOwnProperty("AuxPwrSt")) {
                var error = $root.commonmodule.StatusSPS.verify(message.AuxPwrSt);
                if (error)
                    return "AuxPwrSt." + error;
            }
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest")) {
                var error = $root.commonmodule.ENS_DynamicTestKind.verify(message.DynamicTest);
                if (error)
                    return "DynamicTest." + error;
            }
            if (message.EmgStop != null && message.hasOwnProperty("EmgStop")) {
                var error = $root.commonmodule.StatusSPS.verify(message.EmgStop);
                if (error)
                    return "EmgStop." + error;
            }
            if (message.GnSynSt != null && message.hasOwnProperty("GnSynSt")) {
                var error = $root.commonmodule.StatusSPS.verify(message.GnSynSt);
                if (error)
                    return "GnSynSt." + error;
            }
            if (message.PointStatus != null && message.hasOwnProperty("PointStatus")) {
                var error = $root.generationmodule.GenerationPointStatus.verify(message.PointStatus);
                if (error)
                    return "PointStatus." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationEventAndStatusZGEN message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationEventAndStatusZGEN} GenerationEventAndStatusZGEN
         */
        GenerationEventAndStatusZGEN.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationEventAndStatusZGEN)
                return object;
            var message = new $root.generationmodule.GenerationEventAndStatusZGEN();
            if (object.logicalNodeForEventAndStatus != null) {
                if (typeof object.logicalNodeForEventAndStatus !== "object")
                    throw TypeError(".generationmodule.GenerationEventAndStatusZGEN.logicalNodeForEventAndStatus: object expected");
                message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.fromObject(object.logicalNodeForEventAndStatus);
            }
            if (object.AuxPwrSt != null) {
                if (typeof object.AuxPwrSt !== "object")
                    throw TypeError(".generationmodule.GenerationEventAndStatusZGEN.AuxPwrSt: object expected");
                message.AuxPwrSt = $root.commonmodule.StatusSPS.fromObject(object.AuxPwrSt);
            }
            if (object.DynamicTest != null) {
                if (typeof object.DynamicTest !== "object")
                    throw TypeError(".generationmodule.GenerationEventAndStatusZGEN.DynamicTest: object expected");
                message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.fromObject(object.DynamicTest);
            }
            if (object.EmgStop != null) {
                if (typeof object.EmgStop !== "object")
                    throw TypeError(".generationmodule.GenerationEventAndStatusZGEN.EmgStop: object expected");
                message.EmgStop = $root.commonmodule.StatusSPS.fromObject(object.EmgStop);
            }
            if (object.GnSynSt != null) {
                if (typeof object.GnSynSt !== "object")
                    throw TypeError(".generationmodule.GenerationEventAndStatusZGEN.GnSynSt: object expected");
                message.GnSynSt = $root.commonmodule.StatusSPS.fromObject(object.GnSynSt);
            }
            if (object.PointStatus != null) {
                if (typeof object.PointStatus !== "object")
                    throw TypeError(".generationmodule.GenerationEventAndStatusZGEN.PointStatus: object expected");
                message.PointStatus = $root.generationmodule.GenerationPointStatus.fromObject(object.PointStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationEventAndStatusZGEN message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @static
         * @param {generationmodule.GenerationEventAndStatusZGEN} message GenerationEventAndStatusZGEN
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationEventAndStatusZGEN.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForEventAndStatus = null;
                object.AuxPwrSt = null;
                object.DynamicTest = null;
                object.EmgStop = null;
                object.GnSynSt = null;
                object.PointStatus = null;
            }
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus"))
                object.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.toObject(message.logicalNodeForEventAndStatus, options);
            if (message.AuxPwrSt != null && message.hasOwnProperty("AuxPwrSt"))
                object.AuxPwrSt = $root.commonmodule.StatusSPS.toObject(message.AuxPwrSt, options);
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest"))
                object.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.toObject(message.DynamicTest, options);
            if (message.EmgStop != null && message.hasOwnProperty("EmgStop"))
                object.EmgStop = $root.commonmodule.StatusSPS.toObject(message.EmgStop, options);
            if (message.GnSynSt != null && message.hasOwnProperty("GnSynSt"))
                object.GnSynSt = $root.commonmodule.StatusSPS.toObject(message.GnSynSt, options);
            if (message.PointStatus != null && message.hasOwnProperty("PointStatus"))
                object.PointStatus = $root.generationmodule.GenerationPointStatus.toObject(message.PointStatus, options);
            return object;
        };

        /**
         * Converts this GenerationEventAndStatusZGEN to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationEventAndStatusZGEN
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationEventAndStatusZGEN.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationEventAndStatusZGEN;
    })();

    generationmodule.GenerationEventZGEN = (function() {

        /**
         * Properties of a GenerationEventZGEN.
         * @memberof generationmodule
         * @interface IGenerationEventZGEN
         * @property {generationmodule.IGenerationEventAndStatusZGEN|null} [generationEventAndStatusZGEN] GenerationEventZGEN generationEventAndStatusZGEN
         */

        /**
         * Constructs a new GenerationEventZGEN.
         * @memberof generationmodule
         * @classdesc Represents a GenerationEventZGEN.
         * @implements IGenerationEventZGEN
         * @constructor
         * @param {generationmodule.IGenerationEventZGEN=} [properties] Properties to set
         */
        function GenerationEventZGEN(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationEventZGEN generationEventAndStatusZGEN.
         * @member {generationmodule.IGenerationEventAndStatusZGEN|null|undefined} generationEventAndStatusZGEN
         * @memberof generationmodule.GenerationEventZGEN
         * @instance
         */
        GenerationEventZGEN.prototype.generationEventAndStatusZGEN = null;

        /**
         * Creates a new GenerationEventZGEN instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationEventZGEN
         * @static
         * @param {generationmodule.IGenerationEventZGEN=} [properties] Properties to set
         * @returns {generationmodule.GenerationEventZGEN} GenerationEventZGEN instance
         */
        GenerationEventZGEN.create = function create(properties) {
            return new GenerationEventZGEN(properties);
        };

        /**
         * Encodes the specified GenerationEventZGEN message. Does not implicitly {@link generationmodule.GenerationEventZGEN.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationEventZGEN
         * @static
         * @param {generationmodule.IGenerationEventZGEN} message GenerationEventZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationEventZGEN.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.generationEventAndStatusZGEN != null && Object.hasOwnProperty.call(message, "generationEventAndStatusZGEN"))
                $root.generationmodule.GenerationEventAndStatusZGEN.encode(message.generationEventAndStatusZGEN, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationEventZGEN message, length delimited. Does not implicitly {@link generationmodule.GenerationEventZGEN.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationEventZGEN
         * @static
         * @param {generationmodule.IGenerationEventZGEN} message GenerationEventZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationEventZGEN.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationEventZGEN message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationEventZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationEventZGEN} GenerationEventZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationEventZGEN.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationEventZGEN();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.generationEventAndStatusZGEN = $root.generationmodule.GenerationEventAndStatusZGEN.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationEventZGEN message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationEventZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationEventZGEN} GenerationEventZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationEventZGEN.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationEventZGEN message.
         * @function verify
         * @memberof generationmodule.GenerationEventZGEN
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationEventZGEN.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.generationEventAndStatusZGEN != null && message.hasOwnProperty("generationEventAndStatusZGEN")) {
                var error = $root.generationmodule.GenerationEventAndStatusZGEN.verify(message.generationEventAndStatusZGEN);
                if (error)
                    return "generationEventAndStatusZGEN." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationEventZGEN message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationEventZGEN
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationEventZGEN} GenerationEventZGEN
         */
        GenerationEventZGEN.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationEventZGEN)
                return object;
            var message = new $root.generationmodule.GenerationEventZGEN();
            if (object.generationEventAndStatusZGEN != null) {
                if (typeof object.generationEventAndStatusZGEN !== "object")
                    throw TypeError(".generationmodule.GenerationEventZGEN.generationEventAndStatusZGEN: object expected");
                message.generationEventAndStatusZGEN = $root.generationmodule.GenerationEventAndStatusZGEN.fromObject(object.generationEventAndStatusZGEN);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationEventZGEN message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationEventZGEN
         * @static
         * @param {generationmodule.GenerationEventZGEN} message GenerationEventZGEN
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationEventZGEN.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.generationEventAndStatusZGEN = null;
            if (message.generationEventAndStatusZGEN != null && message.hasOwnProperty("generationEventAndStatusZGEN"))
                object.generationEventAndStatusZGEN = $root.generationmodule.GenerationEventAndStatusZGEN.toObject(message.generationEventAndStatusZGEN, options);
            return object;
        };

        /**
         * Converts this GenerationEventZGEN to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationEventZGEN
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationEventZGEN.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationEventZGEN;
    })();

    generationmodule.GenerationEvent = (function() {

        /**
         * Properties of a GenerationEvent.
         * @memberof generationmodule
         * @interface IGenerationEvent
         * @property {commonmodule.IEventValue|null} [eventValue] GenerationEvent eventValue
         * @property {generationmodule.IGenerationEventZGEN|null} [generationEventZGEN] GenerationEvent generationEventZGEN
         */

        /**
         * Constructs a new GenerationEvent.
         * @memberof generationmodule
         * @classdesc Represents a GenerationEvent.
         * @implements IGenerationEvent
         * @constructor
         * @param {generationmodule.IGenerationEvent=} [properties] Properties to set
         */
        function GenerationEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationEvent eventValue.
         * @member {commonmodule.IEventValue|null|undefined} eventValue
         * @memberof generationmodule.GenerationEvent
         * @instance
         */
        GenerationEvent.prototype.eventValue = null;

        /**
         * GenerationEvent generationEventZGEN.
         * @member {generationmodule.IGenerationEventZGEN|null|undefined} generationEventZGEN
         * @memberof generationmodule.GenerationEvent
         * @instance
         */
        GenerationEvent.prototype.generationEventZGEN = null;

        /**
         * Creates a new GenerationEvent instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationEvent
         * @static
         * @param {generationmodule.IGenerationEvent=} [properties] Properties to set
         * @returns {generationmodule.GenerationEvent} GenerationEvent instance
         */
        GenerationEvent.create = function create(properties) {
            return new GenerationEvent(properties);
        };

        /**
         * Encodes the specified GenerationEvent message. Does not implicitly {@link generationmodule.GenerationEvent.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationEvent
         * @static
         * @param {generationmodule.IGenerationEvent} message GenerationEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventValue != null && Object.hasOwnProperty.call(message, "eventValue"))
                $root.commonmodule.EventValue.encode(message.eventValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.generationEventZGEN != null && Object.hasOwnProperty.call(message, "generationEventZGEN"))
                $root.generationmodule.GenerationEventZGEN.encode(message.generationEventZGEN, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationEvent message, length delimited. Does not implicitly {@link generationmodule.GenerationEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationEvent
         * @static
         * @param {generationmodule.IGenerationEvent} message GenerationEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationEvent message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationEvent} GenerationEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventValue = $root.commonmodule.EventValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.generationEventZGEN = $root.generationmodule.GenerationEventZGEN.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationEvent} GenerationEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationEvent message.
         * @function verify
         * @memberof generationmodule.GenerationEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventValue != null && message.hasOwnProperty("eventValue")) {
                var error = $root.commonmodule.EventValue.verify(message.eventValue);
                if (error)
                    return "eventValue." + error;
            }
            if (message.generationEventZGEN != null && message.hasOwnProperty("generationEventZGEN")) {
                var error = $root.generationmodule.GenerationEventZGEN.verify(message.generationEventZGEN);
                if (error)
                    return "generationEventZGEN." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationEvent} GenerationEvent
         */
        GenerationEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationEvent)
                return object;
            var message = new $root.generationmodule.GenerationEvent();
            if (object.eventValue != null) {
                if (typeof object.eventValue !== "object")
                    throw TypeError(".generationmodule.GenerationEvent.eventValue: object expected");
                message.eventValue = $root.commonmodule.EventValue.fromObject(object.eventValue);
            }
            if (object.generationEventZGEN != null) {
                if (typeof object.generationEventZGEN !== "object")
                    throw TypeError(".generationmodule.GenerationEvent.generationEventZGEN: object expected");
                message.generationEventZGEN = $root.generationmodule.GenerationEventZGEN.fromObject(object.generationEventZGEN);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationEvent
         * @static
         * @param {generationmodule.GenerationEvent} message GenerationEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventValue = null;
                object.generationEventZGEN = null;
            }
            if (message.eventValue != null && message.hasOwnProperty("eventValue"))
                object.eventValue = $root.commonmodule.EventValue.toObject(message.eventValue, options);
            if (message.generationEventZGEN != null && message.hasOwnProperty("generationEventZGEN"))
                object.generationEventZGEN = $root.generationmodule.GenerationEventZGEN.toObject(message.generationEventZGEN, options);
            return object;
        };

        /**
         * Converts this GenerationEvent to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationEvent;
    })();

    generationmodule.GenerationEventProfile = (function() {

        /**
         * Properties of a GenerationEventProfile.
         * @memberof generationmodule
         * @interface IGenerationEventProfile
         * @property {commonmodule.IEventMessageInfo|null} [eventMessageInfo] GenerationEventProfile eventMessageInfo
         * @property {generationmodule.IGeneratingUnit|null} [generatingUnit] GenerationEventProfile generatingUnit
         * @property {generationmodule.IGenerationEvent|null} [generationEvent] GenerationEventProfile generationEvent
         * @property {commonmodule.IIED|null} [ied] GenerationEventProfile ied
         */

        /**
         * Constructs a new GenerationEventProfile.
         * @memberof generationmodule
         * @classdesc Represents a GenerationEventProfile.
         * @implements IGenerationEventProfile
         * @constructor
         * @param {generationmodule.IGenerationEventProfile=} [properties] Properties to set
         */
        function GenerationEventProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationEventProfile eventMessageInfo.
         * @member {commonmodule.IEventMessageInfo|null|undefined} eventMessageInfo
         * @memberof generationmodule.GenerationEventProfile
         * @instance
         */
        GenerationEventProfile.prototype.eventMessageInfo = null;

        /**
         * GenerationEventProfile generatingUnit.
         * @member {generationmodule.IGeneratingUnit|null|undefined} generatingUnit
         * @memberof generationmodule.GenerationEventProfile
         * @instance
         */
        GenerationEventProfile.prototype.generatingUnit = null;

        /**
         * GenerationEventProfile generationEvent.
         * @member {generationmodule.IGenerationEvent|null|undefined} generationEvent
         * @memberof generationmodule.GenerationEventProfile
         * @instance
         */
        GenerationEventProfile.prototype.generationEvent = null;

        /**
         * GenerationEventProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof generationmodule.GenerationEventProfile
         * @instance
         */
        GenerationEventProfile.prototype.ied = null;

        /**
         * Creates a new GenerationEventProfile instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationEventProfile
         * @static
         * @param {generationmodule.IGenerationEventProfile=} [properties] Properties to set
         * @returns {generationmodule.GenerationEventProfile} GenerationEventProfile instance
         */
        GenerationEventProfile.create = function create(properties) {
            return new GenerationEventProfile(properties);
        };

        /**
         * Encodes the specified GenerationEventProfile message. Does not implicitly {@link generationmodule.GenerationEventProfile.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationEventProfile
         * @static
         * @param {generationmodule.IGenerationEventProfile} message GenerationEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationEventProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventMessageInfo != null && Object.hasOwnProperty.call(message, "eventMessageInfo"))
                $root.commonmodule.EventMessageInfo.encode(message.eventMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.generatingUnit != null && Object.hasOwnProperty.call(message, "generatingUnit"))
                $root.generationmodule.GeneratingUnit.encode(message.generatingUnit, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.generationEvent != null && Object.hasOwnProperty.call(message, "generationEvent"))
                $root.generationmodule.GenerationEvent.encode(message.generationEvent, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationEventProfile message, length delimited. Does not implicitly {@link generationmodule.GenerationEventProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationEventProfile
         * @static
         * @param {generationmodule.IGenerationEventProfile} message GenerationEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationEventProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationEventProfile message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationEventProfile} GenerationEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationEventProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationEventProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventMessageInfo = $root.commonmodule.EventMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.generatingUnit = $root.generationmodule.GeneratingUnit.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.generationEvent = $root.generationmodule.GenerationEvent.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationEventProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationEventProfile} GenerationEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationEventProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationEventProfile message.
         * @function verify
         * @memberof generationmodule.GenerationEventProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationEventProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo")) {
                var error = $root.commonmodule.EventMessageInfo.verify(message.eventMessageInfo);
                if (error)
                    return "eventMessageInfo." + error;
            }
            if (message.generatingUnit != null && message.hasOwnProperty("generatingUnit")) {
                var error = $root.generationmodule.GeneratingUnit.verify(message.generatingUnit);
                if (error)
                    return "generatingUnit." + error;
            }
            if (message.generationEvent != null && message.hasOwnProperty("generationEvent")) {
                var error = $root.generationmodule.GenerationEvent.verify(message.generationEvent);
                if (error)
                    return "generationEvent." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationEventProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationEventProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationEventProfile} GenerationEventProfile
         */
        GenerationEventProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationEventProfile)
                return object;
            var message = new $root.generationmodule.GenerationEventProfile();
            if (object.eventMessageInfo != null) {
                if (typeof object.eventMessageInfo !== "object")
                    throw TypeError(".generationmodule.GenerationEventProfile.eventMessageInfo: object expected");
                message.eventMessageInfo = $root.commonmodule.EventMessageInfo.fromObject(object.eventMessageInfo);
            }
            if (object.generatingUnit != null) {
                if (typeof object.generatingUnit !== "object")
                    throw TypeError(".generationmodule.GenerationEventProfile.generatingUnit: object expected");
                message.generatingUnit = $root.generationmodule.GeneratingUnit.fromObject(object.generatingUnit);
            }
            if (object.generationEvent != null) {
                if (typeof object.generationEvent !== "object")
                    throw TypeError(".generationmodule.GenerationEventProfile.generationEvent: object expected");
                message.generationEvent = $root.generationmodule.GenerationEvent.fromObject(object.generationEvent);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".generationmodule.GenerationEventProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationEventProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationEventProfile
         * @static
         * @param {generationmodule.GenerationEventProfile} message GenerationEventProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationEventProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventMessageInfo = null;
                object.generatingUnit = null;
                object.generationEvent = null;
                object.ied = null;
            }
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo"))
                object.eventMessageInfo = $root.commonmodule.EventMessageInfo.toObject(message.eventMessageInfo, options);
            if (message.generatingUnit != null && message.hasOwnProperty("generatingUnit"))
                object.generatingUnit = $root.generationmodule.GeneratingUnit.toObject(message.generatingUnit, options);
            if (message.generationEvent != null && message.hasOwnProperty("generationEvent"))
                object.generationEvent = $root.generationmodule.GenerationEvent.toObject(message.generationEvent, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            return object;
        };

        /**
         * Converts this GenerationEventProfile to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationEventProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationEventProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationEventProfile;
    })();

    generationmodule.GenerationStatusZGEN = (function() {

        /**
         * Properties of a GenerationStatusZGEN.
         * @memberof generationmodule
         * @interface IGenerationStatusZGEN
         * @property {generationmodule.IGenerationEventAndStatusZGEN|null} [generationEventAndStatusZGEN] GenerationStatusZGEN generationEventAndStatusZGEN
         */

        /**
         * Constructs a new GenerationStatusZGEN.
         * @memberof generationmodule
         * @classdesc Represents a GenerationStatusZGEN.
         * @implements IGenerationStatusZGEN
         * @constructor
         * @param {generationmodule.IGenerationStatusZGEN=} [properties] Properties to set
         */
        function GenerationStatusZGEN(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationStatusZGEN generationEventAndStatusZGEN.
         * @member {generationmodule.IGenerationEventAndStatusZGEN|null|undefined} generationEventAndStatusZGEN
         * @memberof generationmodule.GenerationStatusZGEN
         * @instance
         */
        GenerationStatusZGEN.prototype.generationEventAndStatusZGEN = null;

        /**
         * Creates a new GenerationStatusZGEN instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationStatusZGEN
         * @static
         * @param {generationmodule.IGenerationStatusZGEN=} [properties] Properties to set
         * @returns {generationmodule.GenerationStatusZGEN} GenerationStatusZGEN instance
         */
        GenerationStatusZGEN.create = function create(properties) {
            return new GenerationStatusZGEN(properties);
        };

        /**
         * Encodes the specified GenerationStatusZGEN message. Does not implicitly {@link generationmodule.GenerationStatusZGEN.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationStatusZGEN
         * @static
         * @param {generationmodule.IGenerationStatusZGEN} message GenerationStatusZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationStatusZGEN.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.generationEventAndStatusZGEN != null && Object.hasOwnProperty.call(message, "generationEventAndStatusZGEN"))
                $root.generationmodule.GenerationEventAndStatusZGEN.encode(message.generationEventAndStatusZGEN, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationStatusZGEN message, length delimited. Does not implicitly {@link generationmodule.GenerationStatusZGEN.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationStatusZGEN
         * @static
         * @param {generationmodule.IGenerationStatusZGEN} message GenerationStatusZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationStatusZGEN.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationStatusZGEN message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationStatusZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationStatusZGEN} GenerationStatusZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationStatusZGEN.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationStatusZGEN();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.generationEventAndStatusZGEN = $root.generationmodule.GenerationEventAndStatusZGEN.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationStatusZGEN message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationStatusZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationStatusZGEN} GenerationStatusZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationStatusZGEN.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationStatusZGEN message.
         * @function verify
         * @memberof generationmodule.GenerationStatusZGEN
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationStatusZGEN.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.generationEventAndStatusZGEN != null && message.hasOwnProperty("generationEventAndStatusZGEN")) {
                var error = $root.generationmodule.GenerationEventAndStatusZGEN.verify(message.generationEventAndStatusZGEN);
                if (error)
                    return "generationEventAndStatusZGEN." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationStatusZGEN message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationStatusZGEN
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationStatusZGEN} GenerationStatusZGEN
         */
        GenerationStatusZGEN.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationStatusZGEN)
                return object;
            var message = new $root.generationmodule.GenerationStatusZGEN();
            if (object.generationEventAndStatusZGEN != null) {
                if (typeof object.generationEventAndStatusZGEN !== "object")
                    throw TypeError(".generationmodule.GenerationStatusZGEN.generationEventAndStatusZGEN: object expected");
                message.generationEventAndStatusZGEN = $root.generationmodule.GenerationEventAndStatusZGEN.fromObject(object.generationEventAndStatusZGEN);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationStatusZGEN message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationStatusZGEN
         * @static
         * @param {generationmodule.GenerationStatusZGEN} message GenerationStatusZGEN
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationStatusZGEN.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.generationEventAndStatusZGEN = null;
            if (message.generationEventAndStatusZGEN != null && message.hasOwnProperty("generationEventAndStatusZGEN"))
                object.generationEventAndStatusZGEN = $root.generationmodule.GenerationEventAndStatusZGEN.toObject(message.generationEventAndStatusZGEN, options);
            return object;
        };

        /**
         * Converts this GenerationStatusZGEN to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationStatusZGEN
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationStatusZGEN.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationStatusZGEN;
    })();

    generationmodule.GenerationStatus = (function() {

        /**
         * Properties of a GenerationStatus.
         * @memberof generationmodule
         * @interface IGenerationStatus
         * @property {commonmodule.IStatusValue|null} [statusValue] GenerationStatus statusValue
         * @property {generationmodule.IGenerationStatusZGEN|null} [generationStatusZGEN] GenerationStatus generationStatusZGEN
         */

        /**
         * Constructs a new GenerationStatus.
         * @memberof generationmodule
         * @classdesc Represents a GenerationStatus.
         * @implements IGenerationStatus
         * @constructor
         * @param {generationmodule.IGenerationStatus=} [properties] Properties to set
         */
        function GenerationStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationStatus statusValue.
         * @member {commonmodule.IStatusValue|null|undefined} statusValue
         * @memberof generationmodule.GenerationStatus
         * @instance
         */
        GenerationStatus.prototype.statusValue = null;

        /**
         * GenerationStatus generationStatusZGEN.
         * @member {generationmodule.IGenerationStatusZGEN|null|undefined} generationStatusZGEN
         * @memberof generationmodule.GenerationStatus
         * @instance
         */
        GenerationStatus.prototype.generationStatusZGEN = null;

        /**
         * Creates a new GenerationStatus instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationStatus
         * @static
         * @param {generationmodule.IGenerationStatus=} [properties] Properties to set
         * @returns {generationmodule.GenerationStatus} GenerationStatus instance
         */
        GenerationStatus.create = function create(properties) {
            return new GenerationStatus(properties);
        };

        /**
         * Encodes the specified GenerationStatus message. Does not implicitly {@link generationmodule.GenerationStatus.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationStatus
         * @static
         * @param {generationmodule.IGenerationStatus} message GenerationStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusValue != null && Object.hasOwnProperty.call(message, "statusValue"))
                $root.commonmodule.StatusValue.encode(message.statusValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.generationStatusZGEN != null && Object.hasOwnProperty.call(message, "generationStatusZGEN"))
                $root.generationmodule.GenerationStatusZGEN.encode(message.generationStatusZGEN, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationStatus message, length delimited. Does not implicitly {@link generationmodule.GenerationStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationStatus
         * @static
         * @param {generationmodule.IGenerationStatus} message GenerationStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationStatus message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationStatus} GenerationStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusValue = $root.commonmodule.StatusValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.generationStatusZGEN = $root.generationmodule.GenerationStatusZGEN.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationStatus} GenerationStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationStatus message.
         * @function verify
         * @memberof generationmodule.GenerationStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusValue != null && message.hasOwnProperty("statusValue")) {
                var error = $root.commonmodule.StatusValue.verify(message.statusValue);
                if (error)
                    return "statusValue." + error;
            }
            if (message.generationStatusZGEN != null && message.hasOwnProperty("generationStatusZGEN")) {
                var error = $root.generationmodule.GenerationStatusZGEN.verify(message.generationStatusZGEN);
                if (error)
                    return "generationStatusZGEN." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationStatus} GenerationStatus
         */
        GenerationStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationStatus)
                return object;
            var message = new $root.generationmodule.GenerationStatus();
            if (object.statusValue != null) {
                if (typeof object.statusValue !== "object")
                    throw TypeError(".generationmodule.GenerationStatus.statusValue: object expected");
                message.statusValue = $root.commonmodule.StatusValue.fromObject(object.statusValue);
            }
            if (object.generationStatusZGEN != null) {
                if (typeof object.generationStatusZGEN !== "object")
                    throw TypeError(".generationmodule.GenerationStatus.generationStatusZGEN: object expected");
                message.generationStatusZGEN = $root.generationmodule.GenerationStatusZGEN.fromObject(object.generationStatusZGEN);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationStatus
         * @static
         * @param {generationmodule.GenerationStatus} message GenerationStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusValue = null;
                object.generationStatusZGEN = null;
            }
            if (message.statusValue != null && message.hasOwnProperty("statusValue"))
                object.statusValue = $root.commonmodule.StatusValue.toObject(message.statusValue, options);
            if (message.generationStatusZGEN != null && message.hasOwnProperty("generationStatusZGEN"))
                object.generationStatusZGEN = $root.generationmodule.GenerationStatusZGEN.toObject(message.generationStatusZGEN, options);
            return object;
        };

        /**
         * Converts this GenerationStatus to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationStatus;
    })();

    generationmodule.GenerationStatusProfile = (function() {

        /**
         * Properties of a GenerationStatusProfile.
         * @memberof generationmodule
         * @interface IGenerationStatusProfile
         * @property {commonmodule.IStatusMessageInfo|null} [statusMessageInfo] GenerationStatusProfile statusMessageInfo
         * @property {generationmodule.IGeneratingUnit|null} [generatingUnit] GenerationStatusProfile generatingUnit
         * @property {generationmodule.IGenerationStatus|null} [generationStatus] GenerationStatusProfile generationStatus
         * @property {commonmodule.IIED|null} [ied] GenerationStatusProfile ied
         */

        /**
         * Constructs a new GenerationStatusProfile.
         * @memberof generationmodule
         * @classdesc Represents a GenerationStatusProfile.
         * @implements IGenerationStatusProfile
         * @constructor
         * @param {generationmodule.IGenerationStatusProfile=} [properties] Properties to set
         */
        function GenerationStatusProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GenerationStatusProfile statusMessageInfo.
         * @member {commonmodule.IStatusMessageInfo|null|undefined} statusMessageInfo
         * @memberof generationmodule.GenerationStatusProfile
         * @instance
         */
        GenerationStatusProfile.prototype.statusMessageInfo = null;

        /**
         * GenerationStatusProfile generatingUnit.
         * @member {generationmodule.IGeneratingUnit|null|undefined} generatingUnit
         * @memberof generationmodule.GenerationStatusProfile
         * @instance
         */
        GenerationStatusProfile.prototype.generatingUnit = null;

        /**
         * GenerationStatusProfile generationStatus.
         * @member {generationmodule.IGenerationStatus|null|undefined} generationStatus
         * @memberof generationmodule.GenerationStatusProfile
         * @instance
         */
        GenerationStatusProfile.prototype.generationStatus = null;

        /**
         * GenerationStatusProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof generationmodule.GenerationStatusProfile
         * @instance
         */
        GenerationStatusProfile.prototype.ied = null;

        /**
         * Creates a new GenerationStatusProfile instance using the specified properties.
         * @function create
         * @memberof generationmodule.GenerationStatusProfile
         * @static
         * @param {generationmodule.IGenerationStatusProfile=} [properties] Properties to set
         * @returns {generationmodule.GenerationStatusProfile} GenerationStatusProfile instance
         */
        GenerationStatusProfile.create = function create(properties) {
            return new GenerationStatusProfile(properties);
        };

        /**
         * Encodes the specified GenerationStatusProfile message. Does not implicitly {@link generationmodule.GenerationStatusProfile.verify|verify} messages.
         * @function encode
         * @memberof generationmodule.GenerationStatusProfile
         * @static
         * @param {generationmodule.IGenerationStatusProfile} message GenerationStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationStatusProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusMessageInfo != null && Object.hasOwnProperty.call(message, "statusMessageInfo"))
                $root.commonmodule.StatusMessageInfo.encode(message.statusMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.generatingUnit != null && Object.hasOwnProperty.call(message, "generatingUnit"))
                $root.generationmodule.GeneratingUnit.encode(message.generatingUnit, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.generationStatus != null && Object.hasOwnProperty.call(message, "generationStatus"))
                $root.generationmodule.GenerationStatus.encode(message.generationStatus, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified GenerationStatusProfile message, length delimited. Does not implicitly {@link generationmodule.GenerationStatusProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof generationmodule.GenerationStatusProfile
         * @static
         * @param {generationmodule.IGenerationStatusProfile} message GenerationStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GenerationStatusProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GenerationStatusProfile message from the specified reader or buffer.
         * @function decode
         * @memberof generationmodule.GenerationStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {generationmodule.GenerationStatusProfile} GenerationStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationStatusProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.generationmodule.GenerationStatusProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.generatingUnit = $root.generationmodule.GeneratingUnit.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.generationStatus = $root.generationmodule.GenerationStatus.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GenerationStatusProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof generationmodule.GenerationStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {generationmodule.GenerationStatusProfile} GenerationStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GenerationStatusProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GenerationStatusProfile message.
         * @function verify
         * @memberof generationmodule.GenerationStatusProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GenerationStatusProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo")) {
                var error = $root.commonmodule.StatusMessageInfo.verify(message.statusMessageInfo);
                if (error)
                    return "statusMessageInfo." + error;
            }
            if (message.generatingUnit != null && message.hasOwnProperty("generatingUnit")) {
                var error = $root.generationmodule.GeneratingUnit.verify(message.generatingUnit);
                if (error)
                    return "generatingUnit." + error;
            }
            if (message.generationStatus != null && message.hasOwnProperty("generationStatus")) {
                var error = $root.generationmodule.GenerationStatus.verify(message.generationStatus);
                if (error)
                    return "generationStatus." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            return null;
        };

        /**
         * Creates a GenerationStatusProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof generationmodule.GenerationStatusProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {generationmodule.GenerationStatusProfile} GenerationStatusProfile
         */
        GenerationStatusProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.generationmodule.GenerationStatusProfile)
                return object;
            var message = new $root.generationmodule.GenerationStatusProfile();
            if (object.statusMessageInfo != null) {
                if (typeof object.statusMessageInfo !== "object")
                    throw TypeError(".generationmodule.GenerationStatusProfile.statusMessageInfo: object expected");
                message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.fromObject(object.statusMessageInfo);
            }
            if (object.generatingUnit != null) {
                if (typeof object.generatingUnit !== "object")
                    throw TypeError(".generationmodule.GenerationStatusProfile.generatingUnit: object expected");
                message.generatingUnit = $root.generationmodule.GeneratingUnit.fromObject(object.generatingUnit);
            }
            if (object.generationStatus != null) {
                if (typeof object.generationStatus !== "object")
                    throw TypeError(".generationmodule.GenerationStatusProfile.generationStatus: object expected");
                message.generationStatus = $root.generationmodule.GenerationStatus.fromObject(object.generationStatus);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".generationmodule.GenerationStatusProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            return message;
        };

        /**
         * Creates a plain object from a GenerationStatusProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof generationmodule.GenerationStatusProfile
         * @static
         * @param {generationmodule.GenerationStatusProfile} message GenerationStatusProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GenerationStatusProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusMessageInfo = null;
                object.generatingUnit = null;
                object.generationStatus = null;
                object.ied = null;
            }
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo"))
                object.statusMessageInfo = $root.commonmodule.StatusMessageInfo.toObject(message.statusMessageInfo, options);
            if (message.generatingUnit != null && message.hasOwnProperty("generatingUnit"))
                object.generatingUnit = $root.generationmodule.GeneratingUnit.toObject(message.generatingUnit, options);
            if (message.generationStatus != null && message.hasOwnProperty("generationStatus"))
                object.generationStatus = $root.generationmodule.GenerationStatus.toObject(message.generationStatus, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            return object;
        };

        /**
         * Converts this GenerationStatusProfile to JSON.
         * @function toJSON
         * @memberof generationmodule.GenerationStatusProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GenerationStatusProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GenerationStatusProfile;
    })();

    return generationmodule;
})();

$root.regulatormodule = (function() {

    /**
     * Namespace regulatormodule.
     * @exports regulatormodule
     * @namespace
     */
    var regulatormodule = {};

    regulatormodule.RegulatorControlATCC = (function() {

        /**
         * Properties of a RegulatorControlATCC.
         * @memberof regulatormodule
         * @interface IRegulatorControlATCC
         * @property {commonmodule.IASG|null} [BndCtr] RegulatorControlATCC BndCtr
         * @property {commonmodule.IASG|null} [BndWid] RegulatorControlATCC BndWid
         * @property {commonmodule.IControlING|null} [CtlDlTmms] RegulatorControlATCC CtlDlTmms
         * @property {commonmodule.IASG|null} [LDCR] RegulatorControlATCC LDCR
         * @property {commonmodule.IASG|null} [LDCX] RegulatorControlATCC LDCX
         * @property {commonmodule.IASG|null} [LDCZ] RegulatorControlATCC LDCZ
         * @property {commonmodule.IControlSPC|null} [ParOp] RegulatorControlATCC ParOp
         * @property {commonmodule.IControlISC|null} [TapPos] RegulatorControlATCC TapPos
         */

        /**
         * Constructs a new RegulatorControlATCC.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorControlATCC.
         * @implements IRegulatorControlATCC
         * @constructor
         * @param {regulatormodule.IRegulatorControlATCC=} [properties] Properties to set
         */
        function RegulatorControlATCC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorControlATCC BndCtr.
         * @member {commonmodule.IASG|null|undefined} BndCtr
         * @memberof regulatormodule.RegulatorControlATCC
         * @instance
         */
        RegulatorControlATCC.prototype.BndCtr = null;

        /**
         * RegulatorControlATCC BndWid.
         * @member {commonmodule.IASG|null|undefined} BndWid
         * @memberof regulatormodule.RegulatorControlATCC
         * @instance
         */
        RegulatorControlATCC.prototype.BndWid = null;

        /**
         * RegulatorControlATCC CtlDlTmms.
         * @member {commonmodule.IControlING|null|undefined} CtlDlTmms
         * @memberof regulatormodule.RegulatorControlATCC
         * @instance
         */
        RegulatorControlATCC.prototype.CtlDlTmms = null;

        /**
         * RegulatorControlATCC LDCR.
         * @member {commonmodule.IASG|null|undefined} LDCR
         * @memberof regulatormodule.RegulatorControlATCC
         * @instance
         */
        RegulatorControlATCC.prototype.LDCR = null;

        /**
         * RegulatorControlATCC LDCX.
         * @member {commonmodule.IASG|null|undefined} LDCX
         * @memberof regulatormodule.RegulatorControlATCC
         * @instance
         */
        RegulatorControlATCC.prototype.LDCX = null;

        /**
         * RegulatorControlATCC LDCZ.
         * @member {commonmodule.IASG|null|undefined} LDCZ
         * @memberof regulatormodule.RegulatorControlATCC
         * @instance
         */
        RegulatorControlATCC.prototype.LDCZ = null;

        /**
         * RegulatorControlATCC ParOp.
         * @member {commonmodule.IControlSPC|null|undefined} ParOp
         * @memberof regulatormodule.RegulatorControlATCC
         * @instance
         */
        RegulatorControlATCC.prototype.ParOp = null;

        /**
         * RegulatorControlATCC TapPos.
         * @member {commonmodule.IControlISC|null|undefined} TapPos
         * @memberof regulatormodule.RegulatorControlATCC
         * @instance
         */
        RegulatorControlATCC.prototype.TapPos = null;

        /**
         * Creates a new RegulatorControlATCC instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorControlATCC
         * @static
         * @param {regulatormodule.IRegulatorControlATCC=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorControlATCC} RegulatorControlATCC instance
         */
        RegulatorControlATCC.create = function create(properties) {
            return new RegulatorControlATCC(properties);
        };

        /**
         * Encodes the specified RegulatorControlATCC message. Does not implicitly {@link regulatormodule.RegulatorControlATCC.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorControlATCC
         * @static
         * @param {regulatormodule.IRegulatorControlATCC} message RegulatorControlATCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorControlATCC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.BndCtr != null && Object.hasOwnProperty.call(message, "BndCtr"))
                $root.commonmodule.ASG.encode(message.BndCtr, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.BndWid != null && Object.hasOwnProperty.call(message, "BndWid"))
                $root.commonmodule.ASG.encode(message.BndWid, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.CtlDlTmms != null && Object.hasOwnProperty.call(message, "CtlDlTmms"))
                $root.commonmodule.ControlING.encode(message.CtlDlTmms, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.LDCR != null && Object.hasOwnProperty.call(message, "LDCR"))
                $root.commonmodule.ASG.encode(message.LDCR, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.LDCX != null && Object.hasOwnProperty.call(message, "LDCX"))
                $root.commonmodule.ASG.encode(message.LDCX, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.LDCZ != null && Object.hasOwnProperty.call(message, "LDCZ"))
                $root.commonmodule.ASG.encode(message.LDCZ, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.ParOp != null && Object.hasOwnProperty.call(message, "ParOp"))
                $root.commonmodule.ControlSPC.encode(message.ParOp, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.TapPos != null && Object.hasOwnProperty.call(message, "TapPos"))
                $root.commonmodule.ControlISC.encode(message.TapPos, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorControlATCC message, length delimited. Does not implicitly {@link regulatormodule.RegulatorControlATCC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorControlATCC
         * @static
         * @param {regulatormodule.IRegulatorControlATCC} message RegulatorControlATCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorControlATCC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorControlATCC message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorControlATCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorControlATCC} RegulatorControlATCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorControlATCC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorControlATCC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.BndCtr = $root.commonmodule.ASG.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.BndWid = $root.commonmodule.ASG.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.CtlDlTmms = $root.commonmodule.ControlING.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.LDCR = $root.commonmodule.ASG.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.LDCX = $root.commonmodule.ASG.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.LDCZ = $root.commonmodule.ASG.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.ParOp = $root.commonmodule.ControlSPC.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.TapPos = $root.commonmodule.ControlISC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorControlATCC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorControlATCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorControlATCC} RegulatorControlATCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorControlATCC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorControlATCC message.
         * @function verify
         * @memberof regulatormodule.RegulatorControlATCC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorControlATCC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.BndCtr != null && message.hasOwnProperty("BndCtr")) {
                var error = $root.commonmodule.ASG.verify(message.BndCtr);
                if (error)
                    return "BndCtr." + error;
            }
            if (message.BndWid != null && message.hasOwnProperty("BndWid")) {
                var error = $root.commonmodule.ASG.verify(message.BndWid);
                if (error)
                    return "BndWid." + error;
            }
            if (message.CtlDlTmms != null && message.hasOwnProperty("CtlDlTmms")) {
                var error = $root.commonmodule.ControlING.verify(message.CtlDlTmms);
                if (error)
                    return "CtlDlTmms." + error;
            }
            if (message.LDCR != null && message.hasOwnProperty("LDCR")) {
                var error = $root.commonmodule.ASG.verify(message.LDCR);
                if (error)
                    return "LDCR." + error;
            }
            if (message.LDCX != null && message.hasOwnProperty("LDCX")) {
                var error = $root.commonmodule.ASG.verify(message.LDCX);
                if (error)
                    return "LDCX." + error;
            }
            if (message.LDCZ != null && message.hasOwnProperty("LDCZ")) {
                var error = $root.commonmodule.ASG.verify(message.LDCZ);
                if (error)
                    return "LDCZ." + error;
            }
            if (message.ParOp != null && message.hasOwnProperty("ParOp")) {
                var error = $root.commonmodule.ControlSPC.verify(message.ParOp);
                if (error)
                    return "ParOp." + error;
            }
            if (message.TapPos != null && message.hasOwnProperty("TapPos")) {
                var error = $root.commonmodule.ControlISC.verify(message.TapPos);
                if (error)
                    return "TapPos." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorControlATCC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorControlATCC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorControlATCC} RegulatorControlATCC
         */
        RegulatorControlATCC.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorControlATCC)
                return object;
            var message = new $root.regulatormodule.RegulatorControlATCC();
            if (object.BndCtr != null) {
                if (typeof object.BndCtr !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlATCC.BndCtr: object expected");
                message.BndCtr = $root.commonmodule.ASG.fromObject(object.BndCtr);
            }
            if (object.BndWid != null) {
                if (typeof object.BndWid !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlATCC.BndWid: object expected");
                message.BndWid = $root.commonmodule.ASG.fromObject(object.BndWid);
            }
            if (object.CtlDlTmms != null) {
                if (typeof object.CtlDlTmms !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlATCC.CtlDlTmms: object expected");
                message.CtlDlTmms = $root.commonmodule.ControlING.fromObject(object.CtlDlTmms);
            }
            if (object.LDCR != null) {
                if (typeof object.LDCR !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlATCC.LDCR: object expected");
                message.LDCR = $root.commonmodule.ASG.fromObject(object.LDCR);
            }
            if (object.LDCX != null) {
                if (typeof object.LDCX !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlATCC.LDCX: object expected");
                message.LDCX = $root.commonmodule.ASG.fromObject(object.LDCX);
            }
            if (object.LDCZ != null) {
                if (typeof object.LDCZ !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlATCC.LDCZ: object expected");
                message.LDCZ = $root.commonmodule.ASG.fromObject(object.LDCZ);
            }
            if (object.ParOp != null) {
                if (typeof object.ParOp !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlATCC.ParOp: object expected");
                message.ParOp = $root.commonmodule.ControlSPC.fromObject(object.ParOp);
            }
            if (object.TapPos != null) {
                if (typeof object.TapPos !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlATCC.TapPos: object expected");
                message.TapPos = $root.commonmodule.ControlISC.fromObject(object.TapPos);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorControlATCC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorControlATCC
         * @static
         * @param {regulatormodule.RegulatorControlATCC} message RegulatorControlATCC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorControlATCC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.BndCtr = null;
                object.BndWid = null;
                object.CtlDlTmms = null;
                object.LDCR = null;
                object.LDCX = null;
                object.LDCZ = null;
                object.ParOp = null;
                object.TapPos = null;
            }
            if (message.BndCtr != null && message.hasOwnProperty("BndCtr"))
                object.BndCtr = $root.commonmodule.ASG.toObject(message.BndCtr, options);
            if (message.BndWid != null && message.hasOwnProperty("BndWid"))
                object.BndWid = $root.commonmodule.ASG.toObject(message.BndWid, options);
            if (message.CtlDlTmms != null && message.hasOwnProperty("CtlDlTmms"))
                object.CtlDlTmms = $root.commonmodule.ControlING.toObject(message.CtlDlTmms, options);
            if (message.LDCR != null && message.hasOwnProperty("LDCR"))
                object.LDCR = $root.commonmodule.ASG.toObject(message.LDCR, options);
            if (message.LDCX != null && message.hasOwnProperty("LDCX"))
                object.LDCX = $root.commonmodule.ASG.toObject(message.LDCX, options);
            if (message.LDCZ != null && message.hasOwnProperty("LDCZ"))
                object.LDCZ = $root.commonmodule.ASG.toObject(message.LDCZ, options);
            if (message.ParOp != null && message.hasOwnProperty("ParOp"))
                object.ParOp = $root.commonmodule.ControlSPC.toObject(message.ParOp, options);
            if (message.TapPos != null && message.hasOwnProperty("TapPos"))
                object.TapPos = $root.commonmodule.ControlISC.toObject(message.TapPos, options);
            return object;
        };

        /**
         * Converts this RegulatorControlATCC to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorControlATCC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorControlATCC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorControlATCC;
    })();

    regulatormodule.RegulatorPoint = (function() {

        /**
         * Properties of a RegulatorPoint.
         * @memberof regulatormodule
         * @interface IRegulatorPoint
         * @property {regulatormodule.IRegulatorControlATCC|null} [control] RegulatorPoint control
         * @property {google.protobuf.IFloatValue|null} [pctVDroop] RegulatorPoint pctVDroop
         * @property {commonmodule.IRampRate|null} [rampRates] RegulatorPoint rampRates
         * @property {commonmodule.IControlDPC|null} [reactivePwrSetPointEnabled] RegulatorPoint reactivePwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [reset] RegulatorPoint reset
         * @property {commonmodule.IOptional_StateKind|null} [state] RegulatorPoint state
         * @property {commonmodule.IControlDPC|null} [voltageSetPointEnabled] RegulatorPoint voltageSetPointEnabled
         * @property {commonmodule.ITimestamp|null} [startTime] RegulatorPoint startTime
         */

        /**
         * Constructs a new RegulatorPoint.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorPoint.
         * @implements IRegulatorPoint
         * @constructor
         * @param {regulatormodule.IRegulatorPoint=} [properties] Properties to set
         */
        function RegulatorPoint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorPoint control.
         * @member {regulatormodule.IRegulatorControlATCC|null|undefined} control
         * @memberof regulatormodule.RegulatorPoint
         * @instance
         */
        RegulatorPoint.prototype.control = null;

        /**
         * RegulatorPoint pctVDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctVDroop
         * @memberof regulatormodule.RegulatorPoint
         * @instance
         */
        RegulatorPoint.prototype.pctVDroop = null;

        /**
         * RegulatorPoint rampRates.
         * @member {commonmodule.IRampRate|null|undefined} rampRates
         * @memberof regulatormodule.RegulatorPoint
         * @instance
         */
        RegulatorPoint.prototype.rampRates = null;

        /**
         * RegulatorPoint reactivePwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} reactivePwrSetPointEnabled
         * @memberof regulatormodule.RegulatorPoint
         * @instance
         */
        RegulatorPoint.prototype.reactivePwrSetPointEnabled = null;

        /**
         * RegulatorPoint reset.
         * @member {commonmodule.IControlDPC|null|undefined} reset
         * @memberof regulatormodule.RegulatorPoint
         * @instance
         */
        RegulatorPoint.prototype.reset = null;

        /**
         * RegulatorPoint state.
         * @member {commonmodule.IOptional_StateKind|null|undefined} state
         * @memberof regulatormodule.RegulatorPoint
         * @instance
         */
        RegulatorPoint.prototype.state = null;

        /**
         * RegulatorPoint voltageSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} voltageSetPointEnabled
         * @memberof regulatormodule.RegulatorPoint
         * @instance
         */
        RegulatorPoint.prototype.voltageSetPointEnabled = null;

        /**
         * RegulatorPoint startTime.
         * @member {commonmodule.ITimestamp|null|undefined} startTime
         * @memberof regulatormodule.RegulatorPoint
         * @instance
         */
        RegulatorPoint.prototype.startTime = null;

        /**
         * Creates a new RegulatorPoint instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorPoint
         * @static
         * @param {regulatormodule.IRegulatorPoint=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorPoint} RegulatorPoint instance
         */
        RegulatorPoint.create = function create(properties) {
            return new RegulatorPoint(properties);
        };

        /**
         * Encodes the specified RegulatorPoint message. Does not implicitly {@link regulatormodule.RegulatorPoint.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorPoint
         * @static
         * @param {regulatormodule.IRegulatorPoint} message RegulatorPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorPoint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.control != null && Object.hasOwnProperty.call(message, "control"))
                $root.regulatormodule.RegulatorControlATCC.encode(message.control, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.pctVDroop != null && Object.hasOwnProperty.call(message, "pctVDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctVDroop, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.rampRates != null && Object.hasOwnProperty.call(message, "rampRates"))
                $root.commonmodule.RampRate.encode(message.rampRates, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.reactivePwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "reactivePwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.reactivePwrSetPointEnabled, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.reset != null && Object.hasOwnProperty.call(message, "reset"))
                $root.commonmodule.ControlDPC.encode(message.reset, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                $root.commonmodule.Optional_StateKind.encode(message.state, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.voltageSetPointEnabled != null && Object.hasOwnProperty.call(message, "voltageSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.voltageSetPointEnabled, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                $root.commonmodule.Timestamp.encode(message.startTime, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorPoint message, length delimited. Does not implicitly {@link regulatormodule.RegulatorPoint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorPoint
         * @static
         * @param {regulatormodule.IRegulatorPoint} message RegulatorPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorPoint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorPoint message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorPoint} RegulatorPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorPoint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorPoint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.control = $root.regulatormodule.RegulatorControlATCC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.pctVDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.rampRates = $root.commonmodule.RampRate.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.reset = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.state = $root.commonmodule.Optional_StateKind.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.startTime = $root.commonmodule.Timestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorPoint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorPoint} RegulatorPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorPoint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorPoint message.
         * @function verify
         * @memberof regulatormodule.RegulatorPoint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorPoint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.control != null && message.hasOwnProperty("control")) {
                var error = $root.regulatormodule.RegulatorControlATCC.verify(message.control);
                if (error)
                    return "control." + error;
            }
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctVDroop);
                if (error)
                    return "pctVDroop." + error;
            }
            if (message.rampRates != null && message.hasOwnProperty("rampRates")) {
                var error = $root.commonmodule.RampRate.verify(message.rampRates);
                if (error)
                    return "rampRates." + error;
            }
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reactivePwrSetPointEnabled);
                if (error)
                    return "reactivePwrSetPointEnabled." + error;
            }
            if (message.reset != null && message.hasOwnProperty("reset")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reset);
                if (error)
                    return "reset." + error;
            }
            if (message.state != null && message.hasOwnProperty("state")) {
                var error = $root.commonmodule.Optional_StateKind.verify(message.state);
                if (error)
                    return "state." + error;
            }
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.voltageSetPointEnabled);
                if (error)
                    return "voltageSetPointEnabled." + error;
            }
            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                var error = $root.commonmodule.Timestamp.verify(message.startTime);
                if (error)
                    return "startTime." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorPoint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorPoint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorPoint} RegulatorPoint
         */
        RegulatorPoint.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorPoint)
                return object;
            var message = new $root.regulatormodule.RegulatorPoint();
            if (object.control != null) {
                if (typeof object.control !== "object")
                    throw TypeError(".regulatormodule.RegulatorPoint.control: object expected");
                message.control = $root.regulatormodule.RegulatorControlATCC.fromObject(object.control);
            }
            if (object.pctVDroop != null) {
                if (typeof object.pctVDroop !== "object")
                    throw TypeError(".regulatormodule.RegulatorPoint.pctVDroop: object expected");
                message.pctVDroop = $root.google.protobuf.FloatValue.fromObject(object.pctVDroop);
            }
            if (object.rampRates != null) {
                if (typeof object.rampRates !== "object")
                    throw TypeError(".regulatormodule.RegulatorPoint.rampRates: object expected");
                message.rampRates = $root.commonmodule.RampRate.fromObject(object.rampRates);
            }
            if (object.reactivePwrSetPointEnabled != null) {
                if (typeof object.reactivePwrSetPointEnabled !== "object")
                    throw TypeError(".regulatormodule.RegulatorPoint.reactivePwrSetPointEnabled: object expected");
                message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.reactivePwrSetPointEnabled);
            }
            if (object.reset != null) {
                if (typeof object.reset !== "object")
                    throw TypeError(".regulatormodule.RegulatorPoint.reset: object expected");
                message.reset = $root.commonmodule.ControlDPC.fromObject(object.reset);
            }
            if (object.state != null) {
                if (typeof object.state !== "object")
                    throw TypeError(".regulatormodule.RegulatorPoint.state: object expected");
                message.state = $root.commonmodule.Optional_StateKind.fromObject(object.state);
            }
            if (object.voltageSetPointEnabled != null) {
                if (typeof object.voltageSetPointEnabled !== "object")
                    throw TypeError(".regulatormodule.RegulatorPoint.voltageSetPointEnabled: object expected");
                message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.voltageSetPointEnabled);
            }
            if (object.startTime != null) {
                if (typeof object.startTime !== "object")
                    throw TypeError(".regulatormodule.RegulatorPoint.startTime: object expected");
                message.startTime = $root.commonmodule.Timestamp.fromObject(object.startTime);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorPoint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorPoint
         * @static
         * @param {regulatormodule.RegulatorPoint} message RegulatorPoint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorPoint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.control = null;
                object.pctVDroop = null;
                object.rampRates = null;
                object.reactivePwrSetPointEnabled = null;
                object.reset = null;
                object.state = null;
                object.voltageSetPointEnabled = null;
                object.startTime = null;
            }
            if (message.control != null && message.hasOwnProperty("control"))
                object.control = $root.regulatormodule.RegulatorControlATCC.toObject(message.control, options);
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop"))
                object.pctVDroop = $root.google.protobuf.FloatValue.toObject(message.pctVDroop, options);
            if (message.rampRates != null && message.hasOwnProperty("rampRates"))
                object.rampRates = $root.commonmodule.RampRate.toObject(message.rampRates, options);
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled"))
                object.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.reactivePwrSetPointEnabled, options);
            if (message.reset != null && message.hasOwnProperty("reset"))
                object.reset = $root.commonmodule.ControlDPC.toObject(message.reset, options);
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = $root.commonmodule.Optional_StateKind.toObject(message.state, options);
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled"))
                object.voltageSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.voltageSetPointEnabled, options);
            if (message.startTime != null && message.hasOwnProperty("startTime"))
                object.startTime = $root.commonmodule.Timestamp.toObject(message.startTime, options);
            return object;
        };

        /**
         * Converts this RegulatorPoint to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorPoint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorPoint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorPoint;
    })();

    regulatormodule.RegulatorCSG = (function() {

        /**
         * Properties of a RegulatorCSG.
         * @memberof regulatormodule
         * @interface IRegulatorCSG
         * @property {Array.<regulatormodule.IRegulatorPoint>|null} [crvPts] RegulatorCSG crvPts
         */

        /**
         * Constructs a new RegulatorCSG.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorCSG.
         * @implements IRegulatorCSG
         * @constructor
         * @param {regulatormodule.IRegulatorCSG=} [properties] Properties to set
         */
        function RegulatorCSG(properties) {
            this.crvPts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorCSG crvPts.
         * @member {Array.<regulatormodule.IRegulatorPoint>} crvPts
         * @memberof regulatormodule.RegulatorCSG
         * @instance
         */
        RegulatorCSG.prototype.crvPts = $util.emptyArray;

        /**
         * Creates a new RegulatorCSG instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorCSG
         * @static
         * @param {regulatormodule.IRegulatorCSG=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorCSG} RegulatorCSG instance
         */
        RegulatorCSG.create = function create(properties) {
            return new RegulatorCSG(properties);
        };

        /**
         * Encodes the specified RegulatorCSG message. Does not implicitly {@link regulatormodule.RegulatorCSG.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorCSG
         * @static
         * @param {regulatormodule.IRegulatorCSG} message RegulatorCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorCSG.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.crvPts != null && message.crvPts.length)
                for (var i = 0; i < message.crvPts.length; ++i)
                    $root.regulatormodule.RegulatorPoint.encode(message.crvPts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorCSG message, length delimited. Does not implicitly {@link regulatormodule.RegulatorCSG.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorCSG
         * @static
         * @param {regulatormodule.IRegulatorCSG} message RegulatorCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorCSG.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorCSG message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorCSG} RegulatorCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorCSG.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorCSG();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.crvPts && message.crvPts.length))
                        message.crvPts = [];
                    message.crvPts.push($root.regulatormodule.RegulatorPoint.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorCSG message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorCSG} RegulatorCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorCSG.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorCSG message.
         * @function verify
         * @memberof regulatormodule.RegulatorCSG
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorCSG.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.crvPts != null && message.hasOwnProperty("crvPts")) {
                if (!Array.isArray(message.crvPts))
                    return "crvPts: array expected";
                for (var i = 0; i < message.crvPts.length; ++i) {
                    var error = $root.regulatormodule.RegulatorPoint.verify(message.crvPts[i]);
                    if (error)
                        return "crvPts." + error;
                }
            }
            return null;
        };

        /**
         * Creates a RegulatorCSG message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorCSG
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorCSG} RegulatorCSG
         */
        RegulatorCSG.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorCSG)
                return object;
            var message = new $root.regulatormodule.RegulatorCSG();
            if (object.crvPts) {
                if (!Array.isArray(object.crvPts))
                    throw TypeError(".regulatormodule.RegulatorCSG.crvPts: array expected");
                message.crvPts = [];
                for (var i = 0; i < object.crvPts.length; ++i) {
                    if (typeof object.crvPts[i] !== "object")
                        throw TypeError(".regulatormodule.RegulatorCSG.crvPts: object expected");
                    message.crvPts[i] = $root.regulatormodule.RegulatorPoint.fromObject(object.crvPts[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorCSG message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorCSG
         * @static
         * @param {regulatormodule.RegulatorCSG} message RegulatorCSG
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorCSG.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.crvPts = [];
            if (message.crvPts && message.crvPts.length) {
                object.crvPts = [];
                for (var j = 0; j < message.crvPts.length; ++j)
                    object.crvPts[j] = $root.regulatormodule.RegulatorPoint.toObject(message.crvPts[j], options);
            }
            return object;
        };

        /**
         * Converts this RegulatorCSG to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorCSG
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorCSG.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorCSG;
    })();

    regulatormodule.RegulatorControlScheduleFSCH = (function() {

        /**
         * Properties of a RegulatorControlScheduleFSCH.
         * @memberof regulatormodule
         * @interface IRegulatorControlScheduleFSCH
         * @property {regulatormodule.IRegulatorCSG|null} [ValDCSG] RegulatorControlScheduleFSCH ValDCSG
         */

        /**
         * Constructs a new RegulatorControlScheduleFSCH.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorControlScheduleFSCH.
         * @implements IRegulatorControlScheduleFSCH
         * @constructor
         * @param {regulatormodule.IRegulatorControlScheduleFSCH=} [properties] Properties to set
         */
        function RegulatorControlScheduleFSCH(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorControlScheduleFSCH ValDCSG.
         * @member {regulatormodule.IRegulatorCSG|null|undefined} ValDCSG
         * @memberof regulatormodule.RegulatorControlScheduleFSCH
         * @instance
         */
        RegulatorControlScheduleFSCH.prototype.ValDCSG = null;

        /**
         * Creates a new RegulatorControlScheduleFSCH instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorControlScheduleFSCH
         * @static
         * @param {regulatormodule.IRegulatorControlScheduleFSCH=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorControlScheduleFSCH} RegulatorControlScheduleFSCH instance
         */
        RegulatorControlScheduleFSCH.create = function create(properties) {
            return new RegulatorControlScheduleFSCH(properties);
        };

        /**
         * Encodes the specified RegulatorControlScheduleFSCH message. Does not implicitly {@link regulatormodule.RegulatorControlScheduleFSCH.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorControlScheduleFSCH
         * @static
         * @param {regulatormodule.IRegulatorControlScheduleFSCH} message RegulatorControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorControlScheduleFSCH.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ValDCSG != null && Object.hasOwnProperty.call(message, "ValDCSG"))
                $root.regulatormodule.RegulatorCSG.encode(message.ValDCSG, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorControlScheduleFSCH message, length delimited. Does not implicitly {@link regulatormodule.RegulatorControlScheduleFSCH.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorControlScheduleFSCH
         * @static
         * @param {regulatormodule.IRegulatorControlScheduleFSCH} message RegulatorControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorControlScheduleFSCH.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorControlScheduleFSCH message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorControlScheduleFSCH} RegulatorControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorControlScheduleFSCH.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorControlScheduleFSCH();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ValDCSG = $root.regulatormodule.RegulatorCSG.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorControlScheduleFSCH message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorControlScheduleFSCH} RegulatorControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorControlScheduleFSCH.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorControlScheduleFSCH message.
         * @function verify
         * @memberof regulatormodule.RegulatorControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorControlScheduleFSCH.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ValDCSG != null && message.hasOwnProperty("ValDCSG")) {
                var error = $root.regulatormodule.RegulatorCSG.verify(message.ValDCSG);
                if (error)
                    return "ValDCSG." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorControlScheduleFSCH message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorControlScheduleFSCH} RegulatorControlScheduleFSCH
         */
        RegulatorControlScheduleFSCH.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorControlScheduleFSCH)
                return object;
            var message = new $root.regulatormodule.RegulatorControlScheduleFSCH();
            if (object.ValDCSG != null) {
                if (typeof object.ValDCSG !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlScheduleFSCH.ValDCSG: object expected");
                message.ValDCSG = $root.regulatormodule.RegulatorCSG.fromObject(object.ValDCSG);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorControlScheduleFSCH message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorControlScheduleFSCH
         * @static
         * @param {regulatormodule.RegulatorControlScheduleFSCH} message RegulatorControlScheduleFSCH
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorControlScheduleFSCH.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ValDCSG = null;
            if (message.ValDCSG != null && message.hasOwnProperty("ValDCSG"))
                object.ValDCSG = $root.regulatormodule.RegulatorCSG.toObject(message.ValDCSG, options);
            return object;
        };

        /**
         * Converts this RegulatorControlScheduleFSCH to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorControlScheduleFSCH
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorControlScheduleFSCH.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorControlScheduleFSCH;
    })();

    regulatormodule.RegulatorControlFSCC = (function() {

        /**
         * Properties of a RegulatorControlFSCC.
         * @memberof regulatormodule
         * @interface IRegulatorControlFSCC
         * @property {commonmodule.IControlFSCC|null} [controlFSCC] RegulatorControlFSCC controlFSCC
         * @property {regulatormodule.IRegulatorControlScheduleFSCH|null} [regulatorControlScheduleFSCH] RegulatorControlFSCC regulatorControlScheduleFSCH
         */

        /**
         * Constructs a new RegulatorControlFSCC.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorControlFSCC.
         * @implements IRegulatorControlFSCC
         * @constructor
         * @param {regulatormodule.IRegulatorControlFSCC=} [properties] Properties to set
         */
        function RegulatorControlFSCC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorControlFSCC controlFSCC.
         * @member {commonmodule.IControlFSCC|null|undefined} controlFSCC
         * @memberof regulatormodule.RegulatorControlFSCC
         * @instance
         */
        RegulatorControlFSCC.prototype.controlFSCC = null;

        /**
         * RegulatorControlFSCC regulatorControlScheduleFSCH.
         * @member {regulatormodule.IRegulatorControlScheduleFSCH|null|undefined} regulatorControlScheduleFSCH
         * @memberof regulatormodule.RegulatorControlFSCC
         * @instance
         */
        RegulatorControlFSCC.prototype.regulatorControlScheduleFSCH = null;

        /**
         * Creates a new RegulatorControlFSCC instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorControlFSCC
         * @static
         * @param {regulatormodule.IRegulatorControlFSCC=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorControlFSCC} RegulatorControlFSCC instance
         */
        RegulatorControlFSCC.create = function create(properties) {
            return new RegulatorControlFSCC(properties);
        };

        /**
         * Encodes the specified RegulatorControlFSCC message. Does not implicitly {@link regulatormodule.RegulatorControlFSCC.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorControlFSCC
         * @static
         * @param {regulatormodule.IRegulatorControlFSCC} message RegulatorControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorControlFSCC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlFSCC != null && Object.hasOwnProperty.call(message, "controlFSCC"))
                $root.commonmodule.ControlFSCC.encode(message.controlFSCC, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.regulatorControlScheduleFSCH != null && Object.hasOwnProperty.call(message, "regulatorControlScheduleFSCH"))
                $root.regulatormodule.RegulatorControlScheduleFSCH.encode(message.regulatorControlScheduleFSCH, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorControlFSCC message, length delimited. Does not implicitly {@link regulatormodule.RegulatorControlFSCC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorControlFSCC
         * @static
         * @param {regulatormodule.IRegulatorControlFSCC} message RegulatorControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorControlFSCC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorControlFSCC message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorControlFSCC} RegulatorControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorControlFSCC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorControlFSCC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlFSCC = $root.commonmodule.ControlFSCC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.regulatorControlScheduleFSCH = $root.regulatormodule.RegulatorControlScheduleFSCH.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorControlFSCC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorControlFSCC} RegulatorControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorControlFSCC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorControlFSCC message.
         * @function verify
         * @memberof regulatormodule.RegulatorControlFSCC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorControlFSCC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlFSCC != null && message.hasOwnProperty("controlFSCC")) {
                var error = $root.commonmodule.ControlFSCC.verify(message.controlFSCC);
                if (error)
                    return "controlFSCC." + error;
            }
            if (message.regulatorControlScheduleFSCH != null && message.hasOwnProperty("regulatorControlScheduleFSCH")) {
                var error = $root.regulatormodule.RegulatorControlScheduleFSCH.verify(message.regulatorControlScheduleFSCH);
                if (error)
                    return "regulatorControlScheduleFSCH." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorControlFSCC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorControlFSCC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorControlFSCC} RegulatorControlFSCC
         */
        RegulatorControlFSCC.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorControlFSCC)
                return object;
            var message = new $root.regulatormodule.RegulatorControlFSCC();
            if (object.controlFSCC != null) {
                if (typeof object.controlFSCC !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlFSCC.controlFSCC: object expected");
                message.controlFSCC = $root.commonmodule.ControlFSCC.fromObject(object.controlFSCC);
            }
            if (object.regulatorControlScheduleFSCH != null) {
                if (typeof object.regulatorControlScheduleFSCH !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlFSCC.regulatorControlScheduleFSCH: object expected");
                message.regulatorControlScheduleFSCH = $root.regulatormodule.RegulatorControlScheduleFSCH.fromObject(object.regulatorControlScheduleFSCH);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorControlFSCC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorControlFSCC
         * @static
         * @param {regulatormodule.RegulatorControlFSCC} message RegulatorControlFSCC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorControlFSCC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlFSCC = null;
                object.regulatorControlScheduleFSCH = null;
            }
            if (message.controlFSCC != null && message.hasOwnProperty("controlFSCC"))
                object.controlFSCC = $root.commonmodule.ControlFSCC.toObject(message.controlFSCC, options);
            if (message.regulatorControlScheduleFSCH != null && message.hasOwnProperty("regulatorControlScheduleFSCH"))
                object.regulatorControlScheduleFSCH = $root.regulatormodule.RegulatorControlScheduleFSCH.toObject(message.regulatorControlScheduleFSCH, options);
            return object;
        };

        /**
         * Converts this RegulatorControlFSCC to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorControlFSCC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorControlFSCC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorControlFSCC;
    })();

    regulatormodule.RegulatorControl = (function() {

        /**
         * Properties of a RegulatorControl.
         * @memberof regulatormodule
         * @interface IRegulatorControl
         * @property {commonmodule.IControlValue|null} [controlValue] RegulatorControl controlValue
         * @property {commonmodule.ICheckConditions|null} [check] RegulatorControl check
         * @property {regulatormodule.IRegulatorControlFSCC|null} [regulatorControlFSCC] RegulatorControl regulatorControlFSCC
         */

        /**
         * Constructs a new RegulatorControl.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorControl.
         * @implements IRegulatorControl
         * @constructor
         * @param {regulatormodule.IRegulatorControl=} [properties] Properties to set
         */
        function RegulatorControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorControl controlValue.
         * @member {commonmodule.IControlValue|null|undefined} controlValue
         * @memberof regulatormodule.RegulatorControl
         * @instance
         */
        RegulatorControl.prototype.controlValue = null;

        /**
         * RegulatorControl check.
         * @member {commonmodule.ICheckConditions|null|undefined} check
         * @memberof regulatormodule.RegulatorControl
         * @instance
         */
        RegulatorControl.prototype.check = null;

        /**
         * RegulatorControl regulatorControlFSCC.
         * @member {regulatormodule.IRegulatorControlFSCC|null|undefined} regulatorControlFSCC
         * @memberof regulatormodule.RegulatorControl
         * @instance
         */
        RegulatorControl.prototype.regulatorControlFSCC = null;

        /**
         * Creates a new RegulatorControl instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorControl
         * @static
         * @param {regulatormodule.IRegulatorControl=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorControl} RegulatorControl instance
         */
        RegulatorControl.create = function create(properties) {
            return new RegulatorControl(properties);
        };

        /**
         * Encodes the specified RegulatorControl message. Does not implicitly {@link regulatormodule.RegulatorControl.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorControl
         * @static
         * @param {regulatormodule.IRegulatorControl} message RegulatorControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlValue != null && Object.hasOwnProperty.call(message, "controlValue"))
                $root.commonmodule.ControlValue.encode(message.controlValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.check != null && Object.hasOwnProperty.call(message, "check"))
                $root.commonmodule.CheckConditions.encode(message.check, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.regulatorControlFSCC != null && Object.hasOwnProperty.call(message, "regulatorControlFSCC"))
                $root.regulatormodule.RegulatorControlFSCC.encode(message.regulatorControlFSCC, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorControl message, length delimited. Does not implicitly {@link regulatormodule.RegulatorControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorControl
         * @static
         * @param {regulatormodule.IRegulatorControl} message RegulatorControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorControl message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorControl} RegulatorControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlValue = $root.commonmodule.ControlValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.check = $root.commonmodule.CheckConditions.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.regulatorControlFSCC = $root.regulatormodule.RegulatorControlFSCC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorControl} RegulatorControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorControl message.
         * @function verify
         * @memberof regulatormodule.RegulatorControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlValue != null && message.hasOwnProperty("controlValue")) {
                var error = $root.commonmodule.ControlValue.verify(message.controlValue);
                if (error)
                    return "controlValue." + error;
            }
            if (message.check != null && message.hasOwnProperty("check")) {
                var error = $root.commonmodule.CheckConditions.verify(message.check);
                if (error)
                    return "check." + error;
            }
            if (message.regulatorControlFSCC != null && message.hasOwnProperty("regulatorControlFSCC")) {
                var error = $root.regulatormodule.RegulatorControlFSCC.verify(message.regulatorControlFSCC);
                if (error)
                    return "regulatorControlFSCC." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorControl} RegulatorControl
         */
        RegulatorControl.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorControl)
                return object;
            var message = new $root.regulatormodule.RegulatorControl();
            if (object.controlValue != null) {
                if (typeof object.controlValue !== "object")
                    throw TypeError(".regulatormodule.RegulatorControl.controlValue: object expected");
                message.controlValue = $root.commonmodule.ControlValue.fromObject(object.controlValue);
            }
            if (object.check != null) {
                if (typeof object.check !== "object")
                    throw TypeError(".regulatormodule.RegulatorControl.check: object expected");
                message.check = $root.commonmodule.CheckConditions.fromObject(object.check);
            }
            if (object.regulatorControlFSCC != null) {
                if (typeof object.regulatorControlFSCC !== "object")
                    throw TypeError(".regulatormodule.RegulatorControl.regulatorControlFSCC: object expected");
                message.regulatorControlFSCC = $root.regulatormodule.RegulatorControlFSCC.fromObject(object.regulatorControlFSCC);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorControl
         * @static
         * @param {regulatormodule.RegulatorControl} message RegulatorControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlValue = null;
                object.check = null;
                object.regulatorControlFSCC = null;
            }
            if (message.controlValue != null && message.hasOwnProperty("controlValue"))
                object.controlValue = $root.commonmodule.ControlValue.toObject(message.controlValue, options);
            if (message.check != null && message.hasOwnProperty("check"))
                object.check = $root.commonmodule.CheckConditions.toObject(message.check, options);
            if (message.regulatorControlFSCC != null && message.hasOwnProperty("regulatorControlFSCC"))
                object.regulatorControlFSCC = $root.regulatormodule.RegulatorControlFSCC.toObject(message.regulatorControlFSCC, options);
            return object;
        };

        /**
         * Converts this RegulatorControl to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorControl;
    })();

    regulatormodule.RegulatorSystem = (function() {

        /**
         * Properties of a RegulatorSystem.
         * @memberof regulatormodule
         * @interface IRegulatorSystem
         * @property {commonmodule.IConductingEquipment|null} [conductingEquipment] RegulatorSystem conductingEquipment
         */

        /**
         * Constructs a new RegulatorSystem.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorSystem.
         * @implements IRegulatorSystem
         * @constructor
         * @param {regulatormodule.IRegulatorSystem=} [properties] Properties to set
         */
        function RegulatorSystem(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorSystem conductingEquipment.
         * @member {commonmodule.IConductingEquipment|null|undefined} conductingEquipment
         * @memberof regulatormodule.RegulatorSystem
         * @instance
         */
        RegulatorSystem.prototype.conductingEquipment = null;

        /**
         * Creates a new RegulatorSystem instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorSystem
         * @static
         * @param {regulatormodule.IRegulatorSystem=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorSystem} RegulatorSystem instance
         */
        RegulatorSystem.create = function create(properties) {
            return new RegulatorSystem(properties);
        };

        /**
         * Encodes the specified RegulatorSystem message. Does not implicitly {@link regulatormodule.RegulatorSystem.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorSystem
         * @static
         * @param {regulatormodule.IRegulatorSystem} message RegulatorSystem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorSystem.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipment != null && Object.hasOwnProperty.call(message, "conductingEquipment"))
                $root.commonmodule.ConductingEquipment.encode(message.conductingEquipment, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorSystem message, length delimited. Does not implicitly {@link regulatormodule.RegulatorSystem.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorSystem
         * @static
         * @param {regulatormodule.IRegulatorSystem} message RegulatorSystem message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorSystem.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorSystem message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorSystem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorSystem} RegulatorSystem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorSystem.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorSystem();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipment = $root.commonmodule.ConductingEquipment.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorSystem message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorSystem
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorSystem} RegulatorSystem
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorSystem.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorSystem message.
         * @function verify
         * @memberof regulatormodule.RegulatorSystem
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorSystem.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment")) {
                var error = $root.commonmodule.ConductingEquipment.verify(message.conductingEquipment);
                if (error)
                    return "conductingEquipment." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorSystem message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorSystem
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorSystem} RegulatorSystem
         */
        RegulatorSystem.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorSystem)
                return object;
            var message = new $root.regulatormodule.RegulatorSystem();
            if (object.conductingEquipment != null) {
                if (typeof object.conductingEquipment !== "object")
                    throw TypeError(".regulatormodule.RegulatorSystem.conductingEquipment: object expected");
                message.conductingEquipment = $root.commonmodule.ConductingEquipment.fromObject(object.conductingEquipment);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorSystem message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorSystem
         * @static
         * @param {regulatormodule.RegulatorSystem} message RegulatorSystem
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorSystem.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.conductingEquipment = null;
            if (message.conductingEquipment != null && message.hasOwnProperty("conductingEquipment"))
                object.conductingEquipment = $root.commonmodule.ConductingEquipment.toObject(message.conductingEquipment, options);
            return object;
        };

        /**
         * Converts this RegulatorSystem to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorSystem
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorSystem.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorSystem;
    })();

    regulatormodule.RegulatorControlProfile = (function() {

        /**
         * Properties of a RegulatorControlProfile.
         * @memberof regulatormodule
         * @interface IRegulatorControlProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] RegulatorControlProfile controlMessageInfo
         * @property {commonmodule.IIED|null} [ied] RegulatorControlProfile ied
         * @property {regulatormodule.IRegulatorControl|null} [regulatorControl] RegulatorControlProfile regulatorControl
         * @property {regulatormodule.IRegulatorSystem|null} [regulatorSystem] RegulatorControlProfile regulatorSystem
         */

        /**
         * Constructs a new RegulatorControlProfile.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorControlProfile.
         * @implements IRegulatorControlProfile
         * @constructor
         * @param {regulatormodule.IRegulatorControlProfile=} [properties] Properties to set
         */
        function RegulatorControlProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorControlProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof regulatormodule.RegulatorControlProfile
         * @instance
         */
        RegulatorControlProfile.prototype.controlMessageInfo = null;

        /**
         * RegulatorControlProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof regulatormodule.RegulatorControlProfile
         * @instance
         */
        RegulatorControlProfile.prototype.ied = null;

        /**
         * RegulatorControlProfile regulatorControl.
         * @member {regulatormodule.IRegulatorControl|null|undefined} regulatorControl
         * @memberof regulatormodule.RegulatorControlProfile
         * @instance
         */
        RegulatorControlProfile.prototype.regulatorControl = null;

        /**
         * RegulatorControlProfile regulatorSystem.
         * @member {regulatormodule.IRegulatorSystem|null|undefined} regulatorSystem
         * @memberof regulatormodule.RegulatorControlProfile
         * @instance
         */
        RegulatorControlProfile.prototype.regulatorSystem = null;

        /**
         * Creates a new RegulatorControlProfile instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorControlProfile
         * @static
         * @param {regulatormodule.IRegulatorControlProfile=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorControlProfile} RegulatorControlProfile instance
         */
        RegulatorControlProfile.create = function create(properties) {
            return new RegulatorControlProfile(properties);
        };

        /**
         * Encodes the specified RegulatorControlProfile message. Does not implicitly {@link regulatormodule.RegulatorControlProfile.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorControlProfile
         * @static
         * @param {regulatormodule.IRegulatorControlProfile} message RegulatorControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorControlProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.regulatorControl != null && Object.hasOwnProperty.call(message, "regulatorControl"))
                $root.regulatormodule.RegulatorControl.encode(message.regulatorControl, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.regulatorSystem != null && Object.hasOwnProperty.call(message, "regulatorSystem"))
                $root.regulatormodule.RegulatorSystem.encode(message.regulatorSystem, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorControlProfile message, length delimited. Does not implicitly {@link regulatormodule.RegulatorControlProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorControlProfile
         * @static
         * @param {regulatormodule.IRegulatorControlProfile} message RegulatorControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorControlProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorControlProfile message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorControlProfile} RegulatorControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorControlProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorControlProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.regulatorControl = $root.regulatormodule.RegulatorControl.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.regulatorSystem = $root.regulatormodule.RegulatorSystem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorControlProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorControlProfile} RegulatorControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorControlProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorControlProfile message.
         * @function verify
         * @memberof regulatormodule.RegulatorControlProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorControlProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.regulatorControl != null && message.hasOwnProperty("regulatorControl")) {
                var error = $root.regulatormodule.RegulatorControl.verify(message.regulatorControl);
                if (error)
                    return "regulatorControl." + error;
            }
            if (message.regulatorSystem != null && message.hasOwnProperty("regulatorSystem")) {
                var error = $root.regulatormodule.RegulatorSystem.verify(message.regulatorSystem);
                if (error)
                    return "regulatorSystem." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorControlProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorControlProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorControlProfile} RegulatorControlProfile
         */
        RegulatorControlProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorControlProfile)
                return object;
            var message = new $root.regulatormodule.RegulatorControlProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.regulatorControl != null) {
                if (typeof object.regulatorControl !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlProfile.regulatorControl: object expected");
                message.regulatorControl = $root.regulatormodule.RegulatorControl.fromObject(object.regulatorControl);
            }
            if (object.regulatorSystem != null) {
                if (typeof object.regulatorSystem !== "object")
                    throw TypeError(".regulatormodule.RegulatorControlProfile.regulatorSystem: object expected");
                message.regulatorSystem = $root.regulatormodule.RegulatorSystem.fromObject(object.regulatorSystem);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorControlProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorControlProfile
         * @static
         * @param {regulatormodule.RegulatorControlProfile} message RegulatorControlProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorControlProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.ied = null;
                object.regulatorControl = null;
                object.regulatorSystem = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.regulatorControl != null && message.hasOwnProperty("regulatorControl"))
                object.regulatorControl = $root.regulatormodule.RegulatorControl.toObject(message.regulatorControl, options);
            if (message.regulatorSystem != null && message.hasOwnProperty("regulatorSystem"))
                object.regulatorSystem = $root.regulatormodule.RegulatorSystem.toObject(message.regulatorSystem, options);
            return object;
        };

        /**
         * Converts this RegulatorControlProfile to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorControlProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorControlProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorControlProfile;
    })();

    regulatormodule.RegulatorEventAndStatusATCC = (function() {

        /**
         * Properties of a RegulatorEventAndStatusATCC.
         * @memberof regulatormodule
         * @interface IRegulatorEventAndStatusATCC
         * @property {commonmodule.IASG|null} [BndCtr] RegulatorEventAndStatusATCC BndCtr
         * @property {commonmodule.IASG|null} [BndWid] RegulatorEventAndStatusATCC BndWid
         * @property {commonmodule.IASG|null} [LDCR] RegulatorEventAndStatusATCC LDCR
         * @property {commonmodule.IASG|null} [LDCX] RegulatorEventAndStatusATCC LDCX
         * @property {commonmodule.IASG|null} [LDCZ] RegulatorEventAndStatusATCC LDCZ
         * @property {commonmodule.IStatusSPC|null} [ParOp] RegulatorEventAndStatusATCC ParOp
         * @property {commonmodule.IStatusSPS|null} [TapOpErr] RegulatorEventAndStatusATCC TapOpErr
         * @property {commonmodule.IStatusISC|null} [TapPos] RegulatorEventAndStatusATCC TapPos
         */

        /**
         * Constructs a new RegulatorEventAndStatusATCC.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorEventAndStatusATCC.
         * @implements IRegulatorEventAndStatusATCC
         * @constructor
         * @param {regulatormodule.IRegulatorEventAndStatusATCC=} [properties] Properties to set
         */
        function RegulatorEventAndStatusATCC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorEventAndStatusATCC BndCtr.
         * @member {commonmodule.IASG|null|undefined} BndCtr
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @instance
         */
        RegulatorEventAndStatusATCC.prototype.BndCtr = null;

        /**
         * RegulatorEventAndStatusATCC BndWid.
         * @member {commonmodule.IASG|null|undefined} BndWid
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @instance
         */
        RegulatorEventAndStatusATCC.prototype.BndWid = null;

        /**
         * RegulatorEventAndStatusATCC LDCR.
         * @member {commonmodule.IASG|null|undefined} LDCR
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @instance
         */
        RegulatorEventAndStatusATCC.prototype.LDCR = null;

        /**
         * RegulatorEventAndStatusATCC LDCX.
         * @member {commonmodule.IASG|null|undefined} LDCX
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @instance
         */
        RegulatorEventAndStatusATCC.prototype.LDCX = null;

        /**
         * RegulatorEventAndStatusATCC LDCZ.
         * @member {commonmodule.IASG|null|undefined} LDCZ
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @instance
         */
        RegulatorEventAndStatusATCC.prototype.LDCZ = null;

        /**
         * RegulatorEventAndStatusATCC ParOp.
         * @member {commonmodule.IStatusSPC|null|undefined} ParOp
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @instance
         */
        RegulatorEventAndStatusATCC.prototype.ParOp = null;

        /**
         * RegulatorEventAndStatusATCC TapOpErr.
         * @member {commonmodule.IStatusSPS|null|undefined} TapOpErr
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @instance
         */
        RegulatorEventAndStatusATCC.prototype.TapOpErr = null;

        /**
         * RegulatorEventAndStatusATCC TapPos.
         * @member {commonmodule.IStatusISC|null|undefined} TapPos
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @instance
         */
        RegulatorEventAndStatusATCC.prototype.TapPos = null;

        /**
         * Creates a new RegulatorEventAndStatusATCC instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @static
         * @param {regulatormodule.IRegulatorEventAndStatusATCC=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorEventAndStatusATCC} RegulatorEventAndStatusATCC instance
         */
        RegulatorEventAndStatusATCC.create = function create(properties) {
            return new RegulatorEventAndStatusATCC(properties);
        };

        /**
         * Encodes the specified RegulatorEventAndStatusATCC message. Does not implicitly {@link regulatormodule.RegulatorEventAndStatusATCC.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @static
         * @param {regulatormodule.IRegulatorEventAndStatusATCC} message RegulatorEventAndStatusATCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorEventAndStatusATCC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.BndCtr != null && Object.hasOwnProperty.call(message, "BndCtr"))
                $root.commonmodule.ASG.encode(message.BndCtr, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.BndWid != null && Object.hasOwnProperty.call(message, "BndWid"))
                $root.commonmodule.ASG.encode(message.BndWid, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.LDCR != null && Object.hasOwnProperty.call(message, "LDCR"))
                $root.commonmodule.ASG.encode(message.LDCR, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.LDCX != null && Object.hasOwnProperty.call(message, "LDCX"))
                $root.commonmodule.ASG.encode(message.LDCX, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.LDCZ != null && Object.hasOwnProperty.call(message, "LDCZ"))
                $root.commonmodule.ASG.encode(message.LDCZ, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.ParOp != null && Object.hasOwnProperty.call(message, "ParOp"))
                $root.commonmodule.StatusSPC.encode(message.ParOp, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.TapOpErr != null && Object.hasOwnProperty.call(message, "TapOpErr"))
                $root.commonmodule.StatusSPS.encode(message.TapOpErr, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.TapPos != null && Object.hasOwnProperty.call(message, "TapPos"))
                $root.commonmodule.StatusISC.encode(message.TapPos, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorEventAndStatusATCC message, length delimited. Does not implicitly {@link regulatormodule.RegulatorEventAndStatusATCC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @static
         * @param {regulatormodule.IRegulatorEventAndStatusATCC} message RegulatorEventAndStatusATCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorEventAndStatusATCC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorEventAndStatusATCC message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorEventAndStatusATCC} RegulatorEventAndStatusATCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorEventAndStatusATCC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorEventAndStatusATCC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.BndCtr = $root.commonmodule.ASG.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.BndWid = $root.commonmodule.ASG.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.LDCR = $root.commonmodule.ASG.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.LDCX = $root.commonmodule.ASG.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.LDCZ = $root.commonmodule.ASG.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.ParOp = $root.commonmodule.StatusSPC.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.TapOpErr = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.TapPos = $root.commonmodule.StatusISC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorEventAndStatusATCC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorEventAndStatusATCC} RegulatorEventAndStatusATCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorEventAndStatusATCC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorEventAndStatusATCC message.
         * @function verify
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorEventAndStatusATCC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.BndCtr != null && message.hasOwnProperty("BndCtr")) {
                var error = $root.commonmodule.ASG.verify(message.BndCtr);
                if (error)
                    return "BndCtr." + error;
            }
            if (message.BndWid != null && message.hasOwnProperty("BndWid")) {
                var error = $root.commonmodule.ASG.verify(message.BndWid);
                if (error)
                    return "BndWid." + error;
            }
            if (message.LDCR != null && message.hasOwnProperty("LDCR")) {
                var error = $root.commonmodule.ASG.verify(message.LDCR);
                if (error)
                    return "LDCR." + error;
            }
            if (message.LDCX != null && message.hasOwnProperty("LDCX")) {
                var error = $root.commonmodule.ASG.verify(message.LDCX);
                if (error)
                    return "LDCX." + error;
            }
            if (message.LDCZ != null && message.hasOwnProperty("LDCZ")) {
                var error = $root.commonmodule.ASG.verify(message.LDCZ);
                if (error)
                    return "LDCZ." + error;
            }
            if (message.ParOp != null && message.hasOwnProperty("ParOp")) {
                var error = $root.commonmodule.StatusSPC.verify(message.ParOp);
                if (error)
                    return "ParOp." + error;
            }
            if (message.TapOpErr != null && message.hasOwnProperty("TapOpErr")) {
                var error = $root.commonmodule.StatusSPS.verify(message.TapOpErr);
                if (error)
                    return "TapOpErr." + error;
            }
            if (message.TapPos != null && message.hasOwnProperty("TapPos")) {
                var error = $root.commonmodule.StatusISC.verify(message.TapPos);
                if (error)
                    return "TapPos." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorEventAndStatusATCC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorEventAndStatusATCC} RegulatorEventAndStatusATCC
         */
        RegulatorEventAndStatusATCC.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorEventAndStatusATCC)
                return object;
            var message = new $root.regulatormodule.RegulatorEventAndStatusATCC();
            if (object.BndCtr != null) {
                if (typeof object.BndCtr !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusATCC.BndCtr: object expected");
                message.BndCtr = $root.commonmodule.ASG.fromObject(object.BndCtr);
            }
            if (object.BndWid != null) {
                if (typeof object.BndWid !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusATCC.BndWid: object expected");
                message.BndWid = $root.commonmodule.ASG.fromObject(object.BndWid);
            }
            if (object.LDCR != null) {
                if (typeof object.LDCR !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusATCC.LDCR: object expected");
                message.LDCR = $root.commonmodule.ASG.fromObject(object.LDCR);
            }
            if (object.LDCX != null) {
                if (typeof object.LDCX !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusATCC.LDCX: object expected");
                message.LDCX = $root.commonmodule.ASG.fromObject(object.LDCX);
            }
            if (object.LDCZ != null) {
                if (typeof object.LDCZ !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusATCC.LDCZ: object expected");
                message.LDCZ = $root.commonmodule.ASG.fromObject(object.LDCZ);
            }
            if (object.ParOp != null) {
                if (typeof object.ParOp !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusATCC.ParOp: object expected");
                message.ParOp = $root.commonmodule.StatusSPC.fromObject(object.ParOp);
            }
            if (object.TapOpErr != null) {
                if (typeof object.TapOpErr !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusATCC.TapOpErr: object expected");
                message.TapOpErr = $root.commonmodule.StatusSPS.fromObject(object.TapOpErr);
            }
            if (object.TapPos != null) {
                if (typeof object.TapPos !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusATCC.TapPos: object expected");
                message.TapPos = $root.commonmodule.StatusISC.fromObject(object.TapPos);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorEventAndStatusATCC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @static
         * @param {regulatormodule.RegulatorEventAndStatusATCC} message RegulatorEventAndStatusATCC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorEventAndStatusATCC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.BndCtr = null;
                object.BndWid = null;
                object.LDCR = null;
                object.LDCX = null;
                object.LDCZ = null;
                object.ParOp = null;
                object.TapOpErr = null;
                object.TapPos = null;
            }
            if (message.BndCtr != null && message.hasOwnProperty("BndCtr"))
                object.BndCtr = $root.commonmodule.ASG.toObject(message.BndCtr, options);
            if (message.BndWid != null && message.hasOwnProperty("BndWid"))
                object.BndWid = $root.commonmodule.ASG.toObject(message.BndWid, options);
            if (message.LDCR != null && message.hasOwnProperty("LDCR"))
                object.LDCR = $root.commonmodule.ASG.toObject(message.LDCR, options);
            if (message.LDCX != null && message.hasOwnProperty("LDCX"))
                object.LDCX = $root.commonmodule.ASG.toObject(message.LDCX, options);
            if (message.LDCZ != null && message.hasOwnProperty("LDCZ"))
                object.LDCZ = $root.commonmodule.ASG.toObject(message.LDCZ, options);
            if (message.ParOp != null && message.hasOwnProperty("ParOp"))
                object.ParOp = $root.commonmodule.StatusSPC.toObject(message.ParOp, options);
            if (message.TapOpErr != null && message.hasOwnProperty("TapOpErr"))
                object.TapOpErr = $root.commonmodule.StatusSPS.toObject(message.TapOpErr, options);
            if (message.TapPos != null && message.hasOwnProperty("TapPos"))
                object.TapPos = $root.commonmodule.StatusISC.toObject(message.TapPos, options);
            return object;
        };

        /**
         * Converts this RegulatorEventAndStatusATCC to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorEventAndStatusATCC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorEventAndStatusATCC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorEventAndStatusATCC;
    })();

    regulatormodule.RegulatorEventAndStatusPoint = (function() {

        /**
         * Properties of a RegulatorEventAndStatusPoint.
         * @memberof regulatormodule
         * @interface IRegulatorEventAndStatusPoint
         * @property {regulatormodule.IRegulatorEventAndStatusATCC|null} [eventAndStatus] RegulatorEventAndStatusPoint eventAndStatus
         * @property {google.protobuf.IFloatValue|null} [pctVDroop] RegulatorEventAndStatusPoint pctVDroop
         * @property {commonmodule.IRampRate|null} [rampRates] RegulatorEventAndStatusPoint rampRates
         * @property {commonmodule.IStatusSPC|null} [reactivePwrSetPointEnabled] RegulatorEventAndStatusPoint reactivePwrSetPointEnabled
         * @property {commonmodule.IOptional_StateKind|null} [state] RegulatorEventAndStatusPoint state
         * @property {commonmodule.IStatusSPC|null} [voltageSetPointEnabled] RegulatorEventAndStatusPoint voltageSetPointEnabled
         */

        /**
         * Constructs a new RegulatorEventAndStatusPoint.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorEventAndStatusPoint.
         * @implements IRegulatorEventAndStatusPoint
         * @constructor
         * @param {regulatormodule.IRegulatorEventAndStatusPoint=} [properties] Properties to set
         */
        function RegulatorEventAndStatusPoint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorEventAndStatusPoint eventAndStatus.
         * @member {regulatormodule.IRegulatorEventAndStatusATCC|null|undefined} eventAndStatus
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @instance
         */
        RegulatorEventAndStatusPoint.prototype.eventAndStatus = null;

        /**
         * RegulatorEventAndStatusPoint pctVDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctVDroop
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @instance
         */
        RegulatorEventAndStatusPoint.prototype.pctVDroop = null;

        /**
         * RegulatorEventAndStatusPoint rampRates.
         * @member {commonmodule.IRampRate|null|undefined} rampRates
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @instance
         */
        RegulatorEventAndStatusPoint.prototype.rampRates = null;

        /**
         * RegulatorEventAndStatusPoint reactivePwrSetPointEnabled.
         * @member {commonmodule.IStatusSPC|null|undefined} reactivePwrSetPointEnabled
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @instance
         */
        RegulatorEventAndStatusPoint.prototype.reactivePwrSetPointEnabled = null;

        /**
         * RegulatorEventAndStatusPoint state.
         * @member {commonmodule.IOptional_StateKind|null|undefined} state
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @instance
         */
        RegulatorEventAndStatusPoint.prototype.state = null;

        /**
         * RegulatorEventAndStatusPoint voltageSetPointEnabled.
         * @member {commonmodule.IStatusSPC|null|undefined} voltageSetPointEnabled
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @instance
         */
        RegulatorEventAndStatusPoint.prototype.voltageSetPointEnabled = null;

        /**
         * Creates a new RegulatorEventAndStatusPoint instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @static
         * @param {regulatormodule.IRegulatorEventAndStatusPoint=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorEventAndStatusPoint} RegulatorEventAndStatusPoint instance
         */
        RegulatorEventAndStatusPoint.create = function create(properties) {
            return new RegulatorEventAndStatusPoint(properties);
        };

        /**
         * Encodes the specified RegulatorEventAndStatusPoint message. Does not implicitly {@link regulatormodule.RegulatorEventAndStatusPoint.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @static
         * @param {regulatormodule.IRegulatorEventAndStatusPoint} message RegulatorEventAndStatusPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorEventAndStatusPoint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventAndStatus != null && Object.hasOwnProperty.call(message, "eventAndStatus"))
                $root.regulatormodule.RegulatorEventAndStatusATCC.encode(message.eventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.pctVDroop != null && Object.hasOwnProperty.call(message, "pctVDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctVDroop, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.rampRates != null && Object.hasOwnProperty.call(message, "rampRates"))
                $root.commonmodule.RampRate.encode(message.rampRates, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.reactivePwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "reactivePwrSetPointEnabled"))
                $root.commonmodule.StatusSPC.encode(message.reactivePwrSetPointEnabled, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                $root.commonmodule.Optional_StateKind.encode(message.state, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.voltageSetPointEnabled != null && Object.hasOwnProperty.call(message, "voltageSetPointEnabled"))
                $root.commonmodule.StatusSPC.encode(message.voltageSetPointEnabled, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorEventAndStatusPoint message, length delimited. Does not implicitly {@link regulatormodule.RegulatorEventAndStatusPoint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @static
         * @param {regulatormodule.IRegulatorEventAndStatusPoint} message RegulatorEventAndStatusPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorEventAndStatusPoint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorEventAndStatusPoint message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorEventAndStatusPoint} RegulatorEventAndStatusPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorEventAndStatusPoint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorEventAndStatusPoint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventAndStatus = $root.regulatormodule.RegulatorEventAndStatusATCC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.pctVDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.rampRates = $root.commonmodule.RampRate.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.reactivePwrSetPointEnabled = $root.commonmodule.StatusSPC.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.state = $root.commonmodule.Optional_StateKind.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.voltageSetPointEnabled = $root.commonmodule.StatusSPC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorEventAndStatusPoint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorEventAndStatusPoint} RegulatorEventAndStatusPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorEventAndStatusPoint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorEventAndStatusPoint message.
         * @function verify
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorEventAndStatusPoint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventAndStatus != null && message.hasOwnProperty("eventAndStatus")) {
                var error = $root.regulatormodule.RegulatorEventAndStatusATCC.verify(message.eventAndStatus);
                if (error)
                    return "eventAndStatus." + error;
            }
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctVDroop);
                if (error)
                    return "pctVDroop." + error;
            }
            if (message.rampRates != null && message.hasOwnProperty("rampRates")) {
                var error = $root.commonmodule.RampRate.verify(message.rampRates);
                if (error)
                    return "rampRates." + error;
            }
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled")) {
                var error = $root.commonmodule.StatusSPC.verify(message.reactivePwrSetPointEnabled);
                if (error)
                    return "reactivePwrSetPointEnabled." + error;
            }
            if (message.state != null && message.hasOwnProperty("state")) {
                var error = $root.commonmodule.Optional_StateKind.verify(message.state);
                if (error)
                    return "state." + error;
            }
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled")) {
                var error = $root.commonmodule.StatusSPC.verify(message.voltageSetPointEnabled);
                if (error)
                    return "voltageSetPointEnabled." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorEventAndStatusPoint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorEventAndStatusPoint} RegulatorEventAndStatusPoint
         */
        RegulatorEventAndStatusPoint.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorEventAndStatusPoint)
                return object;
            var message = new $root.regulatormodule.RegulatorEventAndStatusPoint();
            if (object.eventAndStatus != null) {
                if (typeof object.eventAndStatus !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusPoint.eventAndStatus: object expected");
                message.eventAndStatus = $root.regulatormodule.RegulatorEventAndStatusATCC.fromObject(object.eventAndStatus);
            }
            if (object.pctVDroop != null) {
                if (typeof object.pctVDroop !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusPoint.pctVDroop: object expected");
                message.pctVDroop = $root.google.protobuf.FloatValue.fromObject(object.pctVDroop);
            }
            if (object.rampRates != null) {
                if (typeof object.rampRates !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusPoint.rampRates: object expected");
                message.rampRates = $root.commonmodule.RampRate.fromObject(object.rampRates);
            }
            if (object.reactivePwrSetPointEnabled != null) {
                if (typeof object.reactivePwrSetPointEnabled !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusPoint.reactivePwrSetPointEnabled: object expected");
                message.reactivePwrSetPointEnabled = $root.commonmodule.StatusSPC.fromObject(object.reactivePwrSetPointEnabled);
            }
            if (object.state != null) {
                if (typeof object.state !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusPoint.state: object expected");
                message.state = $root.commonmodule.Optional_StateKind.fromObject(object.state);
            }
            if (object.voltageSetPointEnabled != null) {
                if (typeof object.voltageSetPointEnabled !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusPoint.voltageSetPointEnabled: object expected");
                message.voltageSetPointEnabled = $root.commonmodule.StatusSPC.fromObject(object.voltageSetPointEnabled);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorEventAndStatusPoint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @static
         * @param {regulatormodule.RegulatorEventAndStatusPoint} message RegulatorEventAndStatusPoint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorEventAndStatusPoint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventAndStatus = null;
                object.pctVDroop = null;
                object.rampRates = null;
                object.reactivePwrSetPointEnabled = null;
                object.state = null;
                object.voltageSetPointEnabled = null;
            }
            if (message.eventAndStatus != null && message.hasOwnProperty("eventAndStatus"))
                object.eventAndStatus = $root.regulatormodule.RegulatorEventAndStatusATCC.toObject(message.eventAndStatus, options);
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop"))
                object.pctVDroop = $root.google.protobuf.FloatValue.toObject(message.pctVDroop, options);
            if (message.rampRates != null && message.hasOwnProperty("rampRates"))
                object.rampRates = $root.commonmodule.RampRate.toObject(message.rampRates, options);
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled"))
                object.reactivePwrSetPointEnabled = $root.commonmodule.StatusSPC.toObject(message.reactivePwrSetPointEnabled, options);
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = $root.commonmodule.Optional_StateKind.toObject(message.state, options);
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled"))
                object.voltageSetPointEnabled = $root.commonmodule.StatusSPC.toObject(message.voltageSetPointEnabled, options);
            return object;
        };

        /**
         * Converts this RegulatorEventAndStatusPoint to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorEventAndStatusPoint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorEventAndStatusPoint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorEventAndStatusPoint;
    })();

    regulatormodule.RegulatorEventAndStatusANCR = (function() {

        /**
         * Properties of a RegulatorEventAndStatusANCR.
         * @memberof regulatormodule
         * @interface IRegulatorEventAndStatusANCR
         * @property {commonmodule.ILogicalNodeForEventAndStatus|null} [logicalNodeForEventAndStatus] RegulatorEventAndStatusANCR logicalNodeForEventAndStatus
         * @property {commonmodule.IENS_DynamicTestKind|null} [DynamicTest] RegulatorEventAndStatusANCR DynamicTest
         * @property {regulatormodule.IRegulatorEventAndStatusPoint|null} [PointStatus] RegulatorEventAndStatusANCR PointStatus
         */

        /**
         * Constructs a new RegulatorEventAndStatusANCR.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorEventAndStatusANCR.
         * @implements IRegulatorEventAndStatusANCR
         * @constructor
         * @param {regulatormodule.IRegulatorEventAndStatusANCR=} [properties] Properties to set
         */
        function RegulatorEventAndStatusANCR(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorEventAndStatusANCR logicalNodeForEventAndStatus.
         * @member {commonmodule.ILogicalNodeForEventAndStatus|null|undefined} logicalNodeForEventAndStatus
         * @memberof regulatormodule.RegulatorEventAndStatusANCR
         * @instance
         */
        RegulatorEventAndStatusANCR.prototype.logicalNodeForEventAndStatus = null;

        /**
         * RegulatorEventAndStatusANCR DynamicTest.
         * @member {commonmodule.IENS_DynamicTestKind|null|undefined} DynamicTest
         * @memberof regulatormodule.RegulatorEventAndStatusANCR
         * @instance
         */
        RegulatorEventAndStatusANCR.prototype.DynamicTest = null;

        /**
         * RegulatorEventAndStatusANCR PointStatus.
         * @member {regulatormodule.IRegulatorEventAndStatusPoint|null|undefined} PointStatus
         * @memberof regulatormodule.RegulatorEventAndStatusANCR
         * @instance
         */
        RegulatorEventAndStatusANCR.prototype.PointStatus = null;

        /**
         * Creates a new RegulatorEventAndStatusANCR instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorEventAndStatusANCR
         * @static
         * @param {regulatormodule.IRegulatorEventAndStatusANCR=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorEventAndStatusANCR} RegulatorEventAndStatusANCR instance
         */
        RegulatorEventAndStatusANCR.create = function create(properties) {
            return new RegulatorEventAndStatusANCR(properties);
        };

        /**
         * Encodes the specified RegulatorEventAndStatusANCR message. Does not implicitly {@link regulatormodule.RegulatorEventAndStatusANCR.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorEventAndStatusANCR
         * @static
         * @param {regulatormodule.IRegulatorEventAndStatusANCR} message RegulatorEventAndStatusANCR message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorEventAndStatusANCR.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForEventAndStatus != null && Object.hasOwnProperty.call(message, "logicalNodeForEventAndStatus"))
                $root.commonmodule.LogicalNodeForEventAndStatus.encode(message.logicalNodeForEventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.DynamicTest != null && Object.hasOwnProperty.call(message, "DynamicTest"))
                $root.commonmodule.ENS_DynamicTestKind.encode(message.DynamicTest, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.PointStatus != null && Object.hasOwnProperty.call(message, "PointStatus"))
                $root.regulatormodule.RegulatorEventAndStatusPoint.encode(message.PointStatus, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorEventAndStatusANCR message, length delimited. Does not implicitly {@link regulatormodule.RegulatorEventAndStatusANCR.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorEventAndStatusANCR
         * @static
         * @param {regulatormodule.IRegulatorEventAndStatusANCR} message RegulatorEventAndStatusANCR message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorEventAndStatusANCR.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorEventAndStatusANCR message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorEventAndStatusANCR
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorEventAndStatusANCR} RegulatorEventAndStatusANCR
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorEventAndStatusANCR.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorEventAndStatusANCR();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.PointStatus = $root.regulatormodule.RegulatorEventAndStatusPoint.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorEventAndStatusANCR message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorEventAndStatusANCR
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorEventAndStatusANCR} RegulatorEventAndStatusANCR
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorEventAndStatusANCR.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorEventAndStatusANCR message.
         * @function verify
         * @memberof regulatormodule.RegulatorEventAndStatusANCR
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorEventAndStatusANCR.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus")) {
                var error = $root.commonmodule.LogicalNodeForEventAndStatus.verify(message.logicalNodeForEventAndStatus);
                if (error)
                    return "logicalNodeForEventAndStatus." + error;
            }
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest")) {
                var error = $root.commonmodule.ENS_DynamicTestKind.verify(message.DynamicTest);
                if (error)
                    return "DynamicTest." + error;
            }
            if (message.PointStatus != null && message.hasOwnProperty("PointStatus")) {
                var error = $root.regulatormodule.RegulatorEventAndStatusPoint.verify(message.PointStatus);
                if (error)
                    return "PointStatus." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorEventAndStatusANCR message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorEventAndStatusANCR
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorEventAndStatusANCR} RegulatorEventAndStatusANCR
         */
        RegulatorEventAndStatusANCR.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorEventAndStatusANCR)
                return object;
            var message = new $root.regulatormodule.RegulatorEventAndStatusANCR();
            if (object.logicalNodeForEventAndStatus != null) {
                if (typeof object.logicalNodeForEventAndStatus !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusANCR.logicalNodeForEventAndStatus: object expected");
                message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.fromObject(object.logicalNodeForEventAndStatus);
            }
            if (object.DynamicTest != null) {
                if (typeof object.DynamicTest !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusANCR.DynamicTest: object expected");
                message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.fromObject(object.DynamicTest);
            }
            if (object.PointStatus != null) {
                if (typeof object.PointStatus !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventAndStatusANCR.PointStatus: object expected");
                message.PointStatus = $root.regulatormodule.RegulatorEventAndStatusPoint.fromObject(object.PointStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorEventAndStatusANCR message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorEventAndStatusANCR
         * @static
         * @param {regulatormodule.RegulatorEventAndStatusANCR} message RegulatorEventAndStatusANCR
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorEventAndStatusANCR.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForEventAndStatus = null;
                object.DynamicTest = null;
                object.PointStatus = null;
            }
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus"))
                object.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.toObject(message.logicalNodeForEventAndStatus, options);
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest"))
                object.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.toObject(message.DynamicTest, options);
            if (message.PointStatus != null && message.hasOwnProperty("PointStatus"))
                object.PointStatus = $root.regulatormodule.RegulatorEventAndStatusPoint.toObject(message.PointStatus, options);
            return object;
        };

        /**
         * Converts this RegulatorEventAndStatusANCR to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorEventAndStatusANCR
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorEventAndStatusANCR.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorEventAndStatusANCR;
    })();

    regulatormodule.RegulatorEvent = (function() {

        /**
         * Properties of a RegulatorEvent.
         * @memberof regulatormodule
         * @interface IRegulatorEvent
         * @property {commonmodule.IEventValue|null} [eventValue] RegulatorEvent eventValue
         * @property {regulatormodule.IRegulatorEventAndStatusANCR|null} [regulatorEventAndStatusANCR] RegulatorEvent regulatorEventAndStatusANCR
         */

        /**
         * Constructs a new RegulatorEvent.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorEvent.
         * @implements IRegulatorEvent
         * @constructor
         * @param {regulatormodule.IRegulatorEvent=} [properties] Properties to set
         */
        function RegulatorEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorEvent eventValue.
         * @member {commonmodule.IEventValue|null|undefined} eventValue
         * @memberof regulatormodule.RegulatorEvent
         * @instance
         */
        RegulatorEvent.prototype.eventValue = null;

        /**
         * RegulatorEvent regulatorEventAndStatusANCR.
         * @member {regulatormodule.IRegulatorEventAndStatusANCR|null|undefined} regulatorEventAndStatusANCR
         * @memberof regulatormodule.RegulatorEvent
         * @instance
         */
        RegulatorEvent.prototype.regulatorEventAndStatusANCR = null;

        /**
         * Creates a new RegulatorEvent instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorEvent
         * @static
         * @param {regulatormodule.IRegulatorEvent=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorEvent} RegulatorEvent instance
         */
        RegulatorEvent.create = function create(properties) {
            return new RegulatorEvent(properties);
        };

        /**
         * Encodes the specified RegulatorEvent message. Does not implicitly {@link regulatormodule.RegulatorEvent.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorEvent
         * @static
         * @param {regulatormodule.IRegulatorEvent} message RegulatorEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventValue != null && Object.hasOwnProperty.call(message, "eventValue"))
                $root.commonmodule.EventValue.encode(message.eventValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.regulatorEventAndStatusANCR != null && Object.hasOwnProperty.call(message, "regulatorEventAndStatusANCR"))
                $root.regulatormodule.RegulatorEventAndStatusANCR.encode(message.regulatorEventAndStatusANCR, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorEvent message, length delimited. Does not implicitly {@link regulatormodule.RegulatorEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorEvent
         * @static
         * @param {regulatormodule.IRegulatorEvent} message RegulatorEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorEvent message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorEvent} RegulatorEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventValue = $root.commonmodule.EventValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.regulatorEventAndStatusANCR = $root.regulatormodule.RegulatorEventAndStatusANCR.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorEvent} RegulatorEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorEvent message.
         * @function verify
         * @memberof regulatormodule.RegulatorEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventValue != null && message.hasOwnProperty("eventValue")) {
                var error = $root.commonmodule.EventValue.verify(message.eventValue);
                if (error)
                    return "eventValue." + error;
            }
            if (message.regulatorEventAndStatusANCR != null && message.hasOwnProperty("regulatorEventAndStatusANCR")) {
                var error = $root.regulatormodule.RegulatorEventAndStatusANCR.verify(message.regulatorEventAndStatusANCR);
                if (error)
                    return "regulatorEventAndStatusANCR." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorEvent} RegulatorEvent
         */
        RegulatorEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorEvent)
                return object;
            var message = new $root.regulatormodule.RegulatorEvent();
            if (object.eventValue != null) {
                if (typeof object.eventValue !== "object")
                    throw TypeError(".regulatormodule.RegulatorEvent.eventValue: object expected");
                message.eventValue = $root.commonmodule.EventValue.fromObject(object.eventValue);
            }
            if (object.regulatorEventAndStatusANCR != null) {
                if (typeof object.regulatorEventAndStatusANCR !== "object")
                    throw TypeError(".regulatormodule.RegulatorEvent.regulatorEventAndStatusANCR: object expected");
                message.regulatorEventAndStatusANCR = $root.regulatormodule.RegulatorEventAndStatusANCR.fromObject(object.regulatorEventAndStatusANCR);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorEvent
         * @static
         * @param {regulatormodule.RegulatorEvent} message RegulatorEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventValue = null;
                object.regulatorEventAndStatusANCR = null;
            }
            if (message.eventValue != null && message.hasOwnProperty("eventValue"))
                object.eventValue = $root.commonmodule.EventValue.toObject(message.eventValue, options);
            if (message.regulatorEventAndStatusANCR != null && message.hasOwnProperty("regulatorEventAndStatusANCR"))
                object.regulatorEventAndStatusANCR = $root.regulatormodule.RegulatorEventAndStatusANCR.toObject(message.regulatorEventAndStatusANCR, options);
            return object;
        };

        /**
         * Converts this RegulatorEvent to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorEvent;
    })();

    regulatormodule.RegulatorEventProfile = (function() {

        /**
         * Properties of a RegulatorEventProfile.
         * @memberof regulatormodule
         * @interface IRegulatorEventProfile
         * @property {commonmodule.IEventMessageInfo|null} [eventMessageInfo] RegulatorEventProfile eventMessageInfo
         * @property {commonmodule.IIED|null} [ied] RegulatorEventProfile ied
         * @property {regulatormodule.IRegulatorEvent|null} [regulatorEvent] RegulatorEventProfile regulatorEvent
         * @property {regulatormodule.IRegulatorSystem|null} [regulatorSystem] RegulatorEventProfile regulatorSystem
         */

        /**
         * Constructs a new RegulatorEventProfile.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorEventProfile.
         * @implements IRegulatorEventProfile
         * @constructor
         * @param {regulatormodule.IRegulatorEventProfile=} [properties] Properties to set
         */
        function RegulatorEventProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorEventProfile eventMessageInfo.
         * @member {commonmodule.IEventMessageInfo|null|undefined} eventMessageInfo
         * @memberof regulatormodule.RegulatorEventProfile
         * @instance
         */
        RegulatorEventProfile.prototype.eventMessageInfo = null;

        /**
         * RegulatorEventProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof regulatormodule.RegulatorEventProfile
         * @instance
         */
        RegulatorEventProfile.prototype.ied = null;

        /**
         * RegulatorEventProfile regulatorEvent.
         * @member {regulatormodule.IRegulatorEvent|null|undefined} regulatorEvent
         * @memberof regulatormodule.RegulatorEventProfile
         * @instance
         */
        RegulatorEventProfile.prototype.regulatorEvent = null;

        /**
         * RegulatorEventProfile regulatorSystem.
         * @member {regulatormodule.IRegulatorSystem|null|undefined} regulatorSystem
         * @memberof regulatormodule.RegulatorEventProfile
         * @instance
         */
        RegulatorEventProfile.prototype.regulatorSystem = null;

        /**
         * Creates a new RegulatorEventProfile instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorEventProfile
         * @static
         * @param {regulatormodule.IRegulatorEventProfile=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorEventProfile} RegulatorEventProfile instance
         */
        RegulatorEventProfile.create = function create(properties) {
            return new RegulatorEventProfile(properties);
        };

        /**
         * Encodes the specified RegulatorEventProfile message. Does not implicitly {@link regulatormodule.RegulatorEventProfile.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorEventProfile
         * @static
         * @param {regulatormodule.IRegulatorEventProfile} message RegulatorEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorEventProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventMessageInfo != null && Object.hasOwnProperty.call(message, "eventMessageInfo"))
                $root.commonmodule.EventMessageInfo.encode(message.eventMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.regulatorEvent != null && Object.hasOwnProperty.call(message, "regulatorEvent"))
                $root.regulatormodule.RegulatorEvent.encode(message.regulatorEvent, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.regulatorSystem != null && Object.hasOwnProperty.call(message, "regulatorSystem"))
                $root.regulatormodule.RegulatorSystem.encode(message.regulatorSystem, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorEventProfile message, length delimited. Does not implicitly {@link regulatormodule.RegulatorEventProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorEventProfile
         * @static
         * @param {regulatormodule.IRegulatorEventProfile} message RegulatorEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorEventProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorEventProfile message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorEventProfile} RegulatorEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorEventProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorEventProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventMessageInfo = $root.commonmodule.EventMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.regulatorEvent = $root.regulatormodule.RegulatorEvent.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.regulatorSystem = $root.regulatormodule.RegulatorSystem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorEventProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorEventProfile} RegulatorEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorEventProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorEventProfile message.
         * @function verify
         * @memberof regulatormodule.RegulatorEventProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorEventProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo")) {
                var error = $root.commonmodule.EventMessageInfo.verify(message.eventMessageInfo);
                if (error)
                    return "eventMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.regulatorEvent != null && message.hasOwnProperty("regulatorEvent")) {
                var error = $root.regulatormodule.RegulatorEvent.verify(message.regulatorEvent);
                if (error)
                    return "regulatorEvent." + error;
            }
            if (message.regulatorSystem != null && message.hasOwnProperty("regulatorSystem")) {
                var error = $root.regulatormodule.RegulatorSystem.verify(message.regulatorSystem);
                if (error)
                    return "regulatorSystem." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorEventProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorEventProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorEventProfile} RegulatorEventProfile
         */
        RegulatorEventProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorEventProfile)
                return object;
            var message = new $root.regulatormodule.RegulatorEventProfile();
            if (object.eventMessageInfo != null) {
                if (typeof object.eventMessageInfo !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventProfile.eventMessageInfo: object expected");
                message.eventMessageInfo = $root.commonmodule.EventMessageInfo.fromObject(object.eventMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.regulatorEvent != null) {
                if (typeof object.regulatorEvent !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventProfile.regulatorEvent: object expected");
                message.regulatorEvent = $root.regulatormodule.RegulatorEvent.fromObject(object.regulatorEvent);
            }
            if (object.regulatorSystem != null) {
                if (typeof object.regulatorSystem !== "object")
                    throw TypeError(".regulatormodule.RegulatorEventProfile.regulatorSystem: object expected");
                message.regulatorSystem = $root.regulatormodule.RegulatorSystem.fromObject(object.regulatorSystem);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorEventProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorEventProfile
         * @static
         * @param {regulatormodule.RegulatorEventProfile} message RegulatorEventProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorEventProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventMessageInfo = null;
                object.ied = null;
                object.regulatorEvent = null;
                object.regulatorSystem = null;
            }
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo"))
                object.eventMessageInfo = $root.commonmodule.EventMessageInfo.toObject(message.eventMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.regulatorEvent != null && message.hasOwnProperty("regulatorEvent"))
                object.regulatorEvent = $root.regulatormodule.RegulatorEvent.toObject(message.regulatorEvent, options);
            if (message.regulatorSystem != null && message.hasOwnProperty("regulatorSystem"))
                object.regulatorSystem = $root.regulatormodule.RegulatorSystem.toObject(message.regulatorSystem, options);
            return object;
        };

        /**
         * Converts this RegulatorEventProfile to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorEventProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorEventProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorEventProfile;
    })();

    regulatormodule.RegulatorReading = (function() {

        /**
         * Properties of a RegulatorReading.
         * @memberof regulatormodule
         * @interface IRegulatorReading
         * @property {commonmodule.IConductingEquipmentTerminalReading|null} [conductingEquipmentTerminalReading] RegulatorReading conductingEquipmentTerminalReading
         * @property {commonmodule.IPhaseMMTN|null} [phaseMMTN] RegulatorReading phaseMMTN
         * @property {commonmodule.IReadingMMTR|null} [readingMMTR] RegulatorReading readingMMTR
         * @property {commonmodule.IReadingMMXU|null} [readingMMXU] RegulatorReading readingMMXU
         */

        /**
         * Constructs a new RegulatorReading.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorReading.
         * @implements IRegulatorReading
         * @constructor
         * @param {regulatormodule.IRegulatorReading=} [properties] Properties to set
         */
        function RegulatorReading(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorReading conductingEquipmentTerminalReading.
         * @member {commonmodule.IConductingEquipmentTerminalReading|null|undefined} conductingEquipmentTerminalReading
         * @memberof regulatormodule.RegulatorReading
         * @instance
         */
        RegulatorReading.prototype.conductingEquipmentTerminalReading = null;

        /**
         * RegulatorReading phaseMMTN.
         * @member {commonmodule.IPhaseMMTN|null|undefined} phaseMMTN
         * @memberof regulatormodule.RegulatorReading
         * @instance
         */
        RegulatorReading.prototype.phaseMMTN = null;

        /**
         * RegulatorReading readingMMTR.
         * @member {commonmodule.IReadingMMTR|null|undefined} readingMMTR
         * @memberof regulatormodule.RegulatorReading
         * @instance
         */
        RegulatorReading.prototype.readingMMTR = null;

        /**
         * RegulatorReading readingMMXU.
         * @member {commonmodule.IReadingMMXU|null|undefined} readingMMXU
         * @memberof regulatormodule.RegulatorReading
         * @instance
         */
        RegulatorReading.prototype.readingMMXU = null;

        /**
         * Creates a new RegulatorReading instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorReading
         * @static
         * @param {regulatormodule.IRegulatorReading=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorReading} RegulatorReading instance
         */
        RegulatorReading.create = function create(properties) {
            return new RegulatorReading(properties);
        };

        /**
         * Encodes the specified RegulatorReading message. Does not implicitly {@link regulatormodule.RegulatorReading.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorReading
         * @static
         * @param {regulatormodule.IRegulatorReading} message RegulatorReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorReading.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipmentTerminalReading != null && Object.hasOwnProperty.call(message, "conductingEquipmentTerminalReading"))
                $root.commonmodule.ConductingEquipmentTerminalReading.encode(message.conductingEquipmentTerminalReading, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.phaseMMTN != null && Object.hasOwnProperty.call(message, "phaseMMTN"))
                $root.commonmodule.PhaseMMTN.encode(message.phaseMMTN, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.readingMMTR != null && Object.hasOwnProperty.call(message, "readingMMTR"))
                $root.commonmodule.ReadingMMTR.encode(message.readingMMTR, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.readingMMXU != null && Object.hasOwnProperty.call(message, "readingMMXU"))
                $root.commonmodule.ReadingMMXU.encode(message.readingMMXU, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorReading message, length delimited. Does not implicitly {@link regulatormodule.RegulatorReading.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorReading
         * @static
         * @param {regulatormodule.IRegulatorReading} message RegulatorReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorReading.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorReading message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorReading} RegulatorReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorReading.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorReading();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.phaseMMTN = $root.commonmodule.PhaseMMTN.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.readingMMTR = $root.commonmodule.ReadingMMTR.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.readingMMXU = $root.commonmodule.ReadingMMXU.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorReading message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorReading} RegulatorReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorReading.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorReading message.
         * @function verify
         * @memberof regulatormodule.RegulatorReading
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorReading.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading")) {
                var error = $root.commonmodule.ConductingEquipmentTerminalReading.verify(message.conductingEquipmentTerminalReading);
                if (error)
                    return "conductingEquipmentTerminalReading." + error;
            }
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN")) {
                var error = $root.commonmodule.PhaseMMTN.verify(message.phaseMMTN);
                if (error)
                    return "phaseMMTN." + error;
            }
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR")) {
                var error = $root.commonmodule.ReadingMMTR.verify(message.readingMMTR);
                if (error)
                    return "readingMMTR." + error;
            }
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU")) {
                var error = $root.commonmodule.ReadingMMXU.verify(message.readingMMXU);
                if (error)
                    return "readingMMXU." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorReading message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorReading
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorReading} RegulatorReading
         */
        RegulatorReading.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorReading)
                return object;
            var message = new $root.regulatormodule.RegulatorReading();
            if (object.conductingEquipmentTerminalReading != null) {
                if (typeof object.conductingEquipmentTerminalReading !== "object")
                    throw TypeError(".regulatormodule.RegulatorReading.conductingEquipmentTerminalReading: object expected");
                message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.fromObject(object.conductingEquipmentTerminalReading);
            }
            if (object.phaseMMTN != null) {
                if (typeof object.phaseMMTN !== "object")
                    throw TypeError(".regulatormodule.RegulatorReading.phaseMMTN: object expected");
                message.phaseMMTN = $root.commonmodule.PhaseMMTN.fromObject(object.phaseMMTN);
            }
            if (object.readingMMTR != null) {
                if (typeof object.readingMMTR !== "object")
                    throw TypeError(".regulatormodule.RegulatorReading.readingMMTR: object expected");
                message.readingMMTR = $root.commonmodule.ReadingMMTR.fromObject(object.readingMMTR);
            }
            if (object.readingMMXU != null) {
                if (typeof object.readingMMXU !== "object")
                    throw TypeError(".regulatormodule.RegulatorReading.readingMMXU: object expected");
                message.readingMMXU = $root.commonmodule.ReadingMMXU.fromObject(object.readingMMXU);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorReading message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorReading
         * @static
         * @param {regulatormodule.RegulatorReading} message RegulatorReading
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorReading.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conductingEquipmentTerminalReading = null;
                object.phaseMMTN = null;
                object.readingMMTR = null;
                object.readingMMXU = null;
            }
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading"))
                object.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.toObject(message.conductingEquipmentTerminalReading, options);
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN"))
                object.phaseMMTN = $root.commonmodule.PhaseMMTN.toObject(message.phaseMMTN, options);
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR"))
                object.readingMMTR = $root.commonmodule.ReadingMMTR.toObject(message.readingMMTR, options);
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU"))
                object.readingMMXU = $root.commonmodule.ReadingMMXU.toObject(message.readingMMXU, options);
            return object;
        };

        /**
         * Converts this RegulatorReading to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorReading
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorReading.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorReading;
    })();

    regulatormodule.RegulatorReadingProfile = (function() {

        /**
         * Properties of a RegulatorReadingProfile.
         * @memberof regulatormodule
         * @interface IRegulatorReadingProfile
         * @property {commonmodule.IReadingMessageInfo|null} [readingMessageInfo] RegulatorReadingProfile readingMessageInfo
         * @property {commonmodule.IIED|null} [ied] RegulatorReadingProfile ied
         * @property {Array.<regulatormodule.IRegulatorReading>|null} [regulatorReading] RegulatorReadingProfile regulatorReading
         * @property {regulatormodule.IRegulatorSystem|null} [regulatorSystem] RegulatorReadingProfile regulatorSystem
         */

        /**
         * Constructs a new RegulatorReadingProfile.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorReadingProfile.
         * @implements IRegulatorReadingProfile
         * @constructor
         * @param {regulatormodule.IRegulatorReadingProfile=} [properties] Properties to set
         */
        function RegulatorReadingProfile(properties) {
            this.regulatorReading = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorReadingProfile readingMessageInfo.
         * @member {commonmodule.IReadingMessageInfo|null|undefined} readingMessageInfo
         * @memberof regulatormodule.RegulatorReadingProfile
         * @instance
         */
        RegulatorReadingProfile.prototype.readingMessageInfo = null;

        /**
         * RegulatorReadingProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof regulatormodule.RegulatorReadingProfile
         * @instance
         */
        RegulatorReadingProfile.prototype.ied = null;

        /**
         * RegulatorReadingProfile regulatorReading.
         * @member {Array.<regulatormodule.IRegulatorReading>} regulatorReading
         * @memberof regulatormodule.RegulatorReadingProfile
         * @instance
         */
        RegulatorReadingProfile.prototype.regulatorReading = $util.emptyArray;

        /**
         * RegulatorReadingProfile regulatorSystem.
         * @member {regulatormodule.IRegulatorSystem|null|undefined} regulatorSystem
         * @memberof regulatormodule.RegulatorReadingProfile
         * @instance
         */
        RegulatorReadingProfile.prototype.regulatorSystem = null;

        /**
         * Creates a new RegulatorReadingProfile instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorReadingProfile
         * @static
         * @param {regulatormodule.IRegulatorReadingProfile=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorReadingProfile} RegulatorReadingProfile instance
         */
        RegulatorReadingProfile.create = function create(properties) {
            return new RegulatorReadingProfile(properties);
        };

        /**
         * Encodes the specified RegulatorReadingProfile message. Does not implicitly {@link regulatormodule.RegulatorReadingProfile.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorReadingProfile
         * @static
         * @param {regulatormodule.IRegulatorReadingProfile} message RegulatorReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorReadingProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.readingMessageInfo != null && Object.hasOwnProperty.call(message, "readingMessageInfo"))
                $root.commonmodule.ReadingMessageInfo.encode(message.readingMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.regulatorReading != null && message.regulatorReading.length)
                for (var i = 0; i < message.regulatorReading.length; ++i)
                    $root.regulatormodule.RegulatorReading.encode(message.regulatorReading[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.regulatorSystem != null && Object.hasOwnProperty.call(message, "regulatorSystem"))
                $root.regulatormodule.RegulatorSystem.encode(message.regulatorSystem, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorReadingProfile message, length delimited. Does not implicitly {@link regulatormodule.RegulatorReadingProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorReadingProfile
         * @static
         * @param {regulatormodule.IRegulatorReadingProfile} message RegulatorReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorReadingProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorReadingProfile message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorReadingProfile} RegulatorReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorReadingProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorReadingProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    if (!(message.regulatorReading && message.regulatorReading.length))
                        message.regulatorReading = [];
                    message.regulatorReading.push($root.regulatormodule.RegulatorReading.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.regulatorSystem = $root.regulatormodule.RegulatorSystem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorReadingProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorReadingProfile} RegulatorReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorReadingProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorReadingProfile message.
         * @function verify
         * @memberof regulatormodule.RegulatorReadingProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorReadingProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo")) {
                var error = $root.commonmodule.ReadingMessageInfo.verify(message.readingMessageInfo);
                if (error)
                    return "readingMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.regulatorReading != null && message.hasOwnProperty("regulatorReading")) {
                if (!Array.isArray(message.regulatorReading))
                    return "regulatorReading: array expected";
                for (var i = 0; i < message.regulatorReading.length; ++i) {
                    var error = $root.regulatormodule.RegulatorReading.verify(message.regulatorReading[i]);
                    if (error)
                        return "regulatorReading." + error;
                }
            }
            if (message.regulatorSystem != null && message.hasOwnProperty("regulatorSystem")) {
                var error = $root.regulatormodule.RegulatorSystem.verify(message.regulatorSystem);
                if (error)
                    return "regulatorSystem." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorReadingProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorReadingProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorReadingProfile} RegulatorReadingProfile
         */
        RegulatorReadingProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorReadingProfile)
                return object;
            var message = new $root.regulatormodule.RegulatorReadingProfile();
            if (object.readingMessageInfo != null) {
                if (typeof object.readingMessageInfo !== "object")
                    throw TypeError(".regulatormodule.RegulatorReadingProfile.readingMessageInfo: object expected");
                message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.fromObject(object.readingMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".regulatormodule.RegulatorReadingProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.regulatorReading) {
                if (!Array.isArray(object.regulatorReading))
                    throw TypeError(".regulatormodule.RegulatorReadingProfile.regulatorReading: array expected");
                message.regulatorReading = [];
                for (var i = 0; i < object.regulatorReading.length; ++i) {
                    if (typeof object.regulatorReading[i] !== "object")
                        throw TypeError(".regulatormodule.RegulatorReadingProfile.regulatorReading: object expected");
                    message.regulatorReading[i] = $root.regulatormodule.RegulatorReading.fromObject(object.regulatorReading[i]);
                }
            }
            if (object.regulatorSystem != null) {
                if (typeof object.regulatorSystem !== "object")
                    throw TypeError(".regulatormodule.RegulatorReadingProfile.regulatorSystem: object expected");
                message.regulatorSystem = $root.regulatormodule.RegulatorSystem.fromObject(object.regulatorSystem);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorReadingProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorReadingProfile
         * @static
         * @param {regulatormodule.RegulatorReadingProfile} message RegulatorReadingProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorReadingProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.regulatorReading = [];
            if (options.defaults) {
                object.readingMessageInfo = null;
                object.ied = null;
                object.regulatorSystem = null;
            }
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo"))
                object.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.toObject(message.readingMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.regulatorReading && message.regulatorReading.length) {
                object.regulatorReading = [];
                for (var j = 0; j < message.regulatorReading.length; ++j)
                    object.regulatorReading[j] = $root.regulatormodule.RegulatorReading.toObject(message.regulatorReading[j], options);
            }
            if (message.regulatorSystem != null && message.hasOwnProperty("regulatorSystem"))
                object.regulatorSystem = $root.regulatormodule.RegulatorSystem.toObject(message.regulatorSystem, options);
            return object;
        };

        /**
         * Converts this RegulatorReadingProfile to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorReadingProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorReadingProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorReadingProfile;
    })();

    regulatormodule.RegulatorStatus = (function() {

        /**
         * Properties of a RegulatorStatus.
         * @memberof regulatormodule
         * @interface IRegulatorStatus
         * @property {commonmodule.IStatusValue|null} [statusValue] RegulatorStatus statusValue
         * @property {regulatormodule.IRegulatorEventAndStatusANCR|null} [regulatorEventAndStatusANCR] RegulatorStatus regulatorEventAndStatusANCR
         */

        /**
         * Constructs a new RegulatorStatus.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorStatus.
         * @implements IRegulatorStatus
         * @constructor
         * @param {regulatormodule.IRegulatorStatus=} [properties] Properties to set
         */
        function RegulatorStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorStatus statusValue.
         * @member {commonmodule.IStatusValue|null|undefined} statusValue
         * @memberof regulatormodule.RegulatorStatus
         * @instance
         */
        RegulatorStatus.prototype.statusValue = null;

        /**
         * RegulatorStatus regulatorEventAndStatusANCR.
         * @member {regulatormodule.IRegulatorEventAndStatusANCR|null|undefined} regulatorEventAndStatusANCR
         * @memberof regulatormodule.RegulatorStatus
         * @instance
         */
        RegulatorStatus.prototype.regulatorEventAndStatusANCR = null;

        /**
         * Creates a new RegulatorStatus instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorStatus
         * @static
         * @param {regulatormodule.IRegulatorStatus=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorStatus} RegulatorStatus instance
         */
        RegulatorStatus.create = function create(properties) {
            return new RegulatorStatus(properties);
        };

        /**
         * Encodes the specified RegulatorStatus message. Does not implicitly {@link regulatormodule.RegulatorStatus.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorStatus
         * @static
         * @param {regulatormodule.IRegulatorStatus} message RegulatorStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusValue != null && Object.hasOwnProperty.call(message, "statusValue"))
                $root.commonmodule.StatusValue.encode(message.statusValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.regulatorEventAndStatusANCR != null && Object.hasOwnProperty.call(message, "regulatorEventAndStatusANCR"))
                $root.regulatormodule.RegulatorEventAndStatusANCR.encode(message.regulatorEventAndStatusANCR, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorStatus message, length delimited. Does not implicitly {@link regulatormodule.RegulatorStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorStatus
         * @static
         * @param {regulatormodule.IRegulatorStatus} message RegulatorStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorStatus message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorStatus} RegulatorStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusValue = $root.commonmodule.StatusValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.regulatorEventAndStatusANCR = $root.regulatormodule.RegulatorEventAndStatusANCR.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorStatus} RegulatorStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorStatus message.
         * @function verify
         * @memberof regulatormodule.RegulatorStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusValue != null && message.hasOwnProperty("statusValue")) {
                var error = $root.commonmodule.StatusValue.verify(message.statusValue);
                if (error)
                    return "statusValue." + error;
            }
            if (message.regulatorEventAndStatusANCR != null && message.hasOwnProperty("regulatorEventAndStatusANCR")) {
                var error = $root.regulatormodule.RegulatorEventAndStatusANCR.verify(message.regulatorEventAndStatusANCR);
                if (error)
                    return "regulatorEventAndStatusANCR." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorStatus} RegulatorStatus
         */
        RegulatorStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorStatus)
                return object;
            var message = new $root.regulatormodule.RegulatorStatus();
            if (object.statusValue != null) {
                if (typeof object.statusValue !== "object")
                    throw TypeError(".regulatormodule.RegulatorStatus.statusValue: object expected");
                message.statusValue = $root.commonmodule.StatusValue.fromObject(object.statusValue);
            }
            if (object.regulatorEventAndStatusANCR != null) {
                if (typeof object.regulatorEventAndStatusANCR !== "object")
                    throw TypeError(".regulatormodule.RegulatorStatus.regulatorEventAndStatusANCR: object expected");
                message.regulatorEventAndStatusANCR = $root.regulatormodule.RegulatorEventAndStatusANCR.fromObject(object.regulatorEventAndStatusANCR);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorStatus
         * @static
         * @param {regulatormodule.RegulatorStatus} message RegulatorStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusValue = null;
                object.regulatorEventAndStatusANCR = null;
            }
            if (message.statusValue != null && message.hasOwnProperty("statusValue"))
                object.statusValue = $root.commonmodule.StatusValue.toObject(message.statusValue, options);
            if (message.regulatorEventAndStatusANCR != null && message.hasOwnProperty("regulatorEventAndStatusANCR"))
                object.regulatorEventAndStatusANCR = $root.regulatormodule.RegulatorEventAndStatusANCR.toObject(message.regulatorEventAndStatusANCR, options);
            return object;
        };

        /**
         * Converts this RegulatorStatus to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorStatus;
    })();

    regulatormodule.RegulatorStatusProfile = (function() {

        /**
         * Properties of a RegulatorStatusProfile.
         * @memberof regulatormodule
         * @interface IRegulatorStatusProfile
         * @property {commonmodule.IStatusMessageInfo|null} [statusMessageInfo] RegulatorStatusProfile statusMessageInfo
         * @property {commonmodule.IIED|null} [ied] RegulatorStatusProfile ied
         * @property {regulatormodule.IRegulatorStatus|null} [regulatorStatus] RegulatorStatusProfile regulatorStatus
         * @property {regulatormodule.IRegulatorSystem|null} [regulatorSystem] RegulatorStatusProfile regulatorSystem
         */

        /**
         * Constructs a new RegulatorStatusProfile.
         * @memberof regulatormodule
         * @classdesc Represents a RegulatorStatusProfile.
         * @implements IRegulatorStatusProfile
         * @constructor
         * @param {regulatormodule.IRegulatorStatusProfile=} [properties] Properties to set
         */
        function RegulatorStatusProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RegulatorStatusProfile statusMessageInfo.
         * @member {commonmodule.IStatusMessageInfo|null|undefined} statusMessageInfo
         * @memberof regulatormodule.RegulatorStatusProfile
         * @instance
         */
        RegulatorStatusProfile.prototype.statusMessageInfo = null;

        /**
         * RegulatorStatusProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof regulatormodule.RegulatorStatusProfile
         * @instance
         */
        RegulatorStatusProfile.prototype.ied = null;

        /**
         * RegulatorStatusProfile regulatorStatus.
         * @member {regulatormodule.IRegulatorStatus|null|undefined} regulatorStatus
         * @memberof regulatormodule.RegulatorStatusProfile
         * @instance
         */
        RegulatorStatusProfile.prototype.regulatorStatus = null;

        /**
         * RegulatorStatusProfile regulatorSystem.
         * @member {regulatormodule.IRegulatorSystem|null|undefined} regulatorSystem
         * @memberof regulatormodule.RegulatorStatusProfile
         * @instance
         */
        RegulatorStatusProfile.prototype.regulatorSystem = null;

        /**
         * Creates a new RegulatorStatusProfile instance using the specified properties.
         * @function create
         * @memberof regulatormodule.RegulatorStatusProfile
         * @static
         * @param {regulatormodule.IRegulatorStatusProfile=} [properties] Properties to set
         * @returns {regulatormodule.RegulatorStatusProfile} RegulatorStatusProfile instance
         */
        RegulatorStatusProfile.create = function create(properties) {
            return new RegulatorStatusProfile(properties);
        };

        /**
         * Encodes the specified RegulatorStatusProfile message. Does not implicitly {@link regulatormodule.RegulatorStatusProfile.verify|verify} messages.
         * @function encode
         * @memberof regulatormodule.RegulatorStatusProfile
         * @static
         * @param {regulatormodule.IRegulatorStatusProfile} message RegulatorStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorStatusProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusMessageInfo != null && Object.hasOwnProperty.call(message, "statusMessageInfo"))
                $root.commonmodule.StatusMessageInfo.encode(message.statusMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.regulatorStatus != null && Object.hasOwnProperty.call(message, "regulatorStatus"))
                $root.regulatormodule.RegulatorStatus.encode(message.regulatorStatus, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.regulatorSystem != null && Object.hasOwnProperty.call(message, "regulatorSystem"))
                $root.regulatormodule.RegulatorSystem.encode(message.regulatorSystem, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified RegulatorStatusProfile message, length delimited. Does not implicitly {@link regulatormodule.RegulatorStatusProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof regulatormodule.RegulatorStatusProfile
         * @static
         * @param {regulatormodule.IRegulatorStatusProfile} message RegulatorStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RegulatorStatusProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RegulatorStatusProfile message from the specified reader or buffer.
         * @function decode
         * @memberof regulatormodule.RegulatorStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {regulatormodule.RegulatorStatusProfile} RegulatorStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorStatusProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.regulatormodule.RegulatorStatusProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.regulatorStatus = $root.regulatormodule.RegulatorStatus.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.regulatorSystem = $root.regulatormodule.RegulatorSystem.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RegulatorStatusProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof regulatormodule.RegulatorStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {regulatormodule.RegulatorStatusProfile} RegulatorStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RegulatorStatusProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RegulatorStatusProfile message.
         * @function verify
         * @memberof regulatormodule.RegulatorStatusProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RegulatorStatusProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo")) {
                var error = $root.commonmodule.StatusMessageInfo.verify(message.statusMessageInfo);
                if (error)
                    return "statusMessageInfo." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.regulatorStatus != null && message.hasOwnProperty("regulatorStatus")) {
                var error = $root.regulatormodule.RegulatorStatus.verify(message.regulatorStatus);
                if (error)
                    return "regulatorStatus." + error;
            }
            if (message.regulatorSystem != null && message.hasOwnProperty("regulatorSystem")) {
                var error = $root.regulatormodule.RegulatorSystem.verify(message.regulatorSystem);
                if (error)
                    return "regulatorSystem." + error;
            }
            return null;
        };

        /**
         * Creates a RegulatorStatusProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof regulatormodule.RegulatorStatusProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {regulatormodule.RegulatorStatusProfile} RegulatorStatusProfile
         */
        RegulatorStatusProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.regulatormodule.RegulatorStatusProfile)
                return object;
            var message = new $root.regulatormodule.RegulatorStatusProfile();
            if (object.statusMessageInfo != null) {
                if (typeof object.statusMessageInfo !== "object")
                    throw TypeError(".regulatormodule.RegulatorStatusProfile.statusMessageInfo: object expected");
                message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.fromObject(object.statusMessageInfo);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".regulatormodule.RegulatorStatusProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.regulatorStatus != null) {
                if (typeof object.regulatorStatus !== "object")
                    throw TypeError(".regulatormodule.RegulatorStatusProfile.regulatorStatus: object expected");
                message.regulatorStatus = $root.regulatormodule.RegulatorStatus.fromObject(object.regulatorStatus);
            }
            if (object.regulatorSystem != null) {
                if (typeof object.regulatorSystem !== "object")
                    throw TypeError(".regulatormodule.RegulatorStatusProfile.regulatorSystem: object expected");
                message.regulatorSystem = $root.regulatormodule.RegulatorSystem.fromObject(object.regulatorSystem);
            }
            return message;
        };

        /**
         * Creates a plain object from a RegulatorStatusProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof regulatormodule.RegulatorStatusProfile
         * @static
         * @param {regulatormodule.RegulatorStatusProfile} message RegulatorStatusProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RegulatorStatusProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusMessageInfo = null;
                object.ied = null;
                object.regulatorStatus = null;
                object.regulatorSystem = null;
            }
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo"))
                object.statusMessageInfo = $root.commonmodule.StatusMessageInfo.toObject(message.statusMessageInfo, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.regulatorStatus != null && message.hasOwnProperty("regulatorStatus"))
                object.regulatorStatus = $root.regulatormodule.RegulatorStatus.toObject(message.regulatorStatus, options);
            if (message.regulatorSystem != null && message.hasOwnProperty("regulatorSystem"))
                object.regulatorSystem = $root.regulatormodule.RegulatorSystem.toObject(message.regulatorSystem, options);
            return object;
        };

        /**
         * Converts this RegulatorStatusProfile to JSON.
         * @function toJSON
         * @memberof regulatormodule.RegulatorStatusProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RegulatorStatusProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RegulatorStatusProfile;
    })();

    return regulatormodule;
})();

$root.essmodule = (function() {

    /**
     * Namespace essmodule.
     * @exports essmodule
     * @namespace
     */
    var essmodule = {};

    essmodule.EssEventZBAT = (function() {

        /**
         * Properties of an EssEventZBAT.
         * @memberof essmodule
         * @interface IEssEventZBAT
         * @property {commonmodule.ILogicalNodeForEventAndStatus|null} [logicalNodeForEventAndStatus] EssEventZBAT logicalNodeForEventAndStatus
         * @property {commonmodule.IStatusSPS|null} [BatHi] EssEventZBAT BatHi
         * @property {commonmodule.IStatusSPS|null} [BatLo] EssEventZBAT BatLo
         * @property {commonmodule.IStatusSPS|null} [BatSt] EssEventZBAT BatSt
         * @property {commonmodule.IMV|null} [Soc] EssEventZBAT Soc
         * @property {commonmodule.IStatusSPS|null} [Stdby] EssEventZBAT Stdby
         */

        /**
         * Constructs a new EssEventZBAT.
         * @memberof essmodule
         * @classdesc Represents an EssEventZBAT.
         * @implements IEssEventZBAT
         * @constructor
         * @param {essmodule.IEssEventZBAT=} [properties] Properties to set
         */
        function EssEventZBAT(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EssEventZBAT logicalNodeForEventAndStatus.
         * @member {commonmodule.ILogicalNodeForEventAndStatus|null|undefined} logicalNodeForEventAndStatus
         * @memberof essmodule.EssEventZBAT
         * @instance
         */
        EssEventZBAT.prototype.logicalNodeForEventAndStatus = null;

        /**
         * EssEventZBAT BatHi.
         * @member {commonmodule.IStatusSPS|null|undefined} BatHi
         * @memberof essmodule.EssEventZBAT
         * @instance
         */
        EssEventZBAT.prototype.BatHi = null;

        /**
         * EssEventZBAT BatLo.
         * @member {commonmodule.IStatusSPS|null|undefined} BatLo
         * @memberof essmodule.EssEventZBAT
         * @instance
         */
        EssEventZBAT.prototype.BatLo = null;

        /**
         * EssEventZBAT BatSt.
         * @member {commonmodule.IStatusSPS|null|undefined} BatSt
         * @memberof essmodule.EssEventZBAT
         * @instance
         */
        EssEventZBAT.prototype.BatSt = null;

        /**
         * EssEventZBAT Soc.
         * @member {commonmodule.IMV|null|undefined} Soc
         * @memberof essmodule.EssEventZBAT
         * @instance
         */
        EssEventZBAT.prototype.Soc = null;

        /**
         * EssEventZBAT Stdby.
         * @member {commonmodule.IStatusSPS|null|undefined} Stdby
         * @memberof essmodule.EssEventZBAT
         * @instance
         */
        EssEventZBAT.prototype.Stdby = null;

        /**
         * Creates a new EssEventZBAT instance using the specified properties.
         * @function create
         * @memberof essmodule.EssEventZBAT
         * @static
         * @param {essmodule.IEssEventZBAT=} [properties] Properties to set
         * @returns {essmodule.EssEventZBAT} EssEventZBAT instance
         */
        EssEventZBAT.create = function create(properties) {
            return new EssEventZBAT(properties);
        };

        /**
         * Encodes the specified EssEventZBAT message. Does not implicitly {@link essmodule.EssEventZBAT.verify|verify} messages.
         * @function encode
         * @memberof essmodule.EssEventZBAT
         * @static
         * @param {essmodule.IEssEventZBAT} message EssEventZBAT message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EssEventZBAT.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForEventAndStatus != null && Object.hasOwnProperty.call(message, "logicalNodeForEventAndStatus"))
                $root.commonmodule.LogicalNodeForEventAndStatus.encode(message.logicalNodeForEventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.BatHi != null && Object.hasOwnProperty.call(message, "BatHi"))
                $root.commonmodule.StatusSPS.encode(message.BatHi, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.BatLo != null && Object.hasOwnProperty.call(message, "BatLo"))
                $root.commonmodule.StatusSPS.encode(message.BatLo, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.BatSt != null && Object.hasOwnProperty.call(message, "BatSt"))
                $root.commonmodule.StatusSPS.encode(message.BatSt, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.Soc != null && Object.hasOwnProperty.call(message, "Soc"))
                $root.commonmodule.MV.encode(message.Soc, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.Stdby != null && Object.hasOwnProperty.call(message, "Stdby"))
                $root.commonmodule.StatusSPS.encode(message.Stdby, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EssEventZBAT message, length delimited. Does not implicitly {@link essmodule.EssEventZBAT.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.EssEventZBAT
         * @static
         * @param {essmodule.IEssEventZBAT} message EssEventZBAT message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EssEventZBAT.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EssEventZBAT message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.EssEventZBAT
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.EssEventZBAT} EssEventZBAT
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EssEventZBAT.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.EssEventZBAT();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.BatHi = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.BatLo = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.BatSt = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.Soc = $root.commonmodule.MV.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.Stdby = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EssEventZBAT message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.EssEventZBAT
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.EssEventZBAT} EssEventZBAT
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EssEventZBAT.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EssEventZBAT message.
         * @function verify
         * @memberof essmodule.EssEventZBAT
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EssEventZBAT.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus")) {
                var error = $root.commonmodule.LogicalNodeForEventAndStatus.verify(message.logicalNodeForEventAndStatus);
                if (error)
                    return "logicalNodeForEventAndStatus." + error;
            }
            if (message.BatHi != null && message.hasOwnProperty("BatHi")) {
                var error = $root.commonmodule.StatusSPS.verify(message.BatHi);
                if (error)
                    return "BatHi." + error;
            }
            if (message.BatLo != null && message.hasOwnProperty("BatLo")) {
                var error = $root.commonmodule.StatusSPS.verify(message.BatLo);
                if (error)
                    return "BatLo." + error;
            }
            if (message.BatSt != null && message.hasOwnProperty("BatSt")) {
                var error = $root.commonmodule.StatusSPS.verify(message.BatSt);
                if (error)
                    return "BatSt." + error;
            }
            if (message.Soc != null && message.hasOwnProperty("Soc")) {
                var error = $root.commonmodule.MV.verify(message.Soc);
                if (error)
                    return "Soc." + error;
            }
            if (message.Stdby != null && message.hasOwnProperty("Stdby")) {
                var error = $root.commonmodule.StatusSPS.verify(message.Stdby);
                if (error)
                    return "Stdby." + error;
            }
            return null;
        };

        /**
         * Creates an EssEventZBAT message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.EssEventZBAT
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.EssEventZBAT} EssEventZBAT
         */
        EssEventZBAT.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.EssEventZBAT)
                return object;
            var message = new $root.essmodule.EssEventZBAT();
            if (object.logicalNodeForEventAndStatus != null) {
                if (typeof object.logicalNodeForEventAndStatus !== "object")
                    throw TypeError(".essmodule.EssEventZBAT.logicalNodeForEventAndStatus: object expected");
                message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.fromObject(object.logicalNodeForEventAndStatus);
            }
            if (object.BatHi != null) {
                if (typeof object.BatHi !== "object")
                    throw TypeError(".essmodule.EssEventZBAT.BatHi: object expected");
                message.BatHi = $root.commonmodule.StatusSPS.fromObject(object.BatHi);
            }
            if (object.BatLo != null) {
                if (typeof object.BatLo !== "object")
                    throw TypeError(".essmodule.EssEventZBAT.BatLo: object expected");
                message.BatLo = $root.commonmodule.StatusSPS.fromObject(object.BatLo);
            }
            if (object.BatSt != null) {
                if (typeof object.BatSt !== "object")
                    throw TypeError(".essmodule.EssEventZBAT.BatSt: object expected");
                message.BatSt = $root.commonmodule.StatusSPS.fromObject(object.BatSt);
            }
            if (object.Soc != null) {
                if (typeof object.Soc !== "object")
                    throw TypeError(".essmodule.EssEventZBAT.Soc: object expected");
                message.Soc = $root.commonmodule.MV.fromObject(object.Soc);
            }
            if (object.Stdby != null) {
                if (typeof object.Stdby !== "object")
                    throw TypeError(".essmodule.EssEventZBAT.Stdby: object expected");
                message.Stdby = $root.commonmodule.StatusSPS.fromObject(object.Stdby);
            }
            return message;
        };

        /**
         * Creates a plain object from an EssEventZBAT message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.EssEventZBAT
         * @static
         * @param {essmodule.EssEventZBAT} message EssEventZBAT
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EssEventZBAT.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForEventAndStatus = null;
                object.BatHi = null;
                object.BatLo = null;
                object.BatSt = null;
                object.Soc = null;
                object.Stdby = null;
            }
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus"))
                object.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.toObject(message.logicalNodeForEventAndStatus, options);
            if (message.BatHi != null && message.hasOwnProperty("BatHi"))
                object.BatHi = $root.commonmodule.StatusSPS.toObject(message.BatHi, options);
            if (message.BatLo != null && message.hasOwnProperty("BatLo"))
                object.BatLo = $root.commonmodule.StatusSPS.toObject(message.BatLo, options);
            if (message.BatSt != null && message.hasOwnProperty("BatSt"))
                object.BatSt = $root.commonmodule.StatusSPS.toObject(message.BatSt, options);
            if (message.Soc != null && message.hasOwnProperty("Soc"))
                object.Soc = $root.commonmodule.MV.toObject(message.Soc, options);
            if (message.Stdby != null && message.hasOwnProperty("Stdby"))
                object.Stdby = $root.commonmodule.StatusSPS.toObject(message.Stdby, options);
            return object;
        };

        /**
         * Converts this EssEventZBAT to JSON.
         * @function toJSON
         * @memberof essmodule.EssEventZBAT
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EssEventZBAT.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EssEventZBAT;
    })();

    essmodule.FrequencyRegulation = (function() {

        /**
         * Properties of a FrequencyRegulation.
         * @memberof essmodule
         * @interface IFrequencyRegulation
         * @property {google.protobuf.IFloatValue|null} [frequencyDeadBandMinus] FrequencyRegulation frequencyDeadBandMinus
         * @property {google.protobuf.IFloatValue|null} [frequencyDeadBandPlus] FrequencyRegulation frequencyDeadBandPlus
         * @property {google.protobuf.IBoolValue|null} [frequencyRegulationCtl] FrequencyRegulation frequencyRegulationCtl
         * @property {google.protobuf.IFloatValue|null} [frequencySetPoint] FrequencyRegulation frequencySetPoint
         * @property {google.protobuf.IFloatValue|null} [gridFrequencyStableBandMinus] FrequencyRegulation gridFrequencyStableBandMinus
         * @property {google.protobuf.IFloatValue|null} [gridFrequencyStableBandPlus] FrequencyRegulation gridFrequencyStableBandPlus
         * @property {google.protobuf.IFloatValue|null} [overFrequencyDroop] FrequencyRegulation overFrequencyDroop
         * @property {google.protobuf.IFloatValue|null} [underFrequencyDroop] FrequencyRegulation underFrequencyDroop
         */

        /**
         * Constructs a new FrequencyRegulation.
         * @memberof essmodule
         * @classdesc Represents a FrequencyRegulation.
         * @implements IFrequencyRegulation
         * @constructor
         * @param {essmodule.IFrequencyRegulation=} [properties] Properties to set
         */
        function FrequencyRegulation(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * FrequencyRegulation frequencyDeadBandMinus.
         * @member {google.protobuf.IFloatValue|null|undefined} frequencyDeadBandMinus
         * @memberof essmodule.FrequencyRegulation
         * @instance
         */
        FrequencyRegulation.prototype.frequencyDeadBandMinus = null;

        /**
         * FrequencyRegulation frequencyDeadBandPlus.
         * @member {google.protobuf.IFloatValue|null|undefined} frequencyDeadBandPlus
         * @memberof essmodule.FrequencyRegulation
         * @instance
         */
        FrequencyRegulation.prototype.frequencyDeadBandPlus = null;

        /**
         * FrequencyRegulation frequencyRegulationCtl.
         * @member {google.protobuf.IBoolValue|null|undefined} frequencyRegulationCtl
         * @memberof essmodule.FrequencyRegulation
         * @instance
         */
        FrequencyRegulation.prototype.frequencyRegulationCtl = null;

        /**
         * FrequencyRegulation frequencySetPoint.
         * @member {google.protobuf.IFloatValue|null|undefined} frequencySetPoint
         * @memberof essmodule.FrequencyRegulation
         * @instance
         */
        FrequencyRegulation.prototype.frequencySetPoint = null;

        /**
         * FrequencyRegulation gridFrequencyStableBandMinus.
         * @member {google.protobuf.IFloatValue|null|undefined} gridFrequencyStableBandMinus
         * @memberof essmodule.FrequencyRegulation
         * @instance
         */
        FrequencyRegulation.prototype.gridFrequencyStableBandMinus = null;

        /**
         * FrequencyRegulation gridFrequencyStableBandPlus.
         * @member {google.protobuf.IFloatValue|null|undefined} gridFrequencyStableBandPlus
         * @memberof essmodule.FrequencyRegulation
         * @instance
         */
        FrequencyRegulation.prototype.gridFrequencyStableBandPlus = null;

        /**
         * FrequencyRegulation overFrequencyDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} overFrequencyDroop
         * @memberof essmodule.FrequencyRegulation
         * @instance
         */
        FrequencyRegulation.prototype.overFrequencyDroop = null;

        /**
         * FrequencyRegulation underFrequencyDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} underFrequencyDroop
         * @memberof essmodule.FrequencyRegulation
         * @instance
         */
        FrequencyRegulation.prototype.underFrequencyDroop = null;

        /**
         * Creates a new FrequencyRegulation instance using the specified properties.
         * @function create
         * @memberof essmodule.FrequencyRegulation
         * @static
         * @param {essmodule.IFrequencyRegulation=} [properties] Properties to set
         * @returns {essmodule.FrequencyRegulation} FrequencyRegulation instance
         */
        FrequencyRegulation.create = function create(properties) {
            return new FrequencyRegulation(properties);
        };

        /**
         * Encodes the specified FrequencyRegulation message. Does not implicitly {@link essmodule.FrequencyRegulation.verify|verify} messages.
         * @function encode
         * @memberof essmodule.FrequencyRegulation
         * @static
         * @param {essmodule.IFrequencyRegulation} message FrequencyRegulation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FrequencyRegulation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.frequencyDeadBandMinus != null && Object.hasOwnProperty.call(message, "frequencyDeadBandMinus"))
                $root.google.protobuf.FloatValue.encode(message.frequencyDeadBandMinus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.frequencyDeadBandPlus != null && Object.hasOwnProperty.call(message, "frequencyDeadBandPlus"))
                $root.google.protobuf.FloatValue.encode(message.frequencyDeadBandPlus, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.frequencyRegulationCtl != null && Object.hasOwnProperty.call(message, "frequencyRegulationCtl"))
                $root.google.protobuf.BoolValue.encode(message.frequencyRegulationCtl, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.frequencySetPoint != null && Object.hasOwnProperty.call(message, "frequencySetPoint"))
                $root.google.protobuf.FloatValue.encode(message.frequencySetPoint, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.gridFrequencyStableBandMinus != null && Object.hasOwnProperty.call(message, "gridFrequencyStableBandMinus"))
                $root.google.protobuf.FloatValue.encode(message.gridFrequencyStableBandMinus, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.gridFrequencyStableBandPlus != null && Object.hasOwnProperty.call(message, "gridFrequencyStableBandPlus"))
                $root.google.protobuf.FloatValue.encode(message.gridFrequencyStableBandPlus, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.overFrequencyDroop != null && Object.hasOwnProperty.call(message, "overFrequencyDroop"))
                $root.google.protobuf.FloatValue.encode(message.overFrequencyDroop, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.underFrequencyDroop != null && Object.hasOwnProperty.call(message, "underFrequencyDroop"))
                $root.google.protobuf.FloatValue.encode(message.underFrequencyDroop, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified FrequencyRegulation message, length delimited. Does not implicitly {@link essmodule.FrequencyRegulation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.FrequencyRegulation
         * @static
         * @param {essmodule.IFrequencyRegulation} message FrequencyRegulation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        FrequencyRegulation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a FrequencyRegulation message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.FrequencyRegulation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.FrequencyRegulation} FrequencyRegulation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FrequencyRegulation.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.FrequencyRegulation();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.frequencyDeadBandMinus = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.frequencyDeadBandPlus = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.frequencyRegulationCtl = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.frequencySetPoint = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.gridFrequencyStableBandMinus = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.gridFrequencyStableBandPlus = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.overFrequencyDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.underFrequencyDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a FrequencyRegulation message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.FrequencyRegulation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.FrequencyRegulation} FrequencyRegulation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        FrequencyRegulation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a FrequencyRegulation message.
         * @function verify
         * @memberof essmodule.FrequencyRegulation
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        FrequencyRegulation.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.frequencyDeadBandMinus != null && message.hasOwnProperty("frequencyDeadBandMinus")) {
                var error = $root.google.protobuf.FloatValue.verify(message.frequencyDeadBandMinus);
                if (error)
                    return "frequencyDeadBandMinus." + error;
            }
            if (message.frequencyDeadBandPlus != null && message.hasOwnProperty("frequencyDeadBandPlus")) {
                var error = $root.google.protobuf.FloatValue.verify(message.frequencyDeadBandPlus);
                if (error)
                    return "frequencyDeadBandPlus." + error;
            }
            if (message.frequencyRegulationCtl != null && message.hasOwnProperty("frequencyRegulationCtl")) {
                var error = $root.google.protobuf.BoolValue.verify(message.frequencyRegulationCtl);
                if (error)
                    return "frequencyRegulationCtl." + error;
            }
            if (message.frequencySetPoint != null && message.hasOwnProperty("frequencySetPoint")) {
                var error = $root.google.protobuf.FloatValue.verify(message.frequencySetPoint);
                if (error)
                    return "frequencySetPoint." + error;
            }
            if (message.gridFrequencyStableBandMinus != null && message.hasOwnProperty("gridFrequencyStableBandMinus")) {
                var error = $root.google.protobuf.FloatValue.verify(message.gridFrequencyStableBandMinus);
                if (error)
                    return "gridFrequencyStableBandMinus." + error;
            }
            if (message.gridFrequencyStableBandPlus != null && message.hasOwnProperty("gridFrequencyStableBandPlus")) {
                var error = $root.google.protobuf.FloatValue.verify(message.gridFrequencyStableBandPlus);
                if (error)
                    return "gridFrequencyStableBandPlus." + error;
            }
            if (message.overFrequencyDroop != null && message.hasOwnProperty("overFrequencyDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.overFrequencyDroop);
                if (error)
                    return "overFrequencyDroop." + error;
            }
            if (message.underFrequencyDroop != null && message.hasOwnProperty("underFrequencyDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.underFrequencyDroop);
                if (error)
                    return "underFrequencyDroop." + error;
            }
            return null;
        };

        /**
         * Creates a FrequencyRegulation message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.FrequencyRegulation
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.FrequencyRegulation} FrequencyRegulation
         */
        FrequencyRegulation.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.FrequencyRegulation)
                return object;
            var message = new $root.essmodule.FrequencyRegulation();
            if (object.frequencyDeadBandMinus != null) {
                if (typeof object.frequencyDeadBandMinus !== "object")
                    throw TypeError(".essmodule.FrequencyRegulation.frequencyDeadBandMinus: object expected");
                message.frequencyDeadBandMinus = $root.google.protobuf.FloatValue.fromObject(object.frequencyDeadBandMinus);
            }
            if (object.frequencyDeadBandPlus != null) {
                if (typeof object.frequencyDeadBandPlus !== "object")
                    throw TypeError(".essmodule.FrequencyRegulation.frequencyDeadBandPlus: object expected");
                message.frequencyDeadBandPlus = $root.google.protobuf.FloatValue.fromObject(object.frequencyDeadBandPlus);
            }
            if (object.frequencyRegulationCtl != null) {
                if (typeof object.frequencyRegulationCtl !== "object")
                    throw TypeError(".essmodule.FrequencyRegulation.frequencyRegulationCtl: object expected");
                message.frequencyRegulationCtl = $root.google.protobuf.BoolValue.fromObject(object.frequencyRegulationCtl);
            }
            if (object.frequencySetPoint != null) {
                if (typeof object.frequencySetPoint !== "object")
                    throw TypeError(".essmodule.FrequencyRegulation.frequencySetPoint: object expected");
                message.frequencySetPoint = $root.google.protobuf.FloatValue.fromObject(object.frequencySetPoint);
            }
            if (object.gridFrequencyStableBandMinus != null) {
                if (typeof object.gridFrequencyStableBandMinus !== "object")
                    throw TypeError(".essmodule.FrequencyRegulation.gridFrequencyStableBandMinus: object expected");
                message.gridFrequencyStableBandMinus = $root.google.protobuf.FloatValue.fromObject(object.gridFrequencyStableBandMinus);
            }
            if (object.gridFrequencyStableBandPlus != null) {
                if (typeof object.gridFrequencyStableBandPlus !== "object")
                    throw TypeError(".essmodule.FrequencyRegulation.gridFrequencyStableBandPlus: object expected");
                message.gridFrequencyStableBandPlus = $root.google.protobuf.FloatValue.fromObject(object.gridFrequencyStableBandPlus);
            }
            if (object.overFrequencyDroop != null) {
                if (typeof object.overFrequencyDroop !== "object")
                    throw TypeError(".essmodule.FrequencyRegulation.overFrequencyDroop: object expected");
                message.overFrequencyDroop = $root.google.protobuf.FloatValue.fromObject(object.overFrequencyDroop);
            }
            if (object.underFrequencyDroop != null) {
                if (typeof object.underFrequencyDroop !== "object")
                    throw TypeError(".essmodule.FrequencyRegulation.underFrequencyDroop: object expected");
                message.underFrequencyDroop = $root.google.protobuf.FloatValue.fromObject(object.underFrequencyDroop);
            }
            return message;
        };

        /**
         * Creates a plain object from a FrequencyRegulation message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.FrequencyRegulation
         * @static
         * @param {essmodule.FrequencyRegulation} message FrequencyRegulation
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        FrequencyRegulation.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.frequencyDeadBandMinus = null;
                object.frequencyDeadBandPlus = null;
                object.frequencyRegulationCtl = null;
                object.frequencySetPoint = null;
                object.gridFrequencyStableBandMinus = null;
                object.gridFrequencyStableBandPlus = null;
                object.overFrequencyDroop = null;
                object.underFrequencyDroop = null;
            }
            if (message.frequencyDeadBandMinus != null && message.hasOwnProperty("frequencyDeadBandMinus"))
                object.frequencyDeadBandMinus = $root.google.protobuf.FloatValue.toObject(message.frequencyDeadBandMinus, options);
            if (message.frequencyDeadBandPlus != null && message.hasOwnProperty("frequencyDeadBandPlus"))
                object.frequencyDeadBandPlus = $root.google.protobuf.FloatValue.toObject(message.frequencyDeadBandPlus, options);
            if (message.frequencyRegulationCtl != null && message.hasOwnProperty("frequencyRegulationCtl"))
                object.frequencyRegulationCtl = $root.google.protobuf.BoolValue.toObject(message.frequencyRegulationCtl, options);
            if (message.frequencySetPoint != null && message.hasOwnProperty("frequencySetPoint"))
                object.frequencySetPoint = $root.google.protobuf.FloatValue.toObject(message.frequencySetPoint, options);
            if (message.gridFrequencyStableBandMinus != null && message.hasOwnProperty("gridFrequencyStableBandMinus"))
                object.gridFrequencyStableBandMinus = $root.google.protobuf.FloatValue.toObject(message.gridFrequencyStableBandMinus, options);
            if (message.gridFrequencyStableBandPlus != null && message.hasOwnProperty("gridFrequencyStableBandPlus"))
                object.gridFrequencyStableBandPlus = $root.google.protobuf.FloatValue.toObject(message.gridFrequencyStableBandPlus, options);
            if (message.overFrequencyDroop != null && message.hasOwnProperty("overFrequencyDroop"))
                object.overFrequencyDroop = $root.google.protobuf.FloatValue.toObject(message.overFrequencyDroop, options);
            if (message.underFrequencyDroop != null && message.hasOwnProperty("underFrequencyDroop"))
                object.underFrequencyDroop = $root.google.protobuf.FloatValue.toObject(message.underFrequencyDroop, options);
            return object;
        };

        /**
         * Converts this FrequencyRegulation to JSON.
         * @function toJSON
         * @memberof essmodule.FrequencyRegulation
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        FrequencyRegulation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return FrequencyRegulation;
    })();

    essmodule.PeakShaving = (function() {

        /**
         * Properties of a PeakShaving.
         * @memberof essmodule
         * @interface IPeakShaving
         * @property {google.protobuf.IFloatValue|null} [baseShavingLimit] PeakShaving baseShavingLimit
         * @property {google.protobuf.IBoolValue|null} [peakShavingCtl] PeakShaving peakShavingCtl
         * @property {google.protobuf.IFloatValue|null} [peakShavingLimit] PeakShaving peakShavingLimit
         * @property {google.protobuf.IFloatValue|null} [socManagementAllowedHighLimit] PeakShaving socManagementAllowedHighLimit
         * @property {google.protobuf.IFloatValue|null} [socManagementAllowedLowLimit] PeakShaving socManagementAllowedLowLimit
         */

        /**
         * Constructs a new PeakShaving.
         * @memberof essmodule
         * @classdesc Represents a PeakShaving.
         * @implements IPeakShaving
         * @constructor
         * @param {essmodule.IPeakShaving=} [properties] Properties to set
         */
        function PeakShaving(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PeakShaving baseShavingLimit.
         * @member {google.protobuf.IFloatValue|null|undefined} baseShavingLimit
         * @memberof essmodule.PeakShaving
         * @instance
         */
        PeakShaving.prototype.baseShavingLimit = null;

        /**
         * PeakShaving peakShavingCtl.
         * @member {google.protobuf.IBoolValue|null|undefined} peakShavingCtl
         * @memberof essmodule.PeakShaving
         * @instance
         */
        PeakShaving.prototype.peakShavingCtl = null;

        /**
         * PeakShaving peakShavingLimit.
         * @member {google.protobuf.IFloatValue|null|undefined} peakShavingLimit
         * @memberof essmodule.PeakShaving
         * @instance
         */
        PeakShaving.prototype.peakShavingLimit = null;

        /**
         * PeakShaving socManagementAllowedHighLimit.
         * @member {google.protobuf.IFloatValue|null|undefined} socManagementAllowedHighLimit
         * @memberof essmodule.PeakShaving
         * @instance
         */
        PeakShaving.prototype.socManagementAllowedHighLimit = null;

        /**
         * PeakShaving socManagementAllowedLowLimit.
         * @member {google.protobuf.IFloatValue|null|undefined} socManagementAllowedLowLimit
         * @memberof essmodule.PeakShaving
         * @instance
         */
        PeakShaving.prototype.socManagementAllowedLowLimit = null;

        /**
         * Creates a new PeakShaving instance using the specified properties.
         * @function create
         * @memberof essmodule.PeakShaving
         * @static
         * @param {essmodule.IPeakShaving=} [properties] Properties to set
         * @returns {essmodule.PeakShaving} PeakShaving instance
         */
        PeakShaving.create = function create(properties) {
            return new PeakShaving(properties);
        };

        /**
         * Encodes the specified PeakShaving message. Does not implicitly {@link essmodule.PeakShaving.verify|verify} messages.
         * @function encode
         * @memberof essmodule.PeakShaving
         * @static
         * @param {essmodule.IPeakShaving} message PeakShaving message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PeakShaving.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.baseShavingLimit != null && Object.hasOwnProperty.call(message, "baseShavingLimit"))
                $root.google.protobuf.FloatValue.encode(message.baseShavingLimit, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.peakShavingCtl != null && Object.hasOwnProperty.call(message, "peakShavingCtl"))
                $root.google.protobuf.BoolValue.encode(message.peakShavingCtl, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.peakShavingLimit != null && Object.hasOwnProperty.call(message, "peakShavingLimit"))
                $root.google.protobuf.FloatValue.encode(message.peakShavingLimit, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.socManagementAllowedHighLimit != null && Object.hasOwnProperty.call(message, "socManagementAllowedHighLimit"))
                $root.google.protobuf.FloatValue.encode(message.socManagementAllowedHighLimit, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.socManagementAllowedLowLimit != null && Object.hasOwnProperty.call(message, "socManagementAllowedLowLimit"))
                $root.google.protobuf.FloatValue.encode(message.socManagementAllowedLowLimit, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified PeakShaving message, length delimited. Does not implicitly {@link essmodule.PeakShaving.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.PeakShaving
         * @static
         * @param {essmodule.IPeakShaving} message PeakShaving message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PeakShaving.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PeakShaving message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.PeakShaving
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.PeakShaving} PeakShaving
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PeakShaving.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.PeakShaving();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.baseShavingLimit = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.peakShavingCtl = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.peakShavingLimit = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.socManagementAllowedHighLimit = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.socManagementAllowedLowLimit = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PeakShaving message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.PeakShaving
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.PeakShaving} PeakShaving
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PeakShaving.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PeakShaving message.
         * @function verify
         * @memberof essmodule.PeakShaving
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PeakShaving.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.baseShavingLimit != null && message.hasOwnProperty("baseShavingLimit")) {
                var error = $root.google.protobuf.FloatValue.verify(message.baseShavingLimit);
                if (error)
                    return "baseShavingLimit." + error;
            }
            if (message.peakShavingCtl != null && message.hasOwnProperty("peakShavingCtl")) {
                var error = $root.google.protobuf.BoolValue.verify(message.peakShavingCtl);
                if (error)
                    return "peakShavingCtl." + error;
            }
            if (message.peakShavingLimit != null && message.hasOwnProperty("peakShavingLimit")) {
                var error = $root.google.protobuf.FloatValue.verify(message.peakShavingLimit);
                if (error)
                    return "peakShavingLimit." + error;
            }
            if (message.socManagementAllowedHighLimit != null && message.hasOwnProperty("socManagementAllowedHighLimit")) {
                var error = $root.google.protobuf.FloatValue.verify(message.socManagementAllowedHighLimit);
                if (error)
                    return "socManagementAllowedHighLimit." + error;
            }
            if (message.socManagementAllowedLowLimit != null && message.hasOwnProperty("socManagementAllowedLowLimit")) {
                var error = $root.google.protobuf.FloatValue.verify(message.socManagementAllowedLowLimit);
                if (error)
                    return "socManagementAllowedLowLimit." + error;
            }
            return null;
        };

        /**
         * Creates a PeakShaving message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.PeakShaving
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.PeakShaving} PeakShaving
         */
        PeakShaving.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.PeakShaving)
                return object;
            var message = new $root.essmodule.PeakShaving();
            if (object.baseShavingLimit != null) {
                if (typeof object.baseShavingLimit !== "object")
                    throw TypeError(".essmodule.PeakShaving.baseShavingLimit: object expected");
                message.baseShavingLimit = $root.google.protobuf.FloatValue.fromObject(object.baseShavingLimit);
            }
            if (object.peakShavingCtl != null) {
                if (typeof object.peakShavingCtl !== "object")
                    throw TypeError(".essmodule.PeakShaving.peakShavingCtl: object expected");
                message.peakShavingCtl = $root.google.protobuf.BoolValue.fromObject(object.peakShavingCtl);
            }
            if (object.peakShavingLimit != null) {
                if (typeof object.peakShavingLimit !== "object")
                    throw TypeError(".essmodule.PeakShaving.peakShavingLimit: object expected");
                message.peakShavingLimit = $root.google.protobuf.FloatValue.fromObject(object.peakShavingLimit);
            }
            if (object.socManagementAllowedHighLimit != null) {
                if (typeof object.socManagementAllowedHighLimit !== "object")
                    throw TypeError(".essmodule.PeakShaving.socManagementAllowedHighLimit: object expected");
                message.socManagementAllowedHighLimit = $root.google.protobuf.FloatValue.fromObject(object.socManagementAllowedHighLimit);
            }
            if (object.socManagementAllowedLowLimit != null) {
                if (typeof object.socManagementAllowedLowLimit !== "object")
                    throw TypeError(".essmodule.PeakShaving.socManagementAllowedLowLimit: object expected");
                message.socManagementAllowedLowLimit = $root.google.protobuf.FloatValue.fromObject(object.socManagementAllowedLowLimit);
            }
            return message;
        };

        /**
         * Creates a plain object from a PeakShaving message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.PeakShaving
         * @static
         * @param {essmodule.PeakShaving} message PeakShaving
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PeakShaving.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.baseShavingLimit = null;
                object.peakShavingCtl = null;
                object.peakShavingLimit = null;
                object.socManagementAllowedHighLimit = null;
                object.socManagementAllowedLowLimit = null;
            }
            if (message.baseShavingLimit != null && message.hasOwnProperty("baseShavingLimit"))
                object.baseShavingLimit = $root.google.protobuf.FloatValue.toObject(message.baseShavingLimit, options);
            if (message.peakShavingCtl != null && message.hasOwnProperty("peakShavingCtl"))
                object.peakShavingCtl = $root.google.protobuf.BoolValue.toObject(message.peakShavingCtl, options);
            if (message.peakShavingLimit != null && message.hasOwnProperty("peakShavingLimit"))
                object.peakShavingLimit = $root.google.protobuf.FloatValue.toObject(message.peakShavingLimit, options);
            if (message.socManagementAllowedHighLimit != null && message.hasOwnProperty("socManagementAllowedHighLimit"))
                object.socManagementAllowedHighLimit = $root.google.protobuf.FloatValue.toObject(message.socManagementAllowedHighLimit, options);
            if (message.socManagementAllowedLowLimit != null && message.hasOwnProperty("socManagementAllowedLowLimit"))
                object.socManagementAllowedLowLimit = $root.google.protobuf.FloatValue.toObject(message.socManagementAllowedLowLimit, options);
            return object;
        };

        /**
         * Converts this PeakShaving to JSON.
         * @function toJSON
         * @memberof essmodule.PeakShaving
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PeakShaving.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PeakShaving;
    })();

    essmodule.SocLimit = (function() {

        /**
         * Properties of a SocLimit.
         * @memberof essmodule
         * @interface ISocLimit
         * @property {google.protobuf.IFloatValue|null} [socHighLimit] SocLimit socHighLimit
         * @property {google.protobuf.IFloatValue|null} [socHighLimitHysteresis] SocLimit socHighLimitHysteresis
         * @property {google.protobuf.IBoolValue|null} [socLimitCtl] SocLimit socLimitCtl
         * @property {google.protobuf.IFloatValue|null} [socLowLimit] SocLimit socLowLimit
         * @property {google.protobuf.IFloatValue|null} [socLowLimitHysteresis] SocLimit socLowLimitHysteresis
         */

        /**
         * Constructs a new SocLimit.
         * @memberof essmodule
         * @classdesc Represents a SocLimit.
         * @implements ISocLimit
         * @constructor
         * @param {essmodule.ISocLimit=} [properties] Properties to set
         */
        function SocLimit(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SocLimit socHighLimit.
         * @member {google.protobuf.IFloatValue|null|undefined} socHighLimit
         * @memberof essmodule.SocLimit
         * @instance
         */
        SocLimit.prototype.socHighLimit = null;

        /**
         * SocLimit socHighLimitHysteresis.
         * @member {google.protobuf.IFloatValue|null|undefined} socHighLimitHysteresis
         * @memberof essmodule.SocLimit
         * @instance
         */
        SocLimit.prototype.socHighLimitHysteresis = null;

        /**
         * SocLimit socLimitCtl.
         * @member {google.protobuf.IBoolValue|null|undefined} socLimitCtl
         * @memberof essmodule.SocLimit
         * @instance
         */
        SocLimit.prototype.socLimitCtl = null;

        /**
         * SocLimit socLowLimit.
         * @member {google.protobuf.IFloatValue|null|undefined} socLowLimit
         * @memberof essmodule.SocLimit
         * @instance
         */
        SocLimit.prototype.socLowLimit = null;

        /**
         * SocLimit socLowLimitHysteresis.
         * @member {google.protobuf.IFloatValue|null|undefined} socLowLimitHysteresis
         * @memberof essmodule.SocLimit
         * @instance
         */
        SocLimit.prototype.socLowLimitHysteresis = null;

        /**
         * Creates a new SocLimit instance using the specified properties.
         * @function create
         * @memberof essmodule.SocLimit
         * @static
         * @param {essmodule.ISocLimit=} [properties] Properties to set
         * @returns {essmodule.SocLimit} SocLimit instance
         */
        SocLimit.create = function create(properties) {
            return new SocLimit(properties);
        };

        /**
         * Encodes the specified SocLimit message. Does not implicitly {@link essmodule.SocLimit.verify|verify} messages.
         * @function encode
         * @memberof essmodule.SocLimit
         * @static
         * @param {essmodule.ISocLimit} message SocLimit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SocLimit.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.socHighLimit != null && Object.hasOwnProperty.call(message, "socHighLimit"))
                $root.google.protobuf.FloatValue.encode(message.socHighLimit, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.socHighLimitHysteresis != null && Object.hasOwnProperty.call(message, "socHighLimitHysteresis"))
                $root.google.protobuf.FloatValue.encode(message.socHighLimitHysteresis, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.socLimitCtl != null && Object.hasOwnProperty.call(message, "socLimitCtl"))
                $root.google.protobuf.BoolValue.encode(message.socLimitCtl, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.socLowLimit != null && Object.hasOwnProperty.call(message, "socLowLimit"))
                $root.google.protobuf.FloatValue.encode(message.socLowLimit, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.socLowLimitHysteresis != null && Object.hasOwnProperty.call(message, "socLowLimitHysteresis"))
                $root.google.protobuf.FloatValue.encode(message.socLowLimitHysteresis, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SocLimit message, length delimited. Does not implicitly {@link essmodule.SocLimit.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.SocLimit
         * @static
         * @param {essmodule.ISocLimit} message SocLimit message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SocLimit.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SocLimit message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.SocLimit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.SocLimit} SocLimit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SocLimit.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.SocLimit();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.socHighLimit = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.socHighLimitHysteresis = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.socLimitCtl = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.socLowLimit = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.socLowLimitHysteresis = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SocLimit message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.SocLimit
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.SocLimit} SocLimit
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SocLimit.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SocLimit message.
         * @function verify
         * @memberof essmodule.SocLimit
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SocLimit.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.socHighLimit != null && message.hasOwnProperty("socHighLimit")) {
                var error = $root.google.protobuf.FloatValue.verify(message.socHighLimit);
                if (error)
                    return "socHighLimit." + error;
            }
            if (message.socHighLimitHysteresis != null && message.hasOwnProperty("socHighLimitHysteresis")) {
                var error = $root.google.protobuf.FloatValue.verify(message.socHighLimitHysteresis);
                if (error)
                    return "socHighLimitHysteresis." + error;
            }
            if (message.socLimitCtl != null && message.hasOwnProperty("socLimitCtl")) {
                var error = $root.google.protobuf.BoolValue.verify(message.socLimitCtl);
                if (error)
                    return "socLimitCtl." + error;
            }
            if (message.socLowLimit != null && message.hasOwnProperty("socLowLimit")) {
                var error = $root.google.protobuf.FloatValue.verify(message.socLowLimit);
                if (error)
                    return "socLowLimit." + error;
            }
            if (message.socLowLimitHysteresis != null && message.hasOwnProperty("socLowLimitHysteresis")) {
                var error = $root.google.protobuf.FloatValue.verify(message.socLowLimitHysteresis);
                if (error)
                    return "socLowLimitHysteresis." + error;
            }
            return null;
        };

        /**
         * Creates a SocLimit message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.SocLimit
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.SocLimit} SocLimit
         */
        SocLimit.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.SocLimit)
                return object;
            var message = new $root.essmodule.SocLimit();
            if (object.socHighLimit != null) {
                if (typeof object.socHighLimit !== "object")
                    throw TypeError(".essmodule.SocLimit.socHighLimit: object expected");
                message.socHighLimit = $root.google.protobuf.FloatValue.fromObject(object.socHighLimit);
            }
            if (object.socHighLimitHysteresis != null) {
                if (typeof object.socHighLimitHysteresis !== "object")
                    throw TypeError(".essmodule.SocLimit.socHighLimitHysteresis: object expected");
                message.socHighLimitHysteresis = $root.google.protobuf.FloatValue.fromObject(object.socHighLimitHysteresis);
            }
            if (object.socLimitCtl != null) {
                if (typeof object.socLimitCtl !== "object")
                    throw TypeError(".essmodule.SocLimit.socLimitCtl: object expected");
                message.socLimitCtl = $root.google.protobuf.BoolValue.fromObject(object.socLimitCtl);
            }
            if (object.socLowLimit != null) {
                if (typeof object.socLowLimit !== "object")
                    throw TypeError(".essmodule.SocLimit.socLowLimit: object expected");
                message.socLowLimit = $root.google.protobuf.FloatValue.fromObject(object.socLowLimit);
            }
            if (object.socLowLimitHysteresis != null) {
                if (typeof object.socLowLimitHysteresis !== "object")
                    throw TypeError(".essmodule.SocLimit.socLowLimitHysteresis: object expected");
                message.socLowLimitHysteresis = $root.google.protobuf.FloatValue.fromObject(object.socLowLimitHysteresis);
            }
            return message;
        };

        /**
         * Creates a plain object from a SocLimit message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.SocLimit
         * @static
         * @param {essmodule.SocLimit} message SocLimit
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SocLimit.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.socHighLimit = null;
                object.socHighLimitHysteresis = null;
                object.socLimitCtl = null;
                object.socLowLimit = null;
                object.socLowLimitHysteresis = null;
            }
            if (message.socHighLimit != null && message.hasOwnProperty("socHighLimit"))
                object.socHighLimit = $root.google.protobuf.FloatValue.toObject(message.socHighLimit, options);
            if (message.socHighLimitHysteresis != null && message.hasOwnProperty("socHighLimitHysteresis"))
                object.socHighLimitHysteresis = $root.google.protobuf.FloatValue.toObject(message.socHighLimitHysteresis, options);
            if (message.socLimitCtl != null && message.hasOwnProperty("socLimitCtl"))
                object.socLimitCtl = $root.google.protobuf.BoolValue.toObject(message.socLimitCtl, options);
            if (message.socLowLimit != null && message.hasOwnProperty("socLowLimit"))
                object.socLowLimit = $root.google.protobuf.FloatValue.toObject(message.socLowLimit, options);
            if (message.socLowLimitHysteresis != null && message.hasOwnProperty("socLowLimitHysteresis"))
                object.socLowLimitHysteresis = $root.google.protobuf.FloatValue.toObject(message.socLowLimitHysteresis, options);
            return object;
        };

        /**
         * Converts this SocLimit to JSON.
         * @function toJSON
         * @memberof essmodule.SocLimit
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SocLimit.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SocLimit;
    })();

    essmodule.SOCManagement = (function() {

        /**
         * Properties of a SOCManagement.
         * @memberof essmodule
         * @interface ISOCManagement
         * @property {google.protobuf.IFloatValue|null} [socDeadBandMinus] SOCManagement socDeadBandMinus
         * @property {google.protobuf.IFloatValue|null} [socDeadBandPlus] SOCManagement socDeadBandPlus
         * @property {google.protobuf.IBoolValue|null} [socManagementCtl] SOCManagement socManagementCtl
         * @property {google.protobuf.IFloatValue|null} [socPowerSetPoint] SOCManagement socPowerSetPoint
         * @property {google.protobuf.IFloatValue|null} [socSetPoint] SOCManagement socSetPoint
         */

        /**
         * Constructs a new SOCManagement.
         * @memberof essmodule
         * @classdesc Represents a SOCManagement.
         * @implements ISOCManagement
         * @constructor
         * @param {essmodule.ISOCManagement=} [properties] Properties to set
         */
        function SOCManagement(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SOCManagement socDeadBandMinus.
         * @member {google.protobuf.IFloatValue|null|undefined} socDeadBandMinus
         * @memberof essmodule.SOCManagement
         * @instance
         */
        SOCManagement.prototype.socDeadBandMinus = null;

        /**
         * SOCManagement socDeadBandPlus.
         * @member {google.protobuf.IFloatValue|null|undefined} socDeadBandPlus
         * @memberof essmodule.SOCManagement
         * @instance
         */
        SOCManagement.prototype.socDeadBandPlus = null;

        /**
         * SOCManagement socManagementCtl.
         * @member {google.protobuf.IBoolValue|null|undefined} socManagementCtl
         * @memberof essmodule.SOCManagement
         * @instance
         */
        SOCManagement.prototype.socManagementCtl = null;

        /**
         * SOCManagement socPowerSetPoint.
         * @member {google.protobuf.IFloatValue|null|undefined} socPowerSetPoint
         * @memberof essmodule.SOCManagement
         * @instance
         */
        SOCManagement.prototype.socPowerSetPoint = null;

        /**
         * SOCManagement socSetPoint.
         * @member {google.protobuf.IFloatValue|null|undefined} socSetPoint
         * @memberof essmodule.SOCManagement
         * @instance
         */
        SOCManagement.prototype.socSetPoint = null;

        /**
         * Creates a new SOCManagement instance using the specified properties.
         * @function create
         * @memberof essmodule.SOCManagement
         * @static
         * @param {essmodule.ISOCManagement=} [properties] Properties to set
         * @returns {essmodule.SOCManagement} SOCManagement instance
         */
        SOCManagement.create = function create(properties) {
            return new SOCManagement(properties);
        };

        /**
         * Encodes the specified SOCManagement message. Does not implicitly {@link essmodule.SOCManagement.verify|verify} messages.
         * @function encode
         * @memberof essmodule.SOCManagement
         * @static
         * @param {essmodule.ISOCManagement} message SOCManagement message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SOCManagement.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.socDeadBandMinus != null && Object.hasOwnProperty.call(message, "socDeadBandMinus"))
                $root.google.protobuf.FloatValue.encode(message.socDeadBandMinus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.socDeadBandPlus != null && Object.hasOwnProperty.call(message, "socDeadBandPlus"))
                $root.google.protobuf.FloatValue.encode(message.socDeadBandPlus, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.socManagementCtl != null && Object.hasOwnProperty.call(message, "socManagementCtl"))
                $root.google.protobuf.BoolValue.encode(message.socManagementCtl, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.socPowerSetPoint != null && Object.hasOwnProperty.call(message, "socPowerSetPoint"))
                $root.google.protobuf.FloatValue.encode(message.socPowerSetPoint, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.socSetPoint != null && Object.hasOwnProperty.call(message, "socSetPoint"))
                $root.google.protobuf.FloatValue.encode(message.socSetPoint, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified SOCManagement message, length delimited. Does not implicitly {@link essmodule.SOCManagement.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.SOCManagement
         * @static
         * @param {essmodule.ISOCManagement} message SOCManagement message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SOCManagement.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SOCManagement message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.SOCManagement
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.SOCManagement} SOCManagement
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SOCManagement.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.SOCManagement();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.socDeadBandMinus = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.socDeadBandPlus = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.socManagementCtl = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.socPowerSetPoint = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.socSetPoint = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SOCManagement message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.SOCManagement
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.SOCManagement} SOCManagement
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SOCManagement.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SOCManagement message.
         * @function verify
         * @memberof essmodule.SOCManagement
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SOCManagement.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.socDeadBandMinus != null && message.hasOwnProperty("socDeadBandMinus")) {
                var error = $root.google.protobuf.FloatValue.verify(message.socDeadBandMinus);
                if (error)
                    return "socDeadBandMinus." + error;
            }
            if (message.socDeadBandPlus != null && message.hasOwnProperty("socDeadBandPlus")) {
                var error = $root.google.protobuf.FloatValue.verify(message.socDeadBandPlus);
                if (error)
                    return "socDeadBandPlus." + error;
            }
            if (message.socManagementCtl != null && message.hasOwnProperty("socManagementCtl")) {
                var error = $root.google.protobuf.BoolValue.verify(message.socManagementCtl);
                if (error)
                    return "socManagementCtl." + error;
            }
            if (message.socPowerSetPoint != null && message.hasOwnProperty("socPowerSetPoint")) {
                var error = $root.google.protobuf.FloatValue.verify(message.socPowerSetPoint);
                if (error)
                    return "socPowerSetPoint." + error;
            }
            if (message.socSetPoint != null && message.hasOwnProperty("socSetPoint")) {
                var error = $root.google.protobuf.FloatValue.verify(message.socSetPoint);
                if (error)
                    return "socSetPoint." + error;
            }
            return null;
        };

        /**
         * Creates a SOCManagement message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.SOCManagement
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.SOCManagement} SOCManagement
         */
        SOCManagement.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.SOCManagement)
                return object;
            var message = new $root.essmodule.SOCManagement();
            if (object.socDeadBandMinus != null) {
                if (typeof object.socDeadBandMinus !== "object")
                    throw TypeError(".essmodule.SOCManagement.socDeadBandMinus: object expected");
                message.socDeadBandMinus = $root.google.protobuf.FloatValue.fromObject(object.socDeadBandMinus);
            }
            if (object.socDeadBandPlus != null) {
                if (typeof object.socDeadBandPlus !== "object")
                    throw TypeError(".essmodule.SOCManagement.socDeadBandPlus: object expected");
                message.socDeadBandPlus = $root.google.protobuf.FloatValue.fromObject(object.socDeadBandPlus);
            }
            if (object.socManagementCtl != null) {
                if (typeof object.socManagementCtl !== "object")
                    throw TypeError(".essmodule.SOCManagement.socManagementCtl: object expected");
                message.socManagementCtl = $root.google.protobuf.BoolValue.fromObject(object.socManagementCtl);
            }
            if (object.socPowerSetPoint != null) {
                if (typeof object.socPowerSetPoint !== "object")
                    throw TypeError(".essmodule.SOCManagement.socPowerSetPoint: object expected");
                message.socPowerSetPoint = $root.google.protobuf.FloatValue.fromObject(object.socPowerSetPoint);
            }
            if (object.socSetPoint != null) {
                if (typeof object.socSetPoint !== "object")
                    throw TypeError(".essmodule.SOCManagement.socSetPoint: object expected");
                message.socSetPoint = $root.google.protobuf.FloatValue.fromObject(object.socSetPoint);
            }
            return message;
        };

        /**
         * Creates a plain object from a SOCManagement message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.SOCManagement
         * @static
         * @param {essmodule.SOCManagement} message SOCManagement
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SOCManagement.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.socDeadBandMinus = null;
                object.socDeadBandPlus = null;
                object.socManagementCtl = null;
                object.socPowerSetPoint = null;
                object.socSetPoint = null;
            }
            if (message.socDeadBandMinus != null && message.hasOwnProperty("socDeadBandMinus"))
                object.socDeadBandMinus = $root.google.protobuf.FloatValue.toObject(message.socDeadBandMinus, options);
            if (message.socDeadBandPlus != null && message.hasOwnProperty("socDeadBandPlus"))
                object.socDeadBandPlus = $root.google.protobuf.FloatValue.toObject(message.socDeadBandPlus, options);
            if (message.socManagementCtl != null && message.hasOwnProperty("socManagementCtl"))
                object.socManagementCtl = $root.google.protobuf.BoolValue.toObject(message.socManagementCtl, options);
            if (message.socPowerSetPoint != null && message.hasOwnProperty("socPowerSetPoint"))
                object.socPowerSetPoint = $root.google.protobuf.FloatValue.toObject(message.socPowerSetPoint, options);
            if (message.socSetPoint != null && message.hasOwnProperty("socSetPoint"))
                object.socSetPoint = $root.google.protobuf.FloatValue.toObject(message.socSetPoint, options);
            return object;
        };

        /**
         * Converts this SOCManagement to JSON.
         * @function toJSON
         * @memberof essmodule.SOCManagement
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SOCManagement.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SOCManagement;
    })();

    essmodule.VoltageRegulation = (function() {

        /**
         * Properties of a VoltageRegulation.
         * @memberof essmodule
         * @interface IVoltageRegulation
         * @property {google.protobuf.IFloatValue|null} [overVoltageDroop] VoltageRegulation overVoltageDroop
         * @property {google.protobuf.IFloatValue|null} [underVoltageDroop] VoltageRegulation underVoltageDroop
         * @property {google.protobuf.IFloatValue|null} [voltageDeadBandMinus] VoltageRegulation voltageDeadBandMinus
         * @property {google.protobuf.IFloatValue|null} [voltageDeadBandPlus] VoltageRegulation voltageDeadBandPlus
         * @property {google.protobuf.IFloatValue|null} [voltageSetPoint] VoltageRegulation voltageSetPoint
         */

        /**
         * Constructs a new VoltageRegulation.
         * @memberof essmodule
         * @classdesc Represents a VoltageRegulation.
         * @implements IVoltageRegulation
         * @constructor
         * @param {essmodule.IVoltageRegulation=} [properties] Properties to set
         */
        function VoltageRegulation(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * VoltageRegulation overVoltageDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} overVoltageDroop
         * @memberof essmodule.VoltageRegulation
         * @instance
         */
        VoltageRegulation.prototype.overVoltageDroop = null;

        /**
         * VoltageRegulation underVoltageDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} underVoltageDroop
         * @memberof essmodule.VoltageRegulation
         * @instance
         */
        VoltageRegulation.prototype.underVoltageDroop = null;

        /**
         * VoltageRegulation voltageDeadBandMinus.
         * @member {google.protobuf.IFloatValue|null|undefined} voltageDeadBandMinus
         * @memberof essmodule.VoltageRegulation
         * @instance
         */
        VoltageRegulation.prototype.voltageDeadBandMinus = null;

        /**
         * VoltageRegulation voltageDeadBandPlus.
         * @member {google.protobuf.IFloatValue|null|undefined} voltageDeadBandPlus
         * @memberof essmodule.VoltageRegulation
         * @instance
         */
        VoltageRegulation.prototype.voltageDeadBandPlus = null;

        /**
         * VoltageRegulation voltageSetPoint.
         * @member {google.protobuf.IFloatValue|null|undefined} voltageSetPoint
         * @memberof essmodule.VoltageRegulation
         * @instance
         */
        VoltageRegulation.prototype.voltageSetPoint = null;

        /**
         * Creates a new VoltageRegulation instance using the specified properties.
         * @function create
         * @memberof essmodule.VoltageRegulation
         * @static
         * @param {essmodule.IVoltageRegulation=} [properties] Properties to set
         * @returns {essmodule.VoltageRegulation} VoltageRegulation instance
         */
        VoltageRegulation.create = function create(properties) {
            return new VoltageRegulation(properties);
        };

        /**
         * Encodes the specified VoltageRegulation message. Does not implicitly {@link essmodule.VoltageRegulation.verify|verify} messages.
         * @function encode
         * @memberof essmodule.VoltageRegulation
         * @static
         * @param {essmodule.IVoltageRegulation} message VoltageRegulation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VoltageRegulation.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.overVoltageDroop != null && Object.hasOwnProperty.call(message, "overVoltageDroop"))
                $root.google.protobuf.FloatValue.encode(message.overVoltageDroop, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.underVoltageDroop != null && Object.hasOwnProperty.call(message, "underVoltageDroop"))
                $root.google.protobuf.FloatValue.encode(message.underVoltageDroop, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.voltageDeadBandMinus != null && Object.hasOwnProperty.call(message, "voltageDeadBandMinus"))
                $root.google.protobuf.FloatValue.encode(message.voltageDeadBandMinus, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.voltageDeadBandPlus != null && Object.hasOwnProperty.call(message, "voltageDeadBandPlus"))
                $root.google.protobuf.FloatValue.encode(message.voltageDeadBandPlus, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.voltageSetPoint != null && Object.hasOwnProperty.call(message, "voltageSetPoint"))
                $root.google.protobuf.FloatValue.encode(message.voltageSetPoint, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified VoltageRegulation message, length delimited. Does not implicitly {@link essmodule.VoltageRegulation.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.VoltageRegulation
         * @static
         * @param {essmodule.IVoltageRegulation} message VoltageRegulation message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VoltageRegulation.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a VoltageRegulation message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.VoltageRegulation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.VoltageRegulation} VoltageRegulation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VoltageRegulation.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.VoltageRegulation();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.overVoltageDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.underVoltageDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.voltageDeadBandMinus = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.voltageDeadBandPlus = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.voltageSetPoint = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a VoltageRegulation message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.VoltageRegulation
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.VoltageRegulation} VoltageRegulation
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VoltageRegulation.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a VoltageRegulation message.
         * @function verify
         * @memberof essmodule.VoltageRegulation
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        VoltageRegulation.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.overVoltageDroop != null && message.hasOwnProperty("overVoltageDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.overVoltageDroop);
                if (error)
                    return "overVoltageDroop." + error;
            }
            if (message.underVoltageDroop != null && message.hasOwnProperty("underVoltageDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.underVoltageDroop);
                if (error)
                    return "underVoltageDroop." + error;
            }
            if (message.voltageDeadBandMinus != null && message.hasOwnProperty("voltageDeadBandMinus")) {
                var error = $root.google.protobuf.FloatValue.verify(message.voltageDeadBandMinus);
                if (error)
                    return "voltageDeadBandMinus." + error;
            }
            if (message.voltageDeadBandPlus != null && message.hasOwnProperty("voltageDeadBandPlus")) {
                var error = $root.google.protobuf.FloatValue.verify(message.voltageDeadBandPlus);
                if (error)
                    return "voltageDeadBandPlus." + error;
            }
            if (message.voltageSetPoint != null && message.hasOwnProperty("voltageSetPoint")) {
                var error = $root.google.protobuf.FloatValue.verify(message.voltageSetPoint);
                if (error)
                    return "voltageSetPoint." + error;
            }
            return null;
        };

        /**
         * Creates a VoltageRegulation message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.VoltageRegulation
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.VoltageRegulation} VoltageRegulation
         */
        VoltageRegulation.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.VoltageRegulation)
                return object;
            var message = new $root.essmodule.VoltageRegulation();
            if (object.overVoltageDroop != null) {
                if (typeof object.overVoltageDroop !== "object")
                    throw TypeError(".essmodule.VoltageRegulation.overVoltageDroop: object expected");
                message.overVoltageDroop = $root.google.protobuf.FloatValue.fromObject(object.overVoltageDroop);
            }
            if (object.underVoltageDroop != null) {
                if (typeof object.underVoltageDroop !== "object")
                    throw TypeError(".essmodule.VoltageRegulation.underVoltageDroop: object expected");
                message.underVoltageDroop = $root.google.protobuf.FloatValue.fromObject(object.underVoltageDroop);
            }
            if (object.voltageDeadBandMinus != null) {
                if (typeof object.voltageDeadBandMinus !== "object")
                    throw TypeError(".essmodule.VoltageRegulation.voltageDeadBandMinus: object expected");
                message.voltageDeadBandMinus = $root.google.protobuf.FloatValue.fromObject(object.voltageDeadBandMinus);
            }
            if (object.voltageDeadBandPlus != null) {
                if (typeof object.voltageDeadBandPlus !== "object")
                    throw TypeError(".essmodule.VoltageRegulation.voltageDeadBandPlus: object expected");
                message.voltageDeadBandPlus = $root.google.protobuf.FloatValue.fromObject(object.voltageDeadBandPlus);
            }
            if (object.voltageSetPoint != null) {
                if (typeof object.voltageSetPoint !== "object")
                    throw TypeError(".essmodule.VoltageRegulation.voltageSetPoint: object expected");
                message.voltageSetPoint = $root.google.protobuf.FloatValue.fromObject(object.voltageSetPoint);
            }
            return message;
        };

        /**
         * Creates a plain object from a VoltageRegulation message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.VoltageRegulation
         * @static
         * @param {essmodule.VoltageRegulation} message VoltageRegulation
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        VoltageRegulation.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.overVoltageDroop = null;
                object.underVoltageDroop = null;
                object.voltageDeadBandMinus = null;
                object.voltageDeadBandPlus = null;
                object.voltageSetPoint = null;
            }
            if (message.overVoltageDroop != null && message.hasOwnProperty("overVoltageDroop"))
                object.overVoltageDroop = $root.google.protobuf.FloatValue.toObject(message.overVoltageDroop, options);
            if (message.underVoltageDroop != null && message.hasOwnProperty("underVoltageDroop"))
                object.underVoltageDroop = $root.google.protobuf.FloatValue.toObject(message.underVoltageDroop, options);
            if (message.voltageDeadBandMinus != null && message.hasOwnProperty("voltageDeadBandMinus"))
                object.voltageDeadBandMinus = $root.google.protobuf.FloatValue.toObject(message.voltageDeadBandMinus, options);
            if (message.voltageDeadBandPlus != null && message.hasOwnProperty("voltageDeadBandPlus"))
                object.voltageDeadBandPlus = $root.google.protobuf.FloatValue.toObject(message.voltageDeadBandPlus, options);
            if (message.voltageSetPoint != null && message.hasOwnProperty("voltageSetPoint"))
                object.voltageSetPoint = $root.google.protobuf.FloatValue.toObject(message.voltageSetPoint, options);
            return object;
        };

        /**
         * Converts this VoltageRegulation to JSON.
         * @function toJSON
         * @memberof essmodule.VoltageRegulation
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        VoltageRegulation.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return VoltageRegulation;
    })();

    essmodule.VoltageDroop = (function() {

        /**
         * Properties of a VoltageDroop.
         * @memberof essmodule
         * @interface IVoltageDroop
         * @property {google.protobuf.IBoolValue|null} [voltageDroopCtl] VoltageDroop voltageDroopCtl
         * @property {essmodule.IVoltageRegulation|null} [voltageRegulation] VoltageDroop voltageRegulation
         */

        /**
         * Constructs a new VoltageDroop.
         * @memberof essmodule
         * @classdesc Represents a VoltageDroop.
         * @implements IVoltageDroop
         * @constructor
         * @param {essmodule.IVoltageDroop=} [properties] Properties to set
         */
        function VoltageDroop(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * VoltageDroop voltageDroopCtl.
         * @member {google.protobuf.IBoolValue|null|undefined} voltageDroopCtl
         * @memberof essmodule.VoltageDroop
         * @instance
         */
        VoltageDroop.prototype.voltageDroopCtl = null;

        /**
         * VoltageDroop voltageRegulation.
         * @member {essmodule.IVoltageRegulation|null|undefined} voltageRegulation
         * @memberof essmodule.VoltageDroop
         * @instance
         */
        VoltageDroop.prototype.voltageRegulation = null;

        /**
         * Creates a new VoltageDroop instance using the specified properties.
         * @function create
         * @memberof essmodule.VoltageDroop
         * @static
         * @param {essmodule.IVoltageDroop=} [properties] Properties to set
         * @returns {essmodule.VoltageDroop} VoltageDroop instance
         */
        VoltageDroop.create = function create(properties) {
            return new VoltageDroop(properties);
        };

        /**
         * Encodes the specified VoltageDroop message. Does not implicitly {@link essmodule.VoltageDroop.verify|verify} messages.
         * @function encode
         * @memberof essmodule.VoltageDroop
         * @static
         * @param {essmodule.IVoltageDroop} message VoltageDroop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VoltageDroop.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.voltageDroopCtl != null && Object.hasOwnProperty.call(message, "voltageDroopCtl"))
                $root.google.protobuf.BoolValue.encode(message.voltageDroopCtl, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.voltageRegulation != null && Object.hasOwnProperty.call(message, "voltageRegulation"))
                $root.essmodule.VoltageRegulation.encode(message.voltageRegulation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified VoltageDroop message, length delimited. Does not implicitly {@link essmodule.VoltageDroop.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.VoltageDroop
         * @static
         * @param {essmodule.IVoltageDroop} message VoltageDroop message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VoltageDroop.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a VoltageDroop message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.VoltageDroop
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.VoltageDroop} VoltageDroop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VoltageDroop.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.VoltageDroop();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.voltageDroopCtl = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.voltageRegulation = $root.essmodule.VoltageRegulation.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a VoltageDroop message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.VoltageDroop
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.VoltageDroop} VoltageDroop
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VoltageDroop.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a VoltageDroop message.
         * @function verify
         * @memberof essmodule.VoltageDroop
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        VoltageDroop.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.voltageDroopCtl != null && message.hasOwnProperty("voltageDroopCtl")) {
                var error = $root.google.protobuf.BoolValue.verify(message.voltageDroopCtl);
                if (error)
                    return "voltageDroopCtl." + error;
            }
            if (message.voltageRegulation != null && message.hasOwnProperty("voltageRegulation")) {
                var error = $root.essmodule.VoltageRegulation.verify(message.voltageRegulation);
                if (error)
                    return "voltageRegulation." + error;
            }
            return null;
        };

        /**
         * Creates a VoltageDroop message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.VoltageDroop
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.VoltageDroop} VoltageDroop
         */
        VoltageDroop.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.VoltageDroop)
                return object;
            var message = new $root.essmodule.VoltageDroop();
            if (object.voltageDroopCtl != null) {
                if (typeof object.voltageDroopCtl !== "object")
                    throw TypeError(".essmodule.VoltageDroop.voltageDroopCtl: object expected");
                message.voltageDroopCtl = $root.google.protobuf.BoolValue.fromObject(object.voltageDroopCtl);
            }
            if (object.voltageRegulation != null) {
                if (typeof object.voltageRegulation !== "object")
                    throw TypeError(".essmodule.VoltageDroop.voltageRegulation: object expected");
                message.voltageRegulation = $root.essmodule.VoltageRegulation.fromObject(object.voltageRegulation);
            }
            return message;
        };

        /**
         * Creates a plain object from a VoltageDroop message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.VoltageDroop
         * @static
         * @param {essmodule.VoltageDroop} message VoltageDroop
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        VoltageDroop.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.voltageDroopCtl = null;
                object.voltageRegulation = null;
            }
            if (message.voltageDroopCtl != null && message.hasOwnProperty("voltageDroopCtl"))
                object.voltageDroopCtl = $root.google.protobuf.BoolValue.toObject(message.voltageDroopCtl, options);
            if (message.voltageRegulation != null && message.hasOwnProperty("voltageRegulation"))
                object.voltageRegulation = $root.essmodule.VoltageRegulation.toObject(message.voltageRegulation, options);
            return object;
        };

        /**
         * Converts this VoltageDroop to JSON.
         * @function toJSON
         * @memberof essmodule.VoltageDroop
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        VoltageDroop.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return VoltageDroop;
    })();

    essmodule.VoltagePI = (function() {

        /**
         * Properties of a VoltagePI.
         * @memberof essmodule
         * @interface IVoltagePI
         * @property {google.protobuf.IBoolValue|null} [voltagePICtl] VoltagePI voltagePICtl
         * @property {essmodule.IVoltageRegulation|null} [voltageRegulation] VoltagePI voltageRegulation
         */

        /**
         * Constructs a new VoltagePI.
         * @memberof essmodule
         * @classdesc Represents a VoltagePI.
         * @implements IVoltagePI
         * @constructor
         * @param {essmodule.IVoltagePI=} [properties] Properties to set
         */
        function VoltagePI(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * VoltagePI voltagePICtl.
         * @member {google.protobuf.IBoolValue|null|undefined} voltagePICtl
         * @memberof essmodule.VoltagePI
         * @instance
         */
        VoltagePI.prototype.voltagePICtl = null;

        /**
         * VoltagePI voltageRegulation.
         * @member {essmodule.IVoltageRegulation|null|undefined} voltageRegulation
         * @memberof essmodule.VoltagePI
         * @instance
         */
        VoltagePI.prototype.voltageRegulation = null;

        /**
         * Creates a new VoltagePI instance using the specified properties.
         * @function create
         * @memberof essmodule.VoltagePI
         * @static
         * @param {essmodule.IVoltagePI=} [properties] Properties to set
         * @returns {essmodule.VoltagePI} VoltagePI instance
         */
        VoltagePI.create = function create(properties) {
            return new VoltagePI(properties);
        };

        /**
         * Encodes the specified VoltagePI message. Does not implicitly {@link essmodule.VoltagePI.verify|verify} messages.
         * @function encode
         * @memberof essmodule.VoltagePI
         * @static
         * @param {essmodule.IVoltagePI} message VoltagePI message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VoltagePI.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.voltagePICtl != null && Object.hasOwnProperty.call(message, "voltagePICtl"))
                $root.google.protobuf.BoolValue.encode(message.voltagePICtl, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.voltageRegulation != null && Object.hasOwnProperty.call(message, "voltageRegulation"))
                $root.essmodule.VoltageRegulation.encode(message.voltageRegulation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified VoltagePI message, length delimited. Does not implicitly {@link essmodule.VoltagePI.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.VoltagePI
         * @static
         * @param {essmodule.IVoltagePI} message VoltagePI message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        VoltagePI.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a VoltagePI message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.VoltagePI
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.VoltagePI} VoltagePI
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VoltagePI.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.VoltagePI();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.voltagePICtl = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.voltageRegulation = $root.essmodule.VoltageRegulation.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a VoltagePI message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.VoltagePI
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.VoltagePI} VoltagePI
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        VoltagePI.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a VoltagePI message.
         * @function verify
         * @memberof essmodule.VoltagePI
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        VoltagePI.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.voltagePICtl != null && message.hasOwnProperty("voltagePICtl")) {
                var error = $root.google.protobuf.BoolValue.verify(message.voltagePICtl);
                if (error)
                    return "voltagePICtl." + error;
            }
            if (message.voltageRegulation != null && message.hasOwnProperty("voltageRegulation")) {
                var error = $root.essmodule.VoltageRegulation.verify(message.voltageRegulation);
                if (error)
                    return "voltageRegulation." + error;
            }
            return null;
        };

        /**
         * Creates a VoltagePI message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.VoltagePI
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.VoltagePI} VoltagePI
         */
        VoltagePI.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.VoltagePI)
                return object;
            var message = new $root.essmodule.VoltagePI();
            if (object.voltagePICtl != null) {
                if (typeof object.voltagePICtl !== "object")
                    throw TypeError(".essmodule.VoltagePI.voltagePICtl: object expected");
                message.voltagePICtl = $root.google.protobuf.BoolValue.fromObject(object.voltagePICtl);
            }
            if (object.voltageRegulation != null) {
                if (typeof object.voltageRegulation !== "object")
                    throw TypeError(".essmodule.VoltagePI.voltageRegulation: object expected");
                message.voltageRegulation = $root.essmodule.VoltageRegulation.fromObject(object.voltageRegulation);
            }
            return message;
        };

        /**
         * Creates a plain object from a VoltagePI message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.VoltagePI
         * @static
         * @param {essmodule.VoltagePI} message VoltagePI
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        VoltagePI.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.voltagePICtl = null;
                object.voltageRegulation = null;
            }
            if (message.voltagePICtl != null && message.hasOwnProperty("voltagePICtl"))
                object.voltagePICtl = $root.google.protobuf.BoolValue.toObject(message.voltagePICtl, options);
            if (message.voltageRegulation != null && message.hasOwnProperty("voltageRegulation"))
                object.voltageRegulation = $root.essmodule.VoltageRegulation.toObject(message.voltageRegulation, options);
            return object;
        };

        /**
         * Converts this VoltagePI to JSON.
         * @function toJSON
         * @memberof essmodule.VoltagePI
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        VoltagePI.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return VoltagePI;
    })();

    essmodule.CapacityFirming = (function() {

        /**
         * Properties of a CapacityFirming.
         * @memberof essmodule
         * @interface ICapacityFirming
         * @property {google.protobuf.IBoolValue|null} [capacityFirmingCtl] CapacityFirming capacityFirmingCtl
         * @property {google.protobuf.IFloatValue|null} [limitNegativeDpDt] CapacityFirming limitNegativeDpDt
         * @property {google.protobuf.IFloatValue|null} [limitPositiveDpDt] CapacityFirming limitPositiveDpDt
         */

        /**
         * Constructs a new CapacityFirming.
         * @memberof essmodule
         * @classdesc Represents a CapacityFirming.
         * @implements ICapacityFirming
         * @constructor
         * @param {essmodule.ICapacityFirming=} [properties] Properties to set
         */
        function CapacityFirming(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CapacityFirming capacityFirmingCtl.
         * @member {google.protobuf.IBoolValue|null|undefined} capacityFirmingCtl
         * @memberof essmodule.CapacityFirming
         * @instance
         */
        CapacityFirming.prototype.capacityFirmingCtl = null;

        /**
         * CapacityFirming limitNegativeDpDt.
         * @member {google.protobuf.IFloatValue|null|undefined} limitNegativeDpDt
         * @memberof essmodule.CapacityFirming
         * @instance
         */
        CapacityFirming.prototype.limitNegativeDpDt = null;

        /**
         * CapacityFirming limitPositiveDpDt.
         * @member {google.protobuf.IFloatValue|null|undefined} limitPositiveDpDt
         * @memberof essmodule.CapacityFirming
         * @instance
         */
        CapacityFirming.prototype.limitPositiveDpDt = null;

        /**
         * Creates a new CapacityFirming instance using the specified properties.
         * @function create
         * @memberof essmodule.CapacityFirming
         * @static
         * @param {essmodule.ICapacityFirming=} [properties] Properties to set
         * @returns {essmodule.CapacityFirming} CapacityFirming instance
         */
        CapacityFirming.create = function create(properties) {
            return new CapacityFirming(properties);
        };

        /**
         * Encodes the specified CapacityFirming message. Does not implicitly {@link essmodule.CapacityFirming.verify|verify} messages.
         * @function encode
         * @memberof essmodule.CapacityFirming
         * @static
         * @param {essmodule.ICapacityFirming} message CapacityFirming message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CapacityFirming.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.capacityFirmingCtl != null && Object.hasOwnProperty.call(message, "capacityFirmingCtl"))
                $root.google.protobuf.BoolValue.encode(message.capacityFirmingCtl, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.limitNegativeDpDt != null && Object.hasOwnProperty.call(message, "limitNegativeDpDt"))
                $root.google.protobuf.FloatValue.encode(message.limitNegativeDpDt, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.limitPositiveDpDt != null && Object.hasOwnProperty.call(message, "limitPositiveDpDt"))
                $root.google.protobuf.FloatValue.encode(message.limitPositiveDpDt, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified CapacityFirming message, length delimited. Does not implicitly {@link essmodule.CapacityFirming.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.CapacityFirming
         * @static
         * @param {essmodule.ICapacityFirming} message CapacityFirming message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CapacityFirming.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CapacityFirming message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.CapacityFirming
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.CapacityFirming} CapacityFirming
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CapacityFirming.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.CapacityFirming();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.capacityFirmingCtl = $root.google.protobuf.BoolValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.limitNegativeDpDt = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.limitPositiveDpDt = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CapacityFirming message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.CapacityFirming
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.CapacityFirming} CapacityFirming
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CapacityFirming.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CapacityFirming message.
         * @function verify
         * @memberof essmodule.CapacityFirming
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CapacityFirming.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.capacityFirmingCtl != null && message.hasOwnProperty("capacityFirmingCtl")) {
                var error = $root.google.protobuf.BoolValue.verify(message.capacityFirmingCtl);
                if (error)
                    return "capacityFirmingCtl." + error;
            }
            if (message.limitNegativeDpDt != null && message.hasOwnProperty("limitNegativeDpDt")) {
                var error = $root.google.protobuf.FloatValue.verify(message.limitNegativeDpDt);
                if (error)
                    return "limitNegativeDpDt." + error;
            }
            if (message.limitPositiveDpDt != null && message.hasOwnProperty("limitPositiveDpDt")) {
                var error = $root.google.protobuf.FloatValue.verify(message.limitPositiveDpDt);
                if (error)
                    return "limitPositiveDpDt." + error;
            }
            return null;
        };

        /**
         * Creates a CapacityFirming message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.CapacityFirming
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.CapacityFirming} CapacityFirming
         */
        CapacityFirming.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.CapacityFirming)
                return object;
            var message = new $root.essmodule.CapacityFirming();
            if (object.capacityFirmingCtl != null) {
                if (typeof object.capacityFirmingCtl !== "object")
                    throw TypeError(".essmodule.CapacityFirming.capacityFirmingCtl: object expected");
                message.capacityFirmingCtl = $root.google.protobuf.BoolValue.fromObject(object.capacityFirmingCtl);
            }
            if (object.limitNegativeDpDt != null) {
                if (typeof object.limitNegativeDpDt !== "object")
                    throw TypeError(".essmodule.CapacityFirming.limitNegativeDpDt: object expected");
                message.limitNegativeDpDt = $root.google.protobuf.FloatValue.fromObject(object.limitNegativeDpDt);
            }
            if (object.limitPositiveDpDt != null) {
                if (typeof object.limitPositiveDpDt !== "object")
                    throw TypeError(".essmodule.CapacityFirming.limitPositiveDpDt: object expected");
                message.limitPositiveDpDt = $root.google.protobuf.FloatValue.fromObject(object.limitPositiveDpDt);
            }
            return message;
        };

        /**
         * Creates a plain object from a CapacityFirming message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.CapacityFirming
         * @static
         * @param {essmodule.CapacityFirming} message CapacityFirming
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CapacityFirming.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.capacityFirmingCtl = null;
                object.limitNegativeDpDt = null;
                object.limitPositiveDpDt = null;
            }
            if (message.capacityFirmingCtl != null && message.hasOwnProperty("capacityFirmingCtl"))
                object.capacityFirmingCtl = $root.google.protobuf.BoolValue.toObject(message.capacityFirmingCtl, options);
            if (message.limitNegativeDpDt != null && message.hasOwnProperty("limitNegativeDpDt"))
                object.limitNegativeDpDt = $root.google.protobuf.FloatValue.toObject(message.limitNegativeDpDt, options);
            if (message.limitPositiveDpDt != null && message.hasOwnProperty("limitPositiveDpDt"))
                object.limitPositiveDpDt = $root.google.protobuf.FloatValue.toObject(message.limitPositiveDpDt, options);
            return object;
        };

        /**
         * Converts this CapacityFirming to JSON.
         * @function toJSON
         * @memberof essmodule.CapacityFirming
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CapacityFirming.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CapacityFirming;
    })();

    essmodule.ESSFunction = (function() {

        /**
         * Properties of a ESSFunction.
         * @memberof essmodule
         * @interface IESSFunction
         * @property {essmodule.ICapacityFirming|null} [capacityFirming] ESSFunction capacityFirming
         * @property {essmodule.IFrequencyRegulation|null} [frequencyRegulation] ESSFunction frequencyRegulation
         * @property {essmodule.IPeakShaving|null} [peakShaving] ESSFunction peakShaving
         * @property {essmodule.ISocLimit|null} [socLimit] ESSFunction socLimit
         * @property {essmodule.ISOCManagement|null} [socManagement] ESSFunction socManagement
         * @property {essmodule.IVoltageDroop|null} [voltageDroop] ESSFunction voltageDroop
         * @property {essmodule.IVoltagePI|null} [voltagePI] ESSFunction voltagePI
         */

        /**
         * Constructs a new ESSFunction.
         * @memberof essmodule
         * @classdesc Represents a ESSFunction.
         * @implements IESSFunction
         * @constructor
         * @param {essmodule.IESSFunction=} [properties] Properties to set
         */
        function ESSFunction(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSFunction capacityFirming.
         * @member {essmodule.ICapacityFirming|null|undefined} capacityFirming
         * @memberof essmodule.ESSFunction
         * @instance
         */
        ESSFunction.prototype.capacityFirming = null;

        /**
         * ESSFunction frequencyRegulation.
         * @member {essmodule.IFrequencyRegulation|null|undefined} frequencyRegulation
         * @memberof essmodule.ESSFunction
         * @instance
         */
        ESSFunction.prototype.frequencyRegulation = null;

        /**
         * ESSFunction peakShaving.
         * @member {essmodule.IPeakShaving|null|undefined} peakShaving
         * @memberof essmodule.ESSFunction
         * @instance
         */
        ESSFunction.prototype.peakShaving = null;

        /**
         * ESSFunction socLimit.
         * @member {essmodule.ISocLimit|null|undefined} socLimit
         * @memberof essmodule.ESSFunction
         * @instance
         */
        ESSFunction.prototype.socLimit = null;

        /**
         * ESSFunction socManagement.
         * @member {essmodule.ISOCManagement|null|undefined} socManagement
         * @memberof essmodule.ESSFunction
         * @instance
         */
        ESSFunction.prototype.socManagement = null;

        /**
         * ESSFunction voltageDroop.
         * @member {essmodule.IVoltageDroop|null|undefined} voltageDroop
         * @memberof essmodule.ESSFunction
         * @instance
         */
        ESSFunction.prototype.voltageDroop = null;

        /**
         * ESSFunction voltagePI.
         * @member {essmodule.IVoltagePI|null|undefined} voltagePI
         * @memberof essmodule.ESSFunction
         * @instance
         */
        ESSFunction.prototype.voltagePI = null;

        /**
         * Creates a new ESSFunction instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSFunction
         * @static
         * @param {essmodule.IESSFunction=} [properties] Properties to set
         * @returns {essmodule.ESSFunction} ESSFunction instance
         */
        ESSFunction.create = function create(properties) {
            return new ESSFunction(properties);
        };

        /**
         * Encodes the specified ESSFunction message. Does not implicitly {@link essmodule.ESSFunction.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSFunction
         * @static
         * @param {essmodule.IESSFunction} message ESSFunction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSFunction.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.capacityFirming != null && Object.hasOwnProperty.call(message, "capacityFirming"))
                $root.essmodule.CapacityFirming.encode(message.capacityFirming, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.frequencyRegulation != null && Object.hasOwnProperty.call(message, "frequencyRegulation"))
                $root.essmodule.FrequencyRegulation.encode(message.frequencyRegulation, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.peakShaving != null && Object.hasOwnProperty.call(message, "peakShaving"))
                $root.essmodule.PeakShaving.encode(message.peakShaving, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.socLimit != null && Object.hasOwnProperty.call(message, "socLimit"))
                $root.essmodule.SocLimit.encode(message.socLimit, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.socManagement != null && Object.hasOwnProperty.call(message, "socManagement"))
                $root.essmodule.SOCManagement.encode(message.socManagement, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.voltageDroop != null && Object.hasOwnProperty.call(message, "voltageDroop"))
                $root.essmodule.VoltageDroop.encode(message.voltageDroop, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.voltagePI != null && Object.hasOwnProperty.call(message, "voltagePI"))
                $root.essmodule.VoltagePI.encode(message.voltagePI, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSFunction message, length delimited. Does not implicitly {@link essmodule.ESSFunction.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSFunction
         * @static
         * @param {essmodule.IESSFunction} message ESSFunction message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSFunction.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSFunction message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSFunction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSFunction} ESSFunction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSFunction.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSFunction();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.capacityFirming = $root.essmodule.CapacityFirming.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.frequencyRegulation = $root.essmodule.FrequencyRegulation.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.peakShaving = $root.essmodule.PeakShaving.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.socLimit = $root.essmodule.SocLimit.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.socManagement = $root.essmodule.SOCManagement.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.voltageDroop = $root.essmodule.VoltageDroop.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.voltagePI = $root.essmodule.VoltagePI.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSFunction message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSFunction
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSFunction} ESSFunction
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSFunction.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSFunction message.
         * @function verify
         * @memberof essmodule.ESSFunction
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSFunction.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.capacityFirming != null && message.hasOwnProperty("capacityFirming")) {
                var error = $root.essmodule.CapacityFirming.verify(message.capacityFirming);
                if (error)
                    return "capacityFirming." + error;
            }
            if (message.frequencyRegulation != null && message.hasOwnProperty("frequencyRegulation")) {
                var error = $root.essmodule.FrequencyRegulation.verify(message.frequencyRegulation);
                if (error)
                    return "frequencyRegulation." + error;
            }
            if (message.peakShaving != null && message.hasOwnProperty("peakShaving")) {
                var error = $root.essmodule.PeakShaving.verify(message.peakShaving);
                if (error)
                    return "peakShaving." + error;
            }
            if (message.socLimit != null && message.hasOwnProperty("socLimit")) {
                var error = $root.essmodule.SocLimit.verify(message.socLimit);
                if (error)
                    return "socLimit." + error;
            }
            if (message.socManagement != null && message.hasOwnProperty("socManagement")) {
                var error = $root.essmodule.SOCManagement.verify(message.socManagement);
                if (error)
                    return "socManagement." + error;
            }
            if (message.voltageDroop != null && message.hasOwnProperty("voltageDroop")) {
                var error = $root.essmodule.VoltageDroop.verify(message.voltageDroop);
                if (error)
                    return "voltageDroop." + error;
            }
            if (message.voltagePI != null && message.hasOwnProperty("voltagePI")) {
                var error = $root.essmodule.VoltagePI.verify(message.voltagePI);
                if (error)
                    return "voltagePI." + error;
            }
            return null;
        };

        /**
         * Creates a ESSFunction message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSFunction
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSFunction} ESSFunction
         */
        ESSFunction.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSFunction)
                return object;
            var message = new $root.essmodule.ESSFunction();
            if (object.capacityFirming != null) {
                if (typeof object.capacityFirming !== "object")
                    throw TypeError(".essmodule.ESSFunction.capacityFirming: object expected");
                message.capacityFirming = $root.essmodule.CapacityFirming.fromObject(object.capacityFirming);
            }
            if (object.frequencyRegulation != null) {
                if (typeof object.frequencyRegulation !== "object")
                    throw TypeError(".essmodule.ESSFunction.frequencyRegulation: object expected");
                message.frequencyRegulation = $root.essmodule.FrequencyRegulation.fromObject(object.frequencyRegulation);
            }
            if (object.peakShaving != null) {
                if (typeof object.peakShaving !== "object")
                    throw TypeError(".essmodule.ESSFunction.peakShaving: object expected");
                message.peakShaving = $root.essmodule.PeakShaving.fromObject(object.peakShaving);
            }
            if (object.socLimit != null) {
                if (typeof object.socLimit !== "object")
                    throw TypeError(".essmodule.ESSFunction.socLimit: object expected");
                message.socLimit = $root.essmodule.SocLimit.fromObject(object.socLimit);
            }
            if (object.socManagement != null) {
                if (typeof object.socManagement !== "object")
                    throw TypeError(".essmodule.ESSFunction.socManagement: object expected");
                message.socManagement = $root.essmodule.SOCManagement.fromObject(object.socManagement);
            }
            if (object.voltageDroop != null) {
                if (typeof object.voltageDroop !== "object")
                    throw TypeError(".essmodule.ESSFunction.voltageDroop: object expected");
                message.voltageDroop = $root.essmodule.VoltageDroop.fromObject(object.voltageDroop);
            }
            if (object.voltagePI != null) {
                if (typeof object.voltagePI !== "object")
                    throw TypeError(".essmodule.ESSFunction.voltagePI: object expected");
                message.voltagePI = $root.essmodule.VoltagePI.fromObject(object.voltagePI);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSFunction message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSFunction
         * @static
         * @param {essmodule.ESSFunction} message ESSFunction
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSFunction.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.capacityFirming = null;
                object.frequencyRegulation = null;
                object.peakShaving = null;
                object.socLimit = null;
                object.socManagement = null;
                object.voltageDroop = null;
                object.voltagePI = null;
            }
            if (message.capacityFirming != null && message.hasOwnProperty("capacityFirming"))
                object.capacityFirming = $root.essmodule.CapacityFirming.toObject(message.capacityFirming, options);
            if (message.frequencyRegulation != null && message.hasOwnProperty("frequencyRegulation"))
                object.frequencyRegulation = $root.essmodule.FrequencyRegulation.toObject(message.frequencyRegulation, options);
            if (message.peakShaving != null && message.hasOwnProperty("peakShaving"))
                object.peakShaving = $root.essmodule.PeakShaving.toObject(message.peakShaving, options);
            if (message.socLimit != null && message.hasOwnProperty("socLimit"))
                object.socLimit = $root.essmodule.SocLimit.toObject(message.socLimit, options);
            if (message.socManagement != null && message.hasOwnProperty("socManagement"))
                object.socManagement = $root.essmodule.SOCManagement.toObject(message.socManagement, options);
            if (message.voltageDroop != null && message.hasOwnProperty("voltageDroop"))
                object.voltageDroop = $root.essmodule.VoltageDroop.toObject(message.voltageDroop, options);
            if (message.voltagePI != null && message.hasOwnProperty("voltagePI"))
                object.voltagePI = $root.essmodule.VoltagePI.toObject(message.voltagePI, options);
            return object;
        };

        /**
         * Converts this ESSFunction to JSON.
         * @function toJSON
         * @memberof essmodule.ESSFunction
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSFunction.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSFunction;
    })();

    essmodule.ESSPointStatus = (function() {

        /**
         * Properties of a ESSPointStatus.
         * @memberof essmodule
         * @interface IESSPointStatus
         * @property {commonmodule.IControlDPC|null} [blackStartEnabled] ESSPointStatus blackStartEnabled
         * @property {commonmodule.IControlDPC|null} [frequencySetPointEnabled] ESSPointStatus frequencySetPointEnabled
         * @property {essmodule.IESSFunction|null} ["function"] ESSPointStatus function
         * @property {commonmodule.IENG_GridConnectModeKind|null} [mode] ESSPointStatus mode
         * @property {google.protobuf.IFloatValue|null} [pctHzDroop] ESSPointStatus pctHzDroop
         * @property {google.protobuf.IFloatValue|null} [pctVDroop] ESSPointStatus pctVDroop
         * @property {commonmodule.IRampRate|null} [rampRates] ESSPointStatus rampRates
         * @property {commonmodule.IControlDPC|null} [reactivePwrSetPointEnabled] ESSPointStatus reactivePwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [realPwrSetPointEnabled] ESSPointStatus realPwrSetPointEnabled
         * @property {commonmodule.IOptional_StateKind|null} [state] ESSPointStatus state
         * @property {commonmodule.IControlDPC|null} [syncBackToGrid] ESSPointStatus syncBackToGrid
         * @property {commonmodule.IControlDPC|null} [transToIslndOnGridLossEnabled] ESSPointStatus transToIslndOnGridLossEnabled
         * @property {commonmodule.IControlDPC|null} [voltageSetPointEnabled] ESSPointStatus voltageSetPointEnabled
         */

        /**
         * Constructs a new ESSPointStatus.
         * @memberof essmodule
         * @classdesc Represents a ESSPointStatus.
         * @implements IESSPointStatus
         * @constructor
         * @param {essmodule.IESSPointStatus=} [properties] Properties to set
         */
        function ESSPointStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSPointStatus blackStartEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} blackStartEnabled
         * @memberof essmodule.ESSPointStatus
         * @instance
         */
        ESSPointStatus.prototype.blackStartEnabled = null;

        /**
         * ESSPointStatus frequencySetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} frequencySetPointEnabled
         * @memberof essmodule.ESSPointStatus
         * @instance
         */
        ESSPointStatus.prototype.frequencySetPointEnabled = null;

        /**
         * ESSPointStatus function.
         * @member {essmodule.IESSFunction|null|undefined} function
         * @memberof essmodule.ESSPointStatus
         * @instance
         */
        ESSPointStatus.prototype["function"] = null;

        /**
         * ESSPointStatus mode.
         * @member {commonmodule.IENG_GridConnectModeKind|null|undefined} mode
         * @memberof essmodule.ESSPointStatus
         * @instance
         */
        ESSPointStatus.prototype.mode = null;

        /**
         * ESSPointStatus pctHzDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctHzDroop
         * @memberof essmodule.ESSPointStatus
         * @instance
         */
        ESSPointStatus.prototype.pctHzDroop = null;

        /**
         * ESSPointStatus pctVDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctVDroop
         * @memberof essmodule.ESSPointStatus
         * @instance
         */
        ESSPointStatus.prototype.pctVDroop = null;

        /**
         * ESSPointStatus rampRates.
         * @member {commonmodule.IRampRate|null|undefined} rampRates
         * @memberof essmodule.ESSPointStatus
         * @instance
         */
        ESSPointStatus.prototype.rampRates = null;

        /**
         * ESSPointStatus reactivePwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} reactivePwrSetPointEnabled
         * @memberof essmodule.ESSPointStatus
         * @instance
         */
        ESSPointStatus.prototype.reactivePwrSetPointEnabled = null;

        /**
         * ESSPointStatus realPwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} realPwrSetPointEnabled
         * @memberof essmodule.ESSPointStatus
         * @instance
         */
        ESSPointStatus.prototype.realPwrSetPointEnabled = null;

        /**
         * ESSPointStatus state.
         * @member {commonmodule.IOptional_StateKind|null|undefined} state
         * @memberof essmodule.ESSPointStatus
         * @instance
         */
        ESSPointStatus.prototype.state = null;

        /**
         * ESSPointStatus syncBackToGrid.
         * @member {commonmodule.IControlDPC|null|undefined} syncBackToGrid
         * @memberof essmodule.ESSPointStatus
         * @instance
         */
        ESSPointStatus.prototype.syncBackToGrid = null;

        /**
         * ESSPointStatus transToIslndOnGridLossEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} transToIslndOnGridLossEnabled
         * @memberof essmodule.ESSPointStatus
         * @instance
         */
        ESSPointStatus.prototype.transToIslndOnGridLossEnabled = null;

        /**
         * ESSPointStatus voltageSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} voltageSetPointEnabled
         * @memberof essmodule.ESSPointStatus
         * @instance
         */
        ESSPointStatus.prototype.voltageSetPointEnabled = null;

        /**
         * Creates a new ESSPointStatus instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSPointStatus
         * @static
         * @param {essmodule.IESSPointStatus=} [properties] Properties to set
         * @returns {essmodule.ESSPointStatus} ESSPointStatus instance
         */
        ESSPointStatus.create = function create(properties) {
            return new ESSPointStatus(properties);
        };

        /**
         * Encodes the specified ESSPointStatus message. Does not implicitly {@link essmodule.ESSPointStatus.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSPointStatus
         * @static
         * @param {essmodule.IESSPointStatus} message ESSPointStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSPointStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.blackStartEnabled != null && Object.hasOwnProperty.call(message, "blackStartEnabled"))
                $root.commonmodule.ControlDPC.encode(message.blackStartEnabled, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.frequencySetPointEnabled != null && Object.hasOwnProperty.call(message, "frequencySetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.frequencySetPointEnabled, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message["function"] != null && Object.hasOwnProperty.call(message, "function"))
                $root.essmodule.ESSFunction.encode(message["function"], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
                $root.commonmodule.ENG_GridConnectModeKind.encode(message.mode, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.pctHzDroop != null && Object.hasOwnProperty.call(message, "pctHzDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctHzDroop, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.pctVDroop != null && Object.hasOwnProperty.call(message, "pctVDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctVDroop, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.rampRates != null && Object.hasOwnProperty.call(message, "rampRates"))
                $root.commonmodule.RampRate.encode(message.rampRates, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.reactivePwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "reactivePwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.reactivePwrSetPointEnabled, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.realPwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "realPwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.realPwrSetPointEnabled, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                $root.commonmodule.Optional_StateKind.encode(message.state, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.syncBackToGrid != null && Object.hasOwnProperty.call(message, "syncBackToGrid"))
                $root.commonmodule.ControlDPC.encode(message.syncBackToGrid, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.transToIslndOnGridLossEnabled != null && Object.hasOwnProperty.call(message, "transToIslndOnGridLossEnabled"))
                $root.commonmodule.ControlDPC.encode(message.transToIslndOnGridLossEnabled, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.voltageSetPointEnabled != null && Object.hasOwnProperty.call(message, "voltageSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.voltageSetPointEnabled, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSPointStatus message, length delimited. Does not implicitly {@link essmodule.ESSPointStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSPointStatus
         * @static
         * @param {essmodule.IESSPointStatus} message ESSPointStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSPointStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSPointStatus message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSPointStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSPointStatus} ESSPointStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSPointStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSPointStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.blackStartEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.frequencySetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 3:
                    message["function"] = $root.essmodule.ESSFunction.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.mode = $root.commonmodule.ENG_GridConnectModeKind.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.pctHzDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.pctVDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.rampRates = $root.commonmodule.RampRate.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.state = $root.commonmodule.Optional_StateKind.decode(reader, reader.uint32());
                    break;
                case 11:
                    message.syncBackToGrid = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.transToIslndOnGridLossEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 13:
                    message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSPointStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSPointStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSPointStatus} ESSPointStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSPointStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSPointStatus message.
         * @function verify
         * @memberof essmodule.ESSPointStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSPointStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.blackStartEnabled != null && message.hasOwnProperty("blackStartEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.blackStartEnabled);
                if (error)
                    return "blackStartEnabled." + error;
            }
            if (message.frequencySetPointEnabled != null && message.hasOwnProperty("frequencySetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.frequencySetPointEnabled);
                if (error)
                    return "frequencySetPointEnabled." + error;
            }
            if (message["function"] != null && message.hasOwnProperty("function")) {
                var error = $root.essmodule.ESSFunction.verify(message["function"]);
                if (error)
                    return "function." + error;
            }
            if (message.mode != null && message.hasOwnProperty("mode")) {
                var error = $root.commonmodule.ENG_GridConnectModeKind.verify(message.mode);
                if (error)
                    return "mode." + error;
            }
            if (message.pctHzDroop != null && message.hasOwnProperty("pctHzDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctHzDroop);
                if (error)
                    return "pctHzDroop." + error;
            }
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctVDroop);
                if (error)
                    return "pctVDroop." + error;
            }
            if (message.rampRates != null && message.hasOwnProperty("rampRates")) {
                var error = $root.commonmodule.RampRate.verify(message.rampRates);
                if (error)
                    return "rampRates." + error;
            }
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reactivePwrSetPointEnabled);
                if (error)
                    return "reactivePwrSetPointEnabled." + error;
            }
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.realPwrSetPointEnabled);
                if (error)
                    return "realPwrSetPointEnabled." + error;
            }
            if (message.state != null && message.hasOwnProperty("state")) {
                var error = $root.commonmodule.Optional_StateKind.verify(message.state);
                if (error)
                    return "state." + error;
            }
            if (message.syncBackToGrid != null && message.hasOwnProperty("syncBackToGrid")) {
                var error = $root.commonmodule.ControlDPC.verify(message.syncBackToGrid);
                if (error)
                    return "syncBackToGrid." + error;
            }
            if (message.transToIslndOnGridLossEnabled != null && message.hasOwnProperty("transToIslndOnGridLossEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.transToIslndOnGridLossEnabled);
                if (error)
                    return "transToIslndOnGridLossEnabled." + error;
            }
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.voltageSetPointEnabled);
                if (error)
                    return "voltageSetPointEnabled." + error;
            }
            return null;
        };

        /**
         * Creates a ESSPointStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSPointStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSPointStatus} ESSPointStatus
         */
        ESSPointStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSPointStatus)
                return object;
            var message = new $root.essmodule.ESSPointStatus();
            if (object.blackStartEnabled != null) {
                if (typeof object.blackStartEnabled !== "object")
                    throw TypeError(".essmodule.ESSPointStatus.blackStartEnabled: object expected");
                message.blackStartEnabled = $root.commonmodule.ControlDPC.fromObject(object.blackStartEnabled);
            }
            if (object.frequencySetPointEnabled != null) {
                if (typeof object.frequencySetPointEnabled !== "object")
                    throw TypeError(".essmodule.ESSPointStatus.frequencySetPointEnabled: object expected");
                message.frequencySetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.frequencySetPointEnabled);
            }
            if (object["function"] != null) {
                if (typeof object["function"] !== "object")
                    throw TypeError(".essmodule.ESSPointStatus.function: object expected");
                message["function"] = $root.essmodule.ESSFunction.fromObject(object["function"]);
            }
            if (object.mode != null) {
                if (typeof object.mode !== "object")
                    throw TypeError(".essmodule.ESSPointStatus.mode: object expected");
                message.mode = $root.commonmodule.ENG_GridConnectModeKind.fromObject(object.mode);
            }
            if (object.pctHzDroop != null) {
                if (typeof object.pctHzDroop !== "object")
                    throw TypeError(".essmodule.ESSPointStatus.pctHzDroop: object expected");
                message.pctHzDroop = $root.google.protobuf.FloatValue.fromObject(object.pctHzDroop);
            }
            if (object.pctVDroop != null) {
                if (typeof object.pctVDroop !== "object")
                    throw TypeError(".essmodule.ESSPointStatus.pctVDroop: object expected");
                message.pctVDroop = $root.google.protobuf.FloatValue.fromObject(object.pctVDroop);
            }
            if (object.rampRates != null) {
                if (typeof object.rampRates !== "object")
                    throw TypeError(".essmodule.ESSPointStatus.rampRates: object expected");
                message.rampRates = $root.commonmodule.RampRate.fromObject(object.rampRates);
            }
            if (object.reactivePwrSetPointEnabled != null) {
                if (typeof object.reactivePwrSetPointEnabled !== "object")
                    throw TypeError(".essmodule.ESSPointStatus.reactivePwrSetPointEnabled: object expected");
                message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.reactivePwrSetPointEnabled);
            }
            if (object.realPwrSetPointEnabled != null) {
                if (typeof object.realPwrSetPointEnabled !== "object")
                    throw TypeError(".essmodule.ESSPointStatus.realPwrSetPointEnabled: object expected");
                message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.realPwrSetPointEnabled);
            }
            if (object.state != null) {
                if (typeof object.state !== "object")
                    throw TypeError(".essmodule.ESSPointStatus.state: object expected");
                message.state = $root.commonmodule.Optional_StateKind.fromObject(object.state);
            }
            if (object.syncBackToGrid != null) {
                if (typeof object.syncBackToGrid !== "object")
                    throw TypeError(".essmodule.ESSPointStatus.syncBackToGrid: object expected");
                message.syncBackToGrid = $root.commonmodule.ControlDPC.fromObject(object.syncBackToGrid);
            }
            if (object.transToIslndOnGridLossEnabled != null) {
                if (typeof object.transToIslndOnGridLossEnabled !== "object")
                    throw TypeError(".essmodule.ESSPointStatus.transToIslndOnGridLossEnabled: object expected");
                message.transToIslndOnGridLossEnabled = $root.commonmodule.ControlDPC.fromObject(object.transToIslndOnGridLossEnabled);
            }
            if (object.voltageSetPointEnabled != null) {
                if (typeof object.voltageSetPointEnabled !== "object")
                    throw TypeError(".essmodule.ESSPointStatus.voltageSetPointEnabled: object expected");
                message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.voltageSetPointEnabled);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSPointStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSPointStatus
         * @static
         * @param {essmodule.ESSPointStatus} message ESSPointStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSPointStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.blackStartEnabled = null;
                object.frequencySetPointEnabled = null;
                object["function"] = null;
                object.mode = null;
                object.pctHzDroop = null;
                object.pctVDroop = null;
                object.rampRates = null;
                object.reactivePwrSetPointEnabled = null;
                object.realPwrSetPointEnabled = null;
                object.state = null;
                object.syncBackToGrid = null;
                object.transToIslndOnGridLossEnabled = null;
                object.voltageSetPointEnabled = null;
            }
            if (message.blackStartEnabled != null && message.hasOwnProperty("blackStartEnabled"))
                object.blackStartEnabled = $root.commonmodule.ControlDPC.toObject(message.blackStartEnabled, options);
            if (message.frequencySetPointEnabled != null && message.hasOwnProperty("frequencySetPointEnabled"))
                object.frequencySetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.frequencySetPointEnabled, options);
            if (message["function"] != null && message.hasOwnProperty("function"))
                object["function"] = $root.essmodule.ESSFunction.toObject(message["function"], options);
            if (message.mode != null && message.hasOwnProperty("mode"))
                object.mode = $root.commonmodule.ENG_GridConnectModeKind.toObject(message.mode, options);
            if (message.pctHzDroop != null && message.hasOwnProperty("pctHzDroop"))
                object.pctHzDroop = $root.google.protobuf.FloatValue.toObject(message.pctHzDroop, options);
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop"))
                object.pctVDroop = $root.google.protobuf.FloatValue.toObject(message.pctVDroop, options);
            if (message.rampRates != null && message.hasOwnProperty("rampRates"))
                object.rampRates = $root.commonmodule.RampRate.toObject(message.rampRates, options);
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled"))
                object.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.reactivePwrSetPointEnabled, options);
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled"))
                object.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.realPwrSetPointEnabled, options);
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = $root.commonmodule.Optional_StateKind.toObject(message.state, options);
            if (message.syncBackToGrid != null && message.hasOwnProperty("syncBackToGrid"))
                object.syncBackToGrid = $root.commonmodule.ControlDPC.toObject(message.syncBackToGrid, options);
            if (message.transToIslndOnGridLossEnabled != null && message.hasOwnProperty("transToIslndOnGridLossEnabled"))
                object.transToIslndOnGridLossEnabled = $root.commonmodule.ControlDPC.toObject(message.transToIslndOnGridLossEnabled, options);
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled"))
                object.voltageSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.voltageSetPointEnabled, options);
            return object;
        };

        /**
         * Converts this ESSPointStatus to JSON.
         * @function toJSON
         * @memberof essmodule.ESSPointStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSPointStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSPointStatus;
    })();

    essmodule.ESSEventAndStatusZGEN = (function() {

        /**
         * Properties of a ESSEventAndStatusZGEN.
         * @memberof essmodule
         * @interface IESSEventAndStatusZGEN
         * @property {commonmodule.ILogicalNodeForEventAndStatus|null} [logicalNodeForEventAndStatus] ESSEventAndStatusZGEN logicalNodeForEventAndStatus
         * @property {commonmodule.IStatusSPS|null} [AuxPwrSt] ESSEventAndStatusZGEN AuxPwrSt
         * @property {commonmodule.IENS_DynamicTestKind|null} [DynamicTest] ESSEventAndStatusZGEN DynamicTest
         * @property {commonmodule.IStatusSPS|null} [EmgStop] ESSEventAndStatusZGEN EmgStop
         * @property {commonmodule.IStatusSPS|null} [GnSynSt] ESSEventAndStatusZGEN GnSynSt
         * @property {essmodule.IESSPointStatus|null} [PointStatus] ESSEventAndStatusZGEN PointStatus
         */

        /**
         * Constructs a new ESSEventAndStatusZGEN.
         * @memberof essmodule
         * @classdesc Represents a ESSEventAndStatusZGEN.
         * @implements IESSEventAndStatusZGEN
         * @constructor
         * @param {essmodule.IESSEventAndStatusZGEN=} [properties] Properties to set
         */
        function ESSEventAndStatusZGEN(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSEventAndStatusZGEN logicalNodeForEventAndStatus.
         * @member {commonmodule.ILogicalNodeForEventAndStatus|null|undefined} logicalNodeForEventAndStatus
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @instance
         */
        ESSEventAndStatusZGEN.prototype.logicalNodeForEventAndStatus = null;

        /**
         * ESSEventAndStatusZGEN AuxPwrSt.
         * @member {commonmodule.IStatusSPS|null|undefined} AuxPwrSt
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @instance
         */
        ESSEventAndStatusZGEN.prototype.AuxPwrSt = null;

        /**
         * ESSEventAndStatusZGEN DynamicTest.
         * @member {commonmodule.IENS_DynamicTestKind|null|undefined} DynamicTest
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @instance
         */
        ESSEventAndStatusZGEN.prototype.DynamicTest = null;

        /**
         * ESSEventAndStatusZGEN EmgStop.
         * @member {commonmodule.IStatusSPS|null|undefined} EmgStop
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @instance
         */
        ESSEventAndStatusZGEN.prototype.EmgStop = null;

        /**
         * ESSEventAndStatusZGEN GnSynSt.
         * @member {commonmodule.IStatusSPS|null|undefined} GnSynSt
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @instance
         */
        ESSEventAndStatusZGEN.prototype.GnSynSt = null;

        /**
         * ESSEventAndStatusZGEN PointStatus.
         * @member {essmodule.IESSPointStatus|null|undefined} PointStatus
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @instance
         */
        ESSEventAndStatusZGEN.prototype.PointStatus = null;

        /**
         * Creates a new ESSEventAndStatusZGEN instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @static
         * @param {essmodule.IESSEventAndStatusZGEN=} [properties] Properties to set
         * @returns {essmodule.ESSEventAndStatusZGEN} ESSEventAndStatusZGEN instance
         */
        ESSEventAndStatusZGEN.create = function create(properties) {
            return new ESSEventAndStatusZGEN(properties);
        };

        /**
         * Encodes the specified ESSEventAndStatusZGEN message. Does not implicitly {@link essmodule.ESSEventAndStatusZGEN.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @static
         * @param {essmodule.IESSEventAndStatusZGEN} message ESSEventAndStatusZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSEventAndStatusZGEN.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForEventAndStatus != null && Object.hasOwnProperty.call(message, "logicalNodeForEventAndStatus"))
                $root.commonmodule.LogicalNodeForEventAndStatus.encode(message.logicalNodeForEventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.AuxPwrSt != null && Object.hasOwnProperty.call(message, "AuxPwrSt"))
                $root.commonmodule.StatusSPS.encode(message.AuxPwrSt, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.DynamicTest != null && Object.hasOwnProperty.call(message, "DynamicTest"))
                $root.commonmodule.ENS_DynamicTestKind.encode(message.DynamicTest, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.EmgStop != null && Object.hasOwnProperty.call(message, "EmgStop"))
                $root.commonmodule.StatusSPS.encode(message.EmgStop, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.GnSynSt != null && Object.hasOwnProperty.call(message, "GnSynSt"))
                $root.commonmodule.StatusSPS.encode(message.GnSynSt, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.PointStatus != null && Object.hasOwnProperty.call(message, "PointStatus"))
                $root.essmodule.ESSPointStatus.encode(message.PointStatus, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSEventAndStatusZGEN message, length delimited. Does not implicitly {@link essmodule.ESSEventAndStatusZGEN.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @static
         * @param {essmodule.IESSEventAndStatusZGEN} message ESSEventAndStatusZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSEventAndStatusZGEN.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSEventAndStatusZGEN message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSEventAndStatusZGEN} ESSEventAndStatusZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSEventAndStatusZGEN.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSEventAndStatusZGEN();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.AuxPwrSt = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.EmgStop = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.GnSynSt = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.PointStatus = $root.essmodule.ESSPointStatus.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSEventAndStatusZGEN message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSEventAndStatusZGEN} ESSEventAndStatusZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSEventAndStatusZGEN.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSEventAndStatusZGEN message.
         * @function verify
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSEventAndStatusZGEN.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus")) {
                var error = $root.commonmodule.LogicalNodeForEventAndStatus.verify(message.logicalNodeForEventAndStatus);
                if (error)
                    return "logicalNodeForEventAndStatus." + error;
            }
            if (message.AuxPwrSt != null && message.hasOwnProperty("AuxPwrSt")) {
                var error = $root.commonmodule.StatusSPS.verify(message.AuxPwrSt);
                if (error)
                    return "AuxPwrSt." + error;
            }
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest")) {
                var error = $root.commonmodule.ENS_DynamicTestKind.verify(message.DynamicTest);
                if (error)
                    return "DynamicTest." + error;
            }
            if (message.EmgStop != null && message.hasOwnProperty("EmgStop")) {
                var error = $root.commonmodule.StatusSPS.verify(message.EmgStop);
                if (error)
                    return "EmgStop." + error;
            }
            if (message.GnSynSt != null && message.hasOwnProperty("GnSynSt")) {
                var error = $root.commonmodule.StatusSPS.verify(message.GnSynSt);
                if (error)
                    return "GnSynSt." + error;
            }
            if (message.PointStatus != null && message.hasOwnProperty("PointStatus")) {
                var error = $root.essmodule.ESSPointStatus.verify(message.PointStatus);
                if (error)
                    return "PointStatus." + error;
            }
            return null;
        };

        /**
         * Creates a ESSEventAndStatusZGEN message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSEventAndStatusZGEN} ESSEventAndStatusZGEN
         */
        ESSEventAndStatusZGEN.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSEventAndStatusZGEN)
                return object;
            var message = new $root.essmodule.ESSEventAndStatusZGEN();
            if (object.logicalNodeForEventAndStatus != null) {
                if (typeof object.logicalNodeForEventAndStatus !== "object")
                    throw TypeError(".essmodule.ESSEventAndStatusZGEN.logicalNodeForEventAndStatus: object expected");
                message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.fromObject(object.logicalNodeForEventAndStatus);
            }
            if (object.AuxPwrSt != null) {
                if (typeof object.AuxPwrSt !== "object")
                    throw TypeError(".essmodule.ESSEventAndStatusZGEN.AuxPwrSt: object expected");
                message.AuxPwrSt = $root.commonmodule.StatusSPS.fromObject(object.AuxPwrSt);
            }
            if (object.DynamicTest != null) {
                if (typeof object.DynamicTest !== "object")
                    throw TypeError(".essmodule.ESSEventAndStatusZGEN.DynamicTest: object expected");
                message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.fromObject(object.DynamicTest);
            }
            if (object.EmgStop != null) {
                if (typeof object.EmgStop !== "object")
                    throw TypeError(".essmodule.ESSEventAndStatusZGEN.EmgStop: object expected");
                message.EmgStop = $root.commonmodule.StatusSPS.fromObject(object.EmgStop);
            }
            if (object.GnSynSt != null) {
                if (typeof object.GnSynSt !== "object")
                    throw TypeError(".essmodule.ESSEventAndStatusZGEN.GnSynSt: object expected");
                message.GnSynSt = $root.commonmodule.StatusSPS.fromObject(object.GnSynSt);
            }
            if (object.PointStatus != null) {
                if (typeof object.PointStatus !== "object")
                    throw TypeError(".essmodule.ESSEventAndStatusZGEN.PointStatus: object expected");
                message.PointStatus = $root.essmodule.ESSPointStatus.fromObject(object.PointStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSEventAndStatusZGEN message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @static
         * @param {essmodule.ESSEventAndStatusZGEN} message ESSEventAndStatusZGEN
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSEventAndStatusZGEN.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForEventAndStatus = null;
                object.AuxPwrSt = null;
                object.DynamicTest = null;
                object.EmgStop = null;
                object.GnSynSt = null;
                object.PointStatus = null;
            }
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus"))
                object.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.toObject(message.logicalNodeForEventAndStatus, options);
            if (message.AuxPwrSt != null && message.hasOwnProperty("AuxPwrSt"))
                object.AuxPwrSt = $root.commonmodule.StatusSPS.toObject(message.AuxPwrSt, options);
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest"))
                object.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.toObject(message.DynamicTest, options);
            if (message.EmgStop != null && message.hasOwnProperty("EmgStop"))
                object.EmgStop = $root.commonmodule.StatusSPS.toObject(message.EmgStop, options);
            if (message.GnSynSt != null && message.hasOwnProperty("GnSynSt"))
                object.GnSynSt = $root.commonmodule.StatusSPS.toObject(message.GnSynSt, options);
            if (message.PointStatus != null && message.hasOwnProperty("PointStatus"))
                object.PointStatus = $root.essmodule.ESSPointStatus.toObject(message.PointStatus, options);
            return object;
        };

        /**
         * Converts this ESSEventAndStatusZGEN to JSON.
         * @function toJSON
         * @memberof essmodule.ESSEventAndStatusZGEN
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSEventAndStatusZGEN.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSEventAndStatusZGEN;
    })();

    essmodule.ESSEventZGEN = (function() {

        /**
         * Properties of a ESSEventZGEN.
         * @memberof essmodule
         * @interface IESSEventZGEN
         * @property {essmodule.IESSEventAndStatusZGEN|null} [eSSEventAndStatusZGEN] ESSEventZGEN eSSEventAndStatusZGEN
         */

        /**
         * Constructs a new ESSEventZGEN.
         * @memberof essmodule
         * @classdesc Represents a ESSEventZGEN.
         * @implements IESSEventZGEN
         * @constructor
         * @param {essmodule.IESSEventZGEN=} [properties] Properties to set
         */
        function ESSEventZGEN(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSEventZGEN eSSEventAndStatusZGEN.
         * @member {essmodule.IESSEventAndStatusZGEN|null|undefined} eSSEventAndStatusZGEN
         * @memberof essmodule.ESSEventZGEN
         * @instance
         */
        ESSEventZGEN.prototype.eSSEventAndStatusZGEN = null;

        /**
         * Creates a new ESSEventZGEN instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSEventZGEN
         * @static
         * @param {essmodule.IESSEventZGEN=} [properties] Properties to set
         * @returns {essmodule.ESSEventZGEN} ESSEventZGEN instance
         */
        ESSEventZGEN.create = function create(properties) {
            return new ESSEventZGEN(properties);
        };

        /**
         * Encodes the specified ESSEventZGEN message. Does not implicitly {@link essmodule.ESSEventZGEN.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSEventZGEN
         * @static
         * @param {essmodule.IESSEventZGEN} message ESSEventZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSEventZGEN.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eSSEventAndStatusZGEN != null && Object.hasOwnProperty.call(message, "eSSEventAndStatusZGEN"))
                $root.essmodule.ESSEventAndStatusZGEN.encode(message.eSSEventAndStatusZGEN, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSEventZGEN message, length delimited. Does not implicitly {@link essmodule.ESSEventZGEN.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSEventZGEN
         * @static
         * @param {essmodule.IESSEventZGEN} message ESSEventZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSEventZGEN.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSEventZGEN message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSEventZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSEventZGEN} ESSEventZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSEventZGEN.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSEventZGEN();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eSSEventAndStatusZGEN = $root.essmodule.ESSEventAndStatusZGEN.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSEventZGEN message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSEventZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSEventZGEN} ESSEventZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSEventZGEN.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSEventZGEN message.
         * @function verify
         * @memberof essmodule.ESSEventZGEN
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSEventZGEN.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eSSEventAndStatusZGEN != null && message.hasOwnProperty("eSSEventAndStatusZGEN")) {
                var error = $root.essmodule.ESSEventAndStatusZGEN.verify(message.eSSEventAndStatusZGEN);
                if (error)
                    return "eSSEventAndStatusZGEN." + error;
            }
            return null;
        };

        /**
         * Creates a ESSEventZGEN message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSEventZGEN
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSEventZGEN} ESSEventZGEN
         */
        ESSEventZGEN.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSEventZGEN)
                return object;
            var message = new $root.essmodule.ESSEventZGEN();
            if (object.eSSEventAndStatusZGEN != null) {
                if (typeof object.eSSEventAndStatusZGEN !== "object")
                    throw TypeError(".essmodule.ESSEventZGEN.eSSEventAndStatusZGEN: object expected");
                message.eSSEventAndStatusZGEN = $root.essmodule.ESSEventAndStatusZGEN.fromObject(object.eSSEventAndStatusZGEN);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSEventZGEN message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSEventZGEN
         * @static
         * @param {essmodule.ESSEventZGEN} message ESSEventZGEN
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSEventZGEN.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eSSEventAndStatusZGEN = null;
            if (message.eSSEventAndStatusZGEN != null && message.hasOwnProperty("eSSEventAndStatusZGEN"))
                object.eSSEventAndStatusZGEN = $root.essmodule.ESSEventAndStatusZGEN.toObject(message.eSSEventAndStatusZGEN, options);
            return object;
        };

        /**
         * Converts this ESSEventZGEN to JSON.
         * @function toJSON
         * @memberof essmodule.ESSEventZGEN
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSEventZGEN.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSEventZGEN;
    })();

    essmodule.ESSEvent = (function() {

        /**
         * Properties of a ESSEvent.
         * @memberof essmodule
         * @interface IESSEvent
         * @property {commonmodule.IEventValue|null} [eventValue] ESSEvent eventValue
         * @property {essmodule.IEssEventZBAT|null} [essEventZBAT] ESSEvent essEventZBAT
         * @property {essmodule.IESSEventZGEN|null} [essEventZGEN] ESSEvent essEventZGEN
         */

        /**
         * Constructs a new ESSEvent.
         * @memberof essmodule
         * @classdesc Represents a ESSEvent.
         * @implements IESSEvent
         * @constructor
         * @param {essmodule.IESSEvent=} [properties] Properties to set
         */
        function ESSEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSEvent eventValue.
         * @member {commonmodule.IEventValue|null|undefined} eventValue
         * @memberof essmodule.ESSEvent
         * @instance
         */
        ESSEvent.prototype.eventValue = null;

        /**
         * ESSEvent essEventZBAT.
         * @member {essmodule.IEssEventZBAT|null|undefined} essEventZBAT
         * @memberof essmodule.ESSEvent
         * @instance
         */
        ESSEvent.prototype.essEventZBAT = null;

        /**
         * ESSEvent essEventZGEN.
         * @member {essmodule.IESSEventZGEN|null|undefined} essEventZGEN
         * @memberof essmodule.ESSEvent
         * @instance
         */
        ESSEvent.prototype.essEventZGEN = null;

        /**
         * Creates a new ESSEvent instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSEvent
         * @static
         * @param {essmodule.IESSEvent=} [properties] Properties to set
         * @returns {essmodule.ESSEvent} ESSEvent instance
         */
        ESSEvent.create = function create(properties) {
            return new ESSEvent(properties);
        };

        /**
         * Encodes the specified ESSEvent message. Does not implicitly {@link essmodule.ESSEvent.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSEvent
         * @static
         * @param {essmodule.IESSEvent} message ESSEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventValue != null && Object.hasOwnProperty.call(message, "eventValue"))
                $root.commonmodule.EventValue.encode(message.eventValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.essEventZBAT != null && Object.hasOwnProperty.call(message, "essEventZBAT"))
                $root.essmodule.EssEventZBAT.encode(message.essEventZBAT, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.essEventZGEN != null && Object.hasOwnProperty.call(message, "essEventZGEN"))
                $root.essmodule.ESSEventZGEN.encode(message.essEventZGEN, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSEvent message, length delimited. Does not implicitly {@link essmodule.ESSEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSEvent
         * @static
         * @param {essmodule.IESSEvent} message ESSEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSEvent message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSEvent} ESSEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventValue = $root.commonmodule.EventValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.essEventZBAT = $root.essmodule.EssEventZBAT.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.essEventZGEN = $root.essmodule.ESSEventZGEN.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSEvent} ESSEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSEvent message.
         * @function verify
         * @memberof essmodule.ESSEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventValue != null && message.hasOwnProperty("eventValue")) {
                var error = $root.commonmodule.EventValue.verify(message.eventValue);
                if (error)
                    return "eventValue." + error;
            }
            if (message.essEventZBAT != null && message.hasOwnProperty("essEventZBAT")) {
                var error = $root.essmodule.EssEventZBAT.verify(message.essEventZBAT);
                if (error)
                    return "essEventZBAT." + error;
            }
            if (message.essEventZGEN != null && message.hasOwnProperty("essEventZGEN")) {
                var error = $root.essmodule.ESSEventZGEN.verify(message.essEventZGEN);
                if (error)
                    return "essEventZGEN." + error;
            }
            return null;
        };

        /**
         * Creates a ESSEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSEvent} ESSEvent
         */
        ESSEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSEvent)
                return object;
            var message = new $root.essmodule.ESSEvent();
            if (object.eventValue != null) {
                if (typeof object.eventValue !== "object")
                    throw TypeError(".essmodule.ESSEvent.eventValue: object expected");
                message.eventValue = $root.commonmodule.EventValue.fromObject(object.eventValue);
            }
            if (object.essEventZBAT != null) {
                if (typeof object.essEventZBAT !== "object")
                    throw TypeError(".essmodule.ESSEvent.essEventZBAT: object expected");
                message.essEventZBAT = $root.essmodule.EssEventZBAT.fromObject(object.essEventZBAT);
            }
            if (object.essEventZGEN != null) {
                if (typeof object.essEventZGEN !== "object")
                    throw TypeError(".essmodule.ESSEvent.essEventZGEN: object expected");
                message.essEventZGEN = $root.essmodule.ESSEventZGEN.fromObject(object.essEventZGEN);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSEvent
         * @static
         * @param {essmodule.ESSEvent} message ESSEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventValue = null;
                object.essEventZBAT = null;
                object.essEventZGEN = null;
            }
            if (message.eventValue != null && message.hasOwnProperty("eventValue"))
                object.eventValue = $root.commonmodule.EventValue.toObject(message.eventValue, options);
            if (message.essEventZBAT != null && message.hasOwnProperty("essEventZBAT"))
                object.essEventZBAT = $root.essmodule.EssEventZBAT.toObject(message.essEventZBAT, options);
            if (message.essEventZGEN != null && message.hasOwnProperty("essEventZGEN"))
                object.essEventZGEN = $root.essmodule.ESSEventZGEN.toObject(message.essEventZGEN, options);
            return object;
        };

        /**
         * Converts this ESSEvent to JSON.
         * @function toJSON
         * @memberof essmodule.ESSEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSEvent;
    })();

    essmodule.ESSEventProfile = (function() {

        /**
         * Properties of a ESSEventProfile.
         * @memberof essmodule
         * @interface IESSEventProfile
         * @property {commonmodule.IEventMessageInfo|null} [eventMessageInfo] ESSEventProfile eventMessageInfo
         * @property {commonmodule.IESS|null} [ess] ESSEventProfile ess
         * @property {essmodule.IESSEvent|null} [essEvent] ESSEventProfile essEvent
         * @property {commonmodule.IIED|null} [ied] ESSEventProfile ied
         */

        /**
         * Constructs a new ESSEventProfile.
         * @memberof essmodule
         * @classdesc Represents a ESSEventProfile.
         * @implements IESSEventProfile
         * @constructor
         * @param {essmodule.IESSEventProfile=} [properties] Properties to set
         */
        function ESSEventProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSEventProfile eventMessageInfo.
         * @member {commonmodule.IEventMessageInfo|null|undefined} eventMessageInfo
         * @memberof essmodule.ESSEventProfile
         * @instance
         */
        ESSEventProfile.prototype.eventMessageInfo = null;

        /**
         * ESSEventProfile ess.
         * @member {commonmodule.IESS|null|undefined} ess
         * @memberof essmodule.ESSEventProfile
         * @instance
         */
        ESSEventProfile.prototype.ess = null;

        /**
         * ESSEventProfile essEvent.
         * @member {essmodule.IESSEvent|null|undefined} essEvent
         * @memberof essmodule.ESSEventProfile
         * @instance
         */
        ESSEventProfile.prototype.essEvent = null;

        /**
         * ESSEventProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof essmodule.ESSEventProfile
         * @instance
         */
        ESSEventProfile.prototype.ied = null;

        /**
         * Creates a new ESSEventProfile instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSEventProfile
         * @static
         * @param {essmodule.IESSEventProfile=} [properties] Properties to set
         * @returns {essmodule.ESSEventProfile} ESSEventProfile instance
         */
        ESSEventProfile.create = function create(properties) {
            return new ESSEventProfile(properties);
        };

        /**
         * Encodes the specified ESSEventProfile message. Does not implicitly {@link essmodule.ESSEventProfile.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSEventProfile
         * @static
         * @param {essmodule.IESSEventProfile} message ESSEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSEventProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventMessageInfo != null && Object.hasOwnProperty.call(message, "eventMessageInfo"))
                $root.commonmodule.EventMessageInfo.encode(message.eventMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ess != null && Object.hasOwnProperty.call(message, "ess"))
                $root.commonmodule.ESS.encode(message.ess, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.essEvent != null && Object.hasOwnProperty.call(message, "essEvent"))
                $root.essmodule.ESSEvent.encode(message.essEvent, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSEventProfile message, length delimited. Does not implicitly {@link essmodule.ESSEventProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSEventProfile
         * @static
         * @param {essmodule.IESSEventProfile} message ESSEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSEventProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSEventProfile message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSEventProfile} ESSEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSEventProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSEventProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventMessageInfo = $root.commonmodule.EventMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ess = $root.commonmodule.ESS.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.essEvent = $root.essmodule.ESSEvent.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSEventProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSEventProfile} ESSEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSEventProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSEventProfile message.
         * @function verify
         * @memberof essmodule.ESSEventProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSEventProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo")) {
                var error = $root.commonmodule.EventMessageInfo.verify(message.eventMessageInfo);
                if (error)
                    return "eventMessageInfo." + error;
            }
            if (message.ess != null && message.hasOwnProperty("ess")) {
                var error = $root.commonmodule.ESS.verify(message.ess);
                if (error)
                    return "ess." + error;
            }
            if (message.essEvent != null && message.hasOwnProperty("essEvent")) {
                var error = $root.essmodule.ESSEvent.verify(message.essEvent);
                if (error)
                    return "essEvent." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            return null;
        };

        /**
         * Creates a ESSEventProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSEventProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSEventProfile} ESSEventProfile
         */
        ESSEventProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSEventProfile)
                return object;
            var message = new $root.essmodule.ESSEventProfile();
            if (object.eventMessageInfo != null) {
                if (typeof object.eventMessageInfo !== "object")
                    throw TypeError(".essmodule.ESSEventProfile.eventMessageInfo: object expected");
                message.eventMessageInfo = $root.commonmodule.EventMessageInfo.fromObject(object.eventMessageInfo);
            }
            if (object.ess != null) {
                if (typeof object.ess !== "object")
                    throw TypeError(".essmodule.ESSEventProfile.ess: object expected");
                message.ess = $root.commonmodule.ESS.fromObject(object.ess);
            }
            if (object.essEvent != null) {
                if (typeof object.essEvent !== "object")
                    throw TypeError(".essmodule.ESSEventProfile.essEvent: object expected");
                message.essEvent = $root.essmodule.ESSEvent.fromObject(object.essEvent);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".essmodule.ESSEventProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSEventProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSEventProfile
         * @static
         * @param {essmodule.ESSEventProfile} message ESSEventProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSEventProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventMessageInfo = null;
                object.ess = null;
                object.essEvent = null;
                object.ied = null;
            }
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo"))
                object.eventMessageInfo = $root.commonmodule.EventMessageInfo.toObject(message.eventMessageInfo, options);
            if (message.ess != null && message.hasOwnProperty("ess"))
                object.ess = $root.commonmodule.ESS.toObject(message.ess, options);
            if (message.essEvent != null && message.hasOwnProperty("essEvent"))
                object.essEvent = $root.essmodule.ESSEvent.toObject(message.essEvent, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            return object;
        };

        /**
         * Converts this ESSEventProfile to JSON.
         * @function toJSON
         * @memberof essmodule.ESSEventProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSEventProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSEventProfile;
    })();

    essmodule.ESSReading = (function() {

        /**
         * Properties of a ESSReading.
         * @memberof essmodule
         * @interface IESSReading
         * @property {commonmodule.IConductingEquipmentTerminalReading|null} [conductingEquipmentTerminalReading] ESSReading conductingEquipmentTerminalReading
         * @property {commonmodule.IPhaseMMTN|null} [phaseMMTN] ESSReading phaseMMTN
         * @property {commonmodule.IReadingMMTR|null} [readingMMTR] ESSReading readingMMTR
         * @property {commonmodule.IReadingMMXU|null} [readingMMXU] ESSReading readingMMXU
         */

        /**
         * Constructs a new ESSReading.
         * @memberof essmodule
         * @classdesc Represents a ESSReading.
         * @implements IESSReading
         * @constructor
         * @param {essmodule.IESSReading=} [properties] Properties to set
         */
        function ESSReading(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSReading conductingEquipmentTerminalReading.
         * @member {commonmodule.IConductingEquipmentTerminalReading|null|undefined} conductingEquipmentTerminalReading
         * @memberof essmodule.ESSReading
         * @instance
         */
        ESSReading.prototype.conductingEquipmentTerminalReading = null;

        /**
         * ESSReading phaseMMTN.
         * @member {commonmodule.IPhaseMMTN|null|undefined} phaseMMTN
         * @memberof essmodule.ESSReading
         * @instance
         */
        ESSReading.prototype.phaseMMTN = null;

        /**
         * ESSReading readingMMTR.
         * @member {commonmodule.IReadingMMTR|null|undefined} readingMMTR
         * @memberof essmodule.ESSReading
         * @instance
         */
        ESSReading.prototype.readingMMTR = null;

        /**
         * ESSReading readingMMXU.
         * @member {commonmodule.IReadingMMXU|null|undefined} readingMMXU
         * @memberof essmodule.ESSReading
         * @instance
         */
        ESSReading.prototype.readingMMXU = null;

        /**
         * Creates a new ESSReading instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSReading
         * @static
         * @param {essmodule.IESSReading=} [properties] Properties to set
         * @returns {essmodule.ESSReading} ESSReading instance
         */
        ESSReading.create = function create(properties) {
            return new ESSReading(properties);
        };

        /**
         * Encodes the specified ESSReading message. Does not implicitly {@link essmodule.ESSReading.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSReading
         * @static
         * @param {essmodule.IESSReading} message ESSReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSReading.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipmentTerminalReading != null && Object.hasOwnProperty.call(message, "conductingEquipmentTerminalReading"))
                $root.commonmodule.ConductingEquipmentTerminalReading.encode(message.conductingEquipmentTerminalReading, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.phaseMMTN != null && Object.hasOwnProperty.call(message, "phaseMMTN"))
                $root.commonmodule.PhaseMMTN.encode(message.phaseMMTN, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.readingMMTR != null && Object.hasOwnProperty.call(message, "readingMMTR"))
                $root.commonmodule.ReadingMMTR.encode(message.readingMMTR, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.readingMMXU != null && Object.hasOwnProperty.call(message, "readingMMXU"))
                $root.commonmodule.ReadingMMXU.encode(message.readingMMXU, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSReading message, length delimited. Does not implicitly {@link essmodule.ESSReading.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSReading
         * @static
         * @param {essmodule.IESSReading} message ESSReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSReading.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSReading message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSReading} ESSReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSReading.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSReading();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.phaseMMTN = $root.commonmodule.PhaseMMTN.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.readingMMTR = $root.commonmodule.ReadingMMTR.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.readingMMXU = $root.commonmodule.ReadingMMXU.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSReading message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSReading} ESSReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSReading.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSReading message.
         * @function verify
         * @memberof essmodule.ESSReading
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSReading.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading")) {
                var error = $root.commonmodule.ConductingEquipmentTerminalReading.verify(message.conductingEquipmentTerminalReading);
                if (error)
                    return "conductingEquipmentTerminalReading." + error;
            }
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN")) {
                var error = $root.commonmodule.PhaseMMTN.verify(message.phaseMMTN);
                if (error)
                    return "phaseMMTN." + error;
            }
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR")) {
                var error = $root.commonmodule.ReadingMMTR.verify(message.readingMMTR);
                if (error)
                    return "readingMMTR." + error;
            }
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU")) {
                var error = $root.commonmodule.ReadingMMXU.verify(message.readingMMXU);
                if (error)
                    return "readingMMXU." + error;
            }
            return null;
        };

        /**
         * Creates a ESSReading message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSReading
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSReading} ESSReading
         */
        ESSReading.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSReading)
                return object;
            var message = new $root.essmodule.ESSReading();
            if (object.conductingEquipmentTerminalReading != null) {
                if (typeof object.conductingEquipmentTerminalReading !== "object")
                    throw TypeError(".essmodule.ESSReading.conductingEquipmentTerminalReading: object expected");
                message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.fromObject(object.conductingEquipmentTerminalReading);
            }
            if (object.phaseMMTN != null) {
                if (typeof object.phaseMMTN !== "object")
                    throw TypeError(".essmodule.ESSReading.phaseMMTN: object expected");
                message.phaseMMTN = $root.commonmodule.PhaseMMTN.fromObject(object.phaseMMTN);
            }
            if (object.readingMMTR != null) {
                if (typeof object.readingMMTR !== "object")
                    throw TypeError(".essmodule.ESSReading.readingMMTR: object expected");
                message.readingMMTR = $root.commonmodule.ReadingMMTR.fromObject(object.readingMMTR);
            }
            if (object.readingMMXU != null) {
                if (typeof object.readingMMXU !== "object")
                    throw TypeError(".essmodule.ESSReading.readingMMXU: object expected");
                message.readingMMXU = $root.commonmodule.ReadingMMXU.fromObject(object.readingMMXU);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSReading message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSReading
         * @static
         * @param {essmodule.ESSReading} message ESSReading
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSReading.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conductingEquipmentTerminalReading = null;
                object.phaseMMTN = null;
                object.readingMMTR = null;
                object.readingMMXU = null;
            }
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading"))
                object.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.toObject(message.conductingEquipmentTerminalReading, options);
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN"))
                object.phaseMMTN = $root.commonmodule.PhaseMMTN.toObject(message.phaseMMTN, options);
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR"))
                object.readingMMTR = $root.commonmodule.ReadingMMTR.toObject(message.readingMMTR, options);
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU"))
                object.readingMMXU = $root.commonmodule.ReadingMMXU.toObject(message.readingMMXU, options);
            return object;
        };

        /**
         * Converts this ESSReading to JSON.
         * @function toJSON
         * @memberof essmodule.ESSReading
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSReading.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSReading;
    })();

    essmodule.ESSReadingProfile = (function() {

        /**
         * Properties of a ESSReadingProfile.
         * @memberof essmodule
         * @interface IESSReadingProfile
         * @property {commonmodule.IReadingMessageInfo|null} [readingMessageInfo] ESSReadingProfile readingMessageInfo
         * @property {commonmodule.IESS|null} [ess] ESSReadingProfile ess
         * @property {essmodule.IESSReading|null} [essReading] ESSReadingProfile essReading
         * @property {commonmodule.IIED|null} [ied] ESSReadingProfile ied
         */

        /**
         * Constructs a new ESSReadingProfile.
         * @memberof essmodule
         * @classdesc Represents a ESSReadingProfile.
         * @implements IESSReadingProfile
         * @constructor
         * @param {essmodule.IESSReadingProfile=} [properties] Properties to set
         */
        function ESSReadingProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSReadingProfile readingMessageInfo.
         * @member {commonmodule.IReadingMessageInfo|null|undefined} readingMessageInfo
         * @memberof essmodule.ESSReadingProfile
         * @instance
         */
        ESSReadingProfile.prototype.readingMessageInfo = null;

        /**
         * ESSReadingProfile ess.
         * @member {commonmodule.IESS|null|undefined} ess
         * @memberof essmodule.ESSReadingProfile
         * @instance
         */
        ESSReadingProfile.prototype.ess = null;

        /**
         * ESSReadingProfile essReading.
         * @member {essmodule.IESSReading|null|undefined} essReading
         * @memberof essmodule.ESSReadingProfile
         * @instance
         */
        ESSReadingProfile.prototype.essReading = null;

        /**
         * ESSReadingProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof essmodule.ESSReadingProfile
         * @instance
         */
        ESSReadingProfile.prototype.ied = null;

        /**
         * Creates a new ESSReadingProfile instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSReadingProfile
         * @static
         * @param {essmodule.IESSReadingProfile=} [properties] Properties to set
         * @returns {essmodule.ESSReadingProfile} ESSReadingProfile instance
         */
        ESSReadingProfile.create = function create(properties) {
            return new ESSReadingProfile(properties);
        };

        /**
         * Encodes the specified ESSReadingProfile message. Does not implicitly {@link essmodule.ESSReadingProfile.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSReadingProfile
         * @static
         * @param {essmodule.IESSReadingProfile} message ESSReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSReadingProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.readingMessageInfo != null && Object.hasOwnProperty.call(message, "readingMessageInfo"))
                $root.commonmodule.ReadingMessageInfo.encode(message.readingMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ess != null && Object.hasOwnProperty.call(message, "ess"))
                $root.commonmodule.ESS.encode(message.ess, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.essReading != null && Object.hasOwnProperty.call(message, "essReading"))
                $root.essmodule.ESSReading.encode(message.essReading, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSReadingProfile message, length delimited. Does not implicitly {@link essmodule.ESSReadingProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSReadingProfile
         * @static
         * @param {essmodule.IESSReadingProfile} message ESSReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSReadingProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSReadingProfile message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSReadingProfile} ESSReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSReadingProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSReadingProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ess = $root.commonmodule.ESS.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.essReading = $root.essmodule.ESSReading.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSReadingProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSReadingProfile} ESSReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSReadingProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSReadingProfile message.
         * @function verify
         * @memberof essmodule.ESSReadingProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSReadingProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo")) {
                var error = $root.commonmodule.ReadingMessageInfo.verify(message.readingMessageInfo);
                if (error)
                    return "readingMessageInfo." + error;
            }
            if (message.ess != null && message.hasOwnProperty("ess")) {
                var error = $root.commonmodule.ESS.verify(message.ess);
                if (error)
                    return "ess." + error;
            }
            if (message.essReading != null && message.hasOwnProperty("essReading")) {
                var error = $root.essmodule.ESSReading.verify(message.essReading);
                if (error)
                    return "essReading." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            return null;
        };

        /**
         * Creates a ESSReadingProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSReadingProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSReadingProfile} ESSReadingProfile
         */
        ESSReadingProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSReadingProfile)
                return object;
            var message = new $root.essmodule.ESSReadingProfile();
            if (object.readingMessageInfo != null) {
                if (typeof object.readingMessageInfo !== "object")
                    throw TypeError(".essmodule.ESSReadingProfile.readingMessageInfo: object expected");
                message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.fromObject(object.readingMessageInfo);
            }
            if (object.ess != null) {
                if (typeof object.ess !== "object")
                    throw TypeError(".essmodule.ESSReadingProfile.ess: object expected");
                message.ess = $root.commonmodule.ESS.fromObject(object.ess);
            }
            if (object.essReading != null) {
                if (typeof object.essReading !== "object")
                    throw TypeError(".essmodule.ESSReadingProfile.essReading: object expected");
                message.essReading = $root.essmodule.ESSReading.fromObject(object.essReading);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".essmodule.ESSReadingProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSReadingProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSReadingProfile
         * @static
         * @param {essmodule.ESSReadingProfile} message ESSReadingProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSReadingProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.readingMessageInfo = null;
                object.ess = null;
                object.essReading = null;
                object.ied = null;
            }
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo"))
                object.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.toObject(message.readingMessageInfo, options);
            if (message.ess != null && message.hasOwnProperty("ess"))
                object.ess = $root.commonmodule.ESS.toObject(message.ess, options);
            if (message.essReading != null && message.hasOwnProperty("essReading"))
                object.essReading = $root.essmodule.ESSReading.toObject(message.essReading, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            return object;
        };

        /**
         * Converts this ESSReadingProfile to JSON.
         * @function toJSON
         * @memberof essmodule.ESSReadingProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSReadingProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSReadingProfile;
    })();

    essmodule.EssStatusZBAT = (function() {

        /**
         * Properties of an EssStatusZBAT.
         * @memberof essmodule
         * @interface IEssStatusZBAT
         * @property {commonmodule.ILogicalNodeForEventAndStatus|null} [logicalNodeForEventAndStatus] EssStatusZBAT logicalNodeForEventAndStatus
         * @property {commonmodule.IStatusSPS|null} [BatSt] EssStatusZBAT BatSt
         * @property {commonmodule.IENG_GridConnectModeKind|null} [GriMod] EssStatusZBAT GriMod
         * @property {commonmodule.IMV|null} [Soc] EssStatusZBAT Soc
         * @property {commonmodule.IStatusSPS|null} [Stdby] EssStatusZBAT Stdby
         */

        /**
         * Constructs a new EssStatusZBAT.
         * @memberof essmodule
         * @classdesc Represents an EssStatusZBAT.
         * @implements IEssStatusZBAT
         * @constructor
         * @param {essmodule.IEssStatusZBAT=} [properties] Properties to set
         */
        function EssStatusZBAT(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EssStatusZBAT logicalNodeForEventAndStatus.
         * @member {commonmodule.ILogicalNodeForEventAndStatus|null|undefined} logicalNodeForEventAndStatus
         * @memberof essmodule.EssStatusZBAT
         * @instance
         */
        EssStatusZBAT.prototype.logicalNodeForEventAndStatus = null;

        /**
         * EssStatusZBAT BatSt.
         * @member {commonmodule.IStatusSPS|null|undefined} BatSt
         * @memberof essmodule.EssStatusZBAT
         * @instance
         */
        EssStatusZBAT.prototype.BatSt = null;

        /**
         * EssStatusZBAT GriMod.
         * @member {commonmodule.IENG_GridConnectModeKind|null|undefined} GriMod
         * @memberof essmodule.EssStatusZBAT
         * @instance
         */
        EssStatusZBAT.prototype.GriMod = null;

        /**
         * EssStatusZBAT Soc.
         * @member {commonmodule.IMV|null|undefined} Soc
         * @memberof essmodule.EssStatusZBAT
         * @instance
         */
        EssStatusZBAT.prototype.Soc = null;

        /**
         * EssStatusZBAT Stdby.
         * @member {commonmodule.IStatusSPS|null|undefined} Stdby
         * @memberof essmodule.EssStatusZBAT
         * @instance
         */
        EssStatusZBAT.prototype.Stdby = null;

        /**
         * Creates a new EssStatusZBAT instance using the specified properties.
         * @function create
         * @memberof essmodule.EssStatusZBAT
         * @static
         * @param {essmodule.IEssStatusZBAT=} [properties] Properties to set
         * @returns {essmodule.EssStatusZBAT} EssStatusZBAT instance
         */
        EssStatusZBAT.create = function create(properties) {
            return new EssStatusZBAT(properties);
        };

        /**
         * Encodes the specified EssStatusZBAT message. Does not implicitly {@link essmodule.EssStatusZBAT.verify|verify} messages.
         * @function encode
         * @memberof essmodule.EssStatusZBAT
         * @static
         * @param {essmodule.IEssStatusZBAT} message EssStatusZBAT message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EssStatusZBAT.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForEventAndStatus != null && Object.hasOwnProperty.call(message, "logicalNodeForEventAndStatus"))
                $root.commonmodule.LogicalNodeForEventAndStatus.encode(message.logicalNodeForEventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.BatSt != null && Object.hasOwnProperty.call(message, "BatSt"))
                $root.commonmodule.StatusSPS.encode(message.BatSt, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.GriMod != null && Object.hasOwnProperty.call(message, "GriMod"))
                $root.commonmodule.ENG_GridConnectModeKind.encode(message.GriMod, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.Soc != null && Object.hasOwnProperty.call(message, "Soc"))
                $root.commonmodule.MV.encode(message.Soc, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.Stdby != null && Object.hasOwnProperty.call(message, "Stdby"))
                $root.commonmodule.StatusSPS.encode(message.Stdby, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EssStatusZBAT message, length delimited. Does not implicitly {@link essmodule.EssStatusZBAT.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.EssStatusZBAT
         * @static
         * @param {essmodule.IEssStatusZBAT} message EssStatusZBAT message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EssStatusZBAT.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EssStatusZBAT message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.EssStatusZBAT
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.EssStatusZBAT} EssStatusZBAT
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EssStatusZBAT.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.EssStatusZBAT();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.BatSt = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.GriMod = $root.commonmodule.ENG_GridConnectModeKind.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.Soc = $root.commonmodule.MV.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.Stdby = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EssStatusZBAT message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.EssStatusZBAT
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.EssStatusZBAT} EssStatusZBAT
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EssStatusZBAT.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EssStatusZBAT message.
         * @function verify
         * @memberof essmodule.EssStatusZBAT
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EssStatusZBAT.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus")) {
                var error = $root.commonmodule.LogicalNodeForEventAndStatus.verify(message.logicalNodeForEventAndStatus);
                if (error)
                    return "logicalNodeForEventAndStatus." + error;
            }
            if (message.BatSt != null && message.hasOwnProperty("BatSt")) {
                var error = $root.commonmodule.StatusSPS.verify(message.BatSt);
                if (error)
                    return "BatSt." + error;
            }
            if (message.GriMod != null && message.hasOwnProperty("GriMod")) {
                var error = $root.commonmodule.ENG_GridConnectModeKind.verify(message.GriMod);
                if (error)
                    return "GriMod." + error;
            }
            if (message.Soc != null && message.hasOwnProperty("Soc")) {
                var error = $root.commonmodule.MV.verify(message.Soc);
                if (error)
                    return "Soc." + error;
            }
            if (message.Stdby != null && message.hasOwnProperty("Stdby")) {
                var error = $root.commonmodule.StatusSPS.verify(message.Stdby);
                if (error)
                    return "Stdby." + error;
            }
            return null;
        };

        /**
         * Creates an EssStatusZBAT message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.EssStatusZBAT
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.EssStatusZBAT} EssStatusZBAT
         */
        EssStatusZBAT.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.EssStatusZBAT)
                return object;
            var message = new $root.essmodule.EssStatusZBAT();
            if (object.logicalNodeForEventAndStatus != null) {
                if (typeof object.logicalNodeForEventAndStatus !== "object")
                    throw TypeError(".essmodule.EssStatusZBAT.logicalNodeForEventAndStatus: object expected");
                message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.fromObject(object.logicalNodeForEventAndStatus);
            }
            if (object.BatSt != null) {
                if (typeof object.BatSt !== "object")
                    throw TypeError(".essmodule.EssStatusZBAT.BatSt: object expected");
                message.BatSt = $root.commonmodule.StatusSPS.fromObject(object.BatSt);
            }
            if (object.GriMod != null) {
                if (typeof object.GriMod !== "object")
                    throw TypeError(".essmodule.EssStatusZBAT.GriMod: object expected");
                message.GriMod = $root.commonmodule.ENG_GridConnectModeKind.fromObject(object.GriMod);
            }
            if (object.Soc != null) {
                if (typeof object.Soc !== "object")
                    throw TypeError(".essmodule.EssStatusZBAT.Soc: object expected");
                message.Soc = $root.commonmodule.MV.fromObject(object.Soc);
            }
            if (object.Stdby != null) {
                if (typeof object.Stdby !== "object")
                    throw TypeError(".essmodule.EssStatusZBAT.Stdby: object expected");
                message.Stdby = $root.commonmodule.StatusSPS.fromObject(object.Stdby);
            }
            return message;
        };

        /**
         * Creates a plain object from an EssStatusZBAT message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.EssStatusZBAT
         * @static
         * @param {essmodule.EssStatusZBAT} message EssStatusZBAT
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EssStatusZBAT.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForEventAndStatus = null;
                object.BatSt = null;
                object.GriMod = null;
                object.Soc = null;
                object.Stdby = null;
            }
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus"))
                object.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.toObject(message.logicalNodeForEventAndStatus, options);
            if (message.BatSt != null && message.hasOwnProperty("BatSt"))
                object.BatSt = $root.commonmodule.StatusSPS.toObject(message.BatSt, options);
            if (message.GriMod != null && message.hasOwnProperty("GriMod"))
                object.GriMod = $root.commonmodule.ENG_GridConnectModeKind.toObject(message.GriMod, options);
            if (message.Soc != null && message.hasOwnProperty("Soc"))
                object.Soc = $root.commonmodule.MV.toObject(message.Soc, options);
            if (message.Stdby != null && message.hasOwnProperty("Stdby"))
                object.Stdby = $root.commonmodule.StatusSPS.toObject(message.Stdby, options);
            return object;
        };

        /**
         * Converts this EssStatusZBAT to JSON.
         * @function toJSON
         * @memberof essmodule.EssStatusZBAT
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EssStatusZBAT.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EssStatusZBAT;
    })();

    essmodule.ESSStatusZGEN = (function() {

        /**
         * Properties of a ESSStatusZGEN.
         * @memberof essmodule
         * @interface IESSStatusZGEN
         * @property {essmodule.IESSEventAndStatusZGEN|null} [eSSEventAndStatusZGEN] ESSStatusZGEN eSSEventAndStatusZGEN
         */

        /**
         * Constructs a new ESSStatusZGEN.
         * @memberof essmodule
         * @classdesc Represents a ESSStatusZGEN.
         * @implements IESSStatusZGEN
         * @constructor
         * @param {essmodule.IESSStatusZGEN=} [properties] Properties to set
         */
        function ESSStatusZGEN(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSStatusZGEN eSSEventAndStatusZGEN.
         * @member {essmodule.IESSEventAndStatusZGEN|null|undefined} eSSEventAndStatusZGEN
         * @memberof essmodule.ESSStatusZGEN
         * @instance
         */
        ESSStatusZGEN.prototype.eSSEventAndStatusZGEN = null;

        /**
         * Creates a new ESSStatusZGEN instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSStatusZGEN
         * @static
         * @param {essmodule.IESSStatusZGEN=} [properties] Properties to set
         * @returns {essmodule.ESSStatusZGEN} ESSStatusZGEN instance
         */
        ESSStatusZGEN.create = function create(properties) {
            return new ESSStatusZGEN(properties);
        };

        /**
         * Encodes the specified ESSStatusZGEN message. Does not implicitly {@link essmodule.ESSStatusZGEN.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSStatusZGEN
         * @static
         * @param {essmodule.IESSStatusZGEN} message ESSStatusZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSStatusZGEN.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eSSEventAndStatusZGEN != null && Object.hasOwnProperty.call(message, "eSSEventAndStatusZGEN"))
                $root.essmodule.ESSEventAndStatusZGEN.encode(message.eSSEventAndStatusZGEN, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSStatusZGEN message, length delimited. Does not implicitly {@link essmodule.ESSStatusZGEN.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSStatusZGEN
         * @static
         * @param {essmodule.IESSStatusZGEN} message ESSStatusZGEN message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSStatusZGEN.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSStatusZGEN message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSStatusZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSStatusZGEN} ESSStatusZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSStatusZGEN.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSStatusZGEN();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eSSEventAndStatusZGEN = $root.essmodule.ESSEventAndStatusZGEN.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSStatusZGEN message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSStatusZGEN
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSStatusZGEN} ESSStatusZGEN
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSStatusZGEN.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSStatusZGEN message.
         * @function verify
         * @memberof essmodule.ESSStatusZGEN
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSStatusZGEN.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eSSEventAndStatusZGEN != null && message.hasOwnProperty("eSSEventAndStatusZGEN")) {
                var error = $root.essmodule.ESSEventAndStatusZGEN.verify(message.eSSEventAndStatusZGEN);
                if (error)
                    return "eSSEventAndStatusZGEN." + error;
            }
            return null;
        };

        /**
         * Creates a ESSStatusZGEN message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSStatusZGEN
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSStatusZGEN} ESSStatusZGEN
         */
        ESSStatusZGEN.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSStatusZGEN)
                return object;
            var message = new $root.essmodule.ESSStatusZGEN();
            if (object.eSSEventAndStatusZGEN != null) {
                if (typeof object.eSSEventAndStatusZGEN !== "object")
                    throw TypeError(".essmodule.ESSStatusZGEN.eSSEventAndStatusZGEN: object expected");
                message.eSSEventAndStatusZGEN = $root.essmodule.ESSEventAndStatusZGEN.fromObject(object.eSSEventAndStatusZGEN);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSStatusZGEN message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSStatusZGEN
         * @static
         * @param {essmodule.ESSStatusZGEN} message ESSStatusZGEN
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSStatusZGEN.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.eSSEventAndStatusZGEN = null;
            if (message.eSSEventAndStatusZGEN != null && message.hasOwnProperty("eSSEventAndStatusZGEN"))
                object.eSSEventAndStatusZGEN = $root.essmodule.ESSEventAndStatusZGEN.toObject(message.eSSEventAndStatusZGEN, options);
            return object;
        };

        /**
         * Converts this ESSStatusZGEN to JSON.
         * @function toJSON
         * @memberof essmodule.ESSStatusZGEN
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSStatusZGEN.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSStatusZGEN;
    })();

    essmodule.ESSStatus = (function() {

        /**
         * Properties of a ESSStatus.
         * @memberof essmodule
         * @interface IESSStatus
         * @property {commonmodule.IStatusValue|null} [statusValue] ESSStatus statusValue
         * @property {essmodule.IEssStatusZBAT|null} [essStatusZBAT] ESSStatus essStatusZBAT
         * @property {essmodule.IESSStatusZGEN|null} [essStatusZGEN] ESSStatus essStatusZGEN
         */

        /**
         * Constructs a new ESSStatus.
         * @memberof essmodule
         * @classdesc Represents a ESSStatus.
         * @implements IESSStatus
         * @constructor
         * @param {essmodule.IESSStatus=} [properties] Properties to set
         */
        function ESSStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSStatus statusValue.
         * @member {commonmodule.IStatusValue|null|undefined} statusValue
         * @memberof essmodule.ESSStatus
         * @instance
         */
        ESSStatus.prototype.statusValue = null;

        /**
         * ESSStatus essStatusZBAT.
         * @member {essmodule.IEssStatusZBAT|null|undefined} essStatusZBAT
         * @memberof essmodule.ESSStatus
         * @instance
         */
        ESSStatus.prototype.essStatusZBAT = null;

        /**
         * ESSStatus essStatusZGEN.
         * @member {essmodule.IESSStatusZGEN|null|undefined} essStatusZGEN
         * @memberof essmodule.ESSStatus
         * @instance
         */
        ESSStatus.prototype.essStatusZGEN = null;

        /**
         * Creates a new ESSStatus instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSStatus
         * @static
         * @param {essmodule.IESSStatus=} [properties] Properties to set
         * @returns {essmodule.ESSStatus} ESSStatus instance
         */
        ESSStatus.create = function create(properties) {
            return new ESSStatus(properties);
        };

        /**
         * Encodes the specified ESSStatus message. Does not implicitly {@link essmodule.ESSStatus.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSStatus
         * @static
         * @param {essmodule.IESSStatus} message ESSStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusValue != null && Object.hasOwnProperty.call(message, "statusValue"))
                $root.commonmodule.StatusValue.encode(message.statusValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.essStatusZBAT != null && Object.hasOwnProperty.call(message, "essStatusZBAT"))
                $root.essmodule.EssStatusZBAT.encode(message.essStatusZBAT, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.essStatusZGEN != null && Object.hasOwnProperty.call(message, "essStatusZGEN"))
                $root.essmodule.ESSStatusZGEN.encode(message.essStatusZGEN, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSStatus message, length delimited. Does not implicitly {@link essmodule.ESSStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSStatus
         * @static
         * @param {essmodule.IESSStatus} message ESSStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSStatus message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSStatus} ESSStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusValue = $root.commonmodule.StatusValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.essStatusZBAT = $root.essmodule.EssStatusZBAT.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.essStatusZGEN = $root.essmodule.ESSStatusZGEN.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSStatus} ESSStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSStatus message.
         * @function verify
         * @memberof essmodule.ESSStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusValue != null && message.hasOwnProperty("statusValue")) {
                var error = $root.commonmodule.StatusValue.verify(message.statusValue);
                if (error)
                    return "statusValue." + error;
            }
            if (message.essStatusZBAT != null && message.hasOwnProperty("essStatusZBAT")) {
                var error = $root.essmodule.EssStatusZBAT.verify(message.essStatusZBAT);
                if (error)
                    return "essStatusZBAT." + error;
            }
            if (message.essStatusZGEN != null && message.hasOwnProperty("essStatusZGEN")) {
                var error = $root.essmodule.ESSStatusZGEN.verify(message.essStatusZGEN);
                if (error)
                    return "essStatusZGEN." + error;
            }
            return null;
        };

        /**
         * Creates a ESSStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSStatus} ESSStatus
         */
        ESSStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSStatus)
                return object;
            var message = new $root.essmodule.ESSStatus();
            if (object.statusValue != null) {
                if (typeof object.statusValue !== "object")
                    throw TypeError(".essmodule.ESSStatus.statusValue: object expected");
                message.statusValue = $root.commonmodule.StatusValue.fromObject(object.statusValue);
            }
            if (object.essStatusZBAT != null) {
                if (typeof object.essStatusZBAT !== "object")
                    throw TypeError(".essmodule.ESSStatus.essStatusZBAT: object expected");
                message.essStatusZBAT = $root.essmodule.EssStatusZBAT.fromObject(object.essStatusZBAT);
            }
            if (object.essStatusZGEN != null) {
                if (typeof object.essStatusZGEN !== "object")
                    throw TypeError(".essmodule.ESSStatus.essStatusZGEN: object expected");
                message.essStatusZGEN = $root.essmodule.ESSStatusZGEN.fromObject(object.essStatusZGEN);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSStatus
         * @static
         * @param {essmodule.ESSStatus} message ESSStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusValue = null;
                object.essStatusZBAT = null;
                object.essStatusZGEN = null;
            }
            if (message.statusValue != null && message.hasOwnProperty("statusValue"))
                object.statusValue = $root.commonmodule.StatusValue.toObject(message.statusValue, options);
            if (message.essStatusZBAT != null && message.hasOwnProperty("essStatusZBAT"))
                object.essStatusZBAT = $root.essmodule.EssStatusZBAT.toObject(message.essStatusZBAT, options);
            if (message.essStatusZGEN != null && message.hasOwnProperty("essStatusZGEN"))
                object.essStatusZGEN = $root.essmodule.ESSStatusZGEN.toObject(message.essStatusZGEN, options);
            return object;
        };

        /**
         * Converts this ESSStatus to JSON.
         * @function toJSON
         * @memberof essmodule.ESSStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSStatus;
    })();

    essmodule.ESSStatusProfile = (function() {

        /**
         * Properties of a ESSStatusProfile.
         * @memberof essmodule
         * @interface IESSStatusProfile
         * @property {commonmodule.IStatusMessageInfo|null} [statusMessageInfo] ESSStatusProfile statusMessageInfo
         * @property {commonmodule.IESS|null} [ess] ESSStatusProfile ess
         * @property {essmodule.IESSStatus|null} [essStatus] ESSStatusProfile essStatus
         * @property {commonmodule.IIED|null} [ied] ESSStatusProfile ied
         */

        /**
         * Constructs a new ESSStatusProfile.
         * @memberof essmodule
         * @classdesc Represents a ESSStatusProfile.
         * @implements IESSStatusProfile
         * @constructor
         * @param {essmodule.IESSStatusProfile=} [properties] Properties to set
         */
        function ESSStatusProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSStatusProfile statusMessageInfo.
         * @member {commonmodule.IStatusMessageInfo|null|undefined} statusMessageInfo
         * @memberof essmodule.ESSStatusProfile
         * @instance
         */
        ESSStatusProfile.prototype.statusMessageInfo = null;

        /**
         * ESSStatusProfile ess.
         * @member {commonmodule.IESS|null|undefined} ess
         * @memberof essmodule.ESSStatusProfile
         * @instance
         */
        ESSStatusProfile.prototype.ess = null;

        /**
         * ESSStatusProfile essStatus.
         * @member {essmodule.IESSStatus|null|undefined} essStatus
         * @memberof essmodule.ESSStatusProfile
         * @instance
         */
        ESSStatusProfile.prototype.essStatus = null;

        /**
         * ESSStatusProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof essmodule.ESSStatusProfile
         * @instance
         */
        ESSStatusProfile.prototype.ied = null;

        /**
         * Creates a new ESSStatusProfile instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSStatusProfile
         * @static
         * @param {essmodule.IESSStatusProfile=} [properties] Properties to set
         * @returns {essmodule.ESSStatusProfile} ESSStatusProfile instance
         */
        ESSStatusProfile.create = function create(properties) {
            return new ESSStatusProfile(properties);
        };

        /**
         * Encodes the specified ESSStatusProfile message. Does not implicitly {@link essmodule.ESSStatusProfile.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSStatusProfile
         * @static
         * @param {essmodule.IESSStatusProfile} message ESSStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSStatusProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusMessageInfo != null && Object.hasOwnProperty.call(message, "statusMessageInfo"))
                $root.commonmodule.StatusMessageInfo.encode(message.statusMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ess != null && Object.hasOwnProperty.call(message, "ess"))
                $root.commonmodule.ESS.encode(message.ess, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.essStatus != null && Object.hasOwnProperty.call(message, "essStatus"))
                $root.essmodule.ESSStatus.encode(message.essStatus, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSStatusProfile message, length delimited. Does not implicitly {@link essmodule.ESSStatusProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSStatusProfile
         * @static
         * @param {essmodule.IESSStatusProfile} message ESSStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSStatusProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSStatusProfile message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSStatusProfile} ESSStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSStatusProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSStatusProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ess = $root.commonmodule.ESS.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.essStatus = $root.essmodule.ESSStatus.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSStatusProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSStatusProfile} ESSStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSStatusProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSStatusProfile message.
         * @function verify
         * @memberof essmodule.ESSStatusProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSStatusProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo")) {
                var error = $root.commonmodule.StatusMessageInfo.verify(message.statusMessageInfo);
                if (error)
                    return "statusMessageInfo." + error;
            }
            if (message.ess != null && message.hasOwnProperty("ess")) {
                var error = $root.commonmodule.ESS.verify(message.ess);
                if (error)
                    return "ess." + error;
            }
            if (message.essStatus != null && message.hasOwnProperty("essStatus")) {
                var error = $root.essmodule.ESSStatus.verify(message.essStatus);
                if (error)
                    return "essStatus." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            return null;
        };

        /**
         * Creates a ESSStatusProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSStatusProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSStatusProfile} ESSStatusProfile
         */
        ESSStatusProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSStatusProfile)
                return object;
            var message = new $root.essmodule.ESSStatusProfile();
            if (object.statusMessageInfo != null) {
                if (typeof object.statusMessageInfo !== "object")
                    throw TypeError(".essmodule.ESSStatusProfile.statusMessageInfo: object expected");
                message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.fromObject(object.statusMessageInfo);
            }
            if (object.ess != null) {
                if (typeof object.ess !== "object")
                    throw TypeError(".essmodule.ESSStatusProfile.ess: object expected");
                message.ess = $root.commonmodule.ESS.fromObject(object.ess);
            }
            if (object.essStatus != null) {
                if (typeof object.essStatus !== "object")
                    throw TypeError(".essmodule.ESSStatusProfile.essStatus: object expected");
                message.essStatus = $root.essmodule.ESSStatus.fromObject(object.essStatus);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".essmodule.ESSStatusProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSStatusProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSStatusProfile
         * @static
         * @param {essmodule.ESSStatusProfile} message ESSStatusProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSStatusProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusMessageInfo = null;
                object.ess = null;
                object.essStatus = null;
                object.ied = null;
            }
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo"))
                object.statusMessageInfo = $root.commonmodule.StatusMessageInfo.toObject(message.statusMessageInfo, options);
            if (message.ess != null && message.hasOwnProperty("ess"))
                object.ess = $root.commonmodule.ESS.toObject(message.ess, options);
            if (message.essStatus != null && message.hasOwnProperty("essStatus"))
                object.essStatus = $root.essmodule.ESSStatus.toObject(message.essStatus, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            return object;
        };

        /**
         * Converts this ESSStatusProfile to JSON.
         * @function toJSON
         * @memberof essmodule.ESSStatusProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSStatusProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSStatusProfile;
    })();

    essmodule.ESSPoint = (function() {

        /**
         * Properties of a ESSPoint.
         * @memberof essmodule
         * @interface IESSPoint
         * @property {commonmodule.IControlDPC|null} [blackStartEnabled] ESSPoint blackStartEnabled
         * @property {commonmodule.IControlDPC|null} [frequencySetPointEnabled] ESSPoint frequencySetPointEnabled
         * @property {essmodule.IESSFunction|null} ["function"] ESSPoint function
         * @property {commonmodule.IENG_GridConnectModeKind|null} [mode] ESSPoint mode
         * @property {google.protobuf.IFloatValue|null} [pctHzDroop] ESSPoint pctHzDroop
         * @property {google.protobuf.IFloatValue|null} [pctVDroop] ESSPoint pctVDroop
         * @property {commonmodule.IRampRate|null} [rampRates] ESSPoint rampRates
         * @property {commonmodule.IControlDPC|null} [reactivePwrSetPointEnabled] ESSPoint reactivePwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [realPwrSetPointEnabled] ESSPoint realPwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [reset] ESSPoint reset
         * @property {commonmodule.IOptional_StateKind|null} [state] ESSPoint state
         * @property {commonmodule.IControlDPC|null} [syncBackToGrid] ESSPoint syncBackToGrid
         * @property {commonmodule.IControlDPC|null} [transToIslndOnGridLossEnabled] ESSPoint transToIslndOnGridLossEnabled
         * @property {commonmodule.IControlDPC|null} [voltageSetPointEnabled] ESSPoint voltageSetPointEnabled
         * @property {commonmodule.IControlTimestamp|null} [startTime] ESSPoint startTime
         */

        /**
         * Constructs a new ESSPoint.
         * @memberof essmodule
         * @classdesc Represents a ESSPoint.
         * @implements IESSPoint
         * @constructor
         * @param {essmodule.IESSPoint=} [properties] Properties to set
         */
        function ESSPoint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSPoint blackStartEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} blackStartEnabled
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype.blackStartEnabled = null;

        /**
         * ESSPoint frequencySetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} frequencySetPointEnabled
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype.frequencySetPointEnabled = null;

        /**
         * ESSPoint function.
         * @member {essmodule.IESSFunction|null|undefined} function
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype["function"] = null;

        /**
         * ESSPoint mode.
         * @member {commonmodule.IENG_GridConnectModeKind|null|undefined} mode
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype.mode = null;

        /**
         * ESSPoint pctHzDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctHzDroop
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype.pctHzDroop = null;

        /**
         * ESSPoint pctVDroop.
         * @member {google.protobuf.IFloatValue|null|undefined} pctVDroop
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype.pctVDroop = null;

        /**
         * ESSPoint rampRates.
         * @member {commonmodule.IRampRate|null|undefined} rampRates
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype.rampRates = null;

        /**
         * ESSPoint reactivePwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} reactivePwrSetPointEnabled
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype.reactivePwrSetPointEnabled = null;

        /**
         * ESSPoint realPwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} realPwrSetPointEnabled
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype.realPwrSetPointEnabled = null;

        /**
         * ESSPoint reset.
         * @member {commonmodule.IControlDPC|null|undefined} reset
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype.reset = null;

        /**
         * ESSPoint state.
         * @member {commonmodule.IOptional_StateKind|null|undefined} state
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype.state = null;

        /**
         * ESSPoint syncBackToGrid.
         * @member {commonmodule.IControlDPC|null|undefined} syncBackToGrid
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype.syncBackToGrid = null;

        /**
         * ESSPoint transToIslndOnGridLossEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} transToIslndOnGridLossEnabled
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype.transToIslndOnGridLossEnabled = null;

        /**
         * ESSPoint voltageSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} voltageSetPointEnabled
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype.voltageSetPointEnabled = null;

        /**
         * ESSPoint startTime.
         * @member {commonmodule.IControlTimestamp|null|undefined} startTime
         * @memberof essmodule.ESSPoint
         * @instance
         */
        ESSPoint.prototype.startTime = null;

        /**
         * Creates a new ESSPoint instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSPoint
         * @static
         * @param {essmodule.IESSPoint=} [properties] Properties to set
         * @returns {essmodule.ESSPoint} ESSPoint instance
         */
        ESSPoint.create = function create(properties) {
            return new ESSPoint(properties);
        };

        /**
         * Encodes the specified ESSPoint message. Does not implicitly {@link essmodule.ESSPoint.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSPoint
         * @static
         * @param {essmodule.IESSPoint} message ESSPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSPoint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.blackStartEnabled != null && Object.hasOwnProperty.call(message, "blackStartEnabled"))
                $root.commonmodule.ControlDPC.encode(message.blackStartEnabled, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.frequencySetPointEnabled != null && Object.hasOwnProperty.call(message, "frequencySetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.frequencySetPointEnabled, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message["function"] != null && Object.hasOwnProperty.call(message, "function"))
                $root.essmodule.ESSFunction.encode(message["function"], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
                $root.commonmodule.ENG_GridConnectModeKind.encode(message.mode, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.pctHzDroop != null && Object.hasOwnProperty.call(message, "pctHzDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctHzDroop, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.pctVDroop != null && Object.hasOwnProperty.call(message, "pctVDroop"))
                $root.google.protobuf.FloatValue.encode(message.pctVDroop, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.rampRates != null && Object.hasOwnProperty.call(message, "rampRates"))
                $root.commonmodule.RampRate.encode(message.rampRates, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.reactivePwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "reactivePwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.reactivePwrSetPointEnabled, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
            if (message.realPwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "realPwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.realPwrSetPointEnabled, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.reset != null && Object.hasOwnProperty.call(message, "reset"))
                $root.commonmodule.ControlDPC.encode(message.reset, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                $root.commonmodule.Optional_StateKind.encode(message.state, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
            if (message.syncBackToGrid != null && Object.hasOwnProperty.call(message, "syncBackToGrid"))
                $root.commonmodule.ControlDPC.encode(message.syncBackToGrid, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
            if (message.transToIslndOnGridLossEnabled != null && Object.hasOwnProperty.call(message, "transToIslndOnGridLossEnabled"))
                $root.commonmodule.ControlDPC.encode(message.transToIslndOnGridLossEnabled, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
            if (message.voltageSetPointEnabled != null && Object.hasOwnProperty.call(message, "voltageSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.voltageSetPointEnabled, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                $root.commonmodule.ControlTimestamp.encode(message.startTime, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSPoint message, length delimited. Does not implicitly {@link essmodule.ESSPoint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSPoint
         * @static
         * @param {essmodule.IESSPoint} message ESSPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSPoint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSPoint message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSPoint} ESSPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSPoint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSPoint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.blackStartEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.frequencySetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 3:
                    message["function"] = $root.essmodule.ESSFunction.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.mode = $root.commonmodule.ENG_GridConnectModeKind.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.pctHzDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.pctVDroop = $root.google.protobuf.FloatValue.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.rampRates = $root.commonmodule.RampRate.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.reset = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 11:
                    message.state = $root.commonmodule.Optional_StateKind.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.syncBackToGrid = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 13:
                    message.transToIslndOnGridLossEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 14:
                    message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 15:
                    message.startTime = $root.commonmodule.ControlTimestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSPoint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSPoint} ESSPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSPoint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSPoint message.
         * @function verify
         * @memberof essmodule.ESSPoint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSPoint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.blackStartEnabled != null && message.hasOwnProperty("blackStartEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.blackStartEnabled);
                if (error)
                    return "blackStartEnabled." + error;
            }
            if (message.frequencySetPointEnabled != null && message.hasOwnProperty("frequencySetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.frequencySetPointEnabled);
                if (error)
                    return "frequencySetPointEnabled." + error;
            }
            if (message["function"] != null && message.hasOwnProperty("function")) {
                var error = $root.essmodule.ESSFunction.verify(message["function"]);
                if (error)
                    return "function." + error;
            }
            if (message.mode != null && message.hasOwnProperty("mode")) {
                var error = $root.commonmodule.ENG_GridConnectModeKind.verify(message.mode);
                if (error)
                    return "mode." + error;
            }
            if (message.pctHzDroop != null && message.hasOwnProperty("pctHzDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctHzDroop);
                if (error)
                    return "pctHzDroop." + error;
            }
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop")) {
                var error = $root.google.protobuf.FloatValue.verify(message.pctVDroop);
                if (error)
                    return "pctVDroop." + error;
            }
            if (message.rampRates != null && message.hasOwnProperty("rampRates")) {
                var error = $root.commonmodule.RampRate.verify(message.rampRates);
                if (error)
                    return "rampRates." + error;
            }
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reactivePwrSetPointEnabled);
                if (error)
                    return "reactivePwrSetPointEnabled." + error;
            }
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.realPwrSetPointEnabled);
                if (error)
                    return "realPwrSetPointEnabled." + error;
            }
            if (message.reset != null && message.hasOwnProperty("reset")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reset);
                if (error)
                    return "reset." + error;
            }
            if (message.state != null && message.hasOwnProperty("state")) {
                var error = $root.commonmodule.Optional_StateKind.verify(message.state);
                if (error)
                    return "state." + error;
            }
            if (message.syncBackToGrid != null && message.hasOwnProperty("syncBackToGrid")) {
                var error = $root.commonmodule.ControlDPC.verify(message.syncBackToGrid);
                if (error)
                    return "syncBackToGrid." + error;
            }
            if (message.transToIslndOnGridLossEnabled != null && message.hasOwnProperty("transToIslndOnGridLossEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.transToIslndOnGridLossEnabled);
                if (error)
                    return "transToIslndOnGridLossEnabled." + error;
            }
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.voltageSetPointEnabled);
                if (error)
                    return "voltageSetPointEnabled." + error;
            }
            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                var error = $root.commonmodule.ControlTimestamp.verify(message.startTime);
                if (error)
                    return "startTime." + error;
            }
            return null;
        };

        /**
         * Creates a ESSPoint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSPoint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSPoint} ESSPoint
         */
        ESSPoint.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSPoint)
                return object;
            var message = new $root.essmodule.ESSPoint();
            if (object.blackStartEnabled != null) {
                if (typeof object.blackStartEnabled !== "object")
                    throw TypeError(".essmodule.ESSPoint.blackStartEnabled: object expected");
                message.blackStartEnabled = $root.commonmodule.ControlDPC.fromObject(object.blackStartEnabled);
            }
            if (object.frequencySetPointEnabled != null) {
                if (typeof object.frequencySetPointEnabled !== "object")
                    throw TypeError(".essmodule.ESSPoint.frequencySetPointEnabled: object expected");
                message.frequencySetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.frequencySetPointEnabled);
            }
            if (object["function"] != null) {
                if (typeof object["function"] !== "object")
                    throw TypeError(".essmodule.ESSPoint.function: object expected");
                message["function"] = $root.essmodule.ESSFunction.fromObject(object["function"]);
            }
            if (object.mode != null) {
                if (typeof object.mode !== "object")
                    throw TypeError(".essmodule.ESSPoint.mode: object expected");
                message.mode = $root.commonmodule.ENG_GridConnectModeKind.fromObject(object.mode);
            }
            if (object.pctHzDroop != null) {
                if (typeof object.pctHzDroop !== "object")
                    throw TypeError(".essmodule.ESSPoint.pctHzDroop: object expected");
                message.pctHzDroop = $root.google.protobuf.FloatValue.fromObject(object.pctHzDroop);
            }
            if (object.pctVDroop != null) {
                if (typeof object.pctVDroop !== "object")
                    throw TypeError(".essmodule.ESSPoint.pctVDroop: object expected");
                message.pctVDroop = $root.google.protobuf.FloatValue.fromObject(object.pctVDroop);
            }
            if (object.rampRates != null) {
                if (typeof object.rampRates !== "object")
                    throw TypeError(".essmodule.ESSPoint.rampRates: object expected");
                message.rampRates = $root.commonmodule.RampRate.fromObject(object.rampRates);
            }
            if (object.reactivePwrSetPointEnabled != null) {
                if (typeof object.reactivePwrSetPointEnabled !== "object")
                    throw TypeError(".essmodule.ESSPoint.reactivePwrSetPointEnabled: object expected");
                message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.reactivePwrSetPointEnabled);
            }
            if (object.realPwrSetPointEnabled != null) {
                if (typeof object.realPwrSetPointEnabled !== "object")
                    throw TypeError(".essmodule.ESSPoint.realPwrSetPointEnabled: object expected");
                message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.realPwrSetPointEnabled);
            }
            if (object.reset != null) {
                if (typeof object.reset !== "object")
                    throw TypeError(".essmodule.ESSPoint.reset: object expected");
                message.reset = $root.commonmodule.ControlDPC.fromObject(object.reset);
            }
            if (object.state != null) {
                if (typeof object.state !== "object")
                    throw TypeError(".essmodule.ESSPoint.state: object expected");
                message.state = $root.commonmodule.Optional_StateKind.fromObject(object.state);
            }
            if (object.syncBackToGrid != null) {
                if (typeof object.syncBackToGrid !== "object")
                    throw TypeError(".essmodule.ESSPoint.syncBackToGrid: object expected");
                message.syncBackToGrid = $root.commonmodule.ControlDPC.fromObject(object.syncBackToGrid);
            }
            if (object.transToIslndOnGridLossEnabled != null) {
                if (typeof object.transToIslndOnGridLossEnabled !== "object")
                    throw TypeError(".essmodule.ESSPoint.transToIslndOnGridLossEnabled: object expected");
                message.transToIslndOnGridLossEnabled = $root.commonmodule.ControlDPC.fromObject(object.transToIslndOnGridLossEnabled);
            }
            if (object.voltageSetPointEnabled != null) {
                if (typeof object.voltageSetPointEnabled !== "object")
                    throw TypeError(".essmodule.ESSPoint.voltageSetPointEnabled: object expected");
                message.voltageSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.voltageSetPointEnabled);
            }
            if (object.startTime != null) {
                if (typeof object.startTime !== "object")
                    throw TypeError(".essmodule.ESSPoint.startTime: object expected");
                message.startTime = $root.commonmodule.ControlTimestamp.fromObject(object.startTime);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSPoint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSPoint
         * @static
         * @param {essmodule.ESSPoint} message ESSPoint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSPoint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.blackStartEnabled = null;
                object.frequencySetPointEnabled = null;
                object["function"] = null;
                object.mode = null;
                object.pctHzDroop = null;
                object.pctVDroop = null;
                object.rampRates = null;
                object.reactivePwrSetPointEnabled = null;
                object.realPwrSetPointEnabled = null;
                object.reset = null;
                object.state = null;
                object.syncBackToGrid = null;
                object.transToIslndOnGridLossEnabled = null;
                object.voltageSetPointEnabled = null;
                object.startTime = null;
            }
            if (message.blackStartEnabled != null && message.hasOwnProperty("blackStartEnabled"))
                object.blackStartEnabled = $root.commonmodule.ControlDPC.toObject(message.blackStartEnabled, options);
            if (message.frequencySetPointEnabled != null && message.hasOwnProperty("frequencySetPointEnabled"))
                object.frequencySetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.frequencySetPointEnabled, options);
            if (message["function"] != null && message.hasOwnProperty("function"))
                object["function"] = $root.essmodule.ESSFunction.toObject(message["function"], options);
            if (message.mode != null && message.hasOwnProperty("mode"))
                object.mode = $root.commonmodule.ENG_GridConnectModeKind.toObject(message.mode, options);
            if (message.pctHzDroop != null && message.hasOwnProperty("pctHzDroop"))
                object.pctHzDroop = $root.google.protobuf.FloatValue.toObject(message.pctHzDroop, options);
            if (message.pctVDroop != null && message.hasOwnProperty("pctVDroop"))
                object.pctVDroop = $root.google.protobuf.FloatValue.toObject(message.pctVDroop, options);
            if (message.rampRates != null && message.hasOwnProperty("rampRates"))
                object.rampRates = $root.commonmodule.RampRate.toObject(message.rampRates, options);
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled"))
                object.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.reactivePwrSetPointEnabled, options);
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled"))
                object.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.realPwrSetPointEnabled, options);
            if (message.reset != null && message.hasOwnProperty("reset"))
                object.reset = $root.commonmodule.ControlDPC.toObject(message.reset, options);
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = $root.commonmodule.Optional_StateKind.toObject(message.state, options);
            if (message.syncBackToGrid != null && message.hasOwnProperty("syncBackToGrid"))
                object.syncBackToGrid = $root.commonmodule.ControlDPC.toObject(message.syncBackToGrid, options);
            if (message.transToIslndOnGridLossEnabled != null && message.hasOwnProperty("transToIslndOnGridLossEnabled"))
                object.transToIslndOnGridLossEnabled = $root.commonmodule.ControlDPC.toObject(message.transToIslndOnGridLossEnabled, options);
            if (message.voltageSetPointEnabled != null && message.hasOwnProperty("voltageSetPointEnabled"))
                object.voltageSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.voltageSetPointEnabled, options);
            if (message.startTime != null && message.hasOwnProperty("startTime"))
                object.startTime = $root.commonmodule.ControlTimestamp.toObject(message.startTime, options);
            return object;
        };

        /**
         * Converts this ESSPoint to JSON.
         * @function toJSON
         * @memberof essmodule.ESSPoint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSPoint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSPoint;
    })();

    essmodule.ESSCSG = (function() {

        /**
         * Properties of a ESSCSG.
         * @memberof essmodule
         * @interface IESSCSG
         * @property {Array.<essmodule.IESSPoint>|null} [crvPts] ESSCSG crvPts
         */

        /**
         * Constructs a new ESSCSG.
         * @memberof essmodule
         * @classdesc Represents a ESSCSG.
         * @implements IESSCSG
         * @constructor
         * @param {essmodule.IESSCSG=} [properties] Properties to set
         */
        function ESSCSG(properties) {
            this.crvPts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSCSG crvPts.
         * @member {Array.<essmodule.IESSPoint>} crvPts
         * @memberof essmodule.ESSCSG
         * @instance
         */
        ESSCSG.prototype.crvPts = $util.emptyArray;

        /**
         * Creates a new ESSCSG instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSCSG
         * @static
         * @param {essmodule.IESSCSG=} [properties] Properties to set
         * @returns {essmodule.ESSCSG} ESSCSG instance
         */
        ESSCSG.create = function create(properties) {
            return new ESSCSG(properties);
        };

        /**
         * Encodes the specified ESSCSG message. Does not implicitly {@link essmodule.ESSCSG.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSCSG
         * @static
         * @param {essmodule.IESSCSG} message ESSCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSCSG.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.crvPts != null && message.crvPts.length)
                for (var i = 0; i < message.crvPts.length; ++i)
                    $root.essmodule.ESSPoint.encode(message.crvPts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSCSG message, length delimited. Does not implicitly {@link essmodule.ESSCSG.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSCSG
         * @static
         * @param {essmodule.IESSCSG} message ESSCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSCSG.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSCSG message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSCSG} ESSCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSCSG.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSCSG();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.crvPts && message.crvPts.length))
                        message.crvPts = [];
                    message.crvPts.push($root.essmodule.ESSPoint.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSCSG message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSCSG} ESSCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSCSG.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSCSG message.
         * @function verify
         * @memberof essmodule.ESSCSG
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSCSG.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.crvPts != null && message.hasOwnProperty("crvPts")) {
                if (!Array.isArray(message.crvPts))
                    return "crvPts: array expected";
                for (var i = 0; i < message.crvPts.length; ++i) {
                    var error = $root.essmodule.ESSPoint.verify(message.crvPts[i]);
                    if (error)
                        return "crvPts." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ESSCSG message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSCSG
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSCSG} ESSCSG
         */
        ESSCSG.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSCSG)
                return object;
            var message = new $root.essmodule.ESSCSG();
            if (object.crvPts) {
                if (!Array.isArray(object.crvPts))
                    throw TypeError(".essmodule.ESSCSG.crvPts: array expected");
                message.crvPts = [];
                for (var i = 0; i < object.crvPts.length; ++i) {
                    if (typeof object.crvPts[i] !== "object")
                        throw TypeError(".essmodule.ESSCSG.crvPts: object expected");
                    message.crvPts[i] = $root.essmodule.ESSPoint.fromObject(object.crvPts[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSCSG message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSCSG
         * @static
         * @param {essmodule.ESSCSG} message ESSCSG
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSCSG.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.crvPts = [];
            if (message.crvPts && message.crvPts.length) {
                object.crvPts = [];
                for (var j = 0; j < message.crvPts.length; ++j)
                    object.crvPts[j] = $root.essmodule.ESSPoint.toObject(message.crvPts[j], options);
            }
            return object;
        };

        /**
         * Converts this ESSCSG to JSON.
         * @function toJSON
         * @memberof essmodule.ESSCSG
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSCSG.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSCSG;
    })();

    essmodule.ESSControlScheduleFSCH = (function() {

        /**
         * Properties of a ESSControlScheduleFSCH.
         * @memberof essmodule
         * @interface IESSControlScheduleFSCH
         * @property {essmodule.IESSCSG|null} [ValDCSG] ESSControlScheduleFSCH ValDCSG
         */

        /**
         * Constructs a new ESSControlScheduleFSCH.
         * @memberof essmodule
         * @classdesc Represents a ESSControlScheduleFSCH.
         * @implements IESSControlScheduleFSCH
         * @constructor
         * @param {essmodule.IESSControlScheduleFSCH=} [properties] Properties to set
         */
        function ESSControlScheduleFSCH(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSControlScheduleFSCH ValDCSG.
         * @member {essmodule.IESSCSG|null|undefined} ValDCSG
         * @memberof essmodule.ESSControlScheduleFSCH
         * @instance
         */
        ESSControlScheduleFSCH.prototype.ValDCSG = null;

        /**
         * Creates a new ESSControlScheduleFSCH instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSControlScheduleFSCH
         * @static
         * @param {essmodule.IESSControlScheduleFSCH=} [properties] Properties to set
         * @returns {essmodule.ESSControlScheduleFSCH} ESSControlScheduleFSCH instance
         */
        ESSControlScheduleFSCH.create = function create(properties) {
            return new ESSControlScheduleFSCH(properties);
        };

        /**
         * Encodes the specified ESSControlScheduleFSCH message. Does not implicitly {@link essmodule.ESSControlScheduleFSCH.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSControlScheduleFSCH
         * @static
         * @param {essmodule.IESSControlScheduleFSCH} message ESSControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSControlScheduleFSCH.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ValDCSG != null && Object.hasOwnProperty.call(message, "ValDCSG"))
                $root.essmodule.ESSCSG.encode(message.ValDCSG, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSControlScheduleFSCH message, length delimited. Does not implicitly {@link essmodule.ESSControlScheduleFSCH.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSControlScheduleFSCH
         * @static
         * @param {essmodule.IESSControlScheduleFSCH} message ESSControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSControlScheduleFSCH.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSControlScheduleFSCH message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSControlScheduleFSCH} ESSControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSControlScheduleFSCH.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSControlScheduleFSCH();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ValDCSG = $root.essmodule.ESSCSG.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSControlScheduleFSCH message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSControlScheduleFSCH} ESSControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSControlScheduleFSCH.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSControlScheduleFSCH message.
         * @function verify
         * @memberof essmodule.ESSControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSControlScheduleFSCH.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ValDCSG != null && message.hasOwnProperty("ValDCSG")) {
                var error = $root.essmodule.ESSCSG.verify(message.ValDCSG);
                if (error)
                    return "ValDCSG." + error;
            }
            return null;
        };

        /**
         * Creates a ESSControlScheduleFSCH message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSControlScheduleFSCH} ESSControlScheduleFSCH
         */
        ESSControlScheduleFSCH.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSControlScheduleFSCH)
                return object;
            var message = new $root.essmodule.ESSControlScheduleFSCH();
            if (object.ValDCSG != null) {
                if (typeof object.ValDCSG !== "object")
                    throw TypeError(".essmodule.ESSControlScheduleFSCH.ValDCSG: object expected");
                message.ValDCSG = $root.essmodule.ESSCSG.fromObject(object.ValDCSG);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSControlScheduleFSCH message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSControlScheduleFSCH
         * @static
         * @param {essmodule.ESSControlScheduleFSCH} message ESSControlScheduleFSCH
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSControlScheduleFSCH.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ValDCSG = null;
            if (message.ValDCSG != null && message.hasOwnProperty("ValDCSG"))
                object.ValDCSG = $root.essmodule.ESSCSG.toObject(message.ValDCSG, options);
            return object;
        };

        /**
         * Converts this ESSControlScheduleFSCH to JSON.
         * @function toJSON
         * @memberof essmodule.ESSControlScheduleFSCH
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSControlScheduleFSCH.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSControlScheduleFSCH;
    })();

    essmodule.EssControlFSCC = (function() {

        /**
         * Properties of an EssControlFSCC.
         * @memberof essmodule
         * @interface IEssControlFSCC
         * @property {commonmodule.IControlFSCC|null} [controlFSCC] EssControlFSCC controlFSCC
         * @property {essmodule.IESSControlScheduleFSCH|null} [essControlScheduleFSCH] EssControlFSCC essControlScheduleFSCH
         */

        /**
         * Constructs a new EssControlFSCC.
         * @memberof essmodule
         * @classdesc Represents an EssControlFSCC.
         * @implements IEssControlFSCC
         * @constructor
         * @param {essmodule.IEssControlFSCC=} [properties] Properties to set
         */
        function EssControlFSCC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * EssControlFSCC controlFSCC.
         * @member {commonmodule.IControlFSCC|null|undefined} controlFSCC
         * @memberof essmodule.EssControlFSCC
         * @instance
         */
        EssControlFSCC.prototype.controlFSCC = null;

        /**
         * EssControlFSCC essControlScheduleFSCH.
         * @member {essmodule.IESSControlScheduleFSCH|null|undefined} essControlScheduleFSCH
         * @memberof essmodule.EssControlFSCC
         * @instance
         */
        EssControlFSCC.prototype.essControlScheduleFSCH = null;

        /**
         * Creates a new EssControlFSCC instance using the specified properties.
         * @function create
         * @memberof essmodule.EssControlFSCC
         * @static
         * @param {essmodule.IEssControlFSCC=} [properties] Properties to set
         * @returns {essmodule.EssControlFSCC} EssControlFSCC instance
         */
        EssControlFSCC.create = function create(properties) {
            return new EssControlFSCC(properties);
        };

        /**
         * Encodes the specified EssControlFSCC message. Does not implicitly {@link essmodule.EssControlFSCC.verify|verify} messages.
         * @function encode
         * @memberof essmodule.EssControlFSCC
         * @static
         * @param {essmodule.IEssControlFSCC} message EssControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EssControlFSCC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlFSCC != null && Object.hasOwnProperty.call(message, "controlFSCC"))
                $root.commonmodule.ControlFSCC.encode(message.controlFSCC, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.essControlScheduleFSCH != null && Object.hasOwnProperty.call(message, "essControlScheduleFSCH"))
                $root.essmodule.ESSControlScheduleFSCH.encode(message.essControlScheduleFSCH, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified EssControlFSCC message, length delimited. Does not implicitly {@link essmodule.EssControlFSCC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.EssControlFSCC
         * @static
         * @param {essmodule.IEssControlFSCC} message EssControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        EssControlFSCC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an EssControlFSCC message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.EssControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.EssControlFSCC} EssControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EssControlFSCC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.EssControlFSCC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlFSCC = $root.commonmodule.ControlFSCC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.essControlScheduleFSCH = $root.essmodule.ESSControlScheduleFSCH.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an EssControlFSCC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.EssControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.EssControlFSCC} EssControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        EssControlFSCC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an EssControlFSCC message.
         * @function verify
         * @memberof essmodule.EssControlFSCC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        EssControlFSCC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlFSCC != null && message.hasOwnProperty("controlFSCC")) {
                var error = $root.commonmodule.ControlFSCC.verify(message.controlFSCC);
                if (error)
                    return "controlFSCC." + error;
            }
            if (message.essControlScheduleFSCH != null && message.hasOwnProperty("essControlScheduleFSCH")) {
                var error = $root.essmodule.ESSControlScheduleFSCH.verify(message.essControlScheduleFSCH);
                if (error)
                    return "essControlScheduleFSCH." + error;
            }
            return null;
        };

        /**
         * Creates an EssControlFSCC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.EssControlFSCC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.EssControlFSCC} EssControlFSCC
         */
        EssControlFSCC.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.EssControlFSCC)
                return object;
            var message = new $root.essmodule.EssControlFSCC();
            if (object.controlFSCC != null) {
                if (typeof object.controlFSCC !== "object")
                    throw TypeError(".essmodule.EssControlFSCC.controlFSCC: object expected");
                message.controlFSCC = $root.commonmodule.ControlFSCC.fromObject(object.controlFSCC);
            }
            if (object.essControlScheduleFSCH != null) {
                if (typeof object.essControlScheduleFSCH !== "object")
                    throw TypeError(".essmodule.EssControlFSCC.essControlScheduleFSCH: object expected");
                message.essControlScheduleFSCH = $root.essmodule.ESSControlScheduleFSCH.fromObject(object.essControlScheduleFSCH);
            }
            return message;
        };

        /**
         * Creates a plain object from an EssControlFSCC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.EssControlFSCC
         * @static
         * @param {essmodule.EssControlFSCC} message EssControlFSCC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        EssControlFSCC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlFSCC = null;
                object.essControlScheduleFSCH = null;
            }
            if (message.controlFSCC != null && message.hasOwnProperty("controlFSCC"))
                object.controlFSCC = $root.commonmodule.ControlFSCC.toObject(message.controlFSCC, options);
            if (message.essControlScheduleFSCH != null && message.hasOwnProperty("essControlScheduleFSCH"))
                object.essControlScheduleFSCH = $root.essmodule.ESSControlScheduleFSCH.toObject(message.essControlScheduleFSCH, options);
            return object;
        };

        /**
         * Converts this EssControlFSCC to JSON.
         * @function toJSON
         * @memberof essmodule.EssControlFSCC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        EssControlFSCC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return EssControlFSCC;
    })();

    essmodule.ESSControl = (function() {

        /**
         * Properties of a ESSControl.
         * @memberof essmodule
         * @interface IESSControl
         * @property {commonmodule.IControlValue|null} [controlValue] ESSControl controlValue
         * @property {commonmodule.ICheckConditions|null} [check] ESSControl check
         * @property {essmodule.IEssControlFSCC|null} [essControlFSCC] ESSControl essControlFSCC
         */

        /**
         * Constructs a new ESSControl.
         * @memberof essmodule
         * @classdesc Represents a ESSControl.
         * @implements IESSControl
         * @constructor
         * @param {essmodule.IESSControl=} [properties] Properties to set
         */
        function ESSControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSControl controlValue.
         * @member {commonmodule.IControlValue|null|undefined} controlValue
         * @memberof essmodule.ESSControl
         * @instance
         */
        ESSControl.prototype.controlValue = null;

        /**
         * ESSControl check.
         * @member {commonmodule.ICheckConditions|null|undefined} check
         * @memberof essmodule.ESSControl
         * @instance
         */
        ESSControl.prototype.check = null;

        /**
         * ESSControl essControlFSCC.
         * @member {essmodule.IEssControlFSCC|null|undefined} essControlFSCC
         * @memberof essmodule.ESSControl
         * @instance
         */
        ESSControl.prototype.essControlFSCC = null;

        /**
         * Creates a new ESSControl instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSControl
         * @static
         * @param {essmodule.IESSControl=} [properties] Properties to set
         * @returns {essmodule.ESSControl} ESSControl instance
         */
        ESSControl.create = function create(properties) {
            return new ESSControl(properties);
        };

        /**
         * Encodes the specified ESSControl message. Does not implicitly {@link essmodule.ESSControl.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSControl
         * @static
         * @param {essmodule.IESSControl} message ESSControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlValue != null && Object.hasOwnProperty.call(message, "controlValue"))
                $root.commonmodule.ControlValue.encode(message.controlValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.check != null && Object.hasOwnProperty.call(message, "check"))
                $root.commonmodule.CheckConditions.encode(message.check, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.essControlFSCC != null && Object.hasOwnProperty.call(message, "essControlFSCC"))
                $root.essmodule.EssControlFSCC.encode(message.essControlFSCC, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSControl message, length delimited. Does not implicitly {@link essmodule.ESSControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSControl
         * @static
         * @param {essmodule.IESSControl} message ESSControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSControl message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSControl} ESSControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlValue = $root.commonmodule.ControlValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.check = $root.commonmodule.CheckConditions.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.essControlFSCC = $root.essmodule.EssControlFSCC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSControl} ESSControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSControl message.
         * @function verify
         * @memberof essmodule.ESSControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlValue != null && message.hasOwnProperty("controlValue")) {
                var error = $root.commonmodule.ControlValue.verify(message.controlValue);
                if (error)
                    return "controlValue." + error;
            }
            if (message.check != null && message.hasOwnProperty("check")) {
                var error = $root.commonmodule.CheckConditions.verify(message.check);
                if (error)
                    return "check." + error;
            }
            if (message.essControlFSCC != null && message.hasOwnProperty("essControlFSCC")) {
                var error = $root.essmodule.EssControlFSCC.verify(message.essControlFSCC);
                if (error)
                    return "essControlFSCC." + error;
            }
            return null;
        };

        /**
         * Creates a ESSControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSControl} ESSControl
         */
        ESSControl.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSControl)
                return object;
            var message = new $root.essmodule.ESSControl();
            if (object.controlValue != null) {
                if (typeof object.controlValue !== "object")
                    throw TypeError(".essmodule.ESSControl.controlValue: object expected");
                message.controlValue = $root.commonmodule.ControlValue.fromObject(object.controlValue);
            }
            if (object.check != null) {
                if (typeof object.check !== "object")
                    throw TypeError(".essmodule.ESSControl.check: object expected");
                message.check = $root.commonmodule.CheckConditions.fromObject(object.check);
            }
            if (object.essControlFSCC != null) {
                if (typeof object.essControlFSCC !== "object")
                    throw TypeError(".essmodule.ESSControl.essControlFSCC: object expected");
                message.essControlFSCC = $root.essmodule.EssControlFSCC.fromObject(object.essControlFSCC);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSControl
         * @static
         * @param {essmodule.ESSControl} message ESSControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlValue = null;
                object.check = null;
                object.essControlFSCC = null;
            }
            if (message.controlValue != null && message.hasOwnProperty("controlValue"))
                object.controlValue = $root.commonmodule.ControlValue.toObject(message.controlValue, options);
            if (message.check != null && message.hasOwnProperty("check"))
                object.check = $root.commonmodule.CheckConditions.toObject(message.check, options);
            if (message.essControlFSCC != null && message.hasOwnProperty("essControlFSCC"))
                object.essControlFSCC = $root.essmodule.EssControlFSCC.toObject(message.essControlFSCC, options);
            return object;
        };

        /**
         * Converts this ESSControl to JSON.
         * @function toJSON
         * @memberof essmodule.ESSControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSControl;
    })();

    essmodule.ESSControlProfile = (function() {

        /**
         * Properties of a ESSControlProfile.
         * @memberof essmodule
         * @interface IESSControlProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] ESSControlProfile controlMessageInfo
         * @property {commonmodule.IESS|null} [ess] ESSControlProfile ess
         * @property {essmodule.IESSControl|null} [essControl] ESSControlProfile essControl
         * @property {commonmodule.IIED|null} [ied] ESSControlProfile ied
         */

        /**
         * Constructs a new ESSControlProfile.
         * @memberof essmodule
         * @classdesc Represents a ESSControlProfile.
         * @implements IESSControlProfile
         * @constructor
         * @param {essmodule.IESSControlProfile=} [properties] Properties to set
         */
        function ESSControlProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ESSControlProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof essmodule.ESSControlProfile
         * @instance
         */
        ESSControlProfile.prototype.controlMessageInfo = null;

        /**
         * ESSControlProfile ess.
         * @member {commonmodule.IESS|null|undefined} ess
         * @memberof essmodule.ESSControlProfile
         * @instance
         */
        ESSControlProfile.prototype.ess = null;

        /**
         * ESSControlProfile essControl.
         * @member {essmodule.IESSControl|null|undefined} essControl
         * @memberof essmodule.ESSControlProfile
         * @instance
         */
        ESSControlProfile.prototype.essControl = null;

        /**
         * ESSControlProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof essmodule.ESSControlProfile
         * @instance
         */
        ESSControlProfile.prototype.ied = null;

        /**
         * Creates a new ESSControlProfile instance using the specified properties.
         * @function create
         * @memberof essmodule.ESSControlProfile
         * @static
         * @param {essmodule.IESSControlProfile=} [properties] Properties to set
         * @returns {essmodule.ESSControlProfile} ESSControlProfile instance
         */
        ESSControlProfile.create = function create(properties) {
            return new ESSControlProfile(properties);
        };

        /**
         * Encodes the specified ESSControlProfile message. Does not implicitly {@link essmodule.ESSControlProfile.verify|verify} messages.
         * @function encode
         * @memberof essmodule.ESSControlProfile
         * @static
         * @param {essmodule.IESSControlProfile} message ESSControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSControlProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.ess != null && Object.hasOwnProperty.call(message, "ess"))
                $root.commonmodule.ESS.encode(message.ess, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.essControl != null && Object.hasOwnProperty.call(message, "essControl"))
                $root.essmodule.ESSControl.encode(message.essControl, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ESSControlProfile message, length delimited. Does not implicitly {@link essmodule.ESSControlProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof essmodule.ESSControlProfile
         * @static
         * @param {essmodule.IESSControlProfile} message ESSControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ESSControlProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ESSControlProfile message from the specified reader or buffer.
         * @function decode
         * @memberof essmodule.ESSControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {essmodule.ESSControlProfile} ESSControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSControlProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.essmodule.ESSControlProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.ess = $root.commonmodule.ESS.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.essControl = $root.essmodule.ESSControl.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ESSControlProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof essmodule.ESSControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {essmodule.ESSControlProfile} ESSControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ESSControlProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ESSControlProfile message.
         * @function verify
         * @memberof essmodule.ESSControlProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ESSControlProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.ess != null && message.hasOwnProperty("ess")) {
                var error = $root.commonmodule.ESS.verify(message.ess);
                if (error)
                    return "ess." + error;
            }
            if (message.essControl != null && message.hasOwnProperty("essControl")) {
                var error = $root.essmodule.ESSControl.verify(message.essControl);
                if (error)
                    return "essControl." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            return null;
        };

        /**
         * Creates a ESSControlProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof essmodule.ESSControlProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {essmodule.ESSControlProfile} ESSControlProfile
         */
        ESSControlProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.essmodule.ESSControlProfile)
                return object;
            var message = new $root.essmodule.ESSControlProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".essmodule.ESSControlProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.ess != null) {
                if (typeof object.ess !== "object")
                    throw TypeError(".essmodule.ESSControlProfile.ess: object expected");
                message.ess = $root.commonmodule.ESS.fromObject(object.ess);
            }
            if (object.essControl != null) {
                if (typeof object.essControl !== "object")
                    throw TypeError(".essmodule.ESSControlProfile.essControl: object expected");
                message.essControl = $root.essmodule.ESSControl.fromObject(object.essControl);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".essmodule.ESSControlProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            return message;
        };

        /**
         * Creates a plain object from a ESSControlProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof essmodule.ESSControlProfile
         * @static
         * @param {essmodule.ESSControlProfile} message ESSControlProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ESSControlProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.ess = null;
                object.essControl = null;
                object.ied = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.ess != null && message.hasOwnProperty("ess"))
                object.ess = $root.commonmodule.ESS.toObject(message.ess, options);
            if (message.essControl != null && message.hasOwnProperty("essControl"))
                object.essControl = $root.essmodule.ESSControl.toObject(message.essControl, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            return object;
        };

        /**
         * Converts this ESSControlProfile to JSON.
         * @function toJSON
         * @memberof essmodule.ESSControlProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ESSControlProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ESSControlProfile;
    })();

    return essmodule;
})();

$root.loadmodule = (function() {

    /**
     * Namespace loadmodule.
     * @exports loadmodule
     * @namespace
     */
    var loadmodule = {};

    loadmodule.LoadPoint = (function() {

        /**
         * Properties of a LoadPoint.
         * @memberof loadmodule
         * @interface ILoadPoint
         * @property {commonmodule.IRampRate|null} [rampRates] LoadPoint rampRates
         * @property {commonmodule.IControlDPC|null} [reactivePwrSetPointEnabled] LoadPoint reactivePwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [realPwrSetPointEnabled] LoadPoint realPwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [reset] LoadPoint reset
         * @property {commonmodule.IOptional_StateKind|null} [state] LoadPoint state
         * @property {commonmodule.IControlTimestamp|null} [startTime] LoadPoint startTime
         */

        /**
         * Constructs a new LoadPoint.
         * @memberof loadmodule
         * @classdesc Represents a LoadPoint.
         * @implements ILoadPoint
         * @constructor
         * @param {loadmodule.ILoadPoint=} [properties] Properties to set
         */
        function LoadPoint(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadPoint rampRates.
         * @member {commonmodule.IRampRate|null|undefined} rampRates
         * @memberof loadmodule.LoadPoint
         * @instance
         */
        LoadPoint.prototype.rampRates = null;

        /**
         * LoadPoint reactivePwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} reactivePwrSetPointEnabled
         * @memberof loadmodule.LoadPoint
         * @instance
         */
        LoadPoint.prototype.reactivePwrSetPointEnabled = null;

        /**
         * LoadPoint realPwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} realPwrSetPointEnabled
         * @memberof loadmodule.LoadPoint
         * @instance
         */
        LoadPoint.prototype.realPwrSetPointEnabled = null;

        /**
         * LoadPoint reset.
         * @member {commonmodule.IControlDPC|null|undefined} reset
         * @memberof loadmodule.LoadPoint
         * @instance
         */
        LoadPoint.prototype.reset = null;

        /**
         * LoadPoint state.
         * @member {commonmodule.IOptional_StateKind|null|undefined} state
         * @memberof loadmodule.LoadPoint
         * @instance
         */
        LoadPoint.prototype.state = null;

        /**
         * LoadPoint startTime.
         * @member {commonmodule.IControlTimestamp|null|undefined} startTime
         * @memberof loadmodule.LoadPoint
         * @instance
         */
        LoadPoint.prototype.startTime = null;

        /**
         * Creates a new LoadPoint instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadPoint
         * @static
         * @param {loadmodule.ILoadPoint=} [properties] Properties to set
         * @returns {loadmodule.LoadPoint} LoadPoint instance
         */
        LoadPoint.create = function create(properties) {
            return new LoadPoint(properties);
        };

        /**
         * Encodes the specified LoadPoint message. Does not implicitly {@link loadmodule.LoadPoint.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadPoint
         * @static
         * @param {loadmodule.ILoadPoint} message LoadPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadPoint.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rampRates != null && Object.hasOwnProperty.call(message, "rampRates"))
                $root.commonmodule.RampRate.encode(message.rampRates, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.reactivePwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "reactivePwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.reactivePwrSetPointEnabled, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.realPwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "realPwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.realPwrSetPointEnabled, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.reset != null && Object.hasOwnProperty.call(message, "reset"))
                $root.commonmodule.ControlDPC.encode(message.reset, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                $root.commonmodule.Optional_StateKind.encode(message.state, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                $root.commonmodule.ControlTimestamp.encode(message.startTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadPoint message, length delimited. Does not implicitly {@link loadmodule.LoadPoint.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadPoint
         * @static
         * @param {loadmodule.ILoadPoint} message LoadPoint message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadPoint.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadPoint message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadPoint} LoadPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadPoint.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadPoint();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.rampRates = $root.commonmodule.RampRate.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.reset = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.state = $root.commonmodule.Optional_StateKind.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.startTime = $root.commonmodule.ControlTimestamp.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadPoint message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadPoint
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadPoint} LoadPoint
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadPoint.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadPoint message.
         * @function verify
         * @memberof loadmodule.LoadPoint
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadPoint.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rampRates != null && message.hasOwnProperty("rampRates")) {
                var error = $root.commonmodule.RampRate.verify(message.rampRates);
                if (error)
                    return "rampRates." + error;
            }
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reactivePwrSetPointEnabled);
                if (error)
                    return "reactivePwrSetPointEnabled." + error;
            }
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.realPwrSetPointEnabled);
                if (error)
                    return "realPwrSetPointEnabled." + error;
            }
            if (message.reset != null && message.hasOwnProperty("reset")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reset);
                if (error)
                    return "reset." + error;
            }
            if (message.state != null && message.hasOwnProperty("state")) {
                var error = $root.commonmodule.Optional_StateKind.verify(message.state);
                if (error)
                    return "state." + error;
            }
            if (message.startTime != null && message.hasOwnProperty("startTime")) {
                var error = $root.commonmodule.ControlTimestamp.verify(message.startTime);
                if (error)
                    return "startTime." + error;
            }
            return null;
        };

        /**
         * Creates a LoadPoint message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadPoint
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadPoint} LoadPoint
         */
        LoadPoint.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadPoint)
                return object;
            var message = new $root.loadmodule.LoadPoint();
            if (object.rampRates != null) {
                if (typeof object.rampRates !== "object")
                    throw TypeError(".loadmodule.LoadPoint.rampRates: object expected");
                message.rampRates = $root.commonmodule.RampRate.fromObject(object.rampRates);
            }
            if (object.reactivePwrSetPointEnabled != null) {
                if (typeof object.reactivePwrSetPointEnabled !== "object")
                    throw TypeError(".loadmodule.LoadPoint.reactivePwrSetPointEnabled: object expected");
                message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.reactivePwrSetPointEnabled);
            }
            if (object.realPwrSetPointEnabled != null) {
                if (typeof object.realPwrSetPointEnabled !== "object")
                    throw TypeError(".loadmodule.LoadPoint.realPwrSetPointEnabled: object expected");
                message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.realPwrSetPointEnabled);
            }
            if (object.reset != null) {
                if (typeof object.reset !== "object")
                    throw TypeError(".loadmodule.LoadPoint.reset: object expected");
                message.reset = $root.commonmodule.ControlDPC.fromObject(object.reset);
            }
            if (object.state != null) {
                if (typeof object.state !== "object")
                    throw TypeError(".loadmodule.LoadPoint.state: object expected");
                message.state = $root.commonmodule.Optional_StateKind.fromObject(object.state);
            }
            if (object.startTime != null) {
                if (typeof object.startTime !== "object")
                    throw TypeError(".loadmodule.LoadPoint.startTime: object expected");
                message.startTime = $root.commonmodule.ControlTimestamp.fromObject(object.startTime);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadPoint message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadPoint
         * @static
         * @param {loadmodule.LoadPoint} message LoadPoint
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadPoint.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.rampRates = null;
                object.reactivePwrSetPointEnabled = null;
                object.realPwrSetPointEnabled = null;
                object.reset = null;
                object.state = null;
                object.startTime = null;
            }
            if (message.rampRates != null && message.hasOwnProperty("rampRates"))
                object.rampRates = $root.commonmodule.RampRate.toObject(message.rampRates, options);
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled"))
                object.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.reactivePwrSetPointEnabled, options);
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled"))
                object.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.realPwrSetPointEnabled, options);
            if (message.reset != null && message.hasOwnProperty("reset"))
                object.reset = $root.commonmodule.ControlDPC.toObject(message.reset, options);
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = $root.commonmodule.Optional_StateKind.toObject(message.state, options);
            if (message.startTime != null && message.hasOwnProperty("startTime"))
                object.startTime = $root.commonmodule.ControlTimestamp.toObject(message.startTime, options);
            return object;
        };

        /**
         * Converts this LoadPoint to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadPoint
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadPoint.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadPoint;
    })();

    loadmodule.LoadCSG = (function() {

        /**
         * Properties of a LoadCSG.
         * @memberof loadmodule
         * @interface ILoadCSG
         * @property {Array.<loadmodule.ILoadPoint>|null} [crvPts] LoadCSG crvPts
         */

        /**
         * Constructs a new LoadCSG.
         * @memberof loadmodule
         * @classdesc Represents a LoadCSG.
         * @implements ILoadCSG
         * @constructor
         * @param {loadmodule.ILoadCSG=} [properties] Properties to set
         */
        function LoadCSG(properties) {
            this.crvPts = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadCSG crvPts.
         * @member {Array.<loadmodule.ILoadPoint>} crvPts
         * @memberof loadmodule.LoadCSG
         * @instance
         */
        LoadCSG.prototype.crvPts = $util.emptyArray;

        /**
         * Creates a new LoadCSG instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadCSG
         * @static
         * @param {loadmodule.ILoadCSG=} [properties] Properties to set
         * @returns {loadmodule.LoadCSG} LoadCSG instance
         */
        LoadCSG.create = function create(properties) {
            return new LoadCSG(properties);
        };

        /**
         * Encodes the specified LoadCSG message. Does not implicitly {@link loadmodule.LoadCSG.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadCSG
         * @static
         * @param {loadmodule.ILoadCSG} message LoadCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadCSG.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.crvPts != null && message.crvPts.length)
                for (var i = 0; i < message.crvPts.length; ++i)
                    $root.loadmodule.LoadPoint.encode(message.crvPts[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadCSG message, length delimited. Does not implicitly {@link loadmodule.LoadCSG.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadCSG
         * @static
         * @param {loadmodule.ILoadCSG} message LoadCSG message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadCSG.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadCSG message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadCSG} LoadCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadCSG.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadCSG();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    if (!(message.crvPts && message.crvPts.length))
                        message.crvPts = [];
                    message.crvPts.push($root.loadmodule.LoadPoint.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadCSG message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadCSG
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadCSG} LoadCSG
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadCSG.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadCSG message.
         * @function verify
         * @memberof loadmodule.LoadCSG
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadCSG.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.crvPts != null && message.hasOwnProperty("crvPts")) {
                if (!Array.isArray(message.crvPts))
                    return "crvPts: array expected";
                for (var i = 0; i < message.crvPts.length; ++i) {
                    var error = $root.loadmodule.LoadPoint.verify(message.crvPts[i]);
                    if (error)
                        return "crvPts." + error;
                }
            }
            return null;
        };

        /**
         * Creates a LoadCSG message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadCSG
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadCSG} LoadCSG
         */
        LoadCSG.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadCSG)
                return object;
            var message = new $root.loadmodule.LoadCSG();
            if (object.crvPts) {
                if (!Array.isArray(object.crvPts))
                    throw TypeError(".loadmodule.LoadCSG.crvPts: array expected");
                message.crvPts = [];
                for (var i = 0; i < object.crvPts.length; ++i) {
                    if (typeof object.crvPts[i] !== "object")
                        throw TypeError(".loadmodule.LoadCSG.crvPts: object expected");
                    message.crvPts[i] = $root.loadmodule.LoadPoint.fromObject(object.crvPts[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadCSG message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadCSG
         * @static
         * @param {loadmodule.LoadCSG} message LoadCSG
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadCSG.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.crvPts = [];
            if (message.crvPts && message.crvPts.length) {
                object.crvPts = [];
                for (var j = 0; j < message.crvPts.length; ++j)
                    object.crvPts[j] = $root.loadmodule.LoadPoint.toObject(message.crvPts[j], options);
            }
            return object;
        };

        /**
         * Converts this LoadCSG to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadCSG
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadCSG.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadCSG;
    })();

    loadmodule.LoadControlScheduleFSCH = (function() {

        /**
         * Properties of a LoadControlScheduleFSCH.
         * @memberof loadmodule
         * @interface ILoadControlScheduleFSCH
         * @property {loadmodule.ILoadCSG|null} [ValDCSG] LoadControlScheduleFSCH ValDCSG
         */

        /**
         * Constructs a new LoadControlScheduleFSCH.
         * @memberof loadmodule
         * @classdesc Represents a LoadControlScheduleFSCH.
         * @implements ILoadControlScheduleFSCH
         * @constructor
         * @param {loadmodule.ILoadControlScheduleFSCH=} [properties] Properties to set
         */
        function LoadControlScheduleFSCH(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadControlScheduleFSCH ValDCSG.
         * @member {loadmodule.ILoadCSG|null|undefined} ValDCSG
         * @memberof loadmodule.LoadControlScheduleFSCH
         * @instance
         */
        LoadControlScheduleFSCH.prototype.ValDCSG = null;

        /**
         * Creates a new LoadControlScheduleFSCH instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadControlScheduleFSCH
         * @static
         * @param {loadmodule.ILoadControlScheduleFSCH=} [properties] Properties to set
         * @returns {loadmodule.LoadControlScheduleFSCH} LoadControlScheduleFSCH instance
         */
        LoadControlScheduleFSCH.create = function create(properties) {
            return new LoadControlScheduleFSCH(properties);
        };

        /**
         * Encodes the specified LoadControlScheduleFSCH message. Does not implicitly {@link loadmodule.LoadControlScheduleFSCH.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadControlScheduleFSCH
         * @static
         * @param {loadmodule.ILoadControlScheduleFSCH} message LoadControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadControlScheduleFSCH.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.ValDCSG != null && Object.hasOwnProperty.call(message, "ValDCSG"))
                $root.loadmodule.LoadCSG.encode(message.ValDCSG, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadControlScheduleFSCH message, length delimited. Does not implicitly {@link loadmodule.LoadControlScheduleFSCH.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadControlScheduleFSCH
         * @static
         * @param {loadmodule.ILoadControlScheduleFSCH} message LoadControlScheduleFSCH message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadControlScheduleFSCH.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadControlScheduleFSCH message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadControlScheduleFSCH} LoadControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadControlScheduleFSCH.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadControlScheduleFSCH();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.ValDCSG = $root.loadmodule.LoadCSG.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadControlScheduleFSCH message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadControlScheduleFSCH
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadControlScheduleFSCH} LoadControlScheduleFSCH
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadControlScheduleFSCH.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadControlScheduleFSCH message.
         * @function verify
         * @memberof loadmodule.LoadControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadControlScheduleFSCH.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.ValDCSG != null && message.hasOwnProperty("ValDCSG")) {
                var error = $root.loadmodule.LoadCSG.verify(message.ValDCSG);
                if (error)
                    return "ValDCSG." + error;
            }
            return null;
        };

        /**
         * Creates a LoadControlScheduleFSCH message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadControlScheduleFSCH
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadControlScheduleFSCH} LoadControlScheduleFSCH
         */
        LoadControlScheduleFSCH.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadControlScheduleFSCH)
                return object;
            var message = new $root.loadmodule.LoadControlScheduleFSCH();
            if (object.ValDCSG != null) {
                if (typeof object.ValDCSG !== "object")
                    throw TypeError(".loadmodule.LoadControlScheduleFSCH.ValDCSG: object expected");
                message.ValDCSG = $root.loadmodule.LoadCSG.fromObject(object.ValDCSG);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadControlScheduleFSCH message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadControlScheduleFSCH
         * @static
         * @param {loadmodule.LoadControlScheduleFSCH} message LoadControlScheduleFSCH
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadControlScheduleFSCH.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.ValDCSG = null;
            if (message.ValDCSG != null && message.hasOwnProperty("ValDCSG"))
                object.ValDCSG = $root.loadmodule.LoadCSG.toObject(message.ValDCSG, options);
            return object;
        };

        /**
         * Converts this LoadControlScheduleFSCH to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadControlScheduleFSCH
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadControlScheduleFSCH.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadControlScheduleFSCH;
    })();

    loadmodule.LoadControlFSCC = (function() {

        /**
         * Properties of a LoadControlFSCC.
         * @memberof loadmodule
         * @interface ILoadControlFSCC
         * @property {commonmodule.IControlFSCC|null} [controlFSCC] LoadControlFSCC controlFSCC
         * @property {loadmodule.ILoadControlScheduleFSCH|null} [loadControlScheduleFSCH] LoadControlFSCC loadControlScheduleFSCH
         */

        /**
         * Constructs a new LoadControlFSCC.
         * @memberof loadmodule
         * @classdesc Represents a LoadControlFSCC.
         * @implements ILoadControlFSCC
         * @constructor
         * @param {loadmodule.ILoadControlFSCC=} [properties] Properties to set
         */
        function LoadControlFSCC(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadControlFSCC controlFSCC.
         * @member {commonmodule.IControlFSCC|null|undefined} controlFSCC
         * @memberof loadmodule.LoadControlFSCC
         * @instance
         */
        LoadControlFSCC.prototype.controlFSCC = null;

        /**
         * LoadControlFSCC loadControlScheduleFSCH.
         * @member {loadmodule.ILoadControlScheduleFSCH|null|undefined} loadControlScheduleFSCH
         * @memberof loadmodule.LoadControlFSCC
         * @instance
         */
        LoadControlFSCC.prototype.loadControlScheduleFSCH = null;

        /**
         * Creates a new LoadControlFSCC instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadControlFSCC
         * @static
         * @param {loadmodule.ILoadControlFSCC=} [properties] Properties to set
         * @returns {loadmodule.LoadControlFSCC} LoadControlFSCC instance
         */
        LoadControlFSCC.create = function create(properties) {
            return new LoadControlFSCC(properties);
        };

        /**
         * Encodes the specified LoadControlFSCC message. Does not implicitly {@link loadmodule.LoadControlFSCC.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadControlFSCC
         * @static
         * @param {loadmodule.ILoadControlFSCC} message LoadControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadControlFSCC.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlFSCC != null && Object.hasOwnProperty.call(message, "controlFSCC"))
                $root.commonmodule.ControlFSCC.encode(message.controlFSCC, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.loadControlScheduleFSCH != null && Object.hasOwnProperty.call(message, "loadControlScheduleFSCH"))
                $root.loadmodule.LoadControlScheduleFSCH.encode(message.loadControlScheduleFSCH, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadControlFSCC message, length delimited. Does not implicitly {@link loadmodule.LoadControlFSCC.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadControlFSCC
         * @static
         * @param {loadmodule.ILoadControlFSCC} message LoadControlFSCC message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadControlFSCC.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadControlFSCC message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadControlFSCC} LoadControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadControlFSCC.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadControlFSCC();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlFSCC = $root.commonmodule.ControlFSCC.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.loadControlScheduleFSCH = $root.loadmodule.LoadControlScheduleFSCH.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadControlFSCC message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadControlFSCC
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadControlFSCC} LoadControlFSCC
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadControlFSCC.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadControlFSCC message.
         * @function verify
         * @memberof loadmodule.LoadControlFSCC
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadControlFSCC.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlFSCC != null && message.hasOwnProperty("controlFSCC")) {
                var error = $root.commonmodule.ControlFSCC.verify(message.controlFSCC);
                if (error)
                    return "controlFSCC." + error;
            }
            if (message.loadControlScheduleFSCH != null && message.hasOwnProperty("loadControlScheduleFSCH")) {
                var error = $root.loadmodule.LoadControlScheduleFSCH.verify(message.loadControlScheduleFSCH);
                if (error)
                    return "loadControlScheduleFSCH." + error;
            }
            return null;
        };

        /**
         * Creates a LoadControlFSCC message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadControlFSCC
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadControlFSCC} LoadControlFSCC
         */
        LoadControlFSCC.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadControlFSCC)
                return object;
            var message = new $root.loadmodule.LoadControlFSCC();
            if (object.controlFSCC != null) {
                if (typeof object.controlFSCC !== "object")
                    throw TypeError(".loadmodule.LoadControlFSCC.controlFSCC: object expected");
                message.controlFSCC = $root.commonmodule.ControlFSCC.fromObject(object.controlFSCC);
            }
            if (object.loadControlScheduleFSCH != null) {
                if (typeof object.loadControlScheduleFSCH !== "object")
                    throw TypeError(".loadmodule.LoadControlFSCC.loadControlScheduleFSCH: object expected");
                message.loadControlScheduleFSCH = $root.loadmodule.LoadControlScheduleFSCH.fromObject(object.loadControlScheduleFSCH);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadControlFSCC message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadControlFSCC
         * @static
         * @param {loadmodule.LoadControlFSCC} message LoadControlFSCC
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadControlFSCC.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlFSCC = null;
                object.loadControlScheduleFSCH = null;
            }
            if (message.controlFSCC != null && message.hasOwnProperty("controlFSCC"))
                object.controlFSCC = $root.commonmodule.ControlFSCC.toObject(message.controlFSCC, options);
            if (message.loadControlScheduleFSCH != null && message.hasOwnProperty("loadControlScheduleFSCH"))
                object.loadControlScheduleFSCH = $root.loadmodule.LoadControlScheduleFSCH.toObject(message.loadControlScheduleFSCH, options);
            return object;
        };

        /**
         * Converts this LoadControlFSCC to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadControlFSCC
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadControlFSCC.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadControlFSCC;
    })();

    loadmodule.LoadControl = (function() {

        /**
         * Properties of a LoadControl.
         * @memberof loadmodule
         * @interface ILoadControl
         * @property {commonmodule.IControlValue|null} [controlValue] LoadControl controlValue
         * @property {commonmodule.ICheckConditions|null} [check] LoadControl check
         * @property {loadmodule.ILoadControlFSCC|null} [loadControlFSCC] LoadControl loadControlFSCC
         */

        /**
         * Constructs a new LoadControl.
         * @memberof loadmodule
         * @classdesc Represents a LoadControl.
         * @implements ILoadControl
         * @constructor
         * @param {loadmodule.ILoadControl=} [properties] Properties to set
         */
        function LoadControl(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadControl controlValue.
         * @member {commonmodule.IControlValue|null|undefined} controlValue
         * @memberof loadmodule.LoadControl
         * @instance
         */
        LoadControl.prototype.controlValue = null;

        /**
         * LoadControl check.
         * @member {commonmodule.ICheckConditions|null|undefined} check
         * @memberof loadmodule.LoadControl
         * @instance
         */
        LoadControl.prototype.check = null;

        /**
         * LoadControl loadControlFSCC.
         * @member {loadmodule.ILoadControlFSCC|null|undefined} loadControlFSCC
         * @memberof loadmodule.LoadControl
         * @instance
         */
        LoadControl.prototype.loadControlFSCC = null;

        /**
         * Creates a new LoadControl instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadControl
         * @static
         * @param {loadmodule.ILoadControl=} [properties] Properties to set
         * @returns {loadmodule.LoadControl} LoadControl instance
         */
        LoadControl.create = function create(properties) {
            return new LoadControl(properties);
        };

        /**
         * Encodes the specified LoadControl message. Does not implicitly {@link loadmodule.LoadControl.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadControl
         * @static
         * @param {loadmodule.ILoadControl} message LoadControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadControl.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlValue != null && Object.hasOwnProperty.call(message, "controlValue"))
                $root.commonmodule.ControlValue.encode(message.controlValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.check != null && Object.hasOwnProperty.call(message, "check"))
                $root.commonmodule.CheckConditions.encode(message.check, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.loadControlFSCC != null && Object.hasOwnProperty.call(message, "loadControlFSCC"))
                $root.loadmodule.LoadControlFSCC.encode(message.loadControlFSCC, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadControl message, length delimited. Does not implicitly {@link loadmodule.LoadControl.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadControl
         * @static
         * @param {loadmodule.ILoadControl} message LoadControl message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadControl.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadControl message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadControl} LoadControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadControl.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadControl();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlValue = $root.commonmodule.ControlValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.check = $root.commonmodule.CheckConditions.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.loadControlFSCC = $root.loadmodule.LoadControlFSCC.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadControl message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadControl
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadControl} LoadControl
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadControl.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadControl message.
         * @function verify
         * @memberof loadmodule.LoadControl
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadControl.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlValue != null && message.hasOwnProperty("controlValue")) {
                var error = $root.commonmodule.ControlValue.verify(message.controlValue);
                if (error)
                    return "controlValue." + error;
            }
            if (message.check != null && message.hasOwnProperty("check")) {
                var error = $root.commonmodule.CheckConditions.verify(message.check);
                if (error)
                    return "check." + error;
            }
            if (message.loadControlFSCC != null && message.hasOwnProperty("loadControlFSCC")) {
                var error = $root.loadmodule.LoadControlFSCC.verify(message.loadControlFSCC);
                if (error)
                    return "loadControlFSCC." + error;
            }
            return null;
        };

        /**
         * Creates a LoadControl message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadControl
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadControl} LoadControl
         */
        LoadControl.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadControl)
                return object;
            var message = new $root.loadmodule.LoadControl();
            if (object.controlValue != null) {
                if (typeof object.controlValue !== "object")
                    throw TypeError(".loadmodule.LoadControl.controlValue: object expected");
                message.controlValue = $root.commonmodule.ControlValue.fromObject(object.controlValue);
            }
            if (object.check != null) {
                if (typeof object.check !== "object")
                    throw TypeError(".loadmodule.LoadControl.check: object expected");
                message.check = $root.commonmodule.CheckConditions.fromObject(object.check);
            }
            if (object.loadControlFSCC != null) {
                if (typeof object.loadControlFSCC !== "object")
                    throw TypeError(".loadmodule.LoadControl.loadControlFSCC: object expected");
                message.loadControlFSCC = $root.loadmodule.LoadControlFSCC.fromObject(object.loadControlFSCC);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadControl message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadControl
         * @static
         * @param {loadmodule.LoadControl} message LoadControl
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadControl.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlValue = null;
                object.check = null;
                object.loadControlFSCC = null;
            }
            if (message.controlValue != null && message.hasOwnProperty("controlValue"))
                object.controlValue = $root.commonmodule.ControlValue.toObject(message.controlValue, options);
            if (message.check != null && message.hasOwnProperty("check"))
                object.check = $root.commonmodule.CheckConditions.toObject(message.check, options);
            if (message.loadControlFSCC != null && message.hasOwnProperty("loadControlFSCC"))
                object.loadControlFSCC = $root.loadmodule.LoadControlFSCC.toObject(message.loadControlFSCC, options);
            return object;
        };

        /**
         * Converts this LoadControl to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadControl
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadControl.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadControl;
    })();

    loadmodule.LoadControlProfile = (function() {

        /**
         * Properties of a LoadControlProfile.
         * @memberof loadmodule
         * @interface ILoadControlProfile
         * @property {commonmodule.IControlMessageInfo|null} [controlMessageInfo] LoadControlProfile controlMessageInfo
         * @property {commonmodule.IEnergyConsumer|null} [energyConsumer] LoadControlProfile energyConsumer
         * @property {commonmodule.IIED|null} [ied] LoadControlProfile ied
         * @property {loadmodule.ILoadControl|null} [loadControl] LoadControlProfile loadControl
         */

        /**
         * Constructs a new LoadControlProfile.
         * @memberof loadmodule
         * @classdesc Represents a LoadControlProfile.
         * @implements ILoadControlProfile
         * @constructor
         * @param {loadmodule.ILoadControlProfile=} [properties] Properties to set
         */
        function LoadControlProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadControlProfile controlMessageInfo.
         * @member {commonmodule.IControlMessageInfo|null|undefined} controlMessageInfo
         * @memberof loadmodule.LoadControlProfile
         * @instance
         */
        LoadControlProfile.prototype.controlMessageInfo = null;

        /**
         * LoadControlProfile energyConsumer.
         * @member {commonmodule.IEnergyConsumer|null|undefined} energyConsumer
         * @memberof loadmodule.LoadControlProfile
         * @instance
         */
        LoadControlProfile.prototype.energyConsumer = null;

        /**
         * LoadControlProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof loadmodule.LoadControlProfile
         * @instance
         */
        LoadControlProfile.prototype.ied = null;

        /**
         * LoadControlProfile loadControl.
         * @member {loadmodule.ILoadControl|null|undefined} loadControl
         * @memberof loadmodule.LoadControlProfile
         * @instance
         */
        LoadControlProfile.prototype.loadControl = null;

        /**
         * Creates a new LoadControlProfile instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadControlProfile
         * @static
         * @param {loadmodule.ILoadControlProfile=} [properties] Properties to set
         * @returns {loadmodule.LoadControlProfile} LoadControlProfile instance
         */
        LoadControlProfile.create = function create(properties) {
            return new LoadControlProfile(properties);
        };

        /**
         * Encodes the specified LoadControlProfile message. Does not implicitly {@link loadmodule.LoadControlProfile.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadControlProfile
         * @static
         * @param {loadmodule.ILoadControlProfile} message LoadControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadControlProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.controlMessageInfo != null && Object.hasOwnProperty.call(message, "controlMessageInfo"))
                $root.commonmodule.ControlMessageInfo.encode(message.controlMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.energyConsumer != null && Object.hasOwnProperty.call(message, "energyConsumer"))
                $root.commonmodule.EnergyConsumer.encode(message.energyConsumer, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.loadControl != null && Object.hasOwnProperty.call(message, "loadControl"))
                $root.loadmodule.LoadControl.encode(message.loadControl, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadControlProfile message, length delimited. Does not implicitly {@link loadmodule.LoadControlProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadControlProfile
         * @static
         * @param {loadmodule.ILoadControlProfile} message LoadControlProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadControlProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadControlProfile message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadControlProfile} LoadControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadControlProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadControlProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.energyConsumer = $root.commonmodule.EnergyConsumer.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.loadControl = $root.loadmodule.LoadControl.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadControlProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadControlProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadControlProfile} LoadControlProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadControlProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadControlProfile message.
         * @function verify
         * @memberof loadmodule.LoadControlProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadControlProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo")) {
                var error = $root.commonmodule.ControlMessageInfo.verify(message.controlMessageInfo);
                if (error)
                    return "controlMessageInfo." + error;
            }
            if (message.energyConsumer != null && message.hasOwnProperty("energyConsumer")) {
                var error = $root.commonmodule.EnergyConsumer.verify(message.energyConsumer);
                if (error)
                    return "energyConsumer." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.loadControl != null && message.hasOwnProperty("loadControl")) {
                var error = $root.loadmodule.LoadControl.verify(message.loadControl);
                if (error)
                    return "loadControl." + error;
            }
            return null;
        };

        /**
         * Creates a LoadControlProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadControlProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadControlProfile} LoadControlProfile
         */
        LoadControlProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadControlProfile)
                return object;
            var message = new $root.loadmodule.LoadControlProfile();
            if (object.controlMessageInfo != null) {
                if (typeof object.controlMessageInfo !== "object")
                    throw TypeError(".loadmodule.LoadControlProfile.controlMessageInfo: object expected");
                message.controlMessageInfo = $root.commonmodule.ControlMessageInfo.fromObject(object.controlMessageInfo);
            }
            if (object.energyConsumer != null) {
                if (typeof object.energyConsumer !== "object")
                    throw TypeError(".loadmodule.LoadControlProfile.energyConsumer: object expected");
                message.energyConsumer = $root.commonmodule.EnergyConsumer.fromObject(object.energyConsumer);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".loadmodule.LoadControlProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.loadControl != null) {
                if (typeof object.loadControl !== "object")
                    throw TypeError(".loadmodule.LoadControlProfile.loadControl: object expected");
                message.loadControl = $root.loadmodule.LoadControl.fromObject(object.loadControl);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadControlProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadControlProfile
         * @static
         * @param {loadmodule.LoadControlProfile} message LoadControlProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadControlProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.controlMessageInfo = null;
                object.energyConsumer = null;
                object.ied = null;
                object.loadControl = null;
            }
            if (message.controlMessageInfo != null && message.hasOwnProperty("controlMessageInfo"))
                object.controlMessageInfo = $root.commonmodule.ControlMessageInfo.toObject(message.controlMessageInfo, options);
            if (message.energyConsumer != null && message.hasOwnProperty("energyConsumer"))
                object.energyConsumer = $root.commonmodule.EnergyConsumer.toObject(message.energyConsumer, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.loadControl != null && message.hasOwnProperty("loadControl"))
                object.loadControl = $root.loadmodule.LoadControl.toObject(message.loadControl, options);
            return object;
        };

        /**
         * Converts this LoadControlProfile to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadControlProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadControlProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadControlProfile;
    })();

    loadmodule.LoadPointStatus = (function() {

        /**
         * Properties of a LoadPointStatus.
         * @memberof loadmodule
         * @interface ILoadPointStatus
         * @property {commonmodule.IRampRate|null} [rampRates] LoadPointStatus rampRates
         * @property {commonmodule.IControlDPC|null} [reactivePwrSetPointEnabled] LoadPointStatus reactivePwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [realPwrSetPointEnabled] LoadPointStatus realPwrSetPointEnabled
         * @property {commonmodule.IControlDPC|null} [reset] LoadPointStatus reset
         * @property {commonmodule.IOptional_StateKind|null} [state] LoadPointStatus state
         */

        /**
         * Constructs a new LoadPointStatus.
         * @memberof loadmodule
         * @classdesc Represents a LoadPointStatus.
         * @implements ILoadPointStatus
         * @constructor
         * @param {loadmodule.ILoadPointStatus=} [properties] Properties to set
         */
        function LoadPointStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadPointStatus rampRates.
         * @member {commonmodule.IRampRate|null|undefined} rampRates
         * @memberof loadmodule.LoadPointStatus
         * @instance
         */
        LoadPointStatus.prototype.rampRates = null;

        /**
         * LoadPointStatus reactivePwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} reactivePwrSetPointEnabled
         * @memberof loadmodule.LoadPointStatus
         * @instance
         */
        LoadPointStatus.prototype.reactivePwrSetPointEnabled = null;

        /**
         * LoadPointStatus realPwrSetPointEnabled.
         * @member {commonmodule.IControlDPC|null|undefined} realPwrSetPointEnabled
         * @memberof loadmodule.LoadPointStatus
         * @instance
         */
        LoadPointStatus.prototype.realPwrSetPointEnabled = null;

        /**
         * LoadPointStatus reset.
         * @member {commonmodule.IControlDPC|null|undefined} reset
         * @memberof loadmodule.LoadPointStatus
         * @instance
         */
        LoadPointStatus.prototype.reset = null;

        /**
         * LoadPointStatus state.
         * @member {commonmodule.IOptional_StateKind|null|undefined} state
         * @memberof loadmodule.LoadPointStatus
         * @instance
         */
        LoadPointStatus.prototype.state = null;

        /**
         * Creates a new LoadPointStatus instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadPointStatus
         * @static
         * @param {loadmodule.ILoadPointStatus=} [properties] Properties to set
         * @returns {loadmodule.LoadPointStatus} LoadPointStatus instance
         */
        LoadPointStatus.create = function create(properties) {
            return new LoadPointStatus(properties);
        };

        /**
         * Encodes the specified LoadPointStatus message. Does not implicitly {@link loadmodule.LoadPointStatus.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadPointStatus
         * @static
         * @param {loadmodule.ILoadPointStatus} message LoadPointStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadPointStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.rampRates != null && Object.hasOwnProperty.call(message, "rampRates"))
                $root.commonmodule.RampRate.encode(message.rampRates, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.reactivePwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "reactivePwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.reactivePwrSetPointEnabled, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.realPwrSetPointEnabled != null && Object.hasOwnProperty.call(message, "realPwrSetPointEnabled"))
                $root.commonmodule.ControlDPC.encode(message.realPwrSetPointEnabled, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.reset != null && Object.hasOwnProperty.call(message, "reset"))
                $root.commonmodule.ControlDPC.encode(message.reset, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                $root.commonmodule.Optional_StateKind.encode(message.state, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadPointStatus message, length delimited. Does not implicitly {@link loadmodule.LoadPointStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadPointStatus
         * @static
         * @param {loadmodule.ILoadPointStatus} message LoadPointStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadPointStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadPointStatus message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadPointStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadPointStatus} LoadPointStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadPointStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadPointStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.rampRates = $root.commonmodule.RampRate.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.reset = $root.commonmodule.ControlDPC.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.state = $root.commonmodule.Optional_StateKind.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadPointStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadPointStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadPointStatus} LoadPointStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadPointStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadPointStatus message.
         * @function verify
         * @memberof loadmodule.LoadPointStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadPointStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.rampRates != null && message.hasOwnProperty("rampRates")) {
                var error = $root.commonmodule.RampRate.verify(message.rampRates);
                if (error)
                    return "rampRates." + error;
            }
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reactivePwrSetPointEnabled);
                if (error)
                    return "reactivePwrSetPointEnabled." + error;
            }
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled")) {
                var error = $root.commonmodule.ControlDPC.verify(message.realPwrSetPointEnabled);
                if (error)
                    return "realPwrSetPointEnabled." + error;
            }
            if (message.reset != null && message.hasOwnProperty("reset")) {
                var error = $root.commonmodule.ControlDPC.verify(message.reset);
                if (error)
                    return "reset." + error;
            }
            if (message.state != null && message.hasOwnProperty("state")) {
                var error = $root.commonmodule.Optional_StateKind.verify(message.state);
                if (error)
                    return "state." + error;
            }
            return null;
        };

        /**
         * Creates a LoadPointStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadPointStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadPointStatus} LoadPointStatus
         */
        LoadPointStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadPointStatus)
                return object;
            var message = new $root.loadmodule.LoadPointStatus();
            if (object.rampRates != null) {
                if (typeof object.rampRates !== "object")
                    throw TypeError(".loadmodule.LoadPointStatus.rampRates: object expected");
                message.rampRates = $root.commonmodule.RampRate.fromObject(object.rampRates);
            }
            if (object.reactivePwrSetPointEnabled != null) {
                if (typeof object.reactivePwrSetPointEnabled !== "object")
                    throw TypeError(".loadmodule.LoadPointStatus.reactivePwrSetPointEnabled: object expected");
                message.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.reactivePwrSetPointEnabled);
            }
            if (object.realPwrSetPointEnabled != null) {
                if (typeof object.realPwrSetPointEnabled !== "object")
                    throw TypeError(".loadmodule.LoadPointStatus.realPwrSetPointEnabled: object expected");
                message.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.fromObject(object.realPwrSetPointEnabled);
            }
            if (object.reset != null) {
                if (typeof object.reset !== "object")
                    throw TypeError(".loadmodule.LoadPointStatus.reset: object expected");
                message.reset = $root.commonmodule.ControlDPC.fromObject(object.reset);
            }
            if (object.state != null) {
                if (typeof object.state !== "object")
                    throw TypeError(".loadmodule.LoadPointStatus.state: object expected");
                message.state = $root.commonmodule.Optional_StateKind.fromObject(object.state);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadPointStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadPointStatus
         * @static
         * @param {loadmodule.LoadPointStatus} message LoadPointStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadPointStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.rampRates = null;
                object.reactivePwrSetPointEnabled = null;
                object.realPwrSetPointEnabled = null;
                object.reset = null;
                object.state = null;
            }
            if (message.rampRates != null && message.hasOwnProperty("rampRates"))
                object.rampRates = $root.commonmodule.RampRate.toObject(message.rampRates, options);
            if (message.reactivePwrSetPointEnabled != null && message.hasOwnProperty("reactivePwrSetPointEnabled"))
                object.reactivePwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.reactivePwrSetPointEnabled, options);
            if (message.realPwrSetPointEnabled != null && message.hasOwnProperty("realPwrSetPointEnabled"))
                object.realPwrSetPointEnabled = $root.commonmodule.ControlDPC.toObject(message.realPwrSetPointEnabled, options);
            if (message.reset != null && message.hasOwnProperty("reset"))
                object.reset = $root.commonmodule.ControlDPC.toObject(message.reset, options);
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = $root.commonmodule.Optional_StateKind.toObject(message.state, options);
            return object;
        };

        /**
         * Converts this LoadPointStatus to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadPointStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadPointStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadPointStatus;
    })();

    loadmodule.LoadEventAndStatusZGLD = (function() {

        /**
         * Properties of a LoadEventAndStatusZGLD.
         * @memberof loadmodule
         * @interface ILoadEventAndStatusZGLD
         * @property {commonmodule.ILogicalNodeForEventAndStatus|null} [logicalNodeForEventAndStatus] LoadEventAndStatusZGLD logicalNodeForEventAndStatus
         * @property {commonmodule.IENS_DynamicTestKind|null} [DynamicTest] LoadEventAndStatusZGLD DynamicTest
         * @property {commonmodule.IStatusSPS|null} [EmgStop] LoadEventAndStatusZGLD EmgStop
         * @property {loadmodule.ILoadPointStatus|null} [PointStatus] LoadEventAndStatusZGLD PointStatus
         */

        /**
         * Constructs a new LoadEventAndStatusZGLD.
         * @memberof loadmodule
         * @classdesc Represents a LoadEventAndStatusZGLD.
         * @implements ILoadEventAndStatusZGLD
         * @constructor
         * @param {loadmodule.ILoadEventAndStatusZGLD=} [properties] Properties to set
         */
        function LoadEventAndStatusZGLD(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadEventAndStatusZGLD logicalNodeForEventAndStatus.
         * @member {commonmodule.ILogicalNodeForEventAndStatus|null|undefined} logicalNodeForEventAndStatus
         * @memberof loadmodule.LoadEventAndStatusZGLD
         * @instance
         */
        LoadEventAndStatusZGLD.prototype.logicalNodeForEventAndStatus = null;

        /**
         * LoadEventAndStatusZGLD DynamicTest.
         * @member {commonmodule.IENS_DynamicTestKind|null|undefined} DynamicTest
         * @memberof loadmodule.LoadEventAndStatusZGLD
         * @instance
         */
        LoadEventAndStatusZGLD.prototype.DynamicTest = null;

        /**
         * LoadEventAndStatusZGLD EmgStop.
         * @member {commonmodule.IStatusSPS|null|undefined} EmgStop
         * @memberof loadmodule.LoadEventAndStatusZGLD
         * @instance
         */
        LoadEventAndStatusZGLD.prototype.EmgStop = null;

        /**
         * LoadEventAndStatusZGLD PointStatus.
         * @member {loadmodule.ILoadPointStatus|null|undefined} PointStatus
         * @memberof loadmodule.LoadEventAndStatusZGLD
         * @instance
         */
        LoadEventAndStatusZGLD.prototype.PointStatus = null;

        /**
         * Creates a new LoadEventAndStatusZGLD instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadEventAndStatusZGLD
         * @static
         * @param {loadmodule.ILoadEventAndStatusZGLD=} [properties] Properties to set
         * @returns {loadmodule.LoadEventAndStatusZGLD} LoadEventAndStatusZGLD instance
         */
        LoadEventAndStatusZGLD.create = function create(properties) {
            return new LoadEventAndStatusZGLD(properties);
        };

        /**
         * Encodes the specified LoadEventAndStatusZGLD message. Does not implicitly {@link loadmodule.LoadEventAndStatusZGLD.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadEventAndStatusZGLD
         * @static
         * @param {loadmodule.ILoadEventAndStatusZGLD} message LoadEventAndStatusZGLD message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadEventAndStatusZGLD.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.logicalNodeForEventAndStatus != null && Object.hasOwnProperty.call(message, "logicalNodeForEventAndStatus"))
                $root.commonmodule.LogicalNodeForEventAndStatus.encode(message.logicalNodeForEventAndStatus, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.DynamicTest != null && Object.hasOwnProperty.call(message, "DynamicTest"))
                $root.commonmodule.ENS_DynamicTestKind.encode(message.DynamicTest, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.EmgStop != null && Object.hasOwnProperty.call(message, "EmgStop"))
                $root.commonmodule.StatusSPS.encode(message.EmgStop, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.PointStatus != null && Object.hasOwnProperty.call(message, "PointStatus"))
                $root.loadmodule.LoadPointStatus.encode(message.PointStatus, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadEventAndStatusZGLD message, length delimited. Does not implicitly {@link loadmodule.LoadEventAndStatusZGLD.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadEventAndStatusZGLD
         * @static
         * @param {loadmodule.ILoadEventAndStatusZGLD} message LoadEventAndStatusZGLD message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadEventAndStatusZGLD.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadEventAndStatusZGLD message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadEventAndStatusZGLD
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadEventAndStatusZGLD} LoadEventAndStatusZGLD
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadEventAndStatusZGLD.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadEventAndStatusZGLD();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.EmgStop = $root.commonmodule.StatusSPS.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.PointStatus = $root.loadmodule.LoadPointStatus.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadEventAndStatusZGLD message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadEventAndStatusZGLD
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadEventAndStatusZGLD} LoadEventAndStatusZGLD
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadEventAndStatusZGLD.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadEventAndStatusZGLD message.
         * @function verify
         * @memberof loadmodule.LoadEventAndStatusZGLD
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadEventAndStatusZGLD.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus")) {
                var error = $root.commonmodule.LogicalNodeForEventAndStatus.verify(message.logicalNodeForEventAndStatus);
                if (error)
                    return "logicalNodeForEventAndStatus." + error;
            }
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest")) {
                var error = $root.commonmodule.ENS_DynamicTestKind.verify(message.DynamicTest);
                if (error)
                    return "DynamicTest." + error;
            }
            if (message.EmgStop != null && message.hasOwnProperty("EmgStop")) {
                var error = $root.commonmodule.StatusSPS.verify(message.EmgStop);
                if (error)
                    return "EmgStop." + error;
            }
            if (message.PointStatus != null && message.hasOwnProperty("PointStatus")) {
                var error = $root.loadmodule.LoadPointStatus.verify(message.PointStatus);
                if (error)
                    return "PointStatus." + error;
            }
            return null;
        };

        /**
         * Creates a LoadEventAndStatusZGLD message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadEventAndStatusZGLD
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadEventAndStatusZGLD} LoadEventAndStatusZGLD
         */
        LoadEventAndStatusZGLD.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadEventAndStatusZGLD)
                return object;
            var message = new $root.loadmodule.LoadEventAndStatusZGLD();
            if (object.logicalNodeForEventAndStatus != null) {
                if (typeof object.logicalNodeForEventAndStatus !== "object")
                    throw TypeError(".loadmodule.LoadEventAndStatusZGLD.logicalNodeForEventAndStatus: object expected");
                message.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.fromObject(object.logicalNodeForEventAndStatus);
            }
            if (object.DynamicTest != null) {
                if (typeof object.DynamicTest !== "object")
                    throw TypeError(".loadmodule.LoadEventAndStatusZGLD.DynamicTest: object expected");
                message.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.fromObject(object.DynamicTest);
            }
            if (object.EmgStop != null) {
                if (typeof object.EmgStop !== "object")
                    throw TypeError(".loadmodule.LoadEventAndStatusZGLD.EmgStop: object expected");
                message.EmgStop = $root.commonmodule.StatusSPS.fromObject(object.EmgStop);
            }
            if (object.PointStatus != null) {
                if (typeof object.PointStatus !== "object")
                    throw TypeError(".loadmodule.LoadEventAndStatusZGLD.PointStatus: object expected");
                message.PointStatus = $root.loadmodule.LoadPointStatus.fromObject(object.PointStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadEventAndStatusZGLD message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadEventAndStatusZGLD
         * @static
         * @param {loadmodule.LoadEventAndStatusZGLD} message LoadEventAndStatusZGLD
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadEventAndStatusZGLD.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.logicalNodeForEventAndStatus = null;
                object.DynamicTest = null;
                object.EmgStop = null;
                object.PointStatus = null;
            }
            if (message.logicalNodeForEventAndStatus != null && message.hasOwnProperty("logicalNodeForEventAndStatus"))
                object.logicalNodeForEventAndStatus = $root.commonmodule.LogicalNodeForEventAndStatus.toObject(message.logicalNodeForEventAndStatus, options);
            if (message.DynamicTest != null && message.hasOwnProperty("DynamicTest"))
                object.DynamicTest = $root.commonmodule.ENS_DynamicTestKind.toObject(message.DynamicTest, options);
            if (message.EmgStop != null && message.hasOwnProperty("EmgStop"))
                object.EmgStop = $root.commonmodule.StatusSPS.toObject(message.EmgStop, options);
            if (message.PointStatus != null && message.hasOwnProperty("PointStatus"))
                object.PointStatus = $root.loadmodule.LoadPointStatus.toObject(message.PointStatus, options);
            return object;
        };

        /**
         * Converts this LoadEventAndStatusZGLD to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadEventAndStatusZGLD
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadEventAndStatusZGLD.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadEventAndStatusZGLD;
    })();

    loadmodule.LoadEventZGLD = (function() {

        /**
         * Properties of a LoadEventZGLD.
         * @memberof loadmodule
         * @interface ILoadEventZGLD
         * @property {loadmodule.ILoadEventAndStatusZGLD|null} [loadEventAndStatusZGLD] LoadEventZGLD loadEventAndStatusZGLD
         */

        /**
         * Constructs a new LoadEventZGLD.
         * @memberof loadmodule
         * @classdesc Represents a LoadEventZGLD.
         * @implements ILoadEventZGLD
         * @constructor
         * @param {loadmodule.ILoadEventZGLD=} [properties] Properties to set
         */
        function LoadEventZGLD(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadEventZGLD loadEventAndStatusZGLD.
         * @member {loadmodule.ILoadEventAndStatusZGLD|null|undefined} loadEventAndStatusZGLD
         * @memberof loadmodule.LoadEventZGLD
         * @instance
         */
        LoadEventZGLD.prototype.loadEventAndStatusZGLD = null;

        /**
         * Creates a new LoadEventZGLD instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadEventZGLD
         * @static
         * @param {loadmodule.ILoadEventZGLD=} [properties] Properties to set
         * @returns {loadmodule.LoadEventZGLD} LoadEventZGLD instance
         */
        LoadEventZGLD.create = function create(properties) {
            return new LoadEventZGLD(properties);
        };

        /**
         * Encodes the specified LoadEventZGLD message. Does not implicitly {@link loadmodule.LoadEventZGLD.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadEventZGLD
         * @static
         * @param {loadmodule.ILoadEventZGLD} message LoadEventZGLD message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadEventZGLD.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.loadEventAndStatusZGLD != null && Object.hasOwnProperty.call(message, "loadEventAndStatusZGLD"))
                $root.loadmodule.LoadEventAndStatusZGLD.encode(message.loadEventAndStatusZGLD, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadEventZGLD message, length delimited. Does not implicitly {@link loadmodule.LoadEventZGLD.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadEventZGLD
         * @static
         * @param {loadmodule.ILoadEventZGLD} message LoadEventZGLD message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadEventZGLD.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadEventZGLD message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadEventZGLD
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadEventZGLD} LoadEventZGLD
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadEventZGLD.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadEventZGLD();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.loadEventAndStatusZGLD = $root.loadmodule.LoadEventAndStatusZGLD.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadEventZGLD message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadEventZGLD
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadEventZGLD} LoadEventZGLD
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadEventZGLD.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadEventZGLD message.
         * @function verify
         * @memberof loadmodule.LoadEventZGLD
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadEventZGLD.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.loadEventAndStatusZGLD != null && message.hasOwnProperty("loadEventAndStatusZGLD")) {
                var error = $root.loadmodule.LoadEventAndStatusZGLD.verify(message.loadEventAndStatusZGLD);
                if (error)
                    return "loadEventAndStatusZGLD." + error;
            }
            return null;
        };

        /**
         * Creates a LoadEventZGLD message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadEventZGLD
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadEventZGLD} LoadEventZGLD
         */
        LoadEventZGLD.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadEventZGLD)
                return object;
            var message = new $root.loadmodule.LoadEventZGLD();
            if (object.loadEventAndStatusZGLD != null) {
                if (typeof object.loadEventAndStatusZGLD !== "object")
                    throw TypeError(".loadmodule.LoadEventZGLD.loadEventAndStatusZGLD: object expected");
                message.loadEventAndStatusZGLD = $root.loadmodule.LoadEventAndStatusZGLD.fromObject(object.loadEventAndStatusZGLD);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadEventZGLD message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadEventZGLD
         * @static
         * @param {loadmodule.LoadEventZGLD} message LoadEventZGLD
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadEventZGLD.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.loadEventAndStatusZGLD = null;
            if (message.loadEventAndStatusZGLD != null && message.hasOwnProperty("loadEventAndStatusZGLD"))
                object.loadEventAndStatusZGLD = $root.loadmodule.LoadEventAndStatusZGLD.toObject(message.loadEventAndStatusZGLD, options);
            return object;
        };

        /**
         * Converts this LoadEventZGLD to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadEventZGLD
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadEventZGLD.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadEventZGLD;
    })();

    loadmodule.LoadEvent = (function() {

        /**
         * Properties of a LoadEvent.
         * @memberof loadmodule
         * @interface ILoadEvent
         * @property {commonmodule.IEventValue|null} [eventValue] LoadEvent eventValue
         * @property {loadmodule.ILoadEventZGLD|null} [loadEventZGLD] LoadEvent loadEventZGLD
         */

        /**
         * Constructs a new LoadEvent.
         * @memberof loadmodule
         * @classdesc Represents a LoadEvent.
         * @implements ILoadEvent
         * @constructor
         * @param {loadmodule.ILoadEvent=} [properties] Properties to set
         */
        function LoadEvent(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadEvent eventValue.
         * @member {commonmodule.IEventValue|null|undefined} eventValue
         * @memberof loadmodule.LoadEvent
         * @instance
         */
        LoadEvent.prototype.eventValue = null;

        /**
         * LoadEvent loadEventZGLD.
         * @member {loadmodule.ILoadEventZGLD|null|undefined} loadEventZGLD
         * @memberof loadmodule.LoadEvent
         * @instance
         */
        LoadEvent.prototype.loadEventZGLD = null;

        /**
         * Creates a new LoadEvent instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadEvent
         * @static
         * @param {loadmodule.ILoadEvent=} [properties] Properties to set
         * @returns {loadmodule.LoadEvent} LoadEvent instance
         */
        LoadEvent.create = function create(properties) {
            return new LoadEvent(properties);
        };

        /**
         * Encodes the specified LoadEvent message. Does not implicitly {@link loadmodule.LoadEvent.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadEvent
         * @static
         * @param {loadmodule.ILoadEvent} message LoadEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadEvent.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventValue != null && Object.hasOwnProperty.call(message, "eventValue"))
                $root.commonmodule.EventValue.encode(message.eventValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.loadEventZGLD != null && Object.hasOwnProperty.call(message, "loadEventZGLD"))
                $root.loadmodule.LoadEventZGLD.encode(message.loadEventZGLD, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadEvent message, length delimited. Does not implicitly {@link loadmodule.LoadEvent.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadEvent
         * @static
         * @param {loadmodule.ILoadEvent} message LoadEvent message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadEvent.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadEvent message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadEvent} LoadEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadEvent.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadEvent();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventValue = $root.commonmodule.EventValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.loadEventZGLD = $root.loadmodule.LoadEventZGLD.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadEvent message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadEvent
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadEvent} LoadEvent
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadEvent.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadEvent message.
         * @function verify
         * @memberof loadmodule.LoadEvent
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadEvent.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventValue != null && message.hasOwnProperty("eventValue")) {
                var error = $root.commonmodule.EventValue.verify(message.eventValue);
                if (error)
                    return "eventValue." + error;
            }
            if (message.loadEventZGLD != null && message.hasOwnProperty("loadEventZGLD")) {
                var error = $root.loadmodule.LoadEventZGLD.verify(message.loadEventZGLD);
                if (error)
                    return "loadEventZGLD." + error;
            }
            return null;
        };

        /**
         * Creates a LoadEvent message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadEvent
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadEvent} LoadEvent
         */
        LoadEvent.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadEvent)
                return object;
            var message = new $root.loadmodule.LoadEvent();
            if (object.eventValue != null) {
                if (typeof object.eventValue !== "object")
                    throw TypeError(".loadmodule.LoadEvent.eventValue: object expected");
                message.eventValue = $root.commonmodule.EventValue.fromObject(object.eventValue);
            }
            if (object.loadEventZGLD != null) {
                if (typeof object.loadEventZGLD !== "object")
                    throw TypeError(".loadmodule.LoadEvent.loadEventZGLD: object expected");
                message.loadEventZGLD = $root.loadmodule.LoadEventZGLD.fromObject(object.loadEventZGLD);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadEvent message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadEvent
         * @static
         * @param {loadmodule.LoadEvent} message LoadEvent
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadEvent.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventValue = null;
                object.loadEventZGLD = null;
            }
            if (message.eventValue != null && message.hasOwnProperty("eventValue"))
                object.eventValue = $root.commonmodule.EventValue.toObject(message.eventValue, options);
            if (message.loadEventZGLD != null && message.hasOwnProperty("loadEventZGLD"))
                object.loadEventZGLD = $root.loadmodule.LoadEventZGLD.toObject(message.loadEventZGLD, options);
            return object;
        };

        /**
         * Converts this LoadEvent to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadEvent
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadEvent.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadEvent;
    })();

    loadmodule.LoadEventProfile = (function() {

        /**
         * Properties of a LoadEventProfile.
         * @memberof loadmodule
         * @interface ILoadEventProfile
         * @property {commonmodule.IEventMessageInfo|null} [eventMessageInfo] LoadEventProfile eventMessageInfo
         * @property {commonmodule.IEnergyConsumer|null} [energyConsumer] LoadEventProfile energyConsumer
         * @property {commonmodule.IIED|null} [ied] LoadEventProfile ied
         * @property {loadmodule.ILoadEvent|null} [loadEvent] LoadEventProfile loadEvent
         */

        /**
         * Constructs a new LoadEventProfile.
         * @memberof loadmodule
         * @classdesc Represents a LoadEventProfile.
         * @implements ILoadEventProfile
         * @constructor
         * @param {loadmodule.ILoadEventProfile=} [properties] Properties to set
         */
        function LoadEventProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadEventProfile eventMessageInfo.
         * @member {commonmodule.IEventMessageInfo|null|undefined} eventMessageInfo
         * @memberof loadmodule.LoadEventProfile
         * @instance
         */
        LoadEventProfile.prototype.eventMessageInfo = null;

        /**
         * LoadEventProfile energyConsumer.
         * @member {commonmodule.IEnergyConsumer|null|undefined} energyConsumer
         * @memberof loadmodule.LoadEventProfile
         * @instance
         */
        LoadEventProfile.prototype.energyConsumer = null;

        /**
         * LoadEventProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof loadmodule.LoadEventProfile
         * @instance
         */
        LoadEventProfile.prototype.ied = null;

        /**
         * LoadEventProfile loadEvent.
         * @member {loadmodule.ILoadEvent|null|undefined} loadEvent
         * @memberof loadmodule.LoadEventProfile
         * @instance
         */
        LoadEventProfile.prototype.loadEvent = null;

        /**
         * Creates a new LoadEventProfile instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadEventProfile
         * @static
         * @param {loadmodule.ILoadEventProfile=} [properties] Properties to set
         * @returns {loadmodule.LoadEventProfile} LoadEventProfile instance
         */
        LoadEventProfile.create = function create(properties) {
            return new LoadEventProfile(properties);
        };

        /**
         * Encodes the specified LoadEventProfile message. Does not implicitly {@link loadmodule.LoadEventProfile.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadEventProfile
         * @static
         * @param {loadmodule.ILoadEventProfile} message LoadEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadEventProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.eventMessageInfo != null && Object.hasOwnProperty.call(message, "eventMessageInfo"))
                $root.commonmodule.EventMessageInfo.encode(message.eventMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.energyConsumer != null && Object.hasOwnProperty.call(message, "energyConsumer"))
                $root.commonmodule.EnergyConsumer.encode(message.energyConsumer, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.loadEvent != null && Object.hasOwnProperty.call(message, "loadEvent"))
                $root.loadmodule.LoadEvent.encode(message.loadEvent, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadEventProfile message, length delimited. Does not implicitly {@link loadmodule.LoadEventProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadEventProfile
         * @static
         * @param {loadmodule.ILoadEventProfile} message LoadEventProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadEventProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadEventProfile message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadEventProfile} LoadEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadEventProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadEventProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.eventMessageInfo = $root.commonmodule.EventMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.energyConsumer = $root.commonmodule.EnergyConsumer.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.loadEvent = $root.loadmodule.LoadEvent.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadEventProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadEventProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadEventProfile} LoadEventProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadEventProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadEventProfile message.
         * @function verify
         * @memberof loadmodule.LoadEventProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadEventProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo")) {
                var error = $root.commonmodule.EventMessageInfo.verify(message.eventMessageInfo);
                if (error)
                    return "eventMessageInfo." + error;
            }
            if (message.energyConsumer != null && message.hasOwnProperty("energyConsumer")) {
                var error = $root.commonmodule.EnergyConsumer.verify(message.energyConsumer);
                if (error)
                    return "energyConsumer." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.loadEvent != null && message.hasOwnProperty("loadEvent")) {
                var error = $root.loadmodule.LoadEvent.verify(message.loadEvent);
                if (error)
                    return "loadEvent." + error;
            }
            return null;
        };

        /**
         * Creates a LoadEventProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadEventProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadEventProfile} LoadEventProfile
         */
        LoadEventProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadEventProfile)
                return object;
            var message = new $root.loadmodule.LoadEventProfile();
            if (object.eventMessageInfo != null) {
                if (typeof object.eventMessageInfo !== "object")
                    throw TypeError(".loadmodule.LoadEventProfile.eventMessageInfo: object expected");
                message.eventMessageInfo = $root.commonmodule.EventMessageInfo.fromObject(object.eventMessageInfo);
            }
            if (object.energyConsumer != null) {
                if (typeof object.energyConsumer !== "object")
                    throw TypeError(".loadmodule.LoadEventProfile.energyConsumer: object expected");
                message.energyConsumer = $root.commonmodule.EnergyConsumer.fromObject(object.energyConsumer);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".loadmodule.LoadEventProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.loadEvent != null) {
                if (typeof object.loadEvent !== "object")
                    throw TypeError(".loadmodule.LoadEventProfile.loadEvent: object expected");
                message.loadEvent = $root.loadmodule.LoadEvent.fromObject(object.loadEvent);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadEventProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadEventProfile
         * @static
         * @param {loadmodule.LoadEventProfile} message LoadEventProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadEventProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.eventMessageInfo = null;
                object.energyConsumer = null;
                object.ied = null;
                object.loadEvent = null;
            }
            if (message.eventMessageInfo != null && message.hasOwnProperty("eventMessageInfo"))
                object.eventMessageInfo = $root.commonmodule.EventMessageInfo.toObject(message.eventMessageInfo, options);
            if (message.energyConsumer != null && message.hasOwnProperty("energyConsumer"))
                object.energyConsumer = $root.commonmodule.EnergyConsumer.toObject(message.energyConsumer, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.loadEvent != null && message.hasOwnProperty("loadEvent"))
                object.loadEvent = $root.loadmodule.LoadEvent.toObject(message.loadEvent, options);
            return object;
        };

        /**
         * Converts this LoadEventProfile to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadEventProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadEventProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadEventProfile;
    })();

    loadmodule.LoadReading = (function() {

        /**
         * Properties of a LoadReading.
         * @memberof loadmodule
         * @interface ILoadReading
         * @property {commonmodule.IConductingEquipmentTerminalReading|null} [conductingEquipmentTerminalReading] LoadReading conductingEquipmentTerminalReading
         * @property {commonmodule.IPhaseMMTN|null} [phaseMMTN] LoadReading phaseMMTN
         * @property {commonmodule.IReadingMMTR|null} [readingMMTR] LoadReading readingMMTR
         * @property {commonmodule.IReadingMMXU|null} [readingMMXU] LoadReading readingMMXU
         */

        /**
         * Constructs a new LoadReading.
         * @memberof loadmodule
         * @classdesc Represents a LoadReading.
         * @implements ILoadReading
         * @constructor
         * @param {loadmodule.ILoadReading=} [properties] Properties to set
         */
        function LoadReading(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadReading conductingEquipmentTerminalReading.
         * @member {commonmodule.IConductingEquipmentTerminalReading|null|undefined} conductingEquipmentTerminalReading
         * @memberof loadmodule.LoadReading
         * @instance
         */
        LoadReading.prototype.conductingEquipmentTerminalReading = null;

        /**
         * LoadReading phaseMMTN.
         * @member {commonmodule.IPhaseMMTN|null|undefined} phaseMMTN
         * @memberof loadmodule.LoadReading
         * @instance
         */
        LoadReading.prototype.phaseMMTN = null;

        /**
         * LoadReading readingMMTR.
         * @member {commonmodule.IReadingMMTR|null|undefined} readingMMTR
         * @memberof loadmodule.LoadReading
         * @instance
         */
        LoadReading.prototype.readingMMTR = null;

        /**
         * LoadReading readingMMXU.
         * @member {commonmodule.IReadingMMXU|null|undefined} readingMMXU
         * @memberof loadmodule.LoadReading
         * @instance
         */
        LoadReading.prototype.readingMMXU = null;

        /**
         * Creates a new LoadReading instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadReading
         * @static
         * @param {loadmodule.ILoadReading=} [properties] Properties to set
         * @returns {loadmodule.LoadReading} LoadReading instance
         */
        LoadReading.create = function create(properties) {
            return new LoadReading(properties);
        };

        /**
         * Encodes the specified LoadReading message. Does not implicitly {@link loadmodule.LoadReading.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadReading
         * @static
         * @param {loadmodule.ILoadReading} message LoadReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadReading.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.conductingEquipmentTerminalReading != null && Object.hasOwnProperty.call(message, "conductingEquipmentTerminalReading"))
                $root.commonmodule.ConductingEquipmentTerminalReading.encode(message.conductingEquipmentTerminalReading, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.phaseMMTN != null && Object.hasOwnProperty.call(message, "phaseMMTN"))
                $root.commonmodule.PhaseMMTN.encode(message.phaseMMTN, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.readingMMTR != null && Object.hasOwnProperty.call(message, "readingMMTR"))
                $root.commonmodule.ReadingMMTR.encode(message.readingMMTR, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.readingMMXU != null && Object.hasOwnProperty.call(message, "readingMMXU"))
                $root.commonmodule.ReadingMMXU.encode(message.readingMMXU, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadReading message, length delimited. Does not implicitly {@link loadmodule.LoadReading.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadReading
         * @static
         * @param {loadmodule.ILoadReading} message LoadReading message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadReading.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadReading message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadReading} LoadReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadReading.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadReading();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.phaseMMTN = $root.commonmodule.PhaseMMTN.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.readingMMTR = $root.commonmodule.ReadingMMTR.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.readingMMXU = $root.commonmodule.ReadingMMXU.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadReading message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadReading
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadReading} LoadReading
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadReading.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadReading message.
         * @function verify
         * @memberof loadmodule.LoadReading
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadReading.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading")) {
                var error = $root.commonmodule.ConductingEquipmentTerminalReading.verify(message.conductingEquipmentTerminalReading);
                if (error)
                    return "conductingEquipmentTerminalReading." + error;
            }
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN")) {
                var error = $root.commonmodule.PhaseMMTN.verify(message.phaseMMTN);
                if (error)
                    return "phaseMMTN." + error;
            }
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR")) {
                var error = $root.commonmodule.ReadingMMTR.verify(message.readingMMTR);
                if (error)
                    return "readingMMTR." + error;
            }
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU")) {
                var error = $root.commonmodule.ReadingMMXU.verify(message.readingMMXU);
                if (error)
                    return "readingMMXU." + error;
            }
            return null;
        };

        /**
         * Creates a LoadReading message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadReading
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadReading} LoadReading
         */
        LoadReading.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadReading)
                return object;
            var message = new $root.loadmodule.LoadReading();
            if (object.conductingEquipmentTerminalReading != null) {
                if (typeof object.conductingEquipmentTerminalReading !== "object")
                    throw TypeError(".loadmodule.LoadReading.conductingEquipmentTerminalReading: object expected");
                message.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.fromObject(object.conductingEquipmentTerminalReading);
            }
            if (object.phaseMMTN != null) {
                if (typeof object.phaseMMTN !== "object")
                    throw TypeError(".loadmodule.LoadReading.phaseMMTN: object expected");
                message.phaseMMTN = $root.commonmodule.PhaseMMTN.fromObject(object.phaseMMTN);
            }
            if (object.readingMMTR != null) {
                if (typeof object.readingMMTR !== "object")
                    throw TypeError(".loadmodule.LoadReading.readingMMTR: object expected");
                message.readingMMTR = $root.commonmodule.ReadingMMTR.fromObject(object.readingMMTR);
            }
            if (object.readingMMXU != null) {
                if (typeof object.readingMMXU !== "object")
                    throw TypeError(".loadmodule.LoadReading.readingMMXU: object expected");
                message.readingMMXU = $root.commonmodule.ReadingMMXU.fromObject(object.readingMMXU);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadReading message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadReading
         * @static
         * @param {loadmodule.LoadReading} message LoadReading
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadReading.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.conductingEquipmentTerminalReading = null;
                object.phaseMMTN = null;
                object.readingMMTR = null;
                object.readingMMXU = null;
            }
            if (message.conductingEquipmentTerminalReading != null && message.hasOwnProperty("conductingEquipmentTerminalReading"))
                object.conductingEquipmentTerminalReading = $root.commonmodule.ConductingEquipmentTerminalReading.toObject(message.conductingEquipmentTerminalReading, options);
            if (message.phaseMMTN != null && message.hasOwnProperty("phaseMMTN"))
                object.phaseMMTN = $root.commonmodule.PhaseMMTN.toObject(message.phaseMMTN, options);
            if (message.readingMMTR != null && message.hasOwnProperty("readingMMTR"))
                object.readingMMTR = $root.commonmodule.ReadingMMTR.toObject(message.readingMMTR, options);
            if (message.readingMMXU != null && message.hasOwnProperty("readingMMXU"))
                object.readingMMXU = $root.commonmodule.ReadingMMXU.toObject(message.readingMMXU, options);
            return object;
        };

        /**
         * Converts this LoadReading to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadReading
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadReading.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadReading;
    })();

    loadmodule.LoadReadingProfile = (function() {

        /**
         * Properties of a LoadReadingProfile.
         * @memberof loadmodule
         * @interface ILoadReadingProfile
         * @property {commonmodule.IReadingMessageInfo|null} [readingMessageInfo] LoadReadingProfile readingMessageInfo
         * @property {commonmodule.IEnergyConsumer|null} [energyConsumer] LoadReadingProfile energyConsumer
         * @property {commonmodule.IIED|null} [ied] LoadReadingProfile ied
         * @property {loadmodule.ILoadReading|null} [loadReading] LoadReadingProfile loadReading
         */

        /**
         * Constructs a new LoadReadingProfile.
         * @memberof loadmodule
         * @classdesc Represents a LoadReadingProfile.
         * @implements ILoadReadingProfile
         * @constructor
         * @param {loadmodule.ILoadReadingProfile=} [properties] Properties to set
         */
        function LoadReadingProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadReadingProfile readingMessageInfo.
         * @member {commonmodule.IReadingMessageInfo|null|undefined} readingMessageInfo
         * @memberof loadmodule.LoadReadingProfile
         * @instance
         */
        LoadReadingProfile.prototype.readingMessageInfo = null;

        /**
         * LoadReadingProfile energyConsumer.
         * @member {commonmodule.IEnergyConsumer|null|undefined} energyConsumer
         * @memberof loadmodule.LoadReadingProfile
         * @instance
         */
        LoadReadingProfile.prototype.energyConsumer = null;

        /**
         * LoadReadingProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof loadmodule.LoadReadingProfile
         * @instance
         */
        LoadReadingProfile.prototype.ied = null;

        /**
         * LoadReadingProfile loadReading.
         * @member {loadmodule.ILoadReading|null|undefined} loadReading
         * @memberof loadmodule.LoadReadingProfile
         * @instance
         */
        LoadReadingProfile.prototype.loadReading = null;

        /**
         * Creates a new LoadReadingProfile instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadReadingProfile
         * @static
         * @param {loadmodule.ILoadReadingProfile=} [properties] Properties to set
         * @returns {loadmodule.LoadReadingProfile} LoadReadingProfile instance
         */
        LoadReadingProfile.create = function create(properties) {
            return new LoadReadingProfile(properties);
        };

        /**
         * Encodes the specified LoadReadingProfile message. Does not implicitly {@link loadmodule.LoadReadingProfile.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadReadingProfile
         * @static
         * @param {loadmodule.ILoadReadingProfile} message LoadReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadReadingProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.readingMessageInfo != null && Object.hasOwnProperty.call(message, "readingMessageInfo"))
                $root.commonmodule.ReadingMessageInfo.encode(message.readingMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.energyConsumer != null && Object.hasOwnProperty.call(message, "energyConsumer"))
                $root.commonmodule.EnergyConsumer.encode(message.energyConsumer, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.loadReading != null && Object.hasOwnProperty.call(message, "loadReading"))
                $root.loadmodule.LoadReading.encode(message.loadReading, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadReadingProfile message, length delimited. Does not implicitly {@link loadmodule.LoadReadingProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadReadingProfile
         * @static
         * @param {loadmodule.ILoadReadingProfile} message LoadReadingProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadReadingProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadReadingProfile message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadReadingProfile} LoadReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadReadingProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadReadingProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.energyConsumer = $root.commonmodule.EnergyConsumer.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.loadReading = $root.loadmodule.LoadReading.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadReadingProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadReadingProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadReadingProfile} LoadReadingProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadReadingProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadReadingProfile message.
         * @function verify
         * @memberof loadmodule.LoadReadingProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadReadingProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo")) {
                var error = $root.commonmodule.ReadingMessageInfo.verify(message.readingMessageInfo);
                if (error)
                    return "readingMessageInfo." + error;
            }
            if (message.energyConsumer != null && message.hasOwnProperty("energyConsumer")) {
                var error = $root.commonmodule.EnergyConsumer.verify(message.energyConsumer);
                if (error)
                    return "energyConsumer." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.loadReading != null && message.hasOwnProperty("loadReading")) {
                var error = $root.loadmodule.LoadReading.verify(message.loadReading);
                if (error)
                    return "loadReading." + error;
            }
            return null;
        };

        /**
         * Creates a LoadReadingProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadReadingProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadReadingProfile} LoadReadingProfile
         */
        LoadReadingProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadReadingProfile)
                return object;
            var message = new $root.loadmodule.LoadReadingProfile();
            if (object.readingMessageInfo != null) {
                if (typeof object.readingMessageInfo !== "object")
                    throw TypeError(".loadmodule.LoadReadingProfile.readingMessageInfo: object expected");
                message.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.fromObject(object.readingMessageInfo);
            }
            if (object.energyConsumer != null) {
                if (typeof object.energyConsumer !== "object")
                    throw TypeError(".loadmodule.LoadReadingProfile.energyConsumer: object expected");
                message.energyConsumer = $root.commonmodule.EnergyConsumer.fromObject(object.energyConsumer);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".loadmodule.LoadReadingProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.loadReading != null) {
                if (typeof object.loadReading !== "object")
                    throw TypeError(".loadmodule.LoadReadingProfile.loadReading: object expected");
                message.loadReading = $root.loadmodule.LoadReading.fromObject(object.loadReading);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadReadingProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadReadingProfile
         * @static
         * @param {loadmodule.LoadReadingProfile} message LoadReadingProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadReadingProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.readingMessageInfo = null;
                object.energyConsumer = null;
                object.ied = null;
                object.loadReading = null;
            }
            if (message.readingMessageInfo != null && message.hasOwnProperty("readingMessageInfo"))
                object.readingMessageInfo = $root.commonmodule.ReadingMessageInfo.toObject(message.readingMessageInfo, options);
            if (message.energyConsumer != null && message.hasOwnProperty("energyConsumer"))
                object.energyConsumer = $root.commonmodule.EnergyConsumer.toObject(message.energyConsumer, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.loadReading != null && message.hasOwnProperty("loadReading"))
                object.loadReading = $root.loadmodule.LoadReading.toObject(message.loadReading, options);
            return object;
        };

        /**
         * Converts this LoadReadingProfile to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadReadingProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadReadingProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadReadingProfile;
    })();

    loadmodule.LoadStatusZGLD = (function() {

        /**
         * Properties of a LoadStatusZGLD.
         * @memberof loadmodule
         * @interface ILoadStatusZGLD
         * @property {loadmodule.ILoadEventAndStatusZGLD|null} [loadEventAndStatusZGLD] LoadStatusZGLD loadEventAndStatusZGLD
         */

        /**
         * Constructs a new LoadStatusZGLD.
         * @memberof loadmodule
         * @classdesc Represents a LoadStatusZGLD.
         * @implements ILoadStatusZGLD
         * @constructor
         * @param {loadmodule.ILoadStatusZGLD=} [properties] Properties to set
         */
        function LoadStatusZGLD(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadStatusZGLD loadEventAndStatusZGLD.
         * @member {loadmodule.ILoadEventAndStatusZGLD|null|undefined} loadEventAndStatusZGLD
         * @memberof loadmodule.LoadStatusZGLD
         * @instance
         */
        LoadStatusZGLD.prototype.loadEventAndStatusZGLD = null;

        /**
         * Creates a new LoadStatusZGLD instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadStatusZGLD
         * @static
         * @param {loadmodule.ILoadStatusZGLD=} [properties] Properties to set
         * @returns {loadmodule.LoadStatusZGLD} LoadStatusZGLD instance
         */
        LoadStatusZGLD.create = function create(properties) {
            return new LoadStatusZGLD(properties);
        };

        /**
         * Encodes the specified LoadStatusZGLD message. Does not implicitly {@link loadmodule.LoadStatusZGLD.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadStatusZGLD
         * @static
         * @param {loadmodule.ILoadStatusZGLD} message LoadStatusZGLD message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadStatusZGLD.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.loadEventAndStatusZGLD != null && Object.hasOwnProperty.call(message, "loadEventAndStatusZGLD"))
                $root.loadmodule.LoadEventAndStatusZGLD.encode(message.loadEventAndStatusZGLD, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadStatusZGLD message, length delimited. Does not implicitly {@link loadmodule.LoadStatusZGLD.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadStatusZGLD
         * @static
         * @param {loadmodule.ILoadStatusZGLD} message LoadStatusZGLD message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadStatusZGLD.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadStatusZGLD message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadStatusZGLD
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadStatusZGLD} LoadStatusZGLD
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadStatusZGLD.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadStatusZGLD();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.loadEventAndStatusZGLD = $root.loadmodule.LoadEventAndStatusZGLD.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadStatusZGLD message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadStatusZGLD
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadStatusZGLD} LoadStatusZGLD
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadStatusZGLD.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadStatusZGLD message.
         * @function verify
         * @memberof loadmodule.LoadStatusZGLD
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadStatusZGLD.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.loadEventAndStatusZGLD != null && message.hasOwnProperty("loadEventAndStatusZGLD")) {
                var error = $root.loadmodule.LoadEventAndStatusZGLD.verify(message.loadEventAndStatusZGLD);
                if (error)
                    return "loadEventAndStatusZGLD." + error;
            }
            return null;
        };

        /**
         * Creates a LoadStatusZGLD message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadStatusZGLD
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadStatusZGLD} LoadStatusZGLD
         */
        LoadStatusZGLD.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadStatusZGLD)
                return object;
            var message = new $root.loadmodule.LoadStatusZGLD();
            if (object.loadEventAndStatusZGLD != null) {
                if (typeof object.loadEventAndStatusZGLD !== "object")
                    throw TypeError(".loadmodule.LoadStatusZGLD.loadEventAndStatusZGLD: object expected");
                message.loadEventAndStatusZGLD = $root.loadmodule.LoadEventAndStatusZGLD.fromObject(object.loadEventAndStatusZGLD);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadStatusZGLD message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadStatusZGLD
         * @static
         * @param {loadmodule.LoadStatusZGLD} message LoadStatusZGLD
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadStatusZGLD.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.loadEventAndStatusZGLD = null;
            if (message.loadEventAndStatusZGLD != null && message.hasOwnProperty("loadEventAndStatusZGLD"))
                object.loadEventAndStatusZGLD = $root.loadmodule.LoadEventAndStatusZGLD.toObject(message.loadEventAndStatusZGLD, options);
            return object;
        };

        /**
         * Converts this LoadStatusZGLD to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadStatusZGLD
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadStatusZGLD.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadStatusZGLD;
    })();

    loadmodule.LoadStatus = (function() {

        /**
         * Properties of a LoadStatus.
         * @memberof loadmodule
         * @interface ILoadStatus
         * @property {commonmodule.IStatusValue|null} [statusValue] LoadStatus statusValue
         * @property {loadmodule.ILoadStatusZGLD|null} [loadStatusZGLD] LoadStatus loadStatusZGLD
         */

        /**
         * Constructs a new LoadStatus.
         * @memberof loadmodule
         * @classdesc Represents a LoadStatus.
         * @implements ILoadStatus
         * @constructor
         * @param {loadmodule.ILoadStatus=} [properties] Properties to set
         */
        function LoadStatus(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadStatus statusValue.
         * @member {commonmodule.IStatusValue|null|undefined} statusValue
         * @memberof loadmodule.LoadStatus
         * @instance
         */
        LoadStatus.prototype.statusValue = null;

        /**
         * LoadStatus loadStatusZGLD.
         * @member {loadmodule.ILoadStatusZGLD|null|undefined} loadStatusZGLD
         * @memberof loadmodule.LoadStatus
         * @instance
         */
        LoadStatus.prototype.loadStatusZGLD = null;

        /**
         * Creates a new LoadStatus instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadStatus
         * @static
         * @param {loadmodule.ILoadStatus=} [properties] Properties to set
         * @returns {loadmodule.LoadStatus} LoadStatus instance
         */
        LoadStatus.create = function create(properties) {
            return new LoadStatus(properties);
        };

        /**
         * Encodes the specified LoadStatus message. Does not implicitly {@link loadmodule.LoadStatus.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadStatus
         * @static
         * @param {loadmodule.ILoadStatus} message LoadStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadStatus.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusValue != null && Object.hasOwnProperty.call(message, "statusValue"))
                $root.commonmodule.StatusValue.encode(message.statusValue, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.loadStatusZGLD != null && Object.hasOwnProperty.call(message, "loadStatusZGLD"))
                $root.loadmodule.LoadStatusZGLD.encode(message.loadStatusZGLD, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadStatus message, length delimited. Does not implicitly {@link loadmodule.LoadStatus.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadStatus
         * @static
         * @param {loadmodule.ILoadStatus} message LoadStatus message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadStatus.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadStatus message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadStatus} LoadStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadStatus.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadStatus();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusValue = $root.commonmodule.StatusValue.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.loadStatusZGLD = $root.loadmodule.LoadStatusZGLD.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadStatus message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadStatus
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadStatus} LoadStatus
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadStatus.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadStatus message.
         * @function verify
         * @memberof loadmodule.LoadStatus
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadStatus.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusValue != null && message.hasOwnProperty("statusValue")) {
                var error = $root.commonmodule.StatusValue.verify(message.statusValue);
                if (error)
                    return "statusValue." + error;
            }
            if (message.loadStatusZGLD != null && message.hasOwnProperty("loadStatusZGLD")) {
                var error = $root.loadmodule.LoadStatusZGLD.verify(message.loadStatusZGLD);
                if (error)
                    return "loadStatusZGLD." + error;
            }
            return null;
        };

        /**
         * Creates a LoadStatus message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadStatus
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadStatus} LoadStatus
         */
        LoadStatus.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadStatus)
                return object;
            var message = new $root.loadmodule.LoadStatus();
            if (object.statusValue != null) {
                if (typeof object.statusValue !== "object")
                    throw TypeError(".loadmodule.LoadStatus.statusValue: object expected");
                message.statusValue = $root.commonmodule.StatusValue.fromObject(object.statusValue);
            }
            if (object.loadStatusZGLD != null) {
                if (typeof object.loadStatusZGLD !== "object")
                    throw TypeError(".loadmodule.LoadStatus.loadStatusZGLD: object expected");
                message.loadStatusZGLD = $root.loadmodule.LoadStatusZGLD.fromObject(object.loadStatusZGLD);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadStatus message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadStatus
         * @static
         * @param {loadmodule.LoadStatus} message LoadStatus
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadStatus.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusValue = null;
                object.loadStatusZGLD = null;
            }
            if (message.statusValue != null && message.hasOwnProperty("statusValue"))
                object.statusValue = $root.commonmodule.StatusValue.toObject(message.statusValue, options);
            if (message.loadStatusZGLD != null && message.hasOwnProperty("loadStatusZGLD"))
                object.loadStatusZGLD = $root.loadmodule.LoadStatusZGLD.toObject(message.loadStatusZGLD, options);
            return object;
        };

        /**
         * Converts this LoadStatus to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadStatus
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadStatus.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadStatus;
    })();

    loadmodule.LoadStatusProfile = (function() {

        /**
         * Properties of a LoadStatusProfile.
         * @memberof loadmodule
         * @interface ILoadStatusProfile
         * @property {commonmodule.IStatusMessageInfo|null} [statusMessageInfo] LoadStatusProfile statusMessageInfo
         * @property {commonmodule.IEnergyConsumer|null} [energyConsumer] LoadStatusProfile energyConsumer
         * @property {commonmodule.IIED|null} [ied] LoadStatusProfile ied
         * @property {loadmodule.ILoadStatus|null} [loadStatus] LoadStatusProfile loadStatus
         */

        /**
         * Constructs a new LoadStatusProfile.
         * @memberof loadmodule
         * @classdesc Represents a LoadStatusProfile.
         * @implements ILoadStatusProfile
         * @constructor
         * @param {loadmodule.ILoadStatusProfile=} [properties] Properties to set
         */
        function LoadStatusProfile(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * LoadStatusProfile statusMessageInfo.
         * @member {commonmodule.IStatusMessageInfo|null|undefined} statusMessageInfo
         * @memberof loadmodule.LoadStatusProfile
         * @instance
         */
        LoadStatusProfile.prototype.statusMessageInfo = null;

        /**
         * LoadStatusProfile energyConsumer.
         * @member {commonmodule.IEnergyConsumer|null|undefined} energyConsumer
         * @memberof loadmodule.LoadStatusProfile
         * @instance
         */
        LoadStatusProfile.prototype.energyConsumer = null;

        /**
         * LoadStatusProfile ied.
         * @member {commonmodule.IIED|null|undefined} ied
         * @memberof loadmodule.LoadStatusProfile
         * @instance
         */
        LoadStatusProfile.prototype.ied = null;

        /**
         * LoadStatusProfile loadStatus.
         * @member {loadmodule.ILoadStatus|null|undefined} loadStatus
         * @memberof loadmodule.LoadStatusProfile
         * @instance
         */
        LoadStatusProfile.prototype.loadStatus = null;

        /**
         * Creates a new LoadStatusProfile instance using the specified properties.
         * @function create
         * @memberof loadmodule.LoadStatusProfile
         * @static
         * @param {loadmodule.ILoadStatusProfile=} [properties] Properties to set
         * @returns {loadmodule.LoadStatusProfile} LoadStatusProfile instance
         */
        LoadStatusProfile.create = function create(properties) {
            return new LoadStatusProfile(properties);
        };

        /**
         * Encodes the specified LoadStatusProfile message. Does not implicitly {@link loadmodule.LoadStatusProfile.verify|verify} messages.
         * @function encode
         * @memberof loadmodule.LoadStatusProfile
         * @static
         * @param {loadmodule.ILoadStatusProfile} message LoadStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadStatusProfile.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.statusMessageInfo != null && Object.hasOwnProperty.call(message, "statusMessageInfo"))
                $root.commonmodule.StatusMessageInfo.encode(message.statusMessageInfo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
            if (message.energyConsumer != null && Object.hasOwnProperty.call(message, "energyConsumer"))
                $root.commonmodule.EnergyConsumer.encode(message.energyConsumer, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.ied != null && Object.hasOwnProperty.call(message, "ied"))
                $root.commonmodule.IED.encode(message.ied, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.loadStatus != null && Object.hasOwnProperty.call(message, "loadStatus"))
                $root.loadmodule.LoadStatus.encode(message.loadStatus, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified LoadStatusProfile message, length delimited. Does not implicitly {@link loadmodule.LoadStatusProfile.verify|verify} messages.
         * @function encodeDelimited
         * @memberof loadmodule.LoadStatusProfile
         * @static
         * @param {loadmodule.ILoadStatusProfile} message LoadStatusProfile message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        LoadStatusProfile.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a LoadStatusProfile message from the specified reader or buffer.
         * @function decode
         * @memberof loadmodule.LoadStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {loadmodule.LoadStatusProfile} LoadStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadStatusProfile.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.loadmodule.LoadStatusProfile();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.energyConsumer = $root.commonmodule.EnergyConsumer.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.ied = $root.commonmodule.IED.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.loadStatus = $root.loadmodule.LoadStatus.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a LoadStatusProfile message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof loadmodule.LoadStatusProfile
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {loadmodule.LoadStatusProfile} LoadStatusProfile
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        LoadStatusProfile.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a LoadStatusProfile message.
         * @function verify
         * @memberof loadmodule.LoadStatusProfile
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        LoadStatusProfile.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo")) {
                var error = $root.commonmodule.StatusMessageInfo.verify(message.statusMessageInfo);
                if (error)
                    return "statusMessageInfo." + error;
            }
            if (message.energyConsumer != null && message.hasOwnProperty("energyConsumer")) {
                var error = $root.commonmodule.EnergyConsumer.verify(message.energyConsumer);
                if (error)
                    return "energyConsumer." + error;
            }
            if (message.ied != null && message.hasOwnProperty("ied")) {
                var error = $root.commonmodule.IED.verify(message.ied);
                if (error)
                    return "ied." + error;
            }
            if (message.loadStatus != null && message.hasOwnProperty("loadStatus")) {
                var error = $root.loadmodule.LoadStatus.verify(message.loadStatus);
                if (error)
                    return "loadStatus." + error;
            }
            return null;
        };

        /**
         * Creates a LoadStatusProfile message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof loadmodule.LoadStatusProfile
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {loadmodule.LoadStatusProfile} LoadStatusProfile
         */
        LoadStatusProfile.fromObject = function fromObject(object) {
            if (object instanceof $root.loadmodule.LoadStatusProfile)
                return object;
            var message = new $root.loadmodule.LoadStatusProfile();
            if (object.statusMessageInfo != null) {
                if (typeof object.statusMessageInfo !== "object")
                    throw TypeError(".loadmodule.LoadStatusProfile.statusMessageInfo: object expected");
                message.statusMessageInfo = $root.commonmodule.StatusMessageInfo.fromObject(object.statusMessageInfo);
            }
            if (object.energyConsumer != null) {
                if (typeof object.energyConsumer !== "object")
                    throw TypeError(".loadmodule.LoadStatusProfile.energyConsumer: object expected");
                message.energyConsumer = $root.commonmodule.EnergyConsumer.fromObject(object.energyConsumer);
            }
            if (object.ied != null) {
                if (typeof object.ied !== "object")
                    throw TypeError(".loadmodule.LoadStatusProfile.ied: object expected");
                message.ied = $root.commonmodule.IED.fromObject(object.ied);
            }
            if (object.loadStatus != null) {
                if (typeof object.loadStatus !== "object")
                    throw TypeError(".loadmodule.LoadStatusProfile.loadStatus: object expected");
                message.loadStatus = $root.loadmodule.LoadStatus.fromObject(object.loadStatus);
            }
            return message;
        };

        /**
         * Creates a plain object from a LoadStatusProfile message. Also converts values to other types if specified.
         * @function toObject
         * @memberof loadmodule.LoadStatusProfile
         * @static
         * @param {loadmodule.LoadStatusProfile} message LoadStatusProfile
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        LoadStatusProfile.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.statusMessageInfo = null;
                object.energyConsumer = null;
                object.ied = null;
                object.loadStatus = null;
            }
            if (message.statusMessageInfo != null && message.hasOwnProperty("statusMessageInfo"))
                object.statusMessageInfo = $root.commonmodule.StatusMessageInfo.toObject(message.statusMessageInfo, options);
            if (message.energyConsumer != null && message.hasOwnProperty("energyConsumer"))
                object.energyConsumer = $root.commonmodule.EnergyConsumer.toObject(message.energyConsumer, options);
            if (message.ied != null && message.hasOwnProperty("ied"))
                object.ied = $root.commonmodule.IED.toObject(message.ied, options);
            if (message.loadStatus != null && message.hasOwnProperty("loadStatus"))
                object.loadStatus = $root.loadmodule.LoadStatus.toObject(message.loadStatus, options);
            return object;
        };

        /**
         * Converts this LoadStatusProfile to JSON.
         * @function toJSON
         * @memberof loadmodule.LoadStatusProfile
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        LoadStatusProfile.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return LoadStatusProfile;
    })();

    return loadmodule;
})();

$root.uml = (function() {

    /**
     * Namespace uml.
     * @exports uml
     * @namespace
     */
    var uml = {};

    return uml;
})();

$root.awesomepackage = (function() {

    /**
     * Namespace awesomepackage.
     * @exports awesomepackage
     * @namespace
     */
    var awesomepackage = {};

    awesomepackage.AwesomeMessage = (function() {

        /**
         * Properties of an AwesomeMessage.
         * @memberof awesomepackage
         * @interface IAwesomeMessage
         * @property {string|null} [awesomeField] AwesomeMessage awesomeField
         */

        /**
         * Constructs a new AwesomeMessage.
         * @memberof awesomepackage
         * @classdesc Represents an AwesomeMessage.
         * @implements IAwesomeMessage
         * @constructor
         * @param {awesomepackage.IAwesomeMessage=} [properties] Properties to set
         */
        function AwesomeMessage(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * AwesomeMessage awesomeField.
         * @member {string} awesomeField
         * @memberof awesomepackage.AwesomeMessage
         * @instance
         */
        AwesomeMessage.prototype.awesomeField = "";

        /**
         * Creates a new AwesomeMessage instance using the specified properties.
         * @function create
         * @memberof awesomepackage.AwesomeMessage
         * @static
         * @param {awesomepackage.IAwesomeMessage=} [properties] Properties to set
         * @returns {awesomepackage.AwesomeMessage} AwesomeMessage instance
         */
        AwesomeMessage.create = function create(properties) {
            return new AwesomeMessage(properties);
        };

        /**
         * Encodes the specified AwesomeMessage message. Does not implicitly {@link awesomepackage.AwesomeMessage.verify|verify} messages.
         * @function encode
         * @memberof awesomepackage.AwesomeMessage
         * @static
         * @param {awesomepackage.IAwesomeMessage} message AwesomeMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AwesomeMessage.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.awesomeField != null && Object.hasOwnProperty.call(message, "awesomeField"))
                writer.uint32(/* id 1, wireType 2 =*/10).string(message.awesomeField);
            return writer;
        };

        /**
         * Encodes the specified AwesomeMessage message, length delimited. Does not implicitly {@link awesomepackage.AwesomeMessage.verify|verify} messages.
         * @function encodeDelimited
         * @memberof awesomepackage.AwesomeMessage
         * @static
         * @param {awesomepackage.IAwesomeMessage} message AwesomeMessage message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        AwesomeMessage.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an AwesomeMessage message from the specified reader or buffer.
         * @function decode
         * @memberof awesomepackage.AwesomeMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {awesomepackage.AwesomeMessage} AwesomeMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AwesomeMessage.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.awesomepackage.AwesomeMessage();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.awesomeField = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an AwesomeMessage message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof awesomepackage.AwesomeMessage
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {awesomepackage.AwesomeMessage} AwesomeMessage
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        AwesomeMessage.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an AwesomeMessage message.
         * @function verify
         * @memberof awesomepackage.AwesomeMessage
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        AwesomeMessage.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.awesomeField != null && message.hasOwnProperty("awesomeField"))
                if (!$util.isString(message.awesomeField))
                    return "awesomeField: string expected";
            return null;
        };

        /**
         * Creates an AwesomeMessage message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof awesomepackage.AwesomeMessage
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {awesomepackage.AwesomeMessage} AwesomeMessage
         */
        AwesomeMessage.fromObject = function fromObject(object) {
            if (object instanceof $root.awesomepackage.AwesomeMessage)
                return object;
            var message = new $root.awesomepackage.AwesomeMessage();
            if (object.awesomeField != null)
                message.awesomeField = String(object.awesomeField);
            return message;
        };

        /**
         * Creates a plain object from an AwesomeMessage message. Also converts values to other types if specified.
         * @function toObject
         * @memberof awesomepackage.AwesomeMessage
         * @static
         * @param {awesomepackage.AwesomeMessage} message AwesomeMessage
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        AwesomeMessage.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.awesomeField = "";
            if (message.awesomeField != null && message.hasOwnProperty("awesomeField"))
                object.awesomeField = message.awesomeField;
            return object;
        };

        /**
         * Converts this AwesomeMessage to JSON.
         * @function toJSON
         * @memberof awesomepackage.AwesomeMessage
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        AwesomeMessage.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return AwesomeMessage;
    })();

    return awesomepackage;
})();

$root.Greeter = (function() {

    /**
     * Constructs a new Greeter service.
     * @exports Greeter
     * @classdesc Represents a Greeter
     * @extends $protobuf.rpc.Service
     * @constructor
     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
     */
    function Greeter(rpcImpl, requestDelimited, responseDelimited) {
        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
    }

    (Greeter.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Greeter;

    /**
     * Creates new Greeter service using the specified rpc implementation.
     * @function create
     * @memberof Greeter
     * @static
     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
     * @returns {Greeter} RPC service. Useful where requests and/or responses are streamed.
     */
    Greeter.create = function create(rpcImpl, requestDelimited, responseDelimited) {
        return new this(rpcImpl, requestDelimited, responseDelimited);
    };

    /**
     * Callback as used by {@link Greeter#sayHello}.
     * @memberof Greeter
     * @typedef SayHelloCallback
     * @type {function}
     * @param {Error|null} error Error, if any
     * @param {HelloReply} [response] HelloReply
     */

    /**
     * Calls SayHello.
     * @function sayHello
     * @memberof Greeter
     * @instance
     * @param {IHelloRequest} request HelloRequest message or plain object
     * @param {Greeter.SayHelloCallback} callback Node-style callback called with the error, if any, and HelloReply
     * @returns {undefined}
     * @variation 1
     */
    Object.defineProperty(Greeter.prototype.sayHello = function sayHello(request, callback) {
        return this.rpcCall(sayHello, $root.HelloRequest, $root.HelloReply, request, callback);
    }, "name", { value: "SayHello" });

    /**
     * Calls SayHello.
     * @function sayHello
     * @memberof Greeter
     * @instance
     * @param {IHelloRequest} request HelloRequest message or plain object
     * @returns {Promise<HelloReply>} Promise
     * @variation 2
     */

    return Greeter;
})();

$root.HelloRequest = (function() {

    /**
     * Properties of a HelloRequest.
     * @exports IHelloRequest
     * @interface IHelloRequest
     * @property {string|null} [name] HelloRequest name
     */

    /**
     * Constructs a new HelloRequest.
     * @exports HelloRequest
     * @classdesc Represents a HelloRequest.
     * @implements IHelloRequest
     * @constructor
     * @param {IHelloRequest=} [properties] Properties to set
     */
    function HelloRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * HelloRequest name.
     * @member {string} name
     * @memberof HelloRequest
     * @instance
     */
    HelloRequest.prototype.name = "";

    /**
     * Creates a new HelloRequest instance using the specified properties.
     * @function create
     * @memberof HelloRequest
     * @static
     * @param {IHelloRequest=} [properties] Properties to set
     * @returns {HelloRequest} HelloRequest instance
     */
    HelloRequest.create = function create(properties) {
        return new HelloRequest(properties);
    };

    /**
     * Encodes the specified HelloRequest message. Does not implicitly {@link HelloRequest.verify|verify} messages.
     * @function encode
     * @memberof HelloRequest
     * @static
     * @param {IHelloRequest} message HelloRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    HelloRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
        return writer;
    };

    /**
     * Encodes the specified HelloRequest message, length delimited. Does not implicitly {@link HelloRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof HelloRequest
     * @static
     * @param {IHelloRequest} message HelloRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    HelloRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a HelloRequest message from the specified reader or buffer.
     * @function decode
     * @memberof HelloRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {HelloRequest} HelloRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    HelloRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HelloRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.name = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a HelloRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof HelloRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {HelloRequest} HelloRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    HelloRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a HelloRequest message.
     * @function verify
     * @memberof HelloRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    HelloRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.name != null && message.hasOwnProperty("name"))
            if (!$util.isString(message.name))
                return "name: string expected";
        return null;
    };

    /**
     * Creates a HelloRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof HelloRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {HelloRequest} HelloRequest
     */
    HelloRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.HelloRequest)
            return object;
        var message = new $root.HelloRequest();
        if (object.name != null)
            message.name = String(object.name);
        return message;
    };

    /**
     * Creates a plain object from a HelloRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof HelloRequest
     * @static
     * @param {HelloRequest} message HelloRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    HelloRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.name = "";
        if (message.name != null && message.hasOwnProperty("name"))
            object.name = message.name;
        return object;
    };

    /**
     * Converts this HelloRequest to JSON.
     * @function toJSON
     * @memberof HelloRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    HelloRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return HelloRequest;
})();

$root.HelloReply = (function() {

    /**
     * Properties of a HelloReply.
     * @exports IHelloReply
     * @interface IHelloReply
     * @property {string|null} [message] HelloReply message
     */

    /**
     * Constructs a new HelloReply.
     * @exports HelloReply
     * @classdesc Represents a HelloReply.
     * @implements IHelloReply
     * @constructor
     * @param {IHelloReply=} [properties] Properties to set
     */
    function HelloReply(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * HelloReply message.
     * @member {string} message
     * @memberof HelloReply
     * @instance
     */
    HelloReply.prototype.message = "";

    /**
     * Creates a new HelloReply instance using the specified properties.
     * @function create
     * @memberof HelloReply
     * @static
     * @param {IHelloReply=} [properties] Properties to set
     * @returns {HelloReply} HelloReply instance
     */
    HelloReply.create = function create(properties) {
        return new HelloReply(properties);
    };

    /**
     * Encodes the specified HelloReply message. Does not implicitly {@link HelloReply.verify|verify} messages.
     * @function encode
     * @memberof HelloReply
     * @static
     * @param {IHelloReply} message HelloReply message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    HelloReply.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.message != null && Object.hasOwnProperty.call(message, "message"))
            writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
        return writer;
    };

    /**
     * Encodes the specified HelloReply message, length delimited. Does not implicitly {@link HelloReply.verify|verify} messages.
     * @function encodeDelimited
     * @memberof HelloReply
     * @static
     * @param {IHelloReply} message HelloReply message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    HelloReply.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a HelloReply message from the specified reader or buffer.
     * @function decode
     * @memberof HelloReply
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {HelloReply} HelloReply
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    HelloReply.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.HelloReply();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.message = reader.string();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a HelloReply message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof HelloReply
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {HelloReply} HelloReply
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    HelloReply.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a HelloReply message.
     * @function verify
     * @memberof HelloReply
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    HelloReply.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.message != null && message.hasOwnProperty("message"))
            if (!$util.isString(message.message))
                return "message: string expected";
        return null;
    };

    /**
     * Creates a HelloReply message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof HelloReply
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {HelloReply} HelloReply
     */
    HelloReply.fromObject = function fromObject(object) {
        if (object instanceof $root.HelloReply)
            return object;
        var message = new $root.HelloReply();
        if (object.message != null)
            message.message = String(object.message);
        return message;
    };

    /**
     * Creates a plain object from a HelloReply message. Also converts values to other types if specified.
     * @function toObject
     * @memberof HelloReply
     * @static
     * @param {HelloReply} message HelloReply
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    HelloReply.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.message = "";
        if (message.message != null && message.hasOwnProperty("message"))
            object.message = message.message;
        return object;
    };

    /**
     * Converts this HelloReply to JSON.
     * @function toJSON
     * @memberof HelloReply
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    HelloReply.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return HelloReply;
})();

module.exports = $root;
